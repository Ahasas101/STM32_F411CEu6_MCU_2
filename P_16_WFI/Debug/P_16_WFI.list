
P_16_WFI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001344  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080014dc  080014dc  000024dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014f8  080014f8  00003068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080014f8  080014f8  00003068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080014f8  080014f8  00003068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014f8  080014f8  000024f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080014fc  080014fc  000024fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08001500  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000068  08001568  00003068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08001568  000031d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003765  00000000  00000000  00003098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d89  00000000  00000000  000067fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000400  00000000  00000000  00007588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002d7  00000000  00000000  00007988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016412  00000000  00000000  00007c5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004907  00000000  00000000  0001e071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bf97  00000000  00000000  00022978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ae90f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000014bc  00000000  00000000  000ae954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  000afe10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000068 	.word	0x20000068
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080014c4 	.word	0x080014c4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000006c 	.word	0x2000006c
 80001d4:	080014c4 	.word	0x080014c4

080001d8 <SysTick_Handler>:
#include "stm32f4xx_hal.h"



void SysTick_Handler(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80001dc:	f000 f9f8 	bl	80005d0 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80001e0:	f000 fb1b 	bl	800081a <HAL_SYSTICK_IRQHandler>
}
 80001e4:	bf00      	nop
 80001e6:	bd80      	pop	{r7, pc}

080001e8 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler (void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80001ec:	2001      	movs	r0, #1
 80001ee:	f000 fca5 	bl	8000b3c <HAL_GPIO_EXTI_IRQHandler>
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
	...

080001f8 <main>:
void button_init(void);

TIM_HandleTypeDef tim;

int main(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
  HAL_Init();
 80001fc:	f000 f98e 	bl	800051c <HAL_Init>
   GpioSwoInit();
 8000200:	f000 f80a 	bl	8000218 <GpioSwoInit>
   printf("Hello\n");
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <main+0x1c>)
 8000206:	f000 fdc9 	bl	8000d9c <puts>
   button_init();
 800020a:	f000 f837 	bl	800027c <button_init>


  while(1)
  {
	  // going to sleep
	  __WFI(); // enable the wfi instruction
 800020e:	bf30      	wfi
 8000210:	e7fd      	b.n	800020e <main+0x16>
 8000212:	bf00      	nop
 8000214:	080014dc 	.word	0x080014dc

08000218 <GpioSwoInit>:

}


void GpioSwoInit(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800021e:	2300      	movs	r3, #0
 8000220:	603b      	str	r3, [r7, #0]
 8000222:	4b14      	ldr	r3, [pc, #80]	@ (8000274 <GpioSwoInit+0x5c>)
 8000224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000226:	4a13      	ldr	r2, [pc, #76]	@ (8000274 <GpioSwoInit+0x5c>)
 8000228:	f043 0302 	orr.w	r3, r3, #2
 800022c:	6313      	str	r3, [r2, #48]	@ 0x30
 800022e:	4b11      	ldr	r3, [pc, #68]	@ (8000274 <GpioSwoInit+0x5c>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000232:	f003 0302 	and.w	r3, r3, #2
 8000236:	603b      	str	r3, [r7, #0]
 8000238:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef gpio_swo;
	gpio_swo.Mode = GPIO_MODE_AF_PP;
 800023a:	2302      	movs	r3, #2
 800023c:	60bb      	str	r3, [r7, #8]
	gpio_swo.Pin = GPIO_PIN_3;
 800023e:	2308      	movs	r3, #8
 8000240:	607b      	str	r3, [r7, #4]
	gpio_swo.Alternate = GPIO_AF0_SWJ;
 8000242:	2300      	movs	r3, #0
 8000244:	617b      	str	r3, [r7, #20]
	gpio_swo.Pull = GPIO_NOPULL;
 8000246:	2300      	movs	r3, #0
 8000248:	60fb      	str	r3, [r7, #12]
	gpio_swo.Speed = GPIO_SPEED_FREQ_LOW;
 800024a:	2300      	movs	r3, #0
 800024c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &gpio_swo);
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	4619      	mov	r1, r3
 8000252:	4809      	ldr	r0, [pc, #36]	@ (8000278 <GpioSwoInit+0x60>)
 8000254:	f000 faee 	bl	8000834 <HAL_GPIO_Init>

	// In order to save the power you must keep the other pins of the gpio's in analog mode
	gpio_swo.Pin = GPIO_PIN_1 | GPIO_PIN_2  | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | \
 8000258:	f64d 73f7 	movw	r3, #57335	@ 0xdff7
 800025c:	607b      	str	r3, [r7, #4]
				GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | \
				GPIO_PIN_0 | GPIO_PIN_14 | GPIO_PIN_15;
	gpio_swo.Mode = GPIO_MODE_ANALOG;
 800025e:	2303      	movs	r3, #3
 8000260:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_Init(GPIOB, &gpio_swo);
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	4619      	mov	r1, r3
 8000266:	4804      	ldr	r0, [pc, #16]	@ (8000278 <GpioSwoInit+0x60>)
 8000268:	f000 fae4 	bl	8000834 <HAL_GPIO_Init>
}
 800026c:	bf00      	nop
 800026e:	3718      	adds	r7, #24
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	40023800 	.word	0x40023800
 8000278:	40020400 	.word	0x40020400

0800027c <button_init>:



void button_init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b086      	sub	sp, #24
 8000280:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000282:	2300      	movs	r3, #0
 8000284:	603b      	str	r3, [r7, #0]
 8000286:	4b18      	ldr	r3, [pc, #96]	@ (80002e8 <button_init+0x6c>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800028a:	4a17      	ldr	r2, [pc, #92]	@ (80002e8 <button_init+0x6c>)
 800028c:	f043 0301 	orr.w	r3, r3, #1
 8000290:	6313      	str	r3, [r2, #48]	@ 0x30
 8000292:	4b15      	ldr	r3, [pc, #84]	@ (80002e8 <button_init+0x6c>)
 8000294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000296:	f003 0301 	and.w	r3, r3, #1
 800029a:	603b      	str	r3, [r7, #0]
 800029c:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef button;
	button.Pin = GPIO_PIN_0;
 800029e:	2301      	movs	r3, #1
 80002a0:	607b      	str	r3, [r7, #4]
	button.Mode = GPIO_MODE_IT_RISING;
 80002a2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80002a6:	60bb      	str	r3, [r7, #8]
	button.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80002a8:	2301      	movs	r3, #1
 80002aa:	613b      	str	r3, [r7, #16]
	button.Pull = GPIO_PULLUP;
 80002ac:	2301      	movs	r3, #1
 80002ae:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &button);
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	4619      	mov	r1, r3
 80002b4:	480d      	ldr	r0, [pc, #52]	@ (80002ec <button_init+0x70>)
 80002b6:	f000 fabd 	bl	8000834 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 80002ba:	2200      	movs	r2, #0
 80002bc:	210f      	movs	r1, #15
 80002be:	2006      	movs	r0, #6
 80002c0:	f000 fa75 	bl	80007ae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80002c4:	2006      	movs	r0, #6
 80002c6:	f000 fa8e 	bl	80007e6 <HAL_NVIC_EnableIRQ>
	// In order to save the power you must keep the other pins of the gpio's in analog mode

	// you cannpt change the state of pin 13 and pin 14 because they are used as swdio and swclk
	button.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | \
 80002ca:	f649 73fe 	movw	r3, #40958	@ 0x9ffe
 80002ce:	607b      	str	r3, [r7, #4]
				GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | \
				 GPIO_PIN_15;

	button.Mode = GPIO_MODE_ANALOG;
 80002d0:	2303      	movs	r3, #3
 80002d2:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_Init(GPIOA, &button);
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	4619      	mov	r1, r3
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <button_init+0x70>)
 80002da:	f000 faab 	bl	8000834 <HAL_GPIO_Init>
}
 80002de:	bf00      	nop
 80002e0:	3718      	adds	r7, #24
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40023800 	.word	0x40023800
 80002ec:	40020000 	.word	0x40020000

080002f0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	80fb      	strh	r3, [r7, #6]
	printf("Hello from callback\n");
 80002fa:	4803      	ldr	r0, [pc, #12]	@ (8000308 <HAL_GPIO_EXTI_Callback+0x18>)
 80002fc:	f000 fd4e 	bl	8000d9c <puts>
}
 8000300:	bf00      	nop
 8000302:	3708      	adds	r7, #8
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	080014e4 	.word	0x080014e4

0800030c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000316:	4b0f      	ldr	r3, [pc, #60]	@ (8000354 <ITM_SendChar+0x48>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4a0e      	ldr	r2, [pc, #56]	@ (8000354 <ITM_SendChar+0x48>)
 800031c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000320:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000322:	4b0d      	ldr	r3, [pc, #52]	@ (8000358 <ITM_SendChar+0x4c>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4a0c      	ldr	r2, [pc, #48]	@ (8000358 <ITM_SendChar+0x4c>)
 8000328:	f043 0301 	orr.w	r3, r3, #1
 800032c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800032e:	bf00      	nop
 8000330:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0301 	and.w	r3, r3, #1
 800033a:	2b00      	cmp	r3, #0
 800033c:	d0f8      	beq.n	8000330 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800033e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	6013      	str	r3, [r2, #0]
}
 8000346:	bf00      	nop
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	e000edfc 	.word	0xe000edfc
 8000358:	e0000e00 	.word	0xe0000e00

0800035c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b086      	sub	sp, #24
 8000360:	af00      	add	r7, sp, #0
 8000362:	60f8      	str	r0, [r7, #12]
 8000364:	60b9      	str	r1, [r7, #8]
 8000366:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000368:	2300      	movs	r3, #0
 800036a:	617b      	str	r3, [r7, #20]
 800036c:	e00a      	b.n	8000384 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800036e:	f3af 8000 	nop.w
 8000372:	4601      	mov	r1, r0
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	1c5a      	adds	r2, r3, #1
 8000378:	60ba      	str	r2, [r7, #8]
 800037a:	b2ca      	uxtb	r2, r1
 800037c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800037e:	697b      	ldr	r3, [r7, #20]
 8000380:	3301      	adds	r3, #1
 8000382:	617b      	str	r3, [r7, #20]
 8000384:	697a      	ldr	r2, [r7, #20]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	429a      	cmp	r2, r3
 800038a:	dbf0      	blt.n	800036e <_read+0x12>
  }

  return len;
 800038c:	687b      	ldr	r3, [r7, #4]
}
 800038e:	4618      	mov	r0, r3
 8000390:	3718      	adds	r7, #24
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}

08000396 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000396:	b580      	push	{r7, lr}
 8000398:	b086      	sub	sp, #24
 800039a:	af00      	add	r7, sp, #0
 800039c:	60f8      	str	r0, [r7, #12]
 800039e:	60b9      	str	r1, [r7, #8]
 80003a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]
 80003a6:	e009      	b.n	80003bc <_write+0x26>
  {
   //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	1c5a      	adds	r2, r3, #1
 80003ac:	60ba      	str	r2, [r7, #8]
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	4618      	mov	r0, r3
 80003b2:	f7ff ffab 	bl	800030c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	3301      	adds	r3, #1
 80003ba:	617b      	str	r3, [r7, #20]
 80003bc:	697a      	ldr	r2, [r7, #20]
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	429a      	cmp	r2, r3
 80003c2:	dbf1      	blt.n	80003a8 <_write+0x12>
  }
  return len;
 80003c4:	687b      	ldr	r3, [r7, #4]
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	3718      	adds	r7, #24
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}

080003ce <_close>:

int _close(int file)
{
 80003ce:	b480      	push	{r7}
 80003d0:	b083      	sub	sp, #12
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80003d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003da:	4618      	mov	r0, r3
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr

080003e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003e6:	b480      	push	{r7}
 80003e8:	b083      	sub	sp, #12
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	6078      	str	r0, [r7, #4]
 80003ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80003f6:	605a      	str	r2, [r3, #4]
  return 0;
 80003f8:	2300      	movs	r3, #0
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr

08000406 <_isatty>:

int _isatty(int file)
{
 8000406:	b480      	push	{r7}
 8000408:	b083      	sub	sp, #12
 800040a:	af00      	add	r7, sp, #0
 800040c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800040e:	2301      	movs	r3, #1
}
 8000410:	4618      	mov	r0, r3
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr

0800041c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	60b9      	str	r1, [r7, #8]
 8000426:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000428:	2300      	movs	r3, #0
}
 800042a:	4618      	mov	r0, r3
 800042c:	3714      	adds	r7, #20
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
	...

08000438 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b086      	sub	sp, #24
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000440:	4a14      	ldr	r2, [pc, #80]	@ (8000494 <_sbrk+0x5c>)
 8000442:	4b15      	ldr	r3, [pc, #84]	@ (8000498 <_sbrk+0x60>)
 8000444:	1ad3      	subs	r3, r2, r3
 8000446:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800044c:	4b13      	ldr	r3, [pc, #76]	@ (800049c <_sbrk+0x64>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d102      	bne.n	800045a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000454:	4b11      	ldr	r3, [pc, #68]	@ (800049c <_sbrk+0x64>)
 8000456:	4a12      	ldr	r2, [pc, #72]	@ (80004a0 <_sbrk+0x68>)
 8000458:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800045a:	4b10      	ldr	r3, [pc, #64]	@ (800049c <_sbrk+0x64>)
 800045c:	681a      	ldr	r2, [r3, #0]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4413      	add	r3, r2
 8000462:	693a      	ldr	r2, [r7, #16]
 8000464:	429a      	cmp	r2, r3
 8000466:	d207      	bcs.n	8000478 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000468:	f000 fdc6 	bl	8000ff8 <__errno>
 800046c:	4603      	mov	r3, r0
 800046e:	220c      	movs	r2, #12
 8000470:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000472:	f04f 33ff 	mov.w	r3, #4294967295
 8000476:	e009      	b.n	800048c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000478:	4b08      	ldr	r3, [pc, #32]	@ (800049c <_sbrk+0x64>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800047e:	4b07      	ldr	r3, [pc, #28]	@ (800049c <_sbrk+0x64>)
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4413      	add	r3, r2
 8000486:	4a05      	ldr	r2, [pc, #20]	@ (800049c <_sbrk+0x64>)
 8000488:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800048a:	68fb      	ldr	r3, [r7, #12]
}
 800048c:	4618      	mov	r0, r3
 800048e:	3718      	adds	r7, #24
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	20020000 	.word	0x20020000
 8000498:	00000400 	.word	0x00000400
 800049c:	20000084 	.word	0x20000084
 80004a0:	200001d8 	.word	0x200001d8

080004a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004a8:	4b06      	ldr	r3, [pc, #24]	@ (80004c4 <SystemInit+0x20>)
 80004aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004ae:	4a05      	ldr	r2, [pc, #20]	@ (80004c4 <SystemInit+0x20>)
 80004b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	e000ed00 	.word	0xe000ed00

080004c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80004c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000500 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80004cc:	f7ff ffea 	bl	80004a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004d0:	480c      	ldr	r0, [pc, #48]	@ (8000504 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004d2:	490d      	ldr	r1, [pc, #52]	@ (8000508 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004d4:	4a0d      	ldr	r2, [pc, #52]	@ (800050c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004d8:	e002      	b.n	80004e0 <LoopCopyDataInit>

080004da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004de:	3304      	adds	r3, #4

080004e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004e4:	d3f9      	bcc.n	80004da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000510 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000514 <LoopFillZerobss+0x22>)
  movs r3, #0
 80004ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004ec:	e001      	b.n	80004f2 <LoopFillZerobss>

080004ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004f0:	3204      	adds	r2, #4

080004f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004f4:	d3fb      	bcc.n	80004ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004f6:	f000 fd85 	bl	8001004 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004fa:	f7ff fe7d 	bl	80001f8 <main>
  bx  lr    
 80004fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000500:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000508:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800050c:	08001500 	.word	0x08001500
  ldr r2, =_sbss
 8000510:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000514:	200001d8 	.word	0x200001d8

08000518 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000518:	e7fe      	b.n	8000518 <ADC_IRQHandler>
	...

0800051c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000520:	4b0e      	ldr	r3, [pc, #56]	@ (800055c <HAL_Init+0x40>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a0d      	ldr	r2, [pc, #52]	@ (800055c <HAL_Init+0x40>)
 8000526:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800052a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800052c:	4b0b      	ldr	r3, [pc, #44]	@ (800055c <HAL_Init+0x40>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a0a      	ldr	r2, [pc, #40]	@ (800055c <HAL_Init+0x40>)
 8000532:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000536:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000538:	4b08      	ldr	r3, [pc, #32]	@ (800055c <HAL_Init+0x40>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a07      	ldr	r2, [pc, #28]	@ (800055c <HAL_Init+0x40>)
 800053e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000542:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000544:	2003      	movs	r0, #3
 8000546:	f000 f927 	bl	8000798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800054a:	200f      	movs	r0, #15
 800054c:	f000 f810 	bl	8000570 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000550:	f000 f806 	bl	8000560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000554:	2300      	movs	r3, #0
}
 8000556:	4618      	mov	r0, r3
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40023c00 	.word	0x40023c00

08000560 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
	...

08000570 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000578:	4b12      	ldr	r3, [pc, #72]	@ (80005c4 <HAL_InitTick+0x54>)
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	4b12      	ldr	r3, [pc, #72]	@ (80005c8 <HAL_InitTick+0x58>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	4619      	mov	r1, r3
 8000582:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000586:	fbb3 f3f1 	udiv	r3, r3, r1
 800058a:	fbb2 f3f3 	udiv	r3, r2, r3
 800058e:	4618      	mov	r0, r3
 8000590:	f000 f937 	bl	8000802 <HAL_SYSTICK_Config>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800059a:	2301      	movs	r3, #1
 800059c:	e00e      	b.n	80005bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2b0f      	cmp	r3, #15
 80005a2:	d80a      	bhi.n	80005ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a4:	2200      	movs	r2, #0
 80005a6:	6879      	ldr	r1, [r7, #4]
 80005a8:	f04f 30ff 	mov.w	r0, #4294967295
 80005ac:	f000 f8ff 	bl	80007ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005b0:	4a06      	ldr	r2, [pc, #24]	@ (80005cc <HAL_InitTick+0x5c>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005b6:	2300      	movs	r3, #0
 80005b8:	e000      	b.n	80005bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005ba:	2301      	movs	r3, #1
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000000 	.word	0x20000000
 80005c8:	20000008 	.word	0x20000008
 80005cc:	20000004 	.word	0x20000004

080005d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d4:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <HAL_IncTick+0x20>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	461a      	mov	r2, r3
 80005da:	4b06      	ldr	r3, [pc, #24]	@ (80005f4 <HAL_IncTick+0x24>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4413      	add	r3, r2
 80005e0:	4a04      	ldr	r2, [pc, #16]	@ (80005f4 <HAL_IncTick+0x24>)
 80005e2:	6013      	str	r3, [r2, #0]
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000008 	.word	0x20000008
 80005f4:	20000088 	.word	0x20000088

080005f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f003 0307 	and.w	r3, r3, #7
 8000606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000608:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <__NVIC_SetPriorityGrouping+0x44>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000614:	4013      	ands	r3, r2
 8000616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000620:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000624:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800062a:	4a04      	ldr	r2, [pc, #16]	@ (800063c <__NVIC_SetPriorityGrouping+0x44>)
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	60d3      	str	r3, [r2, #12]
}
 8000630:	bf00      	nop
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000644:	4b04      	ldr	r3, [pc, #16]	@ (8000658 <__NVIC_GetPriorityGrouping+0x18>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	0a1b      	lsrs	r3, r3, #8
 800064a:	f003 0307 	and.w	r3, r3, #7
}
 800064e:	4618      	mov	r0, r3
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	2b00      	cmp	r3, #0
 800066c:	db0b      	blt.n	8000686 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	f003 021f 	and.w	r2, r3, #31
 8000674:	4907      	ldr	r1, [pc, #28]	@ (8000694 <__NVIC_EnableIRQ+0x38>)
 8000676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067a:	095b      	lsrs	r3, r3, #5
 800067c:	2001      	movs	r0, #1
 800067e:	fa00 f202 	lsl.w	r2, r0, r2
 8000682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	e000e100 	.word	0xe000e100

08000698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	6039      	str	r1, [r7, #0]
 80006a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	db0a      	blt.n	80006c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	490c      	ldr	r1, [pc, #48]	@ (80006e4 <__NVIC_SetPriority+0x4c>)
 80006b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b6:	0112      	lsls	r2, r2, #4
 80006b8:	b2d2      	uxtb	r2, r2
 80006ba:	440b      	add	r3, r1
 80006bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c0:	e00a      	b.n	80006d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4908      	ldr	r1, [pc, #32]	@ (80006e8 <__NVIC_SetPriority+0x50>)
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	f003 030f 	and.w	r3, r3, #15
 80006ce:	3b04      	subs	r3, #4
 80006d0:	0112      	lsls	r2, r2, #4
 80006d2:	b2d2      	uxtb	r2, r2
 80006d4:	440b      	add	r3, r1
 80006d6:	761a      	strb	r2, [r3, #24]
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	e000e100 	.word	0xe000e100
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b089      	sub	sp, #36	@ 0x24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	f1c3 0307 	rsb	r3, r3, #7
 8000706:	2b04      	cmp	r3, #4
 8000708:	bf28      	it	cs
 800070a:	2304      	movcs	r3, #4
 800070c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3304      	adds	r3, #4
 8000712:	2b06      	cmp	r3, #6
 8000714:	d902      	bls.n	800071c <NVIC_EncodePriority+0x30>
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3b03      	subs	r3, #3
 800071a:	e000      	b.n	800071e <NVIC_EncodePriority+0x32>
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000720:	f04f 32ff 	mov.w	r2, #4294967295
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	fa02 f303 	lsl.w	r3, r2, r3
 800072a:	43da      	mvns	r2, r3
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	401a      	ands	r2, r3
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000734:	f04f 31ff 	mov.w	r1, #4294967295
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	fa01 f303 	lsl.w	r3, r1, r3
 800073e:	43d9      	mvns	r1, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000744:	4313      	orrs	r3, r2
         );
}
 8000746:	4618      	mov	r0, r3
 8000748:	3724      	adds	r7, #36	@ 0x24
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
	...

08000754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3b01      	subs	r3, #1
 8000760:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000764:	d301      	bcc.n	800076a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000766:	2301      	movs	r3, #1
 8000768:	e00f      	b.n	800078a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076a:	4a0a      	ldr	r2, [pc, #40]	@ (8000794 <SysTick_Config+0x40>)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	3b01      	subs	r3, #1
 8000770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000772:	210f      	movs	r1, #15
 8000774:	f04f 30ff 	mov.w	r0, #4294967295
 8000778:	f7ff ff8e 	bl	8000698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800077c:	4b05      	ldr	r3, [pc, #20]	@ (8000794 <SysTick_Config+0x40>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000782:	4b04      	ldr	r3, [pc, #16]	@ (8000794 <SysTick_Config+0x40>)
 8000784:	2207      	movs	r2, #7
 8000786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	e000e010 	.word	0xe000e010

08000798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f7ff ff29 	bl	80005f8 <__NVIC_SetPriorityGrouping>
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b086      	sub	sp, #24
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	4603      	mov	r3, r0
 80007b6:	60b9      	str	r1, [r7, #8]
 80007b8:	607a      	str	r2, [r7, #4]
 80007ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c0:	f7ff ff3e 	bl	8000640 <__NVIC_GetPriorityGrouping>
 80007c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	68b9      	ldr	r1, [r7, #8]
 80007ca:	6978      	ldr	r0, [r7, #20]
 80007cc:	f7ff ff8e 	bl	80006ec <NVIC_EncodePriority>
 80007d0:	4602      	mov	r2, r0
 80007d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d6:	4611      	mov	r1, r2
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ff5d 	bl	8000698 <__NVIC_SetPriority>
}
 80007de:	bf00      	nop
 80007e0:	3718      	adds	r7, #24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	4603      	mov	r3, r0
 80007ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff31 	bl	800065c <__NVIC_EnableIRQ>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f7ff ffa2 	bl	8000754 <SysTick_Config>
 8000810:	4603      	mov	r3, r0
}
 8000812:	4618      	mov	r0, r3
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800081e:	f000 f802 	bl	8000826 <HAL_SYSTICK_Callback>
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}

08000826 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000834:	b480      	push	{r7}
 8000836:	b089      	sub	sp, #36	@ 0x24
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
 800084e:	e159      	b.n	8000b04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000850:	2201      	movs	r2, #1
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	fa02 f303 	lsl.w	r3, r2, r3
 8000858:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	697a      	ldr	r2, [r7, #20]
 8000860:	4013      	ands	r3, r2
 8000862:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000864:	693a      	ldr	r2, [r7, #16]
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	429a      	cmp	r2, r3
 800086a:	f040 8148 	bne.w	8000afe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	f003 0303 	and.w	r3, r3, #3
 8000876:	2b01      	cmp	r3, #1
 8000878:	d005      	beq.n	8000886 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000882:	2b02      	cmp	r3, #2
 8000884:	d130      	bne.n	80008e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	689b      	ldr	r3, [r3, #8]
 800088a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	2203      	movs	r2, #3
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	43db      	mvns	r3, r3
 8000898:	69ba      	ldr	r2, [r7, #24]
 800089a:	4013      	ands	r3, r2
 800089c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	68da      	ldr	r2, [r3, #12]
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	69ba      	ldr	r2, [r7, #24]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	69ba      	ldr	r2, [r7, #24]
 80008b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008bc:	2201      	movs	r2, #1
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	43db      	mvns	r3, r3
 80008c6:	69ba      	ldr	r2, [r7, #24]
 80008c8:	4013      	ands	r3, r2
 80008ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	091b      	lsrs	r3, r3, #4
 80008d2:	f003 0201 	and.w	r2, r3, #1
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	69ba      	ldr	r2, [r7, #24]
 80008de:	4313      	orrs	r3, r2
 80008e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	69ba      	ldr	r2, [r7, #24]
 80008e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	f003 0303 	and.w	r3, r3, #3
 80008f0:	2b03      	cmp	r3, #3
 80008f2:	d017      	beq.n	8000924 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	2203      	movs	r2, #3
 8000900:	fa02 f303 	lsl.w	r3, r2, r3
 8000904:	43db      	mvns	r3, r3
 8000906:	69ba      	ldr	r2, [r7, #24]
 8000908:	4013      	ands	r3, r2
 800090a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	689a      	ldr	r2, [r3, #8]
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	69ba      	ldr	r2, [r7, #24]
 800091a:	4313      	orrs	r3, r2
 800091c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	69ba      	ldr	r2, [r7, #24]
 8000922:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	f003 0303 	and.w	r3, r3, #3
 800092c:	2b02      	cmp	r3, #2
 800092e:	d123      	bne.n	8000978 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	08da      	lsrs	r2, r3, #3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3208      	adds	r2, #8
 8000938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800093c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	f003 0307 	and.w	r3, r3, #7
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	220f      	movs	r2, #15
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	43db      	mvns	r3, r3
 800094e:	69ba      	ldr	r2, [r7, #24]
 8000950:	4013      	ands	r3, r2
 8000952:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	691a      	ldr	r2, [r3, #16]
 8000958:	69fb      	ldr	r3, [r7, #28]
 800095a:	f003 0307 	and.w	r3, r3, #7
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	69ba      	ldr	r2, [r7, #24]
 8000966:	4313      	orrs	r3, r2
 8000968:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	08da      	lsrs	r2, r3, #3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	3208      	adds	r2, #8
 8000972:	69b9      	ldr	r1, [r7, #24]
 8000974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	2203      	movs	r2, #3
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	43db      	mvns	r3, r3
 800098a:	69ba      	ldr	r2, [r7, #24]
 800098c:	4013      	ands	r3, r2
 800098e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f003 0203 	and.w	r2, r3, #3
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	69ba      	ldr	r2, [r7, #24]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	69ba      	ldr	r2, [r7, #24]
 80009aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	f000 80a2 	beq.w	8000afe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b57      	ldr	r3, [pc, #348]	@ (8000b1c <HAL_GPIO_Init+0x2e8>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c2:	4a56      	ldr	r2, [pc, #344]	@ (8000b1c <HAL_GPIO_Init+0x2e8>)
 80009c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ca:	4b54      	ldr	r3, [pc, #336]	@ (8000b1c <HAL_GPIO_Init+0x2e8>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009d6:	4a52      	ldr	r2, [pc, #328]	@ (8000b20 <HAL_GPIO_Init+0x2ec>)
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	089b      	lsrs	r3, r3, #2
 80009dc:	3302      	adds	r3, #2
 80009de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009e4:	69fb      	ldr	r3, [r7, #28]
 80009e6:	f003 0303 	and.w	r3, r3, #3
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	220f      	movs	r2, #15
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	43db      	mvns	r3, r3
 80009f4:	69ba      	ldr	r2, [r7, #24]
 80009f6:	4013      	ands	r3, r2
 80009f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a49      	ldr	r2, [pc, #292]	@ (8000b24 <HAL_GPIO_Init+0x2f0>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d019      	beq.n	8000a36 <HAL_GPIO_Init+0x202>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a48      	ldr	r2, [pc, #288]	@ (8000b28 <HAL_GPIO_Init+0x2f4>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d013      	beq.n	8000a32 <HAL_GPIO_Init+0x1fe>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a47      	ldr	r2, [pc, #284]	@ (8000b2c <HAL_GPIO_Init+0x2f8>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d00d      	beq.n	8000a2e <HAL_GPIO_Init+0x1fa>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a46      	ldr	r2, [pc, #280]	@ (8000b30 <HAL_GPIO_Init+0x2fc>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d007      	beq.n	8000a2a <HAL_GPIO_Init+0x1f6>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a45      	ldr	r2, [pc, #276]	@ (8000b34 <HAL_GPIO_Init+0x300>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d101      	bne.n	8000a26 <HAL_GPIO_Init+0x1f2>
 8000a22:	2304      	movs	r3, #4
 8000a24:	e008      	b.n	8000a38 <HAL_GPIO_Init+0x204>
 8000a26:	2307      	movs	r3, #7
 8000a28:	e006      	b.n	8000a38 <HAL_GPIO_Init+0x204>
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	e004      	b.n	8000a38 <HAL_GPIO_Init+0x204>
 8000a2e:	2302      	movs	r3, #2
 8000a30:	e002      	b.n	8000a38 <HAL_GPIO_Init+0x204>
 8000a32:	2301      	movs	r3, #1
 8000a34:	e000      	b.n	8000a38 <HAL_GPIO_Init+0x204>
 8000a36:	2300      	movs	r3, #0
 8000a38:	69fa      	ldr	r2, [r7, #28]
 8000a3a:	f002 0203 	and.w	r2, r2, #3
 8000a3e:	0092      	lsls	r2, r2, #2
 8000a40:	4093      	lsls	r3, r2
 8000a42:	69ba      	ldr	r2, [r7, #24]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a48:	4935      	ldr	r1, [pc, #212]	@ (8000b20 <HAL_GPIO_Init+0x2ec>)
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	089b      	lsrs	r3, r3, #2
 8000a4e:	3302      	adds	r3, #2
 8000a50:	69ba      	ldr	r2, [r7, #24]
 8000a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a56:	4b38      	ldr	r3, [pc, #224]	@ (8000b38 <HAL_GPIO_Init+0x304>)
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	69ba      	ldr	r2, [r7, #24]
 8000a62:	4013      	ands	r3, r2
 8000a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d003      	beq.n	8000a7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a72:	69ba      	ldr	r2, [r7, #24]
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a7a:	4a2f      	ldr	r2, [pc, #188]	@ (8000b38 <HAL_GPIO_Init+0x304>)
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a80:	4b2d      	ldr	r3, [pc, #180]	@ (8000b38 <HAL_GPIO_Init+0x304>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	69ba      	ldr	r2, [r7, #24]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d003      	beq.n	8000aa4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a9c:	69ba      	ldr	r2, [r7, #24]
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000aa4:	4a24      	ldr	r2, [pc, #144]	@ (8000b38 <HAL_GPIO_Init+0x304>)
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000aaa:	4b23      	ldr	r3, [pc, #140]	@ (8000b38 <HAL_GPIO_Init+0x304>)
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	69ba      	ldr	r2, [r7, #24]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d003      	beq.n	8000ace <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ac6:	69ba      	ldr	r2, [r7, #24]
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ace:	4a1a      	ldr	r2, [pc, #104]	@ (8000b38 <HAL_GPIO_Init+0x304>)
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ad4:	4b18      	ldr	r3, [pc, #96]	@ (8000b38 <HAL_GPIO_Init+0x304>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	43db      	mvns	r3, r3
 8000ade:	69ba      	ldr	r2, [r7, #24]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d003      	beq.n	8000af8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000af0:	69ba      	ldr	r2, [r7, #24]
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000af8:	4a0f      	ldr	r2, [pc, #60]	@ (8000b38 <HAL_GPIO_Init+0x304>)
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3301      	adds	r3, #1
 8000b02:	61fb      	str	r3, [r7, #28]
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	2b0f      	cmp	r3, #15
 8000b08:	f67f aea2 	bls.w	8000850 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	bf00      	nop
 8000b10:	3724      	adds	r7, #36	@ 0x24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40013800 	.word	0x40013800
 8000b24:	40020000 	.word	0x40020000
 8000b28:	40020400 	.word	0x40020400
 8000b2c:	40020800 	.word	0x40020800
 8000b30:	40020c00 	.word	0x40020c00
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40013c00 	.word	0x40013c00

08000b3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000b46:	4b08      	ldr	r3, [pc, #32]	@ (8000b68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b48:	695a      	ldr	r2, [r3, #20]
 8000b4a:	88fb      	ldrh	r3, [r7, #6]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d006      	beq.n	8000b60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b52:	4a05      	ldr	r2, [pc, #20]	@ (8000b68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b54:	88fb      	ldrh	r3, [r7, #6]
 8000b56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b58:	88fb      	ldrh	r3, [r7, #6]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff fbc8 	bl	80002f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40013c00 	.word	0x40013c00

08000b6c <std>:
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	b510      	push	{r4, lr}
 8000b70:	4604      	mov	r4, r0
 8000b72:	e9c0 3300 	strd	r3, r3, [r0]
 8000b76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000b7a:	6083      	str	r3, [r0, #8]
 8000b7c:	8181      	strh	r1, [r0, #12]
 8000b7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8000b80:	81c2      	strh	r2, [r0, #14]
 8000b82:	6183      	str	r3, [r0, #24]
 8000b84:	4619      	mov	r1, r3
 8000b86:	2208      	movs	r2, #8
 8000b88:	305c      	adds	r0, #92	@ 0x5c
 8000b8a:	f000 f9e7 	bl	8000f5c <memset>
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc4 <std+0x58>)
 8000b90:	6263      	str	r3, [r4, #36]	@ 0x24
 8000b92:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc8 <std+0x5c>)
 8000b94:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000b96:	4b0d      	ldr	r3, [pc, #52]	@ (8000bcc <std+0x60>)
 8000b98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd0 <std+0x64>)
 8000b9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd4 <std+0x68>)
 8000ba0:	6224      	str	r4, [r4, #32]
 8000ba2:	429c      	cmp	r4, r3
 8000ba4:	d006      	beq.n	8000bb4 <std+0x48>
 8000ba6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000baa:	4294      	cmp	r4, r2
 8000bac:	d002      	beq.n	8000bb4 <std+0x48>
 8000bae:	33d0      	adds	r3, #208	@ 0xd0
 8000bb0:	429c      	cmp	r4, r3
 8000bb2:	d105      	bne.n	8000bc0 <std+0x54>
 8000bb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bbc:	f000 ba46 	b.w	800104c <__retarget_lock_init_recursive>
 8000bc0:	bd10      	pop	{r4, pc}
 8000bc2:	bf00      	nop
 8000bc4:	08000dad 	.word	0x08000dad
 8000bc8:	08000dcf 	.word	0x08000dcf
 8000bcc:	08000e07 	.word	0x08000e07
 8000bd0:	08000e2b 	.word	0x08000e2b
 8000bd4:	2000008c 	.word	0x2000008c

08000bd8 <stdio_exit_handler>:
 8000bd8:	4a02      	ldr	r2, [pc, #8]	@ (8000be4 <stdio_exit_handler+0xc>)
 8000bda:	4903      	ldr	r1, [pc, #12]	@ (8000be8 <stdio_exit_handler+0x10>)
 8000bdc:	4803      	ldr	r0, [pc, #12]	@ (8000bec <stdio_exit_handler+0x14>)
 8000bde:	f000 b869 	b.w	8000cb4 <_fwalk_sglue>
 8000be2:	bf00      	nop
 8000be4:	2000000c 	.word	0x2000000c
 8000be8:	0800134d 	.word	0x0800134d
 8000bec:	2000001c 	.word	0x2000001c

08000bf0 <cleanup_stdio>:
 8000bf0:	6841      	ldr	r1, [r0, #4]
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <cleanup_stdio+0x34>)
 8000bf4:	4299      	cmp	r1, r3
 8000bf6:	b510      	push	{r4, lr}
 8000bf8:	4604      	mov	r4, r0
 8000bfa:	d001      	beq.n	8000c00 <cleanup_stdio+0x10>
 8000bfc:	f000 fba6 	bl	800134c <_fflush_r>
 8000c00:	68a1      	ldr	r1, [r4, #8]
 8000c02:	4b09      	ldr	r3, [pc, #36]	@ (8000c28 <cleanup_stdio+0x38>)
 8000c04:	4299      	cmp	r1, r3
 8000c06:	d002      	beq.n	8000c0e <cleanup_stdio+0x1e>
 8000c08:	4620      	mov	r0, r4
 8000c0a:	f000 fb9f 	bl	800134c <_fflush_r>
 8000c0e:	68e1      	ldr	r1, [r4, #12]
 8000c10:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <cleanup_stdio+0x3c>)
 8000c12:	4299      	cmp	r1, r3
 8000c14:	d004      	beq.n	8000c20 <cleanup_stdio+0x30>
 8000c16:	4620      	mov	r0, r4
 8000c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c1c:	f000 bb96 	b.w	800134c <_fflush_r>
 8000c20:	bd10      	pop	{r4, pc}
 8000c22:	bf00      	nop
 8000c24:	2000008c 	.word	0x2000008c
 8000c28:	200000f4 	.word	0x200000f4
 8000c2c:	2000015c 	.word	0x2000015c

08000c30 <global_stdio_init.part.0>:
 8000c30:	b510      	push	{r4, lr}
 8000c32:	4b0b      	ldr	r3, [pc, #44]	@ (8000c60 <global_stdio_init.part.0+0x30>)
 8000c34:	4c0b      	ldr	r4, [pc, #44]	@ (8000c64 <global_stdio_init.part.0+0x34>)
 8000c36:	4a0c      	ldr	r2, [pc, #48]	@ (8000c68 <global_stdio_init.part.0+0x38>)
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2104      	movs	r1, #4
 8000c40:	f7ff ff94 	bl	8000b6c <std>
 8000c44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2109      	movs	r1, #9
 8000c4c:	f7ff ff8e 	bl	8000b6c <std>
 8000c50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000c54:	2202      	movs	r2, #2
 8000c56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c5a:	2112      	movs	r1, #18
 8000c5c:	f7ff bf86 	b.w	8000b6c <std>
 8000c60:	200001c4 	.word	0x200001c4
 8000c64:	2000008c 	.word	0x2000008c
 8000c68:	08000bd9 	.word	0x08000bd9

08000c6c <__sfp_lock_acquire>:
 8000c6c:	4801      	ldr	r0, [pc, #4]	@ (8000c74 <__sfp_lock_acquire+0x8>)
 8000c6e:	f000 b9ee 	b.w	800104e <__retarget_lock_acquire_recursive>
 8000c72:	bf00      	nop
 8000c74:	200001cd 	.word	0x200001cd

08000c78 <__sfp_lock_release>:
 8000c78:	4801      	ldr	r0, [pc, #4]	@ (8000c80 <__sfp_lock_release+0x8>)
 8000c7a:	f000 b9e9 	b.w	8001050 <__retarget_lock_release_recursive>
 8000c7e:	bf00      	nop
 8000c80:	200001cd 	.word	0x200001cd

08000c84 <__sinit>:
 8000c84:	b510      	push	{r4, lr}
 8000c86:	4604      	mov	r4, r0
 8000c88:	f7ff fff0 	bl	8000c6c <__sfp_lock_acquire>
 8000c8c:	6a23      	ldr	r3, [r4, #32]
 8000c8e:	b11b      	cbz	r3, 8000c98 <__sinit+0x14>
 8000c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c94:	f7ff bff0 	b.w	8000c78 <__sfp_lock_release>
 8000c98:	4b04      	ldr	r3, [pc, #16]	@ (8000cac <__sinit+0x28>)
 8000c9a:	6223      	str	r3, [r4, #32]
 8000c9c:	4b04      	ldr	r3, [pc, #16]	@ (8000cb0 <__sinit+0x2c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d1f5      	bne.n	8000c90 <__sinit+0xc>
 8000ca4:	f7ff ffc4 	bl	8000c30 <global_stdio_init.part.0>
 8000ca8:	e7f2      	b.n	8000c90 <__sinit+0xc>
 8000caa:	bf00      	nop
 8000cac:	08000bf1 	.word	0x08000bf1
 8000cb0:	200001c4 	.word	0x200001c4

08000cb4 <_fwalk_sglue>:
 8000cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000cb8:	4607      	mov	r7, r0
 8000cba:	4688      	mov	r8, r1
 8000cbc:	4614      	mov	r4, r2
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000cc4:	f1b9 0901 	subs.w	r9, r9, #1
 8000cc8:	d505      	bpl.n	8000cd6 <_fwalk_sglue+0x22>
 8000cca:	6824      	ldr	r4, [r4, #0]
 8000ccc:	2c00      	cmp	r4, #0
 8000cce:	d1f7      	bne.n	8000cc0 <_fwalk_sglue+0xc>
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000cd6:	89ab      	ldrh	r3, [r5, #12]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d907      	bls.n	8000cec <_fwalk_sglue+0x38>
 8000cdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	d003      	beq.n	8000cec <_fwalk_sglue+0x38>
 8000ce4:	4629      	mov	r1, r5
 8000ce6:	4638      	mov	r0, r7
 8000ce8:	47c0      	blx	r8
 8000cea:	4306      	orrs	r6, r0
 8000cec:	3568      	adds	r5, #104	@ 0x68
 8000cee:	e7e9      	b.n	8000cc4 <_fwalk_sglue+0x10>

08000cf0 <_puts_r>:
 8000cf0:	6a03      	ldr	r3, [r0, #32]
 8000cf2:	b570      	push	{r4, r5, r6, lr}
 8000cf4:	6884      	ldr	r4, [r0, #8]
 8000cf6:	4605      	mov	r5, r0
 8000cf8:	460e      	mov	r6, r1
 8000cfa:	b90b      	cbnz	r3, 8000d00 <_puts_r+0x10>
 8000cfc:	f7ff ffc2 	bl	8000c84 <__sinit>
 8000d00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000d02:	07db      	lsls	r3, r3, #31
 8000d04:	d405      	bmi.n	8000d12 <_puts_r+0x22>
 8000d06:	89a3      	ldrh	r3, [r4, #12]
 8000d08:	0598      	lsls	r0, r3, #22
 8000d0a:	d402      	bmi.n	8000d12 <_puts_r+0x22>
 8000d0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d0e:	f000 f99e 	bl	800104e <__retarget_lock_acquire_recursive>
 8000d12:	89a3      	ldrh	r3, [r4, #12]
 8000d14:	0719      	lsls	r1, r3, #28
 8000d16:	d502      	bpl.n	8000d1e <_puts_r+0x2e>
 8000d18:	6923      	ldr	r3, [r4, #16]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d135      	bne.n	8000d8a <_puts_r+0x9a>
 8000d1e:	4621      	mov	r1, r4
 8000d20:	4628      	mov	r0, r5
 8000d22:	f000 f8c5 	bl	8000eb0 <__swsetup_r>
 8000d26:	b380      	cbz	r0, 8000d8a <_puts_r+0x9a>
 8000d28:	f04f 35ff 	mov.w	r5, #4294967295
 8000d2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000d2e:	07da      	lsls	r2, r3, #31
 8000d30:	d405      	bmi.n	8000d3e <_puts_r+0x4e>
 8000d32:	89a3      	ldrh	r3, [r4, #12]
 8000d34:	059b      	lsls	r3, r3, #22
 8000d36:	d402      	bmi.n	8000d3e <_puts_r+0x4e>
 8000d38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d3a:	f000 f989 	bl	8001050 <__retarget_lock_release_recursive>
 8000d3e:	4628      	mov	r0, r5
 8000d40:	bd70      	pop	{r4, r5, r6, pc}
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	da04      	bge.n	8000d50 <_puts_r+0x60>
 8000d46:	69a2      	ldr	r2, [r4, #24]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	dc17      	bgt.n	8000d7c <_puts_r+0x8c>
 8000d4c:	290a      	cmp	r1, #10
 8000d4e:	d015      	beq.n	8000d7c <_puts_r+0x8c>
 8000d50:	6823      	ldr	r3, [r4, #0]
 8000d52:	1c5a      	adds	r2, r3, #1
 8000d54:	6022      	str	r2, [r4, #0]
 8000d56:	7019      	strb	r1, [r3, #0]
 8000d58:	68a3      	ldr	r3, [r4, #8]
 8000d5a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	60a3      	str	r3, [r4, #8]
 8000d62:	2900      	cmp	r1, #0
 8000d64:	d1ed      	bne.n	8000d42 <_puts_r+0x52>
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	da11      	bge.n	8000d8e <_puts_r+0x9e>
 8000d6a:	4622      	mov	r2, r4
 8000d6c:	210a      	movs	r1, #10
 8000d6e:	4628      	mov	r0, r5
 8000d70:	f000 f85f 	bl	8000e32 <__swbuf_r>
 8000d74:	3001      	adds	r0, #1
 8000d76:	d0d7      	beq.n	8000d28 <_puts_r+0x38>
 8000d78:	250a      	movs	r5, #10
 8000d7a:	e7d7      	b.n	8000d2c <_puts_r+0x3c>
 8000d7c:	4622      	mov	r2, r4
 8000d7e:	4628      	mov	r0, r5
 8000d80:	f000 f857 	bl	8000e32 <__swbuf_r>
 8000d84:	3001      	adds	r0, #1
 8000d86:	d1e7      	bne.n	8000d58 <_puts_r+0x68>
 8000d88:	e7ce      	b.n	8000d28 <_puts_r+0x38>
 8000d8a:	3e01      	subs	r6, #1
 8000d8c:	e7e4      	b.n	8000d58 <_puts_r+0x68>
 8000d8e:	6823      	ldr	r3, [r4, #0]
 8000d90:	1c5a      	adds	r2, r3, #1
 8000d92:	6022      	str	r2, [r4, #0]
 8000d94:	220a      	movs	r2, #10
 8000d96:	701a      	strb	r2, [r3, #0]
 8000d98:	e7ee      	b.n	8000d78 <_puts_r+0x88>
	...

08000d9c <puts>:
 8000d9c:	4b02      	ldr	r3, [pc, #8]	@ (8000da8 <puts+0xc>)
 8000d9e:	4601      	mov	r1, r0
 8000da0:	6818      	ldr	r0, [r3, #0]
 8000da2:	f7ff bfa5 	b.w	8000cf0 <_puts_r>
 8000da6:	bf00      	nop
 8000da8:	20000018 	.word	0x20000018

08000dac <__sread>:
 8000dac:	b510      	push	{r4, lr}
 8000dae:	460c      	mov	r4, r1
 8000db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000db4:	f000 f8fc 	bl	8000fb0 <_read_r>
 8000db8:	2800      	cmp	r0, #0
 8000dba:	bfab      	itete	ge
 8000dbc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000dbe:	89a3      	ldrhlt	r3, [r4, #12]
 8000dc0:	181b      	addge	r3, r3, r0
 8000dc2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000dc6:	bfac      	ite	ge
 8000dc8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000dca:	81a3      	strhlt	r3, [r4, #12]
 8000dcc:	bd10      	pop	{r4, pc}

08000dce <__swrite>:
 8000dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dd2:	461f      	mov	r7, r3
 8000dd4:	898b      	ldrh	r3, [r1, #12]
 8000dd6:	05db      	lsls	r3, r3, #23
 8000dd8:	4605      	mov	r5, r0
 8000dda:	460c      	mov	r4, r1
 8000ddc:	4616      	mov	r6, r2
 8000dde:	d505      	bpl.n	8000dec <__swrite+0x1e>
 8000de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000de4:	2302      	movs	r3, #2
 8000de6:	2200      	movs	r2, #0
 8000de8:	f000 f8d0 	bl	8000f8c <_lseek_r>
 8000dec:	89a3      	ldrh	r3, [r4, #12]
 8000dee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000df2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000df6:	81a3      	strh	r3, [r4, #12]
 8000df8:	4632      	mov	r2, r6
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4628      	mov	r0, r5
 8000dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e02:	f000 b8e7 	b.w	8000fd4 <_write_r>

08000e06 <__sseek>:
 8000e06:	b510      	push	{r4, lr}
 8000e08:	460c      	mov	r4, r1
 8000e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e0e:	f000 f8bd 	bl	8000f8c <_lseek_r>
 8000e12:	1c43      	adds	r3, r0, #1
 8000e14:	89a3      	ldrh	r3, [r4, #12]
 8000e16:	bf15      	itete	ne
 8000e18:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000e1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000e1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000e22:	81a3      	strheq	r3, [r4, #12]
 8000e24:	bf18      	it	ne
 8000e26:	81a3      	strhne	r3, [r4, #12]
 8000e28:	bd10      	pop	{r4, pc}

08000e2a <__sclose>:
 8000e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e2e:	f000 b89d 	b.w	8000f6c <_close_r>

08000e32 <__swbuf_r>:
 8000e32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e34:	460e      	mov	r6, r1
 8000e36:	4614      	mov	r4, r2
 8000e38:	4605      	mov	r5, r0
 8000e3a:	b118      	cbz	r0, 8000e44 <__swbuf_r+0x12>
 8000e3c:	6a03      	ldr	r3, [r0, #32]
 8000e3e:	b90b      	cbnz	r3, 8000e44 <__swbuf_r+0x12>
 8000e40:	f7ff ff20 	bl	8000c84 <__sinit>
 8000e44:	69a3      	ldr	r3, [r4, #24]
 8000e46:	60a3      	str	r3, [r4, #8]
 8000e48:	89a3      	ldrh	r3, [r4, #12]
 8000e4a:	071a      	lsls	r2, r3, #28
 8000e4c:	d501      	bpl.n	8000e52 <__swbuf_r+0x20>
 8000e4e:	6923      	ldr	r3, [r4, #16]
 8000e50:	b943      	cbnz	r3, 8000e64 <__swbuf_r+0x32>
 8000e52:	4621      	mov	r1, r4
 8000e54:	4628      	mov	r0, r5
 8000e56:	f000 f82b 	bl	8000eb0 <__swsetup_r>
 8000e5a:	b118      	cbz	r0, 8000e64 <__swbuf_r+0x32>
 8000e5c:	f04f 37ff 	mov.w	r7, #4294967295
 8000e60:	4638      	mov	r0, r7
 8000e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e64:	6823      	ldr	r3, [r4, #0]
 8000e66:	6922      	ldr	r2, [r4, #16]
 8000e68:	1a98      	subs	r0, r3, r2
 8000e6a:	6963      	ldr	r3, [r4, #20]
 8000e6c:	b2f6      	uxtb	r6, r6
 8000e6e:	4283      	cmp	r3, r0
 8000e70:	4637      	mov	r7, r6
 8000e72:	dc05      	bgt.n	8000e80 <__swbuf_r+0x4e>
 8000e74:	4621      	mov	r1, r4
 8000e76:	4628      	mov	r0, r5
 8000e78:	f000 fa68 	bl	800134c <_fflush_r>
 8000e7c:	2800      	cmp	r0, #0
 8000e7e:	d1ed      	bne.n	8000e5c <__swbuf_r+0x2a>
 8000e80:	68a3      	ldr	r3, [r4, #8]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	60a3      	str	r3, [r4, #8]
 8000e86:	6823      	ldr	r3, [r4, #0]
 8000e88:	1c5a      	adds	r2, r3, #1
 8000e8a:	6022      	str	r2, [r4, #0]
 8000e8c:	701e      	strb	r6, [r3, #0]
 8000e8e:	6962      	ldr	r2, [r4, #20]
 8000e90:	1c43      	adds	r3, r0, #1
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d004      	beq.n	8000ea0 <__swbuf_r+0x6e>
 8000e96:	89a3      	ldrh	r3, [r4, #12]
 8000e98:	07db      	lsls	r3, r3, #31
 8000e9a:	d5e1      	bpl.n	8000e60 <__swbuf_r+0x2e>
 8000e9c:	2e0a      	cmp	r6, #10
 8000e9e:	d1df      	bne.n	8000e60 <__swbuf_r+0x2e>
 8000ea0:	4621      	mov	r1, r4
 8000ea2:	4628      	mov	r0, r5
 8000ea4:	f000 fa52 	bl	800134c <_fflush_r>
 8000ea8:	2800      	cmp	r0, #0
 8000eaa:	d0d9      	beq.n	8000e60 <__swbuf_r+0x2e>
 8000eac:	e7d6      	b.n	8000e5c <__swbuf_r+0x2a>
	...

08000eb0 <__swsetup_r>:
 8000eb0:	b538      	push	{r3, r4, r5, lr}
 8000eb2:	4b29      	ldr	r3, [pc, #164]	@ (8000f58 <__swsetup_r+0xa8>)
 8000eb4:	4605      	mov	r5, r0
 8000eb6:	6818      	ldr	r0, [r3, #0]
 8000eb8:	460c      	mov	r4, r1
 8000eba:	b118      	cbz	r0, 8000ec4 <__swsetup_r+0x14>
 8000ebc:	6a03      	ldr	r3, [r0, #32]
 8000ebe:	b90b      	cbnz	r3, 8000ec4 <__swsetup_r+0x14>
 8000ec0:	f7ff fee0 	bl	8000c84 <__sinit>
 8000ec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ec8:	0719      	lsls	r1, r3, #28
 8000eca:	d422      	bmi.n	8000f12 <__swsetup_r+0x62>
 8000ecc:	06da      	lsls	r2, r3, #27
 8000ece:	d407      	bmi.n	8000ee0 <__swsetup_r+0x30>
 8000ed0:	2209      	movs	r2, #9
 8000ed2:	602a      	str	r2, [r5, #0]
 8000ed4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ed8:	81a3      	strh	r3, [r4, #12]
 8000eda:	f04f 30ff 	mov.w	r0, #4294967295
 8000ede:	e033      	b.n	8000f48 <__swsetup_r+0x98>
 8000ee0:	0758      	lsls	r0, r3, #29
 8000ee2:	d512      	bpl.n	8000f0a <__swsetup_r+0x5a>
 8000ee4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000ee6:	b141      	cbz	r1, 8000efa <__swsetup_r+0x4a>
 8000ee8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000eec:	4299      	cmp	r1, r3
 8000eee:	d002      	beq.n	8000ef6 <__swsetup_r+0x46>
 8000ef0:	4628      	mov	r0, r5
 8000ef2:	f000 f8af 	bl	8001054 <_free_r>
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	6363      	str	r3, [r4, #52]	@ 0x34
 8000efa:	89a3      	ldrh	r3, [r4, #12]
 8000efc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000f00:	81a3      	strh	r3, [r4, #12]
 8000f02:	2300      	movs	r3, #0
 8000f04:	6063      	str	r3, [r4, #4]
 8000f06:	6923      	ldr	r3, [r4, #16]
 8000f08:	6023      	str	r3, [r4, #0]
 8000f0a:	89a3      	ldrh	r3, [r4, #12]
 8000f0c:	f043 0308 	orr.w	r3, r3, #8
 8000f10:	81a3      	strh	r3, [r4, #12]
 8000f12:	6923      	ldr	r3, [r4, #16]
 8000f14:	b94b      	cbnz	r3, 8000f2a <__swsetup_r+0x7a>
 8000f16:	89a3      	ldrh	r3, [r4, #12]
 8000f18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000f1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f20:	d003      	beq.n	8000f2a <__swsetup_r+0x7a>
 8000f22:	4621      	mov	r1, r4
 8000f24:	4628      	mov	r0, r5
 8000f26:	f000 fa5f 	bl	80013e8 <__smakebuf_r>
 8000f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f2e:	f013 0201 	ands.w	r2, r3, #1
 8000f32:	d00a      	beq.n	8000f4a <__swsetup_r+0x9a>
 8000f34:	2200      	movs	r2, #0
 8000f36:	60a2      	str	r2, [r4, #8]
 8000f38:	6962      	ldr	r2, [r4, #20]
 8000f3a:	4252      	negs	r2, r2
 8000f3c:	61a2      	str	r2, [r4, #24]
 8000f3e:	6922      	ldr	r2, [r4, #16]
 8000f40:	b942      	cbnz	r2, 8000f54 <__swsetup_r+0xa4>
 8000f42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000f46:	d1c5      	bne.n	8000ed4 <__swsetup_r+0x24>
 8000f48:	bd38      	pop	{r3, r4, r5, pc}
 8000f4a:	0799      	lsls	r1, r3, #30
 8000f4c:	bf58      	it	pl
 8000f4e:	6962      	ldrpl	r2, [r4, #20]
 8000f50:	60a2      	str	r2, [r4, #8]
 8000f52:	e7f4      	b.n	8000f3e <__swsetup_r+0x8e>
 8000f54:	2000      	movs	r0, #0
 8000f56:	e7f7      	b.n	8000f48 <__swsetup_r+0x98>
 8000f58:	20000018 	.word	0x20000018

08000f5c <memset>:
 8000f5c:	4402      	add	r2, r0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d100      	bne.n	8000f66 <memset+0xa>
 8000f64:	4770      	bx	lr
 8000f66:	f803 1b01 	strb.w	r1, [r3], #1
 8000f6a:	e7f9      	b.n	8000f60 <memset+0x4>

08000f6c <_close_r>:
 8000f6c:	b538      	push	{r3, r4, r5, lr}
 8000f6e:	4d06      	ldr	r5, [pc, #24]	@ (8000f88 <_close_r+0x1c>)
 8000f70:	2300      	movs	r3, #0
 8000f72:	4604      	mov	r4, r0
 8000f74:	4608      	mov	r0, r1
 8000f76:	602b      	str	r3, [r5, #0]
 8000f78:	f7ff fa29 	bl	80003ce <_close>
 8000f7c:	1c43      	adds	r3, r0, #1
 8000f7e:	d102      	bne.n	8000f86 <_close_r+0x1a>
 8000f80:	682b      	ldr	r3, [r5, #0]
 8000f82:	b103      	cbz	r3, 8000f86 <_close_r+0x1a>
 8000f84:	6023      	str	r3, [r4, #0]
 8000f86:	bd38      	pop	{r3, r4, r5, pc}
 8000f88:	200001c8 	.word	0x200001c8

08000f8c <_lseek_r>:
 8000f8c:	b538      	push	{r3, r4, r5, lr}
 8000f8e:	4d07      	ldr	r5, [pc, #28]	@ (8000fac <_lseek_r+0x20>)
 8000f90:	4604      	mov	r4, r0
 8000f92:	4608      	mov	r0, r1
 8000f94:	4611      	mov	r1, r2
 8000f96:	2200      	movs	r2, #0
 8000f98:	602a      	str	r2, [r5, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	f7ff fa3e 	bl	800041c <_lseek>
 8000fa0:	1c43      	adds	r3, r0, #1
 8000fa2:	d102      	bne.n	8000faa <_lseek_r+0x1e>
 8000fa4:	682b      	ldr	r3, [r5, #0]
 8000fa6:	b103      	cbz	r3, 8000faa <_lseek_r+0x1e>
 8000fa8:	6023      	str	r3, [r4, #0]
 8000faa:	bd38      	pop	{r3, r4, r5, pc}
 8000fac:	200001c8 	.word	0x200001c8

08000fb0 <_read_r>:
 8000fb0:	b538      	push	{r3, r4, r5, lr}
 8000fb2:	4d07      	ldr	r5, [pc, #28]	@ (8000fd0 <_read_r+0x20>)
 8000fb4:	4604      	mov	r4, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4611      	mov	r1, r2
 8000fba:	2200      	movs	r2, #0
 8000fbc:	602a      	str	r2, [r5, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	f7ff f9cc 	bl	800035c <_read>
 8000fc4:	1c43      	adds	r3, r0, #1
 8000fc6:	d102      	bne.n	8000fce <_read_r+0x1e>
 8000fc8:	682b      	ldr	r3, [r5, #0]
 8000fca:	b103      	cbz	r3, 8000fce <_read_r+0x1e>
 8000fcc:	6023      	str	r3, [r4, #0]
 8000fce:	bd38      	pop	{r3, r4, r5, pc}
 8000fd0:	200001c8 	.word	0x200001c8

08000fd4 <_write_r>:
 8000fd4:	b538      	push	{r3, r4, r5, lr}
 8000fd6:	4d07      	ldr	r5, [pc, #28]	@ (8000ff4 <_write_r+0x20>)
 8000fd8:	4604      	mov	r4, r0
 8000fda:	4608      	mov	r0, r1
 8000fdc:	4611      	mov	r1, r2
 8000fde:	2200      	movs	r2, #0
 8000fe0:	602a      	str	r2, [r5, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	f7ff f9d7 	bl	8000396 <_write>
 8000fe8:	1c43      	adds	r3, r0, #1
 8000fea:	d102      	bne.n	8000ff2 <_write_r+0x1e>
 8000fec:	682b      	ldr	r3, [r5, #0]
 8000fee:	b103      	cbz	r3, 8000ff2 <_write_r+0x1e>
 8000ff0:	6023      	str	r3, [r4, #0]
 8000ff2:	bd38      	pop	{r3, r4, r5, pc}
 8000ff4:	200001c8 	.word	0x200001c8

08000ff8 <__errno>:
 8000ff8:	4b01      	ldr	r3, [pc, #4]	@ (8001000 <__errno+0x8>)
 8000ffa:	6818      	ldr	r0, [r3, #0]
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000018 	.word	0x20000018

08001004 <__libc_init_array>:
 8001004:	b570      	push	{r4, r5, r6, lr}
 8001006:	4d0d      	ldr	r5, [pc, #52]	@ (800103c <__libc_init_array+0x38>)
 8001008:	4c0d      	ldr	r4, [pc, #52]	@ (8001040 <__libc_init_array+0x3c>)
 800100a:	1b64      	subs	r4, r4, r5
 800100c:	10a4      	asrs	r4, r4, #2
 800100e:	2600      	movs	r6, #0
 8001010:	42a6      	cmp	r6, r4
 8001012:	d109      	bne.n	8001028 <__libc_init_array+0x24>
 8001014:	4d0b      	ldr	r5, [pc, #44]	@ (8001044 <__libc_init_array+0x40>)
 8001016:	4c0c      	ldr	r4, [pc, #48]	@ (8001048 <__libc_init_array+0x44>)
 8001018:	f000 fa54 	bl	80014c4 <_init>
 800101c:	1b64      	subs	r4, r4, r5
 800101e:	10a4      	asrs	r4, r4, #2
 8001020:	2600      	movs	r6, #0
 8001022:	42a6      	cmp	r6, r4
 8001024:	d105      	bne.n	8001032 <__libc_init_array+0x2e>
 8001026:	bd70      	pop	{r4, r5, r6, pc}
 8001028:	f855 3b04 	ldr.w	r3, [r5], #4
 800102c:	4798      	blx	r3
 800102e:	3601      	adds	r6, #1
 8001030:	e7ee      	b.n	8001010 <__libc_init_array+0xc>
 8001032:	f855 3b04 	ldr.w	r3, [r5], #4
 8001036:	4798      	blx	r3
 8001038:	3601      	adds	r6, #1
 800103a:	e7f2      	b.n	8001022 <__libc_init_array+0x1e>
 800103c:	080014f8 	.word	0x080014f8
 8001040:	080014f8 	.word	0x080014f8
 8001044:	080014f8 	.word	0x080014f8
 8001048:	080014fc 	.word	0x080014fc

0800104c <__retarget_lock_init_recursive>:
 800104c:	4770      	bx	lr

0800104e <__retarget_lock_acquire_recursive>:
 800104e:	4770      	bx	lr

08001050 <__retarget_lock_release_recursive>:
 8001050:	4770      	bx	lr
	...

08001054 <_free_r>:
 8001054:	b538      	push	{r3, r4, r5, lr}
 8001056:	4605      	mov	r5, r0
 8001058:	2900      	cmp	r1, #0
 800105a:	d041      	beq.n	80010e0 <_free_r+0x8c>
 800105c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001060:	1f0c      	subs	r4, r1, #4
 8001062:	2b00      	cmp	r3, #0
 8001064:	bfb8      	it	lt
 8001066:	18e4      	addlt	r4, r4, r3
 8001068:	f000 f8e0 	bl	800122c <__malloc_lock>
 800106c:	4a1d      	ldr	r2, [pc, #116]	@ (80010e4 <_free_r+0x90>)
 800106e:	6813      	ldr	r3, [r2, #0]
 8001070:	b933      	cbnz	r3, 8001080 <_free_r+0x2c>
 8001072:	6063      	str	r3, [r4, #4]
 8001074:	6014      	str	r4, [r2, #0]
 8001076:	4628      	mov	r0, r5
 8001078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800107c:	f000 b8dc 	b.w	8001238 <__malloc_unlock>
 8001080:	42a3      	cmp	r3, r4
 8001082:	d908      	bls.n	8001096 <_free_r+0x42>
 8001084:	6820      	ldr	r0, [r4, #0]
 8001086:	1821      	adds	r1, r4, r0
 8001088:	428b      	cmp	r3, r1
 800108a:	bf01      	itttt	eq
 800108c:	6819      	ldreq	r1, [r3, #0]
 800108e:	685b      	ldreq	r3, [r3, #4]
 8001090:	1809      	addeq	r1, r1, r0
 8001092:	6021      	streq	r1, [r4, #0]
 8001094:	e7ed      	b.n	8001072 <_free_r+0x1e>
 8001096:	461a      	mov	r2, r3
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	b10b      	cbz	r3, 80010a0 <_free_r+0x4c>
 800109c:	42a3      	cmp	r3, r4
 800109e:	d9fa      	bls.n	8001096 <_free_r+0x42>
 80010a0:	6811      	ldr	r1, [r2, #0]
 80010a2:	1850      	adds	r0, r2, r1
 80010a4:	42a0      	cmp	r0, r4
 80010a6:	d10b      	bne.n	80010c0 <_free_r+0x6c>
 80010a8:	6820      	ldr	r0, [r4, #0]
 80010aa:	4401      	add	r1, r0
 80010ac:	1850      	adds	r0, r2, r1
 80010ae:	4283      	cmp	r3, r0
 80010b0:	6011      	str	r1, [r2, #0]
 80010b2:	d1e0      	bne.n	8001076 <_free_r+0x22>
 80010b4:	6818      	ldr	r0, [r3, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	6053      	str	r3, [r2, #4]
 80010ba:	4408      	add	r0, r1
 80010bc:	6010      	str	r0, [r2, #0]
 80010be:	e7da      	b.n	8001076 <_free_r+0x22>
 80010c0:	d902      	bls.n	80010c8 <_free_r+0x74>
 80010c2:	230c      	movs	r3, #12
 80010c4:	602b      	str	r3, [r5, #0]
 80010c6:	e7d6      	b.n	8001076 <_free_r+0x22>
 80010c8:	6820      	ldr	r0, [r4, #0]
 80010ca:	1821      	adds	r1, r4, r0
 80010cc:	428b      	cmp	r3, r1
 80010ce:	bf04      	itt	eq
 80010d0:	6819      	ldreq	r1, [r3, #0]
 80010d2:	685b      	ldreq	r3, [r3, #4]
 80010d4:	6063      	str	r3, [r4, #4]
 80010d6:	bf04      	itt	eq
 80010d8:	1809      	addeq	r1, r1, r0
 80010da:	6021      	streq	r1, [r4, #0]
 80010dc:	6054      	str	r4, [r2, #4]
 80010de:	e7ca      	b.n	8001076 <_free_r+0x22>
 80010e0:	bd38      	pop	{r3, r4, r5, pc}
 80010e2:	bf00      	nop
 80010e4:	200001d4 	.word	0x200001d4

080010e8 <sbrk_aligned>:
 80010e8:	b570      	push	{r4, r5, r6, lr}
 80010ea:	4e0f      	ldr	r6, [pc, #60]	@ (8001128 <sbrk_aligned+0x40>)
 80010ec:	460c      	mov	r4, r1
 80010ee:	6831      	ldr	r1, [r6, #0]
 80010f0:	4605      	mov	r5, r0
 80010f2:	b911      	cbnz	r1, 80010fa <sbrk_aligned+0x12>
 80010f4:	f000 f9d6 	bl	80014a4 <_sbrk_r>
 80010f8:	6030      	str	r0, [r6, #0]
 80010fa:	4621      	mov	r1, r4
 80010fc:	4628      	mov	r0, r5
 80010fe:	f000 f9d1 	bl	80014a4 <_sbrk_r>
 8001102:	1c43      	adds	r3, r0, #1
 8001104:	d103      	bne.n	800110e <sbrk_aligned+0x26>
 8001106:	f04f 34ff 	mov.w	r4, #4294967295
 800110a:	4620      	mov	r0, r4
 800110c:	bd70      	pop	{r4, r5, r6, pc}
 800110e:	1cc4      	adds	r4, r0, #3
 8001110:	f024 0403 	bic.w	r4, r4, #3
 8001114:	42a0      	cmp	r0, r4
 8001116:	d0f8      	beq.n	800110a <sbrk_aligned+0x22>
 8001118:	1a21      	subs	r1, r4, r0
 800111a:	4628      	mov	r0, r5
 800111c:	f000 f9c2 	bl	80014a4 <_sbrk_r>
 8001120:	3001      	adds	r0, #1
 8001122:	d1f2      	bne.n	800110a <sbrk_aligned+0x22>
 8001124:	e7ef      	b.n	8001106 <sbrk_aligned+0x1e>
 8001126:	bf00      	nop
 8001128:	200001d0 	.word	0x200001d0

0800112c <_malloc_r>:
 800112c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001130:	1ccd      	adds	r5, r1, #3
 8001132:	f025 0503 	bic.w	r5, r5, #3
 8001136:	3508      	adds	r5, #8
 8001138:	2d0c      	cmp	r5, #12
 800113a:	bf38      	it	cc
 800113c:	250c      	movcc	r5, #12
 800113e:	2d00      	cmp	r5, #0
 8001140:	4606      	mov	r6, r0
 8001142:	db01      	blt.n	8001148 <_malloc_r+0x1c>
 8001144:	42a9      	cmp	r1, r5
 8001146:	d904      	bls.n	8001152 <_malloc_r+0x26>
 8001148:	230c      	movs	r3, #12
 800114a:	6033      	str	r3, [r6, #0]
 800114c:	2000      	movs	r0, #0
 800114e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001152:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001228 <_malloc_r+0xfc>
 8001156:	f000 f869 	bl	800122c <__malloc_lock>
 800115a:	f8d8 3000 	ldr.w	r3, [r8]
 800115e:	461c      	mov	r4, r3
 8001160:	bb44      	cbnz	r4, 80011b4 <_malloc_r+0x88>
 8001162:	4629      	mov	r1, r5
 8001164:	4630      	mov	r0, r6
 8001166:	f7ff ffbf 	bl	80010e8 <sbrk_aligned>
 800116a:	1c43      	adds	r3, r0, #1
 800116c:	4604      	mov	r4, r0
 800116e:	d158      	bne.n	8001222 <_malloc_r+0xf6>
 8001170:	f8d8 4000 	ldr.w	r4, [r8]
 8001174:	4627      	mov	r7, r4
 8001176:	2f00      	cmp	r7, #0
 8001178:	d143      	bne.n	8001202 <_malloc_r+0xd6>
 800117a:	2c00      	cmp	r4, #0
 800117c:	d04b      	beq.n	8001216 <_malloc_r+0xea>
 800117e:	6823      	ldr	r3, [r4, #0]
 8001180:	4639      	mov	r1, r7
 8001182:	4630      	mov	r0, r6
 8001184:	eb04 0903 	add.w	r9, r4, r3
 8001188:	f000 f98c 	bl	80014a4 <_sbrk_r>
 800118c:	4581      	cmp	r9, r0
 800118e:	d142      	bne.n	8001216 <_malloc_r+0xea>
 8001190:	6821      	ldr	r1, [r4, #0]
 8001192:	1a6d      	subs	r5, r5, r1
 8001194:	4629      	mov	r1, r5
 8001196:	4630      	mov	r0, r6
 8001198:	f7ff ffa6 	bl	80010e8 <sbrk_aligned>
 800119c:	3001      	adds	r0, #1
 800119e:	d03a      	beq.n	8001216 <_malloc_r+0xea>
 80011a0:	6823      	ldr	r3, [r4, #0]
 80011a2:	442b      	add	r3, r5
 80011a4:	6023      	str	r3, [r4, #0]
 80011a6:	f8d8 3000 	ldr.w	r3, [r8]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	bb62      	cbnz	r2, 8001208 <_malloc_r+0xdc>
 80011ae:	f8c8 7000 	str.w	r7, [r8]
 80011b2:	e00f      	b.n	80011d4 <_malloc_r+0xa8>
 80011b4:	6822      	ldr	r2, [r4, #0]
 80011b6:	1b52      	subs	r2, r2, r5
 80011b8:	d420      	bmi.n	80011fc <_malloc_r+0xd0>
 80011ba:	2a0b      	cmp	r2, #11
 80011bc:	d917      	bls.n	80011ee <_malloc_r+0xc2>
 80011be:	1961      	adds	r1, r4, r5
 80011c0:	42a3      	cmp	r3, r4
 80011c2:	6025      	str	r5, [r4, #0]
 80011c4:	bf18      	it	ne
 80011c6:	6059      	strne	r1, [r3, #4]
 80011c8:	6863      	ldr	r3, [r4, #4]
 80011ca:	bf08      	it	eq
 80011cc:	f8c8 1000 	streq.w	r1, [r8]
 80011d0:	5162      	str	r2, [r4, r5]
 80011d2:	604b      	str	r3, [r1, #4]
 80011d4:	4630      	mov	r0, r6
 80011d6:	f000 f82f 	bl	8001238 <__malloc_unlock>
 80011da:	f104 000b 	add.w	r0, r4, #11
 80011de:	1d23      	adds	r3, r4, #4
 80011e0:	f020 0007 	bic.w	r0, r0, #7
 80011e4:	1ac2      	subs	r2, r0, r3
 80011e6:	bf1c      	itt	ne
 80011e8:	1a1b      	subne	r3, r3, r0
 80011ea:	50a3      	strne	r3, [r4, r2]
 80011ec:	e7af      	b.n	800114e <_malloc_r+0x22>
 80011ee:	6862      	ldr	r2, [r4, #4]
 80011f0:	42a3      	cmp	r3, r4
 80011f2:	bf0c      	ite	eq
 80011f4:	f8c8 2000 	streq.w	r2, [r8]
 80011f8:	605a      	strne	r2, [r3, #4]
 80011fa:	e7eb      	b.n	80011d4 <_malloc_r+0xa8>
 80011fc:	4623      	mov	r3, r4
 80011fe:	6864      	ldr	r4, [r4, #4]
 8001200:	e7ae      	b.n	8001160 <_malloc_r+0x34>
 8001202:	463c      	mov	r4, r7
 8001204:	687f      	ldr	r7, [r7, #4]
 8001206:	e7b6      	b.n	8001176 <_malloc_r+0x4a>
 8001208:	461a      	mov	r2, r3
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	42a3      	cmp	r3, r4
 800120e:	d1fb      	bne.n	8001208 <_malloc_r+0xdc>
 8001210:	2300      	movs	r3, #0
 8001212:	6053      	str	r3, [r2, #4]
 8001214:	e7de      	b.n	80011d4 <_malloc_r+0xa8>
 8001216:	230c      	movs	r3, #12
 8001218:	6033      	str	r3, [r6, #0]
 800121a:	4630      	mov	r0, r6
 800121c:	f000 f80c 	bl	8001238 <__malloc_unlock>
 8001220:	e794      	b.n	800114c <_malloc_r+0x20>
 8001222:	6005      	str	r5, [r0, #0]
 8001224:	e7d6      	b.n	80011d4 <_malloc_r+0xa8>
 8001226:	bf00      	nop
 8001228:	200001d4 	.word	0x200001d4

0800122c <__malloc_lock>:
 800122c:	4801      	ldr	r0, [pc, #4]	@ (8001234 <__malloc_lock+0x8>)
 800122e:	f7ff bf0e 	b.w	800104e <__retarget_lock_acquire_recursive>
 8001232:	bf00      	nop
 8001234:	200001cc 	.word	0x200001cc

08001238 <__malloc_unlock>:
 8001238:	4801      	ldr	r0, [pc, #4]	@ (8001240 <__malloc_unlock+0x8>)
 800123a:	f7ff bf09 	b.w	8001050 <__retarget_lock_release_recursive>
 800123e:	bf00      	nop
 8001240:	200001cc 	.word	0x200001cc

08001244 <__sflush_r>:
 8001244:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800124c:	0716      	lsls	r6, r2, #28
 800124e:	4605      	mov	r5, r0
 8001250:	460c      	mov	r4, r1
 8001252:	d454      	bmi.n	80012fe <__sflush_r+0xba>
 8001254:	684b      	ldr	r3, [r1, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	dc02      	bgt.n	8001260 <__sflush_r+0x1c>
 800125a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800125c:	2b00      	cmp	r3, #0
 800125e:	dd48      	ble.n	80012f2 <__sflush_r+0xae>
 8001260:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001262:	2e00      	cmp	r6, #0
 8001264:	d045      	beq.n	80012f2 <__sflush_r+0xae>
 8001266:	2300      	movs	r3, #0
 8001268:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800126c:	682f      	ldr	r7, [r5, #0]
 800126e:	6a21      	ldr	r1, [r4, #32]
 8001270:	602b      	str	r3, [r5, #0]
 8001272:	d030      	beq.n	80012d6 <__sflush_r+0x92>
 8001274:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001276:	89a3      	ldrh	r3, [r4, #12]
 8001278:	0759      	lsls	r1, r3, #29
 800127a:	d505      	bpl.n	8001288 <__sflush_r+0x44>
 800127c:	6863      	ldr	r3, [r4, #4]
 800127e:	1ad2      	subs	r2, r2, r3
 8001280:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001282:	b10b      	cbz	r3, 8001288 <__sflush_r+0x44>
 8001284:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001286:	1ad2      	subs	r2, r2, r3
 8001288:	2300      	movs	r3, #0
 800128a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800128c:	6a21      	ldr	r1, [r4, #32]
 800128e:	4628      	mov	r0, r5
 8001290:	47b0      	blx	r6
 8001292:	1c43      	adds	r3, r0, #1
 8001294:	89a3      	ldrh	r3, [r4, #12]
 8001296:	d106      	bne.n	80012a6 <__sflush_r+0x62>
 8001298:	6829      	ldr	r1, [r5, #0]
 800129a:	291d      	cmp	r1, #29
 800129c:	d82b      	bhi.n	80012f6 <__sflush_r+0xb2>
 800129e:	4a2a      	ldr	r2, [pc, #168]	@ (8001348 <__sflush_r+0x104>)
 80012a0:	40ca      	lsrs	r2, r1
 80012a2:	07d6      	lsls	r6, r2, #31
 80012a4:	d527      	bpl.n	80012f6 <__sflush_r+0xb2>
 80012a6:	2200      	movs	r2, #0
 80012a8:	6062      	str	r2, [r4, #4]
 80012aa:	04d9      	lsls	r1, r3, #19
 80012ac:	6922      	ldr	r2, [r4, #16]
 80012ae:	6022      	str	r2, [r4, #0]
 80012b0:	d504      	bpl.n	80012bc <__sflush_r+0x78>
 80012b2:	1c42      	adds	r2, r0, #1
 80012b4:	d101      	bne.n	80012ba <__sflush_r+0x76>
 80012b6:	682b      	ldr	r3, [r5, #0]
 80012b8:	b903      	cbnz	r3, 80012bc <__sflush_r+0x78>
 80012ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80012bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80012be:	602f      	str	r7, [r5, #0]
 80012c0:	b1b9      	cbz	r1, 80012f2 <__sflush_r+0xae>
 80012c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80012c6:	4299      	cmp	r1, r3
 80012c8:	d002      	beq.n	80012d0 <__sflush_r+0x8c>
 80012ca:	4628      	mov	r0, r5
 80012cc:	f7ff fec2 	bl	8001054 <_free_r>
 80012d0:	2300      	movs	r3, #0
 80012d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80012d4:	e00d      	b.n	80012f2 <__sflush_r+0xae>
 80012d6:	2301      	movs	r3, #1
 80012d8:	4628      	mov	r0, r5
 80012da:	47b0      	blx	r6
 80012dc:	4602      	mov	r2, r0
 80012de:	1c50      	adds	r0, r2, #1
 80012e0:	d1c9      	bne.n	8001276 <__sflush_r+0x32>
 80012e2:	682b      	ldr	r3, [r5, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0c6      	beq.n	8001276 <__sflush_r+0x32>
 80012e8:	2b1d      	cmp	r3, #29
 80012ea:	d001      	beq.n	80012f0 <__sflush_r+0xac>
 80012ec:	2b16      	cmp	r3, #22
 80012ee:	d11e      	bne.n	800132e <__sflush_r+0xea>
 80012f0:	602f      	str	r7, [r5, #0]
 80012f2:	2000      	movs	r0, #0
 80012f4:	e022      	b.n	800133c <__sflush_r+0xf8>
 80012f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	e01b      	b.n	8001336 <__sflush_r+0xf2>
 80012fe:	690f      	ldr	r7, [r1, #16]
 8001300:	2f00      	cmp	r7, #0
 8001302:	d0f6      	beq.n	80012f2 <__sflush_r+0xae>
 8001304:	0793      	lsls	r3, r2, #30
 8001306:	680e      	ldr	r6, [r1, #0]
 8001308:	bf08      	it	eq
 800130a:	694b      	ldreq	r3, [r1, #20]
 800130c:	600f      	str	r7, [r1, #0]
 800130e:	bf18      	it	ne
 8001310:	2300      	movne	r3, #0
 8001312:	eba6 0807 	sub.w	r8, r6, r7
 8001316:	608b      	str	r3, [r1, #8]
 8001318:	f1b8 0f00 	cmp.w	r8, #0
 800131c:	dde9      	ble.n	80012f2 <__sflush_r+0xae>
 800131e:	6a21      	ldr	r1, [r4, #32]
 8001320:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001322:	4643      	mov	r3, r8
 8001324:	463a      	mov	r2, r7
 8001326:	4628      	mov	r0, r5
 8001328:	47b0      	blx	r6
 800132a:	2800      	cmp	r0, #0
 800132c:	dc08      	bgt.n	8001340 <__sflush_r+0xfc>
 800132e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001332:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001336:	81a3      	strh	r3, [r4, #12]
 8001338:	f04f 30ff 	mov.w	r0, #4294967295
 800133c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001340:	4407      	add	r7, r0
 8001342:	eba8 0800 	sub.w	r8, r8, r0
 8001346:	e7e7      	b.n	8001318 <__sflush_r+0xd4>
 8001348:	20400001 	.word	0x20400001

0800134c <_fflush_r>:
 800134c:	b538      	push	{r3, r4, r5, lr}
 800134e:	690b      	ldr	r3, [r1, #16]
 8001350:	4605      	mov	r5, r0
 8001352:	460c      	mov	r4, r1
 8001354:	b913      	cbnz	r3, 800135c <_fflush_r+0x10>
 8001356:	2500      	movs	r5, #0
 8001358:	4628      	mov	r0, r5
 800135a:	bd38      	pop	{r3, r4, r5, pc}
 800135c:	b118      	cbz	r0, 8001366 <_fflush_r+0x1a>
 800135e:	6a03      	ldr	r3, [r0, #32]
 8001360:	b90b      	cbnz	r3, 8001366 <_fflush_r+0x1a>
 8001362:	f7ff fc8f 	bl	8000c84 <__sinit>
 8001366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f3      	beq.n	8001356 <_fflush_r+0xa>
 800136e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001370:	07d0      	lsls	r0, r2, #31
 8001372:	d404      	bmi.n	800137e <_fflush_r+0x32>
 8001374:	0599      	lsls	r1, r3, #22
 8001376:	d402      	bmi.n	800137e <_fflush_r+0x32>
 8001378:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800137a:	f7ff fe68 	bl	800104e <__retarget_lock_acquire_recursive>
 800137e:	4628      	mov	r0, r5
 8001380:	4621      	mov	r1, r4
 8001382:	f7ff ff5f 	bl	8001244 <__sflush_r>
 8001386:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001388:	07da      	lsls	r2, r3, #31
 800138a:	4605      	mov	r5, r0
 800138c:	d4e4      	bmi.n	8001358 <_fflush_r+0xc>
 800138e:	89a3      	ldrh	r3, [r4, #12]
 8001390:	059b      	lsls	r3, r3, #22
 8001392:	d4e1      	bmi.n	8001358 <_fflush_r+0xc>
 8001394:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001396:	f7ff fe5b 	bl	8001050 <__retarget_lock_release_recursive>
 800139a:	e7dd      	b.n	8001358 <_fflush_r+0xc>

0800139c <__swhatbuf_r>:
 800139c:	b570      	push	{r4, r5, r6, lr}
 800139e:	460c      	mov	r4, r1
 80013a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013a4:	2900      	cmp	r1, #0
 80013a6:	b096      	sub	sp, #88	@ 0x58
 80013a8:	4615      	mov	r5, r2
 80013aa:	461e      	mov	r6, r3
 80013ac:	da0d      	bge.n	80013ca <__swhatbuf_r+0x2e>
 80013ae:	89a3      	ldrh	r3, [r4, #12]
 80013b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80013b4:	f04f 0100 	mov.w	r1, #0
 80013b8:	bf14      	ite	ne
 80013ba:	2340      	movne	r3, #64	@ 0x40
 80013bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80013c0:	2000      	movs	r0, #0
 80013c2:	6031      	str	r1, [r6, #0]
 80013c4:	602b      	str	r3, [r5, #0]
 80013c6:	b016      	add	sp, #88	@ 0x58
 80013c8:	bd70      	pop	{r4, r5, r6, pc}
 80013ca:	466a      	mov	r2, sp
 80013cc:	f000 f848 	bl	8001460 <_fstat_r>
 80013d0:	2800      	cmp	r0, #0
 80013d2:	dbec      	blt.n	80013ae <__swhatbuf_r+0x12>
 80013d4:	9901      	ldr	r1, [sp, #4]
 80013d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80013da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80013de:	4259      	negs	r1, r3
 80013e0:	4159      	adcs	r1, r3
 80013e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013e6:	e7eb      	b.n	80013c0 <__swhatbuf_r+0x24>

080013e8 <__smakebuf_r>:
 80013e8:	898b      	ldrh	r3, [r1, #12]
 80013ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80013ec:	079d      	lsls	r5, r3, #30
 80013ee:	4606      	mov	r6, r0
 80013f0:	460c      	mov	r4, r1
 80013f2:	d507      	bpl.n	8001404 <__smakebuf_r+0x1c>
 80013f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80013f8:	6023      	str	r3, [r4, #0]
 80013fa:	6123      	str	r3, [r4, #16]
 80013fc:	2301      	movs	r3, #1
 80013fe:	6163      	str	r3, [r4, #20]
 8001400:	b003      	add	sp, #12
 8001402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001404:	ab01      	add	r3, sp, #4
 8001406:	466a      	mov	r2, sp
 8001408:	f7ff ffc8 	bl	800139c <__swhatbuf_r>
 800140c:	9f00      	ldr	r7, [sp, #0]
 800140e:	4605      	mov	r5, r0
 8001410:	4639      	mov	r1, r7
 8001412:	4630      	mov	r0, r6
 8001414:	f7ff fe8a 	bl	800112c <_malloc_r>
 8001418:	b948      	cbnz	r0, 800142e <__smakebuf_r+0x46>
 800141a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800141e:	059a      	lsls	r2, r3, #22
 8001420:	d4ee      	bmi.n	8001400 <__smakebuf_r+0x18>
 8001422:	f023 0303 	bic.w	r3, r3, #3
 8001426:	f043 0302 	orr.w	r3, r3, #2
 800142a:	81a3      	strh	r3, [r4, #12]
 800142c:	e7e2      	b.n	80013f4 <__smakebuf_r+0xc>
 800142e:	89a3      	ldrh	r3, [r4, #12]
 8001430:	6020      	str	r0, [r4, #0]
 8001432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001436:	81a3      	strh	r3, [r4, #12]
 8001438:	9b01      	ldr	r3, [sp, #4]
 800143a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800143e:	b15b      	cbz	r3, 8001458 <__smakebuf_r+0x70>
 8001440:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001444:	4630      	mov	r0, r6
 8001446:	f000 f81d 	bl	8001484 <_isatty_r>
 800144a:	b128      	cbz	r0, 8001458 <__smakebuf_r+0x70>
 800144c:	89a3      	ldrh	r3, [r4, #12]
 800144e:	f023 0303 	bic.w	r3, r3, #3
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	81a3      	strh	r3, [r4, #12]
 8001458:	89a3      	ldrh	r3, [r4, #12]
 800145a:	431d      	orrs	r5, r3
 800145c:	81a5      	strh	r5, [r4, #12]
 800145e:	e7cf      	b.n	8001400 <__smakebuf_r+0x18>

08001460 <_fstat_r>:
 8001460:	b538      	push	{r3, r4, r5, lr}
 8001462:	4d07      	ldr	r5, [pc, #28]	@ (8001480 <_fstat_r+0x20>)
 8001464:	2300      	movs	r3, #0
 8001466:	4604      	mov	r4, r0
 8001468:	4608      	mov	r0, r1
 800146a:	4611      	mov	r1, r2
 800146c:	602b      	str	r3, [r5, #0]
 800146e:	f7fe ffba 	bl	80003e6 <_fstat>
 8001472:	1c43      	adds	r3, r0, #1
 8001474:	d102      	bne.n	800147c <_fstat_r+0x1c>
 8001476:	682b      	ldr	r3, [r5, #0]
 8001478:	b103      	cbz	r3, 800147c <_fstat_r+0x1c>
 800147a:	6023      	str	r3, [r4, #0]
 800147c:	bd38      	pop	{r3, r4, r5, pc}
 800147e:	bf00      	nop
 8001480:	200001c8 	.word	0x200001c8

08001484 <_isatty_r>:
 8001484:	b538      	push	{r3, r4, r5, lr}
 8001486:	4d06      	ldr	r5, [pc, #24]	@ (80014a0 <_isatty_r+0x1c>)
 8001488:	2300      	movs	r3, #0
 800148a:	4604      	mov	r4, r0
 800148c:	4608      	mov	r0, r1
 800148e:	602b      	str	r3, [r5, #0]
 8001490:	f7fe ffb9 	bl	8000406 <_isatty>
 8001494:	1c43      	adds	r3, r0, #1
 8001496:	d102      	bne.n	800149e <_isatty_r+0x1a>
 8001498:	682b      	ldr	r3, [r5, #0]
 800149a:	b103      	cbz	r3, 800149e <_isatty_r+0x1a>
 800149c:	6023      	str	r3, [r4, #0]
 800149e:	bd38      	pop	{r3, r4, r5, pc}
 80014a0:	200001c8 	.word	0x200001c8

080014a4 <_sbrk_r>:
 80014a4:	b538      	push	{r3, r4, r5, lr}
 80014a6:	4d06      	ldr	r5, [pc, #24]	@ (80014c0 <_sbrk_r+0x1c>)
 80014a8:	2300      	movs	r3, #0
 80014aa:	4604      	mov	r4, r0
 80014ac:	4608      	mov	r0, r1
 80014ae:	602b      	str	r3, [r5, #0]
 80014b0:	f7fe ffc2 	bl	8000438 <_sbrk>
 80014b4:	1c43      	adds	r3, r0, #1
 80014b6:	d102      	bne.n	80014be <_sbrk_r+0x1a>
 80014b8:	682b      	ldr	r3, [r5, #0]
 80014ba:	b103      	cbz	r3, 80014be <_sbrk_r+0x1a>
 80014bc:	6023      	str	r3, [r4, #0]
 80014be:	bd38      	pop	{r3, r4, r5, pc}
 80014c0:	200001c8 	.word	0x200001c8

080014c4 <_init>:
 80014c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014c6:	bf00      	nop
 80014c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ca:	bc08      	pop	{r3}
 80014cc:	469e      	mov	lr, r3
 80014ce:	4770      	bx	lr

080014d0 <_fini>:
 80014d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014d2:	bf00      	nop
 80014d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014d6:	bc08      	pop	{r3}
 80014d8:	469e      	mov	lr, r3
 80014da:	4770      	bx	lr
