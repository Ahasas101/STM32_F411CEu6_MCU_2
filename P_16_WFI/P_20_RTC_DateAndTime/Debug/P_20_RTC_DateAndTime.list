
P_20_RTC_DateAndTime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bfc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08002d9c  08002d9c  00003d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e8c  08002e8c  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002e8c  08002e8c  00003e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e94  08002e94  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e94  08002e94  00003e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e98  08002e98  00003e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002e9c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  08002f04  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08002f04  00004220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006cb3  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001894  00000000  00000000  0000ad4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000728  00000000  00000000  0000c5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000541  00000000  00000000  0000cd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016dc6  00000000  00000000  0000d249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008d9b  00000000  00000000  0002400f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b238  00000000  00000000  0002cdaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b7fe2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000230c  00000000  00000000  000b8028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000ba334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002d84 	.word	0x08002d84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08002d84 	.word	0x08002d84

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <SysTick_Handler>:
#include "stm32f4xx_hal.h"

extern RTC_HandleTypeDef rtc;

void SysTick_Handler(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000284:	f000 faf8 	bl	8000878 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000288:	f000 fc27 	bl	8000ada <HAL_SYSTICK_IRQHandler>
}
 800028c:	bf00      	nop
 800028e:	bd80      	pop	{r7, pc}

08000290 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000294:	2001      	movs	r0, #1
 8000296:	f000 fdcb 	bl	8000e30 <HAL_GPIO_EXTI_IRQHandler>
}
 800029a:	bf00      	nop
 800029c:	bd80      	pop	{r7, pc}
	...

080002a0 <RTC_Alarm_IRQHandler>:

void RTC_Alarm_IRQHandler(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	HAL_RTC_AlarmIRQHandler(&rtc);
 80002a4:	4802      	ldr	r0, [pc, #8]	@ (80002b0 <RTC_Alarm_IRQHandler+0x10>)
 80002a6:	f001 fcd3 	bl	8001c50 <HAL_RTC_AlarmIRQHandler>
}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	20000084 	.word	0x20000084

080002b4 <main>:
void button_init(void);
char* GetDayOfWeek(uint8_t day);
void Alarm_init(void);

int main(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	HAL_Init();
 80002b8:	f000 fa84 	bl	80007c4 <HAL_Init>
	button_init();
 80002bc:	f000 f85a 	bl	8000374 <button_init>
	RTC_Init();
 80002c0:	f000 f808 	bl	80002d4 <RTC_Init>


	printf("Hello...\n");
 80002c4:	4802      	ldr	r0, [pc, #8]	@ (80002d0 <main+0x1c>)
 80002c6:	f001 fefb 	bl	80020c0 <puts>

	while(1);
 80002ca:	bf00      	nop
 80002cc:	e7fd      	b.n	80002ca <main+0x16>
 80002ce:	bf00      	nop
 80002d0:	08002d9c 	.word	0x08002d9c

080002d4 <RTC_Init>:
}

void RTC_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	rtc.Instance = RTC;
 80002d8:	4b0c      	ldr	r3, [pc, #48]	@ (800030c <RTC_Init+0x38>)
 80002da:	4a0d      	ldr	r2, [pc, #52]	@ (8000310 <RTC_Init+0x3c>)
 80002dc:	601a      	str	r2, [r3, #0]
	rtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80002de:	4b0b      	ldr	r3, [pc, #44]	@ (800030c <RTC_Init+0x38>)
 80002e0:	2240      	movs	r2, #64	@ 0x40
 80002e2:	605a      	str	r2, [r3, #4]
	rtc.Init.AsynchPrediv = 0x7F;
 80002e4:	4b09      	ldr	r3, [pc, #36]	@ (800030c <RTC_Init+0x38>)
 80002e6:	227f      	movs	r2, #127	@ 0x7f
 80002e8:	609a      	str	r2, [r3, #8]
	rtc.Init.SynchPrediv = 0xFF; // for lse we are using this configuration
 80002ea:	4b08      	ldr	r3, [pc, #32]	@ (800030c <RTC_Init+0x38>)
 80002ec:	22ff      	movs	r2, #255	@ 0xff
 80002ee:	60da      	str	r2, [r3, #12]
	rtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80002f0:	4b06      	ldr	r3, [pc, #24]	@ (800030c <RTC_Init+0x38>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	611a      	str	r2, [r3, #16]
	if(HAL_RTC_Init(&rtc) != HAL_OK) Error_Handler();
 80002f6:	4805      	ldr	r0, [pc, #20]	@ (800030c <RTC_Init+0x38>)
 80002f8:	f001 f91a 	bl	8001530 <HAL_RTC_Init>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <RTC_Init+0x32>
 8000302:	f000 f929 	bl	8000558 <Error_Handler>
}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	20000084 	.word	0x20000084
 8000310:	40002800 	.word	0x40002800

08000314 <RTC_CalenderConfig>:

void RTC_CalenderConfig(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af00      	add	r7, sp, #0
	// we are using binary format, and in binary format you can pass the values directly in decimal as they are stored in binary

	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;

	time.Hours = 6;
 800031a:	2306      	movs	r3, #6
 800031c:	713b      	strb	r3, [r7, #4]
	time.Minutes = 45;
 800031e:	232d      	movs	r3, #45	@ 0x2d
 8000320:	717b      	strb	r3, [r7, #5]
	time.Seconds = 00;
 8000322:	2300      	movs	r3, #0
 8000324:	71bb      	strb	r3, [r7, #6]
	time.TimeFormat = RTC_HOURFORMAT12_PM;
 8000326:	2301      	movs	r3, #1
 8000328:	71fb      	strb	r3, [r7, #7]
	if(HAL_RTC_SetTime(&rtc, &time, RTC_FORMAT_BIN) != HAL_OK) Error_Handler();
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2200      	movs	r2, #0
 800032e:	4619      	mov	r1, r3
 8000330:	480f      	ldr	r0, [pc, #60]	@ (8000370 <RTC_CalenderConfig+0x5c>)
 8000332:	f001 f97e 	bl	8001632 <HAL_RTC_SetTime>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <RTC_CalenderConfig+0x2c>
 800033c:	f000 f90c 	bl	8000558 <Error_Handler>

	date.Date = 22;
 8000340:	2316      	movs	r3, #22
 8000342:	70bb      	strb	r3, [r7, #2]
	date.Month = RTC_MONTH_AUGUST;
 8000344:	2308      	movs	r3, #8
 8000346:	707b      	strb	r3, [r7, #1]
	date.Year = 25;
 8000348:	2319      	movs	r3, #25
 800034a:	70fb      	strb	r3, [r7, #3]
	date.WeekDay = RTC_WEEKDAY_FRIDAY;
 800034c:	2305      	movs	r3, #5
 800034e:	703b      	strb	r3, [r7, #0]

	if(HAL_RTC_SetDate(&rtc, &date, RTC_FORMAT_BIN) != HAL_OK) Error_Handler();
 8000350:	463b      	mov	r3, r7
 8000352:	2200      	movs	r2, #0
 8000354:	4619      	mov	r1, r3
 8000356:	4806      	ldr	r0, [pc, #24]	@ (8000370 <RTC_CalenderConfig+0x5c>)
 8000358:	f001 fa63 	bl	8001822 <HAL_RTC_SetDate>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <RTC_CalenderConfig+0x52>
 8000362:	f000 f8f9 	bl	8000558 <Error_Handler>
}
 8000366:	bf00      	nop
 8000368:	3718      	adds	r7, #24
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	20000084 	.word	0x20000084

08000374 <button_init>:

void button_init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b088      	sub	sp, #32
 8000378:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800037a:	2300      	movs	r3, #0
 800037c:	60bb      	str	r3, [r7, #8]
 800037e:	4b24      	ldr	r3, [pc, #144]	@ (8000410 <button_init+0x9c>)
 8000380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000382:	4a23      	ldr	r2, [pc, #140]	@ (8000410 <button_init+0x9c>)
 8000384:	f043 0301 	orr.w	r3, r3, #1
 8000388:	6313      	str	r3, [r2, #48]	@ 0x30
 800038a:	4b21      	ldr	r3, [pc, #132]	@ (8000410 <button_init+0x9c>)
 800038c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800038e:	f003 0301 	and.w	r3, r3, #1
 8000392:	60bb      	str	r3, [r7, #8]
 8000394:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitTypeDef button;
	// This button is to print the data on screen and also set the alarm
	button.Pin = GPIO_PIN_0;
 8000396:	2301      	movs	r3, #1
 8000398:	60fb      	str	r3, [r7, #12]
	button.Mode = GPIO_MODE_IT_RISING;
 800039a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800039e:	613b      	str	r3, [r7, #16]
	button.Pull = GPIO_PULLUP;
 80003a0:	2301      	movs	r3, #1
 80003a2:	617b      	str	r3, [r7, #20]
	button.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80003a4:	2301      	movs	r3, #1
 80003a6:	61bb      	str	r3, [r7, #24]

	HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 80003a8:	2200      	movs	r2, #0
 80003aa:	210f      	movs	r1, #15
 80003ac:	2006      	movs	r0, #6
 80003ae:	f000 fb5e 	bl	8000a6e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80003b2:	2006      	movs	r0, #6
 80003b4:	f000 fb77 	bl	8000aa6 <HAL_NVIC_EnableIRQ>

	HAL_GPIO_Init(GPIOA, &button);
 80003b8:	f107 030c 	add.w	r3, r7, #12
 80003bc:	4619      	mov	r1, r3
 80003be:	4815      	ldr	r0, [pc, #84]	@ (8000414 <button_init+0xa0>)
 80003c0:	f000 fb98 	bl	8000af4 <HAL_GPIO_Init>

	__HAL_RCC_GPIOC_CLK_ENABLE();
 80003c4:	2300      	movs	r3, #0
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	4b11      	ldr	r3, [pc, #68]	@ (8000410 <button_init+0x9c>)
 80003ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003cc:	4a10      	ldr	r2, [pc, #64]	@ (8000410 <button_init+0x9c>)
 80003ce:	f043 0304 	orr.w	r3, r3, #4
 80003d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80003d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000410 <button_init+0x9c>)
 80003d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d8:	f003 0304 	and.w	r3, r3, #4
 80003dc:	607b      	str	r3, [r7, #4]
 80003de:	687b      	ldr	r3, [r7, #4]
	button.Pin = GPIO_PIN_13;
 80003e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003e4:	60fb      	str	r3, [r7, #12]
	button.Mode = GPIO_MODE_OUTPUT_PP;
 80003e6:	2301      	movs	r3, #1
 80003e8:	613b      	str	r3, [r7, #16]
	button.Pull = GPIO_NOPULL;
 80003ea:	2300      	movs	r3, #0
 80003ec:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &button);
 80003ee:	f107 030c 	add.w	r3, r7, #12
 80003f2:	4619      	mov	r1, r3
 80003f4:	4808      	ldr	r0, [pc, #32]	@ (8000418 <button_init+0xa4>)
 80003f6:	f000 fb7d 	bl	8000af4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80003fa:	2201      	movs	r2, #1
 80003fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000400:	4805      	ldr	r0, [pc, #20]	@ (8000418 <button_init+0xa4>)
 8000402:	f000 fcfb 	bl	8000dfc <HAL_GPIO_WritePin>
}
 8000406:	bf00      	nop
 8000408:	3720      	adds	r7, #32
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40023800 	.word	0x40023800
 8000414:	40020000 	.word	0x40020000
 8000418:	40020800 	.word	0x40020800

0800041c <GetDayOfWeek>:

char* GetDayOfWeek(uint8_t day)
{
 800041c:	b4b0      	push	{r4, r5, r7}
 800041e:	b08b      	sub	sp, #44	@ 0x2c
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	71fb      	strb	r3, [r7, #7]
	char* weekday[] = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};
 8000426:	4b0b      	ldr	r3, [pc, #44]	@ (8000454 <GetDayOfWeek+0x38>)
 8000428:	f107 040c 	add.w	r4, r7, #12
 800042c:	461d      	mov	r5, r3
 800042e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000430:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000432:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000436:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return weekday[day-1];
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	3b01      	subs	r3, #1
 800043e:	009b      	lsls	r3, r3, #2
 8000440:	3328      	adds	r3, #40	@ 0x28
 8000442:	443b      	add	r3, r7
 8000444:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 8000448:	4618      	mov	r0, r3
 800044a:	372c      	adds	r7, #44	@ 0x2c
 800044c:	46bd      	mov	sp, r7
 800044e:	bcb0      	pop	{r4, r5, r7}
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	08002dec 	.word	0x08002dec

08000458 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	b08d      	sub	sp, #52	@ 0x34
 800045c:	af02      	add	r7, sp, #8
 800045e:	4603      	mov	r3, r0
 8000460:	80fb      	strh	r3, [r7, #6]

	uint32_t last_tick = 0;
 8000462:	2300      	movs	r3, #0
 8000464:	627b      	str	r3, [r7, #36]	@ 0x24
	if(HAL_GetTick() - last_tick < 200)
 8000466:	f000 fa1b 	bl	80008a0 <HAL_GetTick>
 800046a:	4602      	mov	r2, r0
 800046c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800046e:	1ad3      	subs	r3, r2, r3
 8000470:	2bc7      	cmp	r3, #199	@ 0xc7
 8000472:	d92f      	bls.n	80004d4 <HAL_GPIO_EXTI_Callback+0x7c>
	{
		return;
	}
	last_tick = HAL_GetTick();
 8000474:	f000 fa14 	bl	80008a0 <HAL_GetTick>
 8000478:	6278      	str	r0, [r7, #36]	@ 0x24

	RTC_CalenderConfig();
 800047a:	f7ff ff4b 	bl	8000314 <RTC_CalenderConfig>

	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;

	HAL_RTC_GetTime(&rtc, &time, RTC_FORMAT_BIN);
 800047e:	f107 0310 	add.w	r3, r7, #16
 8000482:	2200      	movs	r2, #0
 8000484:	4619      	mov	r1, r3
 8000486:	4815      	ldr	r0, [pc, #84]	@ (80004dc <HAL_GPIO_EXTI_Callback+0x84>)
 8000488:	f001 f96d 	bl	8001766 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&rtc, &date, RTC_FORMAT_BIN);
 800048c:	f107 030c 	add.w	r3, r7, #12
 8000490:	2200      	movs	r2, #0
 8000492:	4619      	mov	r1, r3
 8000494:	4811      	ldr	r0, [pc, #68]	@ (80004dc <HAL_GPIO_EXTI_Callback+0x84>)
 8000496:	f001 fa48 	bl	800192a <HAL_RTC_GetDate>


	printf("Current Time : %d:%d:%d \n", time.Hours, time.Minutes, time.Seconds);
 800049a:	7c3b      	ldrb	r3, [r7, #16]
 800049c:	4619      	mov	r1, r3
 800049e:	7c7b      	ldrb	r3, [r7, #17]
 80004a0:	461a      	mov	r2, r3
 80004a2:	7cbb      	ldrb	r3, [r7, #18]
 80004a4:	480e      	ldr	r0, [pc, #56]	@ (80004e0 <HAL_GPIO_EXTI_Callback+0x88>)
 80004a6:	f001 fda3 	bl	8001ff0 <iprintf>
	printf("Current Date: %d-%d-%d <%s> \n", date.Date, date.Month, date.Year, GetDayOfWeek(date.WeekDay) );
 80004aa:	7bbb      	ldrb	r3, [r7, #14]
 80004ac:	461c      	mov	r4, r3
 80004ae:	7b7b      	ldrb	r3, [r7, #13]
 80004b0:	461d      	mov	r5, r3
 80004b2:	7bfb      	ldrb	r3, [r7, #15]
 80004b4:	461e      	mov	r6, r3
 80004b6:	7b3b      	ldrb	r3, [r7, #12]
 80004b8:	4618      	mov	r0, r3
 80004ba:	f7ff ffaf 	bl	800041c <GetDayOfWeek>
 80004be:	4603      	mov	r3, r0
 80004c0:	9300      	str	r3, [sp, #0]
 80004c2:	4633      	mov	r3, r6
 80004c4:	462a      	mov	r2, r5
 80004c6:	4621      	mov	r1, r4
 80004c8:	4806      	ldr	r0, [pc, #24]	@ (80004e4 <HAL_GPIO_EXTI_Callback+0x8c>)
 80004ca:	f001 fd91 	bl	8001ff0 <iprintf>

	Alarm_init();
 80004ce:	f000 f80b 	bl	80004e8 <Alarm_init>
 80004d2:	e000      	b.n	80004d6 <HAL_GPIO_EXTI_Callback+0x7e>
		return;
 80004d4:	bf00      	nop



}
 80004d6:	372c      	adds	r7, #44	@ 0x2c
 80004d8:	46bd      	mov	sp, r7
 80004da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004dc:	20000084 	.word	0x20000084
 80004e0:	08002e08 	.word	0x08002e08
 80004e4:	08002e24 	.word	0x08002e24

080004e8 <Alarm_init>:

void Alarm_init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0


	alarm.Alarm = RTC_ALARM_A;
 80004ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000520 <Alarm_init+0x38>)
 80004ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80004f2:	625a      	str	r2, [r3, #36]	@ 0x24
	alarm.AlarmTime.Minutes = 45;
 80004f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000520 <Alarm_init+0x38>)
 80004f6:	222d      	movs	r2, #45	@ 0x2d
 80004f8:	705a      	strb	r2, [r3, #1]
	alarm.AlarmTime.Seconds = 9;
 80004fa:	4b09      	ldr	r3, [pc, #36]	@ (8000520 <Alarm_init+0x38>)
 80004fc:	2209      	movs	r2, #9
 80004fe:	709a      	strb	r2, [r3, #2]
	alarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY  | RTC_ALARMMASK_HOURS ;
 8000500:	4b07      	ldr	r3, [pc, #28]	@ (8000520 <Alarm_init+0x38>)
 8000502:	4a08      	ldr	r2, [pc, #32]	@ (8000524 <Alarm_init+0x3c>)
 8000504:	615a      	str	r2, [r3, #20]
	if(HAL_RTC_SetAlarm_IT(&rtc, &alarm, RTC_FORMAT_BIN) != HAL_OK) Error_Handler();
 8000506:	2200      	movs	r2, #0
 8000508:	4905      	ldr	r1, [pc, #20]	@ (8000520 <Alarm_init+0x38>)
 800050a:	4807      	ldr	r0, [pc, #28]	@ (8000528 <Alarm_init+0x40>)
 800050c:	f001 fa5c 	bl	80019c8 <HAL_RTC_SetAlarm_IT>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <Alarm_init+0x32>
 8000516:	f000 f81f 	bl	8000558 <Error_Handler>
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	200000a4 	.word	0x200000a4
 8000524:	80800000 	.word	0x80800000
 8000528:	20000084 	.word	0x20000084

0800052c <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	printf("ALARM TRIGGERED!!!!\n");
 8000534:	4806      	ldr	r0, [pc, #24]	@ (8000550 <HAL_RTC_AlarmAEventCallback+0x24>)
 8000536:	f001 fdc3 	bl	80020c0 <puts>
	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000540:	4804      	ldr	r0, [pc, #16]	@ (8000554 <HAL_RTC_AlarmAEventCallback+0x28>)
 8000542:	f000 fc5b 	bl	8000dfc <HAL_GPIO_WritePin>
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	08002e44 	.word	0x08002e44
 8000554:	40020800 	.word	0x40020800

08000558 <Error_Handler>:


void Error_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
	while(1);
 800055c:	bf00      	nop
 800055e:	e7fd      	b.n	800055c <Error_Handler+0x4>

08000560 <HAL_RTC_MspInit>:
#include "stm32f4xx_hal.h"

void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	@ 0x50
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	// 1. Turn on the LSE
  RCC_OscInitTypeDef osc;

  osc.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8000568:	2304      	movs	r3, #4
 800056a:	623b      	str	r3, [r7, #32]
  osc.LSEState = RCC_LSE_ON;
 800056c:	2301      	movs	r3, #1
 800056e:	62bb      	str	r3, [r7, #40]	@ 0x28
  osc.PLL.PLLState = RCC_PLL_NONE;
 8000570:	2300      	movs	r3, #0
 8000572:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_RCC_OscConfig(&osc);
 8000574:	f107 0320 	add.w	r3, r7, #32
 8000578:	4618      	mov	r0, r3
 800057a:	f000 fc71 	bl	8000e60 <HAL_RCC_OscConfig>

  //2. Select the LSE as RTC clock source
  RCC_PeriphCLKInitTypeDef rcc_rtc;
  rcc_rtc.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800057e:	2302      	movs	r3, #2
 8000580:	60bb      	str	r3, [r7, #8]
  rcc_rtc.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000582:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000586:	61bb      	str	r3, [r7, #24]
  HAL_RCCEx_PeriphCLKConfig(&rcc_rtc);
 8000588:	f107 0308 	add.w	r3, r7, #8
 800058c:	4618      	mov	r0, r3
 800058e:	f000 fedf 	bl	8001350 <HAL_RCCEx_PeriphCLKConfig>

  //3. Enable the RTC clock in RCC_BDCR ( it is a backup domain register, it is not changed under reset)
  __HAL_RCC_RTC_ENABLE();
 8000592:	4b07      	ldr	r3, [pc, #28]	@ (80005b0 <HAL_RTC_MspInit+0x50>)
 8000594:	2201      	movs	r2, #1
 8000596:	601a      	str	r2, [r3, #0]

  //4. Enable the interrup for the alarm
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 15, 0);
 8000598:	2200      	movs	r2, #0
 800059a:	210f      	movs	r1, #15
 800059c:	2029      	movs	r0, #41	@ 0x29
 800059e:	f000 fa66 	bl	8000a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80005a2:	2029      	movs	r0, #41	@ 0x29
 80005a4:	f000 fa7f 	bl	8000aa6 <HAL_NVIC_EnableIRQ>


}
 80005a8:	bf00      	nop
 80005aa:	3750      	adds	r7, #80	@ 0x50
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	42470e3c 	.word	0x42470e3c

080005b4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80005be:	4b0f      	ldr	r3, [pc, #60]	@ (80005fc <ITM_SendChar+0x48>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a0e      	ldr	r2, [pc, #56]	@ (80005fc <ITM_SendChar+0x48>)
 80005c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005c8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80005ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000600 <ITM_SendChar+0x4c>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a0c      	ldr	r2, [pc, #48]	@ (8000600 <ITM_SendChar+0x4c>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80005d6:	bf00      	nop
 80005d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d0f8      	beq.n	80005d8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80005e6:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	6013      	str	r3, [r2, #0]
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	e000edfc 	.word	0xe000edfc
 8000600:	e0000e00 	.word	0xe0000e00

08000604 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
 8000614:	e00a      	b.n	800062c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000616:	f3af 8000 	nop.w
 800061a:	4601      	mov	r1, r0
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	1c5a      	adds	r2, r3, #1
 8000620:	60ba      	str	r2, [r7, #8]
 8000622:	b2ca      	uxtb	r2, r1
 8000624:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	3301      	adds	r3, #1
 800062a:	617b      	str	r3, [r7, #20]
 800062c:	697a      	ldr	r2, [r7, #20]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	429a      	cmp	r2, r3
 8000632:	dbf0      	blt.n	8000616 <_read+0x12>
  }

  return len;
 8000634:	687b      	ldr	r3, [r7, #4]
}
 8000636:	4618      	mov	r0, r3
 8000638:	3718      	adds	r7, #24
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b086      	sub	sp, #24
 8000642:	af00      	add	r7, sp, #0
 8000644:	60f8      	str	r0, [r7, #12]
 8000646:	60b9      	str	r1, [r7, #8]
 8000648:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
 800064e:	e009      	b.n	8000664 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	1c5a      	adds	r2, r3, #1
 8000654:	60ba      	str	r2, [r7, #8]
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ffab 	bl	80005b4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	3301      	adds	r3, #1
 8000662:	617b      	str	r3, [r7, #20]
 8000664:	697a      	ldr	r2, [r7, #20]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	429a      	cmp	r2, r3
 800066a:	dbf1      	blt.n	8000650 <_write+0x12>
  }
  return len;
 800066c:	687b      	ldr	r3, [r7, #4]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3718      	adds	r7, #24
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <_close>:

int _close(int file)
{
 8000676:	b480      	push	{r7}
 8000678:	b083      	sub	sp, #12
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800067e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000682:	4618      	mov	r0, r3
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800068e:	b480      	push	{r7}
 8000690:	b083      	sub	sp, #12
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800069e:	605a      	str	r2, [r3, #4]
  return 0;
 80006a0:	2300      	movs	r3, #0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <_isatty>:

int _isatty(int file)
{
 80006ae:	b480      	push	{r7}
 80006b0:	b083      	sub	sp, #12
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006b6:	2301      	movs	r3, #1
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006d0:	2300      	movs	r3, #0
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3714      	adds	r7, #20
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
	...

080006e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006e8:	4a14      	ldr	r2, [pc, #80]	@ (800073c <_sbrk+0x5c>)
 80006ea:	4b15      	ldr	r3, [pc, #84]	@ (8000740 <_sbrk+0x60>)
 80006ec:	1ad3      	subs	r3, r2, r3
 80006ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006f4:	4b13      	ldr	r3, [pc, #76]	@ (8000744 <_sbrk+0x64>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d102      	bne.n	8000702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006fc:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <_sbrk+0x64>)
 80006fe:	4a12      	ldr	r2, [pc, #72]	@ (8000748 <_sbrk+0x68>)
 8000700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000702:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <_sbrk+0x64>)
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4413      	add	r3, r2
 800070a:	693a      	ldr	r2, [r7, #16]
 800070c:	429a      	cmp	r2, r3
 800070e:	d207      	bcs.n	8000720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000710:	f001 fe04 	bl	800231c <__errno>
 8000714:	4603      	mov	r3, r0
 8000716:	220c      	movs	r2, #12
 8000718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800071a:	f04f 33ff 	mov.w	r3, #4294967295
 800071e:	e009      	b.n	8000734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000720:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <_sbrk+0x64>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000726:	4b07      	ldr	r3, [pc, #28]	@ (8000744 <_sbrk+0x64>)
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4413      	add	r3, r2
 800072e:	4a05      	ldr	r2, [pc, #20]	@ (8000744 <_sbrk+0x64>)
 8000730:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000732:	68fb      	ldr	r3, [r7, #12]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3718      	adds	r7, #24
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20020000 	.word	0x20020000
 8000740:	00000400 	.word	0x00000400
 8000744:	200000cc 	.word	0x200000cc
 8000748:	20000220 	.word	0x20000220

0800074c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000750:	4b06      	ldr	r3, [pc, #24]	@ (800076c <SystemInit+0x20>)
 8000752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000756:	4a05      	ldr	r2, [pc, #20]	@ (800076c <SystemInit+0x20>)
 8000758:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800075c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000770:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000774:	f7ff ffea 	bl	800074c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000778:	480c      	ldr	r0, [pc, #48]	@ (80007ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800077a:	490d      	ldr	r1, [pc, #52]	@ (80007b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800077c:	4a0d      	ldr	r2, [pc, #52]	@ (80007b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000780:	e002      	b.n	8000788 <LoopCopyDataInit>

08000782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000786:	3304      	adds	r3, #4

08000788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800078c:	d3f9      	bcc.n	8000782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800078e:	4a0a      	ldr	r2, [pc, #40]	@ (80007b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000790:	4c0a      	ldr	r4, [pc, #40]	@ (80007bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000794:	e001      	b.n	800079a <LoopFillZerobss>

08000796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000798:	3204      	adds	r2, #4

0800079a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800079c:	d3fb      	bcc.n	8000796 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800079e:	f001 fdc3 	bl	8002328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007a2:	f7ff fd87 	bl	80002b4 <main>
  bx  lr    
 80007a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80007a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80007b4:	08002e9c 	.word	0x08002e9c
  ldr r2, =_sbss
 80007b8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80007bc:	20000220 	.word	0x20000220

080007c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007c0:	e7fe      	b.n	80007c0 <ADC_IRQHandler>
	...

080007c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <HAL_Init+0x40>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000804 <HAL_Init+0x40>)
 80007ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <HAL_Init+0x40>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a0a      	ldr	r2, [pc, #40]	@ (8000804 <HAL_Init+0x40>)
 80007da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007e0:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <HAL_Init+0x40>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a07      	ldr	r2, [pc, #28]	@ (8000804 <HAL_Init+0x40>)
 80007e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ec:	2003      	movs	r0, #3
 80007ee:	f000 f933 	bl	8000a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007f2:	200f      	movs	r0, #15
 80007f4:	f000 f810 	bl	8000818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007f8:	f000 f806 	bl	8000808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007fc:	2300      	movs	r3, #0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023c00 	.word	0x40023c00

08000808 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
	...

08000818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <HAL_InitTick+0x54>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <HAL_InitTick+0x58>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	4619      	mov	r1, r3
 800082a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800082e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000832:	fbb2 f3f3 	udiv	r3, r2, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f000 f943 	bl	8000ac2 <HAL_SYSTICK_Config>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
 8000844:	e00e      	b.n	8000864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b0f      	cmp	r3, #15
 800084a:	d80a      	bhi.n	8000862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800084c:	2200      	movs	r2, #0
 800084e:	6879      	ldr	r1, [r7, #4]
 8000850:	f04f 30ff 	mov.w	r0, #4294967295
 8000854:	f000 f90b 	bl	8000a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000858:	4a06      	ldr	r2, [pc, #24]	@ (8000874 <HAL_InitTick+0x5c>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800085e:	2300      	movs	r3, #0
 8000860:	e000      	b.n	8000864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
}
 8000864:	4618      	mov	r0, r3
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000000 	.word	0x20000000
 8000870:	20000008 	.word	0x20000008
 8000874:	20000004 	.word	0x20000004

08000878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <HAL_IncTick+0x20>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	461a      	mov	r2, r3
 8000882:	4b06      	ldr	r3, [pc, #24]	@ (800089c <HAL_IncTick+0x24>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4413      	add	r3, r2
 8000888:	4a04      	ldr	r2, [pc, #16]	@ (800089c <HAL_IncTick+0x24>)
 800088a:	6013      	str	r3, [r2, #0]
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	20000008 	.word	0x20000008
 800089c:	200000d0 	.word	0x200000d0

080008a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  return uwTick;
 80008a4:	4b03      	ldr	r3, [pc, #12]	@ (80008b4 <HAL_GetTick+0x14>)
 80008a6:	681b      	ldr	r3, [r3, #0]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	200000d0 	.word	0x200000d0

080008b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f003 0307 	and.w	r3, r3, #7
 80008c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008c8:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <__NVIC_SetPriorityGrouping+0x44>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ce:	68ba      	ldr	r2, [r7, #8]
 80008d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008d4:	4013      	ands	r3, r2
 80008d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ea:	4a04      	ldr	r2, [pc, #16]	@ (80008fc <__NVIC_SetPriorityGrouping+0x44>)
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	60d3      	str	r3, [r2, #12]
}
 80008f0:	bf00      	nop
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000904:	4b04      	ldr	r3, [pc, #16]	@ (8000918 <__NVIC_GetPriorityGrouping+0x18>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	0a1b      	lsrs	r3, r3, #8
 800090a:	f003 0307 	and.w	r3, r3, #7
}
 800090e:	4618      	mov	r0, r3
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	2b00      	cmp	r3, #0
 800092c:	db0b      	blt.n	8000946 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	f003 021f 	and.w	r2, r3, #31
 8000934:	4907      	ldr	r1, [pc, #28]	@ (8000954 <__NVIC_EnableIRQ+0x38>)
 8000936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093a:	095b      	lsrs	r3, r3, #5
 800093c:	2001      	movs	r0, #1
 800093e:	fa00 f202 	lsl.w	r2, r0, r2
 8000942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000e100 	.word	0xe000e100

08000958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	6039      	str	r1, [r7, #0]
 8000962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000968:	2b00      	cmp	r3, #0
 800096a:	db0a      	blt.n	8000982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	b2da      	uxtb	r2, r3
 8000970:	490c      	ldr	r1, [pc, #48]	@ (80009a4 <__NVIC_SetPriority+0x4c>)
 8000972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000976:	0112      	lsls	r2, r2, #4
 8000978:	b2d2      	uxtb	r2, r2
 800097a:	440b      	add	r3, r1
 800097c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000980:	e00a      	b.n	8000998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	b2da      	uxtb	r2, r3
 8000986:	4908      	ldr	r1, [pc, #32]	@ (80009a8 <__NVIC_SetPriority+0x50>)
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	f003 030f 	and.w	r3, r3, #15
 800098e:	3b04      	subs	r3, #4
 8000990:	0112      	lsls	r2, r2, #4
 8000992:	b2d2      	uxtb	r2, r2
 8000994:	440b      	add	r3, r1
 8000996:	761a      	strb	r2, [r3, #24]
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	e000e100 	.word	0xe000e100
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b089      	sub	sp, #36	@ 0x24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	f1c3 0307 	rsb	r3, r3, #7
 80009c6:	2b04      	cmp	r3, #4
 80009c8:	bf28      	it	cs
 80009ca:	2304      	movcs	r3, #4
 80009cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	3304      	adds	r3, #4
 80009d2:	2b06      	cmp	r3, #6
 80009d4:	d902      	bls.n	80009dc <NVIC_EncodePriority+0x30>
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	3b03      	subs	r3, #3
 80009da:	e000      	b.n	80009de <NVIC_EncodePriority+0x32>
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e0:	f04f 32ff 	mov.w	r2, #4294967295
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	43da      	mvns	r2, r3
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	401a      	ands	r2, r3
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009f4:	f04f 31ff 	mov.w	r1, #4294967295
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	fa01 f303 	lsl.w	r3, r1, r3
 80009fe:	43d9      	mvns	r1, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a04:	4313      	orrs	r3, r2
         );
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3724      	adds	r7, #36	@ 0x24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
	...

08000a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a24:	d301      	bcc.n	8000a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a26:	2301      	movs	r3, #1
 8000a28:	e00f      	b.n	8000a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a54 <SysTick_Config+0x40>)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a32:	210f      	movs	r1, #15
 8000a34:	f04f 30ff 	mov.w	r0, #4294967295
 8000a38:	f7ff ff8e 	bl	8000958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a3c:	4b05      	ldr	r3, [pc, #20]	@ (8000a54 <SysTick_Config+0x40>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a42:	4b04      	ldr	r3, [pc, #16]	@ (8000a54 <SysTick_Config+0x40>)
 8000a44:	2207      	movs	r2, #7
 8000a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	e000e010 	.word	0xe000e010

08000a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f7ff ff29 	bl	80008b8 <__NVIC_SetPriorityGrouping>
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b086      	sub	sp, #24
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	4603      	mov	r3, r0
 8000a76:	60b9      	str	r1, [r7, #8]
 8000a78:	607a      	str	r2, [r7, #4]
 8000a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a80:	f7ff ff3e 	bl	8000900 <__NVIC_GetPriorityGrouping>
 8000a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	68b9      	ldr	r1, [r7, #8]
 8000a8a:	6978      	ldr	r0, [r7, #20]
 8000a8c:	f7ff ff8e 	bl	80009ac <NVIC_EncodePriority>
 8000a90:	4602      	mov	r2, r0
 8000a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a96:	4611      	mov	r1, r2
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff ff5d 	bl	8000958 <__NVIC_SetPriority>
}
 8000a9e:	bf00      	nop
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b082      	sub	sp, #8
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	4603      	mov	r3, r0
 8000aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff ff31 	bl	800091c <__NVIC_EnableIRQ>
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff ffa2 	bl	8000a14 <SysTick_Config>
 8000ad0:	4603      	mov	r3, r0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000ade:	f000 f802 	bl	8000ae6 <HAL_SYSTICK_Callback>
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b089      	sub	sp, #36	@ 0x24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
 8000b0e:	e159      	b.n	8000dc4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b10:	2201      	movs	r2, #1
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	fa02 f303 	lsl.w	r3, r2, r3
 8000b18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	697a      	ldr	r2, [r7, #20]
 8000b20:	4013      	ands	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	f040 8148 	bne.w	8000dbe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f003 0303 	and.w	r3, r3, #3
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d005      	beq.n	8000b46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d130      	bne.n	8000ba8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	2203      	movs	r2, #3
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43db      	mvns	r3, r3
 8000b58:	69ba      	ldr	r2, [r7, #24]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	68da      	ldr	r2, [r3, #12]
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	69ba      	ldr	r2, [r7, #24]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	69ba      	ldr	r2, [r7, #24]
 8000b74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	43db      	mvns	r3, r3
 8000b86:	69ba      	ldr	r2, [r7, #24]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	091b      	lsrs	r3, r3, #4
 8000b92:	f003 0201 	and.w	r2, r3, #1
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	69ba      	ldr	r2, [r7, #24]
 8000ba6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f003 0303 	and.w	r3, r3, #3
 8000bb0:	2b03      	cmp	r3, #3
 8000bb2:	d017      	beq.n	8000be4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	2203      	movs	r2, #3
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	69ba      	ldr	r2, [r7, #24]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	689a      	ldr	r2, [r3, #8]
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	69ba      	ldr	r2, [r7, #24]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f003 0303 	and.w	r3, r3, #3
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d123      	bne.n	8000c38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	08da      	lsrs	r2, r3, #3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3208      	adds	r2, #8
 8000bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	f003 0307 	and.w	r3, r3, #7
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	220f      	movs	r2, #15
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	69ba      	ldr	r2, [r7, #24]
 8000c10:	4013      	ands	r3, r2
 8000c12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	691a      	ldr	r2, [r3, #16]
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	08da      	lsrs	r2, r3, #3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	3208      	adds	r2, #8
 8000c32:	69b9      	ldr	r1, [r7, #24]
 8000c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	2203      	movs	r2, #3
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f003 0203 	and.w	r2, r3, #3
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	f000 80a2 	beq.w	8000dbe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b57      	ldr	r3, [pc, #348]	@ (8000ddc <HAL_GPIO_Init+0x2e8>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c82:	4a56      	ldr	r2, [pc, #344]	@ (8000ddc <HAL_GPIO_Init+0x2e8>)
 8000c84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c8a:	4b54      	ldr	r3, [pc, #336]	@ (8000ddc <HAL_GPIO_Init+0x2e8>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c96:	4a52      	ldr	r2, [pc, #328]	@ (8000de0 <HAL_GPIO_Init+0x2ec>)
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	089b      	lsrs	r3, r3, #2
 8000c9c:	3302      	adds	r3, #2
 8000c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	f003 0303 	and.w	r3, r3, #3
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	220f      	movs	r2, #15
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a49      	ldr	r2, [pc, #292]	@ (8000de4 <HAL_GPIO_Init+0x2f0>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d019      	beq.n	8000cf6 <HAL_GPIO_Init+0x202>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a48      	ldr	r2, [pc, #288]	@ (8000de8 <HAL_GPIO_Init+0x2f4>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d013      	beq.n	8000cf2 <HAL_GPIO_Init+0x1fe>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a47      	ldr	r2, [pc, #284]	@ (8000dec <HAL_GPIO_Init+0x2f8>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d00d      	beq.n	8000cee <HAL_GPIO_Init+0x1fa>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a46      	ldr	r2, [pc, #280]	@ (8000df0 <HAL_GPIO_Init+0x2fc>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d007      	beq.n	8000cea <HAL_GPIO_Init+0x1f6>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a45      	ldr	r2, [pc, #276]	@ (8000df4 <HAL_GPIO_Init+0x300>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d101      	bne.n	8000ce6 <HAL_GPIO_Init+0x1f2>
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	e008      	b.n	8000cf8 <HAL_GPIO_Init+0x204>
 8000ce6:	2307      	movs	r3, #7
 8000ce8:	e006      	b.n	8000cf8 <HAL_GPIO_Init+0x204>
 8000cea:	2303      	movs	r3, #3
 8000cec:	e004      	b.n	8000cf8 <HAL_GPIO_Init+0x204>
 8000cee:	2302      	movs	r3, #2
 8000cf0:	e002      	b.n	8000cf8 <HAL_GPIO_Init+0x204>
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e000      	b.n	8000cf8 <HAL_GPIO_Init+0x204>
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	69fa      	ldr	r2, [r7, #28]
 8000cfa:	f002 0203 	and.w	r2, r2, #3
 8000cfe:	0092      	lsls	r2, r2, #2
 8000d00:	4093      	lsls	r3, r2
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d08:	4935      	ldr	r1, [pc, #212]	@ (8000de0 <HAL_GPIO_Init+0x2ec>)
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	089b      	lsrs	r3, r3, #2
 8000d0e:	3302      	adds	r3, #2
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d16:	4b38      	ldr	r3, [pc, #224]	@ (8000df8 <HAL_GPIO_Init+0x304>)
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4013      	ands	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d003      	beq.n	8000d3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d3a:	4a2f      	ldr	r2, [pc, #188]	@ (8000df8 <HAL_GPIO_Init+0x304>)
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d40:	4b2d      	ldr	r3, [pc, #180]	@ (8000df8 <HAL_GPIO_Init+0x304>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d003      	beq.n	8000d64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d64:	4a24      	ldr	r2, [pc, #144]	@ (8000df8 <HAL_GPIO_Init+0x304>)
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d6a:	4b23      	ldr	r3, [pc, #140]	@ (8000df8 <HAL_GPIO_Init+0x304>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	43db      	mvns	r3, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4013      	ands	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d8e:	4a1a      	ldr	r2, [pc, #104]	@ (8000df8 <HAL_GPIO_Init+0x304>)
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d94:	4b18      	ldr	r3, [pc, #96]	@ (8000df8 <HAL_GPIO_Init+0x304>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4013      	ands	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d003      	beq.n	8000db8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000db8:	4a0f      	ldr	r2, [pc, #60]	@ (8000df8 <HAL_GPIO_Init+0x304>)
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	61fb      	str	r3, [r7, #28]
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	2b0f      	cmp	r3, #15
 8000dc8:	f67f aea2 	bls.w	8000b10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000dcc:	bf00      	nop
 8000dce:	bf00      	nop
 8000dd0:	3724      	adds	r7, #36	@ 0x24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40013800 	.word	0x40013800
 8000de4:	40020000 	.word	0x40020000
 8000de8:	40020400 	.word	0x40020400
 8000dec:	40020800 	.word	0x40020800
 8000df0:	40020c00 	.word	0x40020c00
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40013c00 	.word	0x40013c00

08000dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	807b      	strh	r3, [r7, #2]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e0c:	787b      	ldrb	r3, [r7, #1]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e12:	887a      	ldrh	r2, [r7, #2]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e18:	e003      	b.n	8000e22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e1a:	887b      	ldrh	r3, [r7, #2]
 8000e1c:	041a      	lsls	r2, r3, #16
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	619a      	str	r2, [r3, #24]
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
	...

08000e30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000e3a:	4b08      	ldr	r3, [pc, #32]	@ (8000e5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e3c:	695a      	ldr	r2, [r3, #20]
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	4013      	ands	r3, r2
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d006      	beq.n	8000e54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e46:	4a05      	ldr	r2, [pc, #20]	@ (8000e5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e4c:	88fb      	ldrh	r3, [r7, #6]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fb02 	bl	8000458 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40013c00 	.word	0x40013c00

08000e60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d101      	bne.n	8000e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e267      	b.n	8001342 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d075      	beq.n	8000f6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000e7e:	4b88      	ldr	r3, [pc, #544]	@ (80010a0 <HAL_RCC_OscConfig+0x240>)
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	f003 030c 	and.w	r3, r3, #12
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	d00c      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e8a:	4b85      	ldr	r3, [pc, #532]	@ (80010a0 <HAL_RCC_OscConfig+0x240>)
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000e92:	2b08      	cmp	r3, #8
 8000e94:	d112      	bne.n	8000ebc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e96:	4b82      	ldr	r3, [pc, #520]	@ (80010a0 <HAL_RCC_OscConfig+0x240>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000ea2:	d10b      	bne.n	8000ebc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ea4:	4b7e      	ldr	r3, [pc, #504]	@ (80010a0 <HAL_RCC_OscConfig+0x240>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d05b      	beq.n	8000f68 <HAL_RCC_OscConfig+0x108>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d157      	bne.n	8000f68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e242      	b.n	8001342 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ec4:	d106      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x74>
 8000ec6:	4b76      	ldr	r3, [pc, #472]	@ (80010a0 <HAL_RCC_OscConfig+0x240>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a75      	ldr	r2, [pc, #468]	@ (80010a0 <HAL_RCC_OscConfig+0x240>)
 8000ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ed0:	6013      	str	r3, [r2, #0]
 8000ed2:	e01d      	b.n	8000f10 <HAL_RCC_OscConfig+0xb0>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000edc:	d10c      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x98>
 8000ede:	4b70      	ldr	r3, [pc, #448]	@ (80010a0 <HAL_RCC_OscConfig+0x240>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a6f      	ldr	r2, [pc, #444]	@ (80010a0 <HAL_RCC_OscConfig+0x240>)
 8000ee4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	4b6d      	ldr	r3, [pc, #436]	@ (80010a0 <HAL_RCC_OscConfig+0x240>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a6c      	ldr	r2, [pc, #432]	@ (80010a0 <HAL_RCC_OscConfig+0x240>)
 8000ef0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ef4:	6013      	str	r3, [r2, #0]
 8000ef6:	e00b      	b.n	8000f10 <HAL_RCC_OscConfig+0xb0>
 8000ef8:	4b69      	ldr	r3, [pc, #420]	@ (80010a0 <HAL_RCC_OscConfig+0x240>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a68      	ldr	r2, [pc, #416]	@ (80010a0 <HAL_RCC_OscConfig+0x240>)
 8000efe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	4b66      	ldr	r3, [pc, #408]	@ (80010a0 <HAL_RCC_OscConfig+0x240>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a65      	ldr	r2, [pc, #404]	@ (80010a0 <HAL_RCC_OscConfig+0x240>)
 8000f0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d013      	beq.n	8000f40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f18:	f7ff fcc2 	bl	80008a0 <HAL_GetTick>
 8000f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f1e:	e008      	b.n	8000f32 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f20:	f7ff fcbe 	bl	80008a0 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b64      	cmp	r3, #100	@ 0x64
 8000f2c:	d901      	bls.n	8000f32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e207      	b.n	8001342 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f32:	4b5b      	ldr	r3, [pc, #364]	@ (80010a0 <HAL_RCC_OscConfig+0x240>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d0f0      	beq.n	8000f20 <HAL_RCC_OscConfig+0xc0>
 8000f3e:	e014      	b.n	8000f6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f40:	f7ff fcae 	bl	80008a0 <HAL_GetTick>
 8000f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f46:	e008      	b.n	8000f5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f48:	f7ff fcaa 	bl	80008a0 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	2b64      	cmp	r3, #100	@ 0x64
 8000f54:	d901      	bls.n	8000f5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f56:	2303      	movs	r3, #3
 8000f58:	e1f3      	b.n	8001342 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f5a:	4b51      	ldr	r3, [pc, #324]	@ (80010a0 <HAL_RCC_OscConfig+0x240>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d1f0      	bne.n	8000f48 <HAL_RCC_OscConfig+0xe8>
 8000f66:	e000      	b.n	8000f6a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d063      	beq.n	800103e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000f76:	4b4a      	ldr	r3, [pc, #296]	@ (80010a0 <HAL_RCC_OscConfig+0x240>)
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	f003 030c 	and.w	r3, r3, #12
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00b      	beq.n	8000f9a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f82:	4b47      	ldr	r3, [pc, #284]	@ (80010a0 <HAL_RCC_OscConfig+0x240>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000f8a:	2b08      	cmp	r3, #8
 8000f8c:	d11c      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f8e:	4b44      	ldr	r3, [pc, #272]	@ (80010a0 <HAL_RCC_OscConfig+0x240>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d116      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f9a:	4b41      	ldr	r3, [pc, #260]	@ (80010a0 <HAL_RCC_OscConfig+0x240>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d005      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x152>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d001      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e1c7      	b.n	8001342 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb2:	4b3b      	ldr	r3, [pc, #236]	@ (80010a0 <HAL_RCC_OscConfig+0x240>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	4937      	ldr	r1, [pc, #220]	@ (80010a0 <HAL_RCC_OscConfig+0x240>)
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fc6:	e03a      	b.n	800103e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d020      	beq.n	8001012 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fd0:	4b34      	ldr	r3, [pc, #208]	@ (80010a4 <HAL_RCC_OscConfig+0x244>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd6:	f7ff fc63 	bl	80008a0 <HAL_GetTick>
 8000fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fdc:	e008      	b.n	8000ff0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fde:	f7ff fc5f 	bl	80008a0 <HAL_GetTick>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d901      	bls.n	8000ff0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	e1a8      	b.n	8001342 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ff0:	4b2b      	ldr	r3, [pc, #172]	@ (80010a0 <HAL_RCC_OscConfig+0x240>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d0f0      	beq.n	8000fde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ffc:	4b28      	ldr	r3, [pc, #160]	@ (80010a0 <HAL_RCC_OscConfig+0x240>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	4925      	ldr	r1, [pc, #148]	@ (80010a0 <HAL_RCC_OscConfig+0x240>)
 800100c:	4313      	orrs	r3, r2
 800100e:	600b      	str	r3, [r1, #0]
 8001010:	e015      	b.n	800103e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001012:	4b24      	ldr	r3, [pc, #144]	@ (80010a4 <HAL_RCC_OscConfig+0x244>)
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001018:	f7ff fc42 	bl	80008a0 <HAL_GetTick>
 800101c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800101e:	e008      	b.n	8001032 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001020:	f7ff fc3e 	bl	80008a0 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b02      	cmp	r3, #2
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e187      	b.n	8001342 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001032:	4b1b      	ldr	r3, [pc, #108]	@ (80010a0 <HAL_RCC_OscConfig+0x240>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f0      	bne.n	8001020 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	2b00      	cmp	r3, #0
 8001048:	d036      	beq.n	80010b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d016      	beq.n	8001080 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001052:	4b15      	ldr	r3, [pc, #84]	@ (80010a8 <HAL_RCC_OscConfig+0x248>)
 8001054:	2201      	movs	r2, #1
 8001056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001058:	f7ff fc22 	bl	80008a0 <HAL_GetTick>
 800105c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800105e:	e008      	b.n	8001072 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001060:	f7ff fc1e 	bl	80008a0 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b02      	cmp	r3, #2
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e167      	b.n	8001342 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001072:	4b0b      	ldr	r3, [pc, #44]	@ (80010a0 <HAL_RCC_OscConfig+0x240>)
 8001074:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0f0      	beq.n	8001060 <HAL_RCC_OscConfig+0x200>
 800107e:	e01b      	b.n	80010b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001080:	4b09      	ldr	r3, [pc, #36]	@ (80010a8 <HAL_RCC_OscConfig+0x248>)
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001086:	f7ff fc0b 	bl	80008a0 <HAL_GetTick>
 800108a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800108c:	e00e      	b.n	80010ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800108e:	f7ff fc07 	bl	80008a0 <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d907      	bls.n	80010ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e150      	b.n	8001342 <HAL_RCC_OscConfig+0x4e2>
 80010a0:	40023800 	.word	0x40023800
 80010a4:	42470000 	.word	0x42470000
 80010a8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ac:	4b88      	ldr	r3, [pc, #544]	@ (80012d0 <HAL_RCC_OscConfig+0x470>)
 80010ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1ea      	bne.n	800108e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0304 	and.w	r3, r3, #4
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f000 8097 	beq.w	80011f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010c6:	2300      	movs	r3, #0
 80010c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010ca:	4b81      	ldr	r3, [pc, #516]	@ (80012d0 <HAL_RCC_OscConfig+0x470>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10f      	bne.n	80010f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	4b7d      	ldr	r3, [pc, #500]	@ (80012d0 <HAL_RCC_OscConfig+0x470>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010de:	4a7c      	ldr	r2, [pc, #496]	@ (80012d0 <HAL_RCC_OscConfig+0x470>)
 80010e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e6:	4b7a      	ldr	r3, [pc, #488]	@ (80012d0 <HAL_RCC_OscConfig+0x470>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010f2:	2301      	movs	r3, #1
 80010f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f6:	4b77      	ldr	r3, [pc, #476]	@ (80012d4 <HAL_RCC_OscConfig+0x474>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d118      	bne.n	8001134 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001102:	4b74      	ldr	r3, [pc, #464]	@ (80012d4 <HAL_RCC_OscConfig+0x474>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a73      	ldr	r2, [pc, #460]	@ (80012d4 <HAL_RCC_OscConfig+0x474>)
 8001108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800110c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800110e:	f7ff fbc7 	bl	80008a0 <HAL_GetTick>
 8001112:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001114:	e008      	b.n	8001128 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001116:	f7ff fbc3 	bl	80008a0 <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	2b02      	cmp	r3, #2
 8001122:	d901      	bls.n	8001128 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e10c      	b.n	8001342 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001128:	4b6a      	ldr	r3, [pc, #424]	@ (80012d4 <HAL_RCC_OscConfig+0x474>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0f0      	beq.n	8001116 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d106      	bne.n	800114a <HAL_RCC_OscConfig+0x2ea>
 800113c:	4b64      	ldr	r3, [pc, #400]	@ (80012d0 <HAL_RCC_OscConfig+0x470>)
 800113e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001140:	4a63      	ldr	r2, [pc, #396]	@ (80012d0 <HAL_RCC_OscConfig+0x470>)
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	6713      	str	r3, [r2, #112]	@ 0x70
 8001148:	e01c      	b.n	8001184 <HAL_RCC_OscConfig+0x324>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	2b05      	cmp	r3, #5
 8001150:	d10c      	bne.n	800116c <HAL_RCC_OscConfig+0x30c>
 8001152:	4b5f      	ldr	r3, [pc, #380]	@ (80012d0 <HAL_RCC_OscConfig+0x470>)
 8001154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001156:	4a5e      	ldr	r2, [pc, #376]	@ (80012d0 <HAL_RCC_OscConfig+0x470>)
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	6713      	str	r3, [r2, #112]	@ 0x70
 800115e:	4b5c      	ldr	r3, [pc, #368]	@ (80012d0 <HAL_RCC_OscConfig+0x470>)
 8001160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001162:	4a5b      	ldr	r2, [pc, #364]	@ (80012d0 <HAL_RCC_OscConfig+0x470>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6713      	str	r3, [r2, #112]	@ 0x70
 800116a:	e00b      	b.n	8001184 <HAL_RCC_OscConfig+0x324>
 800116c:	4b58      	ldr	r3, [pc, #352]	@ (80012d0 <HAL_RCC_OscConfig+0x470>)
 800116e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001170:	4a57      	ldr	r2, [pc, #348]	@ (80012d0 <HAL_RCC_OscConfig+0x470>)
 8001172:	f023 0301 	bic.w	r3, r3, #1
 8001176:	6713      	str	r3, [r2, #112]	@ 0x70
 8001178:	4b55      	ldr	r3, [pc, #340]	@ (80012d0 <HAL_RCC_OscConfig+0x470>)
 800117a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800117c:	4a54      	ldr	r2, [pc, #336]	@ (80012d0 <HAL_RCC_OscConfig+0x470>)
 800117e:	f023 0304 	bic.w	r3, r3, #4
 8001182:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d015      	beq.n	80011b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800118c:	f7ff fb88 	bl	80008a0 <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001192:	e00a      	b.n	80011aa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001194:	f7ff fb84 	bl	80008a0 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e0cb      	b.n	8001342 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011aa:	4b49      	ldr	r3, [pc, #292]	@ (80012d0 <HAL_RCC_OscConfig+0x470>)
 80011ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0ee      	beq.n	8001194 <HAL_RCC_OscConfig+0x334>
 80011b6:	e014      	b.n	80011e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b8:	f7ff fb72 	bl	80008a0 <HAL_GetTick>
 80011bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011be:	e00a      	b.n	80011d6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011c0:	f7ff fb6e 	bl	80008a0 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e0b5      	b.n	8001342 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011d6:	4b3e      	ldr	r3, [pc, #248]	@ (80012d0 <HAL_RCC_OscConfig+0x470>)
 80011d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1ee      	bne.n	80011c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80011e2:	7dfb      	ldrb	r3, [r7, #23]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d105      	bne.n	80011f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011e8:	4b39      	ldr	r3, [pc, #228]	@ (80012d0 <HAL_RCC_OscConfig+0x470>)
 80011ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ec:	4a38      	ldr	r2, [pc, #224]	@ (80012d0 <HAL_RCC_OscConfig+0x470>)
 80011ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f000 80a1 	beq.w	8001340 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80011fe:	4b34      	ldr	r3, [pc, #208]	@ (80012d0 <HAL_RCC_OscConfig+0x470>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 030c 	and.w	r3, r3, #12
 8001206:	2b08      	cmp	r3, #8
 8001208:	d05c      	beq.n	80012c4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	2b02      	cmp	r3, #2
 8001210:	d141      	bne.n	8001296 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001212:	4b31      	ldr	r3, [pc, #196]	@ (80012d8 <HAL_RCC_OscConfig+0x478>)
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001218:	f7ff fb42 	bl	80008a0 <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001220:	f7ff fb3e 	bl	80008a0 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e087      	b.n	8001342 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001232:	4b27      	ldr	r3, [pc, #156]	@ (80012d0 <HAL_RCC_OscConfig+0x470>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1f0      	bne.n	8001220 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69da      	ldr	r2, [r3, #28]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a1b      	ldr	r3, [r3, #32]
 8001246:	431a      	orrs	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800124c:	019b      	lsls	r3, r3, #6
 800124e:	431a      	orrs	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001254:	085b      	lsrs	r3, r3, #1
 8001256:	3b01      	subs	r3, #1
 8001258:	041b      	lsls	r3, r3, #16
 800125a:	431a      	orrs	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001260:	061b      	lsls	r3, r3, #24
 8001262:	491b      	ldr	r1, [pc, #108]	@ (80012d0 <HAL_RCC_OscConfig+0x470>)
 8001264:	4313      	orrs	r3, r2
 8001266:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001268:	4b1b      	ldr	r3, [pc, #108]	@ (80012d8 <HAL_RCC_OscConfig+0x478>)
 800126a:	2201      	movs	r2, #1
 800126c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126e:	f7ff fb17 	bl	80008a0 <HAL_GetTick>
 8001272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001274:	e008      	b.n	8001288 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001276:	f7ff fb13 	bl	80008a0 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	2b02      	cmp	r3, #2
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e05c      	b.n	8001342 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001288:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <HAL_RCC_OscConfig+0x470>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0f0      	beq.n	8001276 <HAL_RCC_OscConfig+0x416>
 8001294:	e054      	b.n	8001340 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001296:	4b10      	ldr	r3, [pc, #64]	@ (80012d8 <HAL_RCC_OscConfig+0x478>)
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129c:	f7ff fb00 	bl	80008a0 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a4:	f7ff fafc 	bl	80008a0 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e045      	b.n	8001342 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012b6:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <HAL_RCC_OscConfig+0x470>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f0      	bne.n	80012a4 <HAL_RCC_OscConfig+0x444>
 80012c2:	e03d      	b.n	8001340 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d107      	bne.n	80012dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e038      	b.n	8001342 <HAL_RCC_OscConfig+0x4e2>
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40007000 	.word	0x40007000
 80012d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80012dc:	4b1b      	ldr	r3, [pc, #108]	@ (800134c <HAL_RCC_OscConfig+0x4ec>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d028      	beq.n	800133c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d121      	bne.n	800133c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001302:	429a      	cmp	r2, r3
 8001304:	d11a      	bne.n	800133c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800130c:	4013      	ands	r3, r2
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001312:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001314:	4293      	cmp	r3, r2
 8001316:	d111      	bne.n	800133c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001322:	085b      	lsrs	r3, r3, #1
 8001324:	3b01      	subs	r3, #1
 8001326:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001328:	429a      	cmp	r2, r3
 800132a:	d107      	bne.n	800133c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001336:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001338:	429a      	cmp	r2, r3
 800133a:	d001      	beq.n	8001340 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e000      	b.n	8001342 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800

08001350 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800135c:	2300      	movs	r3, #0
 800135e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b00      	cmp	r3, #0
 800136a:	d105      	bne.n	8001378 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001374:	2b00      	cmp	r3, #0
 8001376:	d038      	beq.n	80013ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001378:	4b68      	ldr	r3, [pc, #416]	@ (800151c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800137e:	f7ff fa8f 	bl	80008a0 <HAL_GetTick>
 8001382:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001384:	e008      	b.n	8001398 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001386:	f7ff fa8b 	bl	80008a0 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e0bd      	b.n	8001514 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001398:	4b61      	ldr	r3, [pc, #388]	@ (8001520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1f0      	bne.n	8001386 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	019b      	lsls	r3, r3, #6
 80013ae:	431a      	orrs	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	071b      	lsls	r3, r3, #28
 80013b6:	495a      	ldr	r1, [pc, #360]	@ (8001520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80013be:	4b57      	ldr	r3, [pc, #348]	@ (800151c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80013c4:	f7ff fa6c 	bl	80008a0 <HAL_GetTick>
 80013c8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80013cc:	f7ff fa68 	bl	80008a0 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e09a      	b.n	8001514 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80013de:	4b50      	ldr	r3, [pc, #320]	@ (8001520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0f0      	beq.n	80013cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 8083 	beq.w	80014fe <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	4b48      	ldr	r3, [pc, #288]	@ (8001520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001400:	4a47      	ldr	r2, [pc, #284]	@ (8001520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001402:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001406:	6413      	str	r3, [r2, #64]	@ 0x40
 8001408:	4b45      	ldr	r3, [pc, #276]	@ (8001520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800140a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001414:	4b43      	ldr	r3, [pc, #268]	@ (8001524 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a42      	ldr	r2, [pc, #264]	@ (8001524 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800141a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800141e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001420:	f7ff fa3e 	bl	80008a0 <HAL_GetTick>
 8001424:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001426:	e008      	b.n	800143a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001428:	f7ff fa3a 	bl	80008a0 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e06c      	b.n	8001514 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800143a:	4b3a      	ldr	r3, [pc, #232]	@ (8001524 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f0      	beq.n	8001428 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001446:	4b36      	ldr	r3, [pc, #216]	@ (8001520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800144a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800144e:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d02f      	beq.n	80014b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	429a      	cmp	r2, r3
 8001462:	d028      	beq.n	80014b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001464:	4b2e      	ldr	r3, [pc, #184]	@ (8001520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001468:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800146c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800146e:	4b2e      	ldr	r3, [pc, #184]	@ (8001528 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001470:	2201      	movs	r2, #1
 8001472:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001474:	4b2c      	ldr	r3, [pc, #176]	@ (8001528 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800147a:	4a29      	ldr	r2, [pc, #164]	@ (8001520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001480:	4b27      	ldr	r3, [pc, #156]	@ (8001520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	2b01      	cmp	r3, #1
 800148a:	d114      	bne.n	80014b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800148c:	f7ff fa08 	bl	80008a0 <HAL_GetTick>
 8001490:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001492:	e00a      	b.n	80014aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001494:	f7ff fa04 	bl	80008a0 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d901      	bls.n	80014aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e034      	b.n	8001514 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0ee      	beq.n	8001494 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80014be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80014c2:	d10d      	bne.n	80014e0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80014c4:	4b16      	ldr	r3, [pc, #88]	@ (8001520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80014d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80014d8:	4911      	ldr	r1, [pc, #68]	@ (8001520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	608b      	str	r3, [r1, #8]
 80014de:	e005      	b.n	80014ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80014e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014e6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80014ea:	6093      	str	r3, [r2, #8]
 80014ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014f8:	4909      	ldr	r1, [pc, #36]	@ (8001520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0308 	and.w	r3, r3, #8
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	7d1a      	ldrb	r2, [r3, #20]
 800150e:	4b07      	ldr	r3, [pc, #28]	@ (800152c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001510:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	42470068 	.word	0x42470068
 8001520:	40023800 	.word	0x40023800
 8001524:	40007000 	.word	0x40007000
 8001528:	42470e40 	.word	0x42470e40
 800152c:	424711e0 	.word	0x424711e0

08001530 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e073      	b.n	800162a <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	7f5b      	ldrb	r3, [r3, #29]
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d105      	bne.n	8001558 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff f804 	bl	8000560 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2202      	movs	r2, #2
 800155c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	f003 0310 	and.w	r3, r3, #16
 8001568:	2b10      	cmp	r3, #16
 800156a:	d055      	beq.n	8001618 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	22ca      	movs	r2, #202	@ 0xca
 8001572:	625a      	str	r2, [r3, #36]	@ 0x24
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2253      	movs	r2, #83	@ 0x53
 800157a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 fbd3 	bl	8001d28 <RTC_EnterInitMode>
 8001582:	4603      	mov	r3, r0
 8001584:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d12c      	bne.n	80015e6 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	6812      	ldr	r2, [r2, #0]
 8001596:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800159a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800159e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6899      	ldr	r1, [r3, #8]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	431a      	orrs	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	431a      	orrs	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	68d2      	ldr	r2, [r2, #12]
 80015c6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6919      	ldr	r1, [r3, #16]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	041a      	lsls	r2, r3, #16
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	430a      	orrs	r2, r1
 80015da:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 fbda 	bl	8001d96 <RTC_ExitInitMode>
 80015e2:	4603      	mov	r3, r0
 80015e4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d110      	bne.n	800160e <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80015fa:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	699a      	ldr	r2, [r3, #24]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	430a      	orrs	r2, r1
 800160c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	22ff      	movs	r2, #255	@ 0xff
 8001614:	625a      	str	r2, [r3, #36]	@ 0x24
 8001616:	e001      	b.n	800161c <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8001618:	2300      	movs	r3, #0
 800161a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d102      	bne.n	8001628 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2201      	movs	r2, #1
 8001626:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8001628:	7bfb      	ldrb	r3, [r7, #15]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001632:	b590      	push	{r4, r7, lr}
 8001634:	b087      	sub	sp, #28
 8001636:	af00      	add	r7, sp, #0
 8001638:	60f8      	str	r0, [r7, #12]
 800163a:	60b9      	str	r1, [r7, #8]
 800163c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	7f1b      	ldrb	r3, [r3, #28]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d101      	bne.n	800164e <HAL_RTC_SetTime+0x1c>
 800164a:	2302      	movs	r3, #2
 800164c:	e087      	b.n	800175e <HAL_RTC_SetTime+0x12c>
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2201      	movs	r2, #1
 8001652:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2202      	movs	r2, #2
 8001658:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d126      	bne.n	80016ae <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800166a:	2b00      	cmp	r3, #0
 800166c:	d102      	bne.n	8001674 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	2200      	movs	r2, #0
 8001672:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f000 fbb1 	bl	8001de0 <RTC_ByteToBcd2>
 800167e:	4603      	mov	r3, r0
 8001680:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	785b      	ldrb	r3, [r3, #1]
 8001686:	4618      	mov	r0, r3
 8001688:	f000 fbaa 	bl	8001de0 <RTC_ByteToBcd2>
 800168c:	4603      	mov	r3, r0
 800168e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001690:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	789b      	ldrb	r3, [r3, #2]
 8001696:	4618      	mov	r0, r3
 8001698:	f000 fba2 	bl	8001de0 <RTC_ByteToBcd2>
 800169c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800169e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	78db      	ldrb	r3, [r3, #3]
 80016a6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80016a8:	4313      	orrs	r3, r2
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	e018      	b.n	80016e0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d102      	bne.n	80016c2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	2200      	movs	r2, #0
 80016c0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	785b      	ldrb	r3, [r3, #1]
 80016cc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80016ce:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80016d0:	68ba      	ldr	r2, [r7, #8]
 80016d2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80016d4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	78db      	ldrb	r3, [r3, #3]
 80016da:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80016dc:	4313      	orrs	r3, r2
 80016de:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	22ca      	movs	r2, #202	@ 0xca
 80016e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2253      	movs	r2, #83	@ 0x53
 80016ee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80016f0:	68f8      	ldr	r0, [r7, #12]
 80016f2:	f000 fb19 	bl	8001d28 <RTC_EnterInitMode>
 80016f6:	4603      	mov	r3, r0
 80016f8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80016fa:	7cfb      	ldrb	r3, [r7, #19]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d120      	bne.n	8001742 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800170a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800170e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800171e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6899      	ldr	r1, [r3, #8]
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	68da      	ldr	r2, [r3, #12]
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	431a      	orrs	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	430a      	orrs	r2, r1
 8001736:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f000 fb2c 	bl	8001d96 <RTC_ExitInitMode>
 800173e:	4603      	mov	r3, r0
 8001740:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8001742:	7cfb      	ldrb	r3, [r7, #19]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d102      	bne.n	800174e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2201      	movs	r2, #1
 800174c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	22ff      	movs	r2, #255	@ 0xff
 8001754:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2200      	movs	r2, #0
 800175a:	771a      	strb	r2, [r3, #28]

  return status;
 800175c:	7cfb      	ldrb	r3, [r7, #19]
}
 800175e:	4618      	mov	r0, r3
 8001760:	371c      	adds	r7, #28
 8001762:	46bd      	mov	sp, r7
 8001764:	bd90      	pop	{r4, r7, pc}

08001766 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b086      	sub	sp, #24
 800176a:	af00      	add	r7, sp, #0
 800176c:	60f8      	str	r0, [r7, #12]
 800176e:	60b9      	str	r1, [r7, #8]
 8001770:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8001798:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800179c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	0c1b      	lsrs	r3, r3, #16
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	0d9b      	lsrs	r3, r3, #22
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d11a      	bne.n	8001818 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 fb18 	bl	8001e1c <RTC_Bcd2ToByte>
 80017ec:	4603      	mov	r3, r0
 80017ee:	461a      	mov	r2, r3
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	785b      	ldrb	r3, [r3, #1]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f000 fb0f 	bl	8001e1c <RTC_Bcd2ToByte>
 80017fe:	4603      	mov	r3, r0
 8001800:	461a      	mov	r2, r3
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	789b      	ldrb	r3, [r3, #2]
 800180a:	4618      	mov	r0, r3
 800180c:	f000 fb06 	bl	8001e1c <RTC_Bcd2ToByte>
 8001810:	4603      	mov	r3, r0
 8001812:	461a      	mov	r2, r3
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001822:	b590      	push	{r4, r7, lr}
 8001824:	b087      	sub	sp, #28
 8001826:	af00      	add	r7, sp, #0
 8001828:	60f8      	str	r0, [r7, #12]
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	7f1b      	ldrb	r3, [r3, #28]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d101      	bne.n	800183e <HAL_RTC_SetDate+0x1c>
 800183a:	2302      	movs	r3, #2
 800183c:	e071      	b.n	8001922 <HAL_RTC_SetDate+0x100>
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2201      	movs	r2, #1
 8001842:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2202      	movs	r2, #2
 8001848:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d10e      	bne.n	800186e <HAL_RTC_SetDate+0x4c>
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	785b      	ldrb	r3, [r3, #1]
 8001854:	f003 0310 	and.w	r3, r3, #16
 8001858:	2b00      	cmp	r3, #0
 800185a:	d008      	beq.n	800186e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	785b      	ldrb	r3, [r3, #1]
 8001860:	f023 0310 	bic.w	r3, r3, #16
 8001864:	b2db      	uxtb	r3, r3
 8001866:	330a      	adds	r3, #10
 8001868:	b2da      	uxtb	r2, r3
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d11c      	bne.n	80018ae <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	78db      	ldrb	r3, [r3, #3]
 8001878:	4618      	mov	r0, r3
 800187a:	f000 fab1 	bl	8001de0 <RTC_ByteToBcd2>
 800187e:	4603      	mov	r3, r0
 8001880:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	785b      	ldrb	r3, [r3, #1]
 8001886:	4618      	mov	r0, r3
 8001888:	f000 faaa 	bl	8001de0 <RTC_ByteToBcd2>
 800188c:	4603      	mov	r3, r0
 800188e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001890:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	789b      	ldrb	r3, [r3, #2]
 8001896:	4618      	mov	r0, r3
 8001898:	f000 faa2 	bl	8001de0 <RTC_ByteToBcd2>
 800189c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800189e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80018a8:	4313      	orrs	r3, r2
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	e00e      	b.n	80018cc <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	78db      	ldrb	r3, [r3, #3]
 80018b2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	785b      	ldrb	r3, [r3, #1]
 80018b8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80018ba:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80018bc:	68ba      	ldr	r2, [r7, #8]
 80018be:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80018c0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80018c8:	4313      	orrs	r3, r2
 80018ca:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	22ca      	movs	r2, #202	@ 0xca
 80018d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2253      	movs	r2, #83	@ 0x53
 80018da:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f000 fa23 	bl	8001d28 <RTC_EnterInitMode>
 80018e2:	4603      	mov	r3, r0
 80018e4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80018e6:	7cfb      	ldrb	r3, [r7, #19]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d10c      	bne.n	8001906 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80018f6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80018fa:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f000 fa4a 	bl	8001d96 <RTC_ExitInitMode>
 8001902:	4603      	mov	r3, r0
 8001904:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8001906:	7cfb      	ldrb	r3, [r7, #19]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d102      	bne.n	8001912 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2201      	movs	r2, #1
 8001910:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	22ff      	movs	r2, #255	@ 0xff
 8001918:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2200      	movs	r2, #0
 800191e:	771a      	strb	r2, [r3, #28]

  return status;
 8001920:	7cfb      	ldrb	r3, [r7, #19]
}
 8001922:	4618      	mov	r0, r3
 8001924:	371c      	adds	r7, #28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd90      	pop	{r4, r7, pc}

0800192a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b086      	sub	sp, #24
 800192e:	af00      	add	r7, sp, #0
 8001930:	60f8      	str	r0, [r7, #12]
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001944:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001948:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	0c1b      	lsrs	r3, r3, #16
 800194e:	b2da      	uxtb	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	0a1b      	lsrs	r3, r3, #8
 8001958:	b2db      	uxtb	r3, r3
 800195a:	f003 031f 	and.w	r3, r3, #31
 800195e:	b2da      	uxtb	r2, r3
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	b2db      	uxtb	r3, r3
 8001968:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800196c:	b2da      	uxtb	r2, r3
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	0b5b      	lsrs	r3, r3, #13
 8001976:	b2db      	uxtb	r3, r3
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	b2da      	uxtb	r2, r3
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d11a      	bne.n	80019be <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	78db      	ldrb	r3, [r3, #3]
 800198c:	4618      	mov	r0, r3
 800198e:	f000 fa45 	bl	8001e1c <RTC_Bcd2ToByte>
 8001992:	4603      	mov	r3, r0
 8001994:	461a      	mov	r2, r3
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	785b      	ldrb	r3, [r3, #1]
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 fa3c 	bl	8001e1c <RTC_Bcd2ToByte>
 80019a4:	4603      	mov	r3, r0
 80019a6:	461a      	mov	r2, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	789b      	ldrb	r3, [r3, #2]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 fa33 	bl	8001e1c <RTC_Bcd2ToByte>
 80019b6:	4603      	mov	r3, r0
 80019b8:	461a      	mov	r2, r3
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b089      	sub	sp, #36	@ 0x24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80019d4:	4b9b      	ldr	r3, [pc, #620]	@ (8001c44 <HAL_RTC_SetAlarm_IT+0x27c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a9b      	ldr	r2, [pc, #620]	@ (8001c48 <HAL_RTC_SetAlarm_IT+0x280>)
 80019da:	fba2 2303 	umull	r2, r3, r2, r3
 80019de:	0adb      	lsrs	r3, r3, #11
 80019e0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019e4:	fb02 f303 	mul.w	r3, r2, r3
 80019e8:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	7f1b      	ldrb	r3, [r3, #28]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d101      	bne.n	80019fe <HAL_RTC_SetAlarm_IT+0x36>
 80019fa:	2302      	movs	r3, #2
 80019fc:	e11e      	b.n	8001c3c <HAL_RTC_SetAlarm_IT+0x274>
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2201      	movs	r2, #1
 8001a02:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2202      	movs	r2, #2
 8001a08:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d137      	bne.n	8001a80 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d102      	bne.n	8001a24 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	2200      	movs	r2, #0
 8001a22:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f000 f9d9 	bl	8001de0 <RTC_ByteToBcd2>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	785b      	ldrb	r3, [r3, #1]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 f9d2 	bl	8001de0 <RTC_ByteToBcd2>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8001a40:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	789b      	ldrb	r3, [r3, #2]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 f9ca 	bl	8001de0 <RTC_ByteToBcd2>
 8001a4c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8001a4e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	78db      	ldrb	r3, [r3, #3]
 8001a56:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8001a58:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 f9bc 	bl	8001de0 <RTC_ByteToBcd2>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8001a6c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8001a74:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61fb      	str	r3, [r7, #28]
 8001a7e:	e023      	b.n	8001ac8 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d102      	bne.n	8001a94 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	2200      	movs	r2, #0
 8001a92:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	785b      	ldrb	r3, [r3, #1]
 8001a9e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8001aa0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8001aa2:	68ba      	ldr	r2, [r7, #8]
 8001aa4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8001aa6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	78db      	ldrb	r3, [r3, #3]
 8001aac:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8001aae:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ab6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8001ab8:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8001abe:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	22ca      	movs	r2, #202	@ 0xca
 8001ada:	625a      	str	r2, [r3, #36]	@ 0x24
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2253      	movs	r2, #83	@ 0x53
 8001ae2:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001aec:	d142      	bne.n	8001b74 <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001afc:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8001b0e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d10b      	bne.n	8001b34 <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	22ff      	movs	r2, #255	@ 0xff
 8001b22:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2203      	movs	r2, #3
 8001b28:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e083      	b.n	8001c3c <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0e6      	beq.n	8001b10 <HAL_RTC_SetAlarm_IT+0x148>

  /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	69fa      	ldr	r2, [r7, #28]
 8001b48:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b60:	609a      	str	r2, [r3, #8]
    /* Enable Alarm A interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	e04c      	b.n	8001c0e <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001b82:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8001b94:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8001b96:	4b2b      	ldr	r3, [pc, #172]	@ (8001c44 <HAL_RTC_SetAlarm_IT+0x27c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a2b      	ldr	r2, [pc, #172]	@ (8001c48 <HAL_RTC_SetAlarm_IT+0x280>)
 8001b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba0:	0adb      	lsrs	r3, r3, #11
 8001ba2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ba6:	fb02 f303 	mul.w	r3, r2, r3
 8001baa:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10b      	bne.n	8001bd0 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	22ff      	movs	r2, #255	@ 0xff
 8001bbe:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e035      	b.n	8001c3c <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0e6      	beq.n	8001bac <HAL_RTC_SetAlarm_IT+0x1e4>

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	69fa      	ldr	r2, [r7, #28]
 8001be4:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bfc:	609a      	str	r2, [r3, #8]
    /* Enable Alarm B interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001c0c:	609a      	str	r2, [r3, #8]
  }

  /* Enable and configure the EXTI line associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8001c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c4c <HAL_RTC_SetAlarm_IT+0x284>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a0e      	ldr	r2, [pc, #56]	@ (8001c4c <HAL_RTC_SetAlarm_IT+0x284>)
 8001c14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c18:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8001c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c4c <HAL_RTC_SetAlarm_IT+0x284>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	4a0b      	ldr	r2, [pc, #44]	@ (8001c4c <HAL_RTC_SetAlarm_IT+0x284>)
 8001c20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c24:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	22ff      	movs	r2, #255	@ 0xff
 8001c2c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2201      	movs	r2, #1
 8001c32:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3724      	adds	r7, #36	@ 0x24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd90      	pop	{r4, r7, pc}
 8001c44:	20000000 	.word	0x20000000
 8001c48:	10624dd3 	.word	0x10624dd3
 8001c4c:	40013c00 	.word	0x40013c00

08001c50 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8001c58:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd8 <HAL_RTC_AlarmIRQHandler+0x88>)
 8001c5a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c5e:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d012      	beq.n	8001c94 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00b      	beq.n	8001c94 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8001c8c:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7fe fc4c 	bl	800052c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d012      	beq.n	8001cc8 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00b      	beq.n	8001cc8 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8001cc0:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f8c8 	bl	8001e58 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	775a      	strb	r2, [r3, #29]
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40013c00 	.word	0x40013c00

08001cdc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a0d      	ldr	r2, [pc, #52]	@ (8001d24 <HAL_RTC_WaitForSynchro+0x48>)
 8001cee:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cf0:	f7fe fdd6 	bl	80008a0 <HAL_GetTick>
 8001cf4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001cf6:	e009      	b.n	8001d0c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001cf8:	f7fe fdd2 	bl	80008a0 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d06:	d901      	bls.n	8001d0c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e007      	b.n	8001d1c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f003 0320 	and.w	r3, r3, #32
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0ee      	beq.n	8001cf8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	00013f5f 	.word	0x00013f5f

08001d28 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d122      	bne.n	8001d8c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68da      	ldr	r2, [r3, #12]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d54:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d56:	f7fe fda3 	bl	80008a0 <HAL_GetTick>
 8001d5a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8001d5c:	e00c      	b.n	8001d78 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001d5e:	f7fe fd9f 	bl	80008a0 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d6c:	d904      	bls.n	8001d78 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2204      	movs	r2, #4
 8001d72:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d102      	bne.n	8001d8c <RTC_EnterInitMode+0x64>
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d1e8      	bne.n	8001d5e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b084      	sub	sp, #16
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001db0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 0320 	and.w	r3, r3, #32
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d10a      	bne.n	8001dd6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff ff8b 	bl	8001cdc <HAL_RTC_WaitForSynchro>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d004      	beq.n	8001dd6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2204      	movs	r2, #4
 8001dd0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8001dee:	e005      	b.n	8001dfc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	3301      	adds	r3, #1
 8001df4:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	3b0a      	subs	r3, #10
 8001dfa:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	2b09      	cmp	r3, #9
 8001e00:	d8f6      	bhi.n	8001df0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	011b      	lsls	r3, r3, #4
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	b2db      	uxtb	r3, r3
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	091b      	lsrs	r3, r3, #4
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	461a      	mov	r2, r3
 8001e32:	4613      	mov	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	4413      	add	r3, r2
 8001e4a:	b2db      	uxtb	r3, r3
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <std>:
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	b510      	push	{r4, lr}
 8001e70:	4604      	mov	r4, r0
 8001e72:	e9c0 3300 	strd	r3, r3, [r0]
 8001e76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001e7a:	6083      	str	r3, [r0, #8]
 8001e7c:	8181      	strh	r1, [r0, #12]
 8001e7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8001e80:	81c2      	strh	r2, [r0, #14]
 8001e82:	6183      	str	r3, [r0, #24]
 8001e84:	4619      	mov	r1, r3
 8001e86:	2208      	movs	r2, #8
 8001e88:	305c      	adds	r0, #92	@ 0x5c
 8001e8a:	f000 f9f9 	bl	8002280 <memset>
 8001e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec4 <std+0x58>)
 8001e90:	6263      	str	r3, [r4, #36]	@ 0x24
 8001e92:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec8 <std+0x5c>)
 8001e94:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001e96:	4b0d      	ldr	r3, [pc, #52]	@ (8001ecc <std+0x60>)
 8001e98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed0 <std+0x64>)
 8001e9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8001e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed4 <std+0x68>)
 8001ea0:	6224      	str	r4, [r4, #32]
 8001ea2:	429c      	cmp	r4, r3
 8001ea4:	d006      	beq.n	8001eb4 <std+0x48>
 8001ea6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001eaa:	4294      	cmp	r4, r2
 8001eac:	d002      	beq.n	8001eb4 <std+0x48>
 8001eae:	33d0      	adds	r3, #208	@ 0xd0
 8001eb0:	429c      	cmp	r4, r3
 8001eb2:	d105      	bne.n	8001ec0 <std+0x54>
 8001eb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ebc:	f000 ba58 	b.w	8002370 <__retarget_lock_init_recursive>
 8001ec0:	bd10      	pop	{r4, pc}
 8001ec2:	bf00      	nop
 8001ec4:	080020d1 	.word	0x080020d1
 8001ec8:	080020f3 	.word	0x080020f3
 8001ecc:	0800212b 	.word	0x0800212b
 8001ed0:	0800214f 	.word	0x0800214f
 8001ed4:	200000d4 	.word	0x200000d4

08001ed8 <stdio_exit_handler>:
 8001ed8:	4a02      	ldr	r2, [pc, #8]	@ (8001ee4 <stdio_exit_handler+0xc>)
 8001eda:	4903      	ldr	r1, [pc, #12]	@ (8001ee8 <stdio_exit_handler+0x10>)
 8001edc:	4803      	ldr	r0, [pc, #12]	@ (8001eec <stdio_exit_handler+0x14>)
 8001ede:	f000 b869 	b.w	8001fb4 <_fwalk_sglue>
 8001ee2:	bf00      	nop
 8001ee4:	2000000c 	.word	0x2000000c
 8001ee8:	08002c0d 	.word	0x08002c0d
 8001eec:	2000001c 	.word	0x2000001c

08001ef0 <cleanup_stdio>:
 8001ef0:	6841      	ldr	r1, [r0, #4]
 8001ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8001f24 <cleanup_stdio+0x34>)
 8001ef4:	4299      	cmp	r1, r3
 8001ef6:	b510      	push	{r4, lr}
 8001ef8:	4604      	mov	r4, r0
 8001efa:	d001      	beq.n	8001f00 <cleanup_stdio+0x10>
 8001efc:	f000 fe86 	bl	8002c0c <_fflush_r>
 8001f00:	68a1      	ldr	r1, [r4, #8]
 8001f02:	4b09      	ldr	r3, [pc, #36]	@ (8001f28 <cleanup_stdio+0x38>)
 8001f04:	4299      	cmp	r1, r3
 8001f06:	d002      	beq.n	8001f0e <cleanup_stdio+0x1e>
 8001f08:	4620      	mov	r0, r4
 8001f0a:	f000 fe7f 	bl	8002c0c <_fflush_r>
 8001f0e:	68e1      	ldr	r1, [r4, #12]
 8001f10:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <cleanup_stdio+0x3c>)
 8001f12:	4299      	cmp	r1, r3
 8001f14:	d004      	beq.n	8001f20 <cleanup_stdio+0x30>
 8001f16:	4620      	mov	r0, r4
 8001f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f1c:	f000 be76 	b.w	8002c0c <_fflush_r>
 8001f20:	bd10      	pop	{r4, pc}
 8001f22:	bf00      	nop
 8001f24:	200000d4 	.word	0x200000d4
 8001f28:	2000013c 	.word	0x2000013c
 8001f2c:	200001a4 	.word	0x200001a4

08001f30 <global_stdio_init.part.0>:
 8001f30:	b510      	push	{r4, lr}
 8001f32:	4b0b      	ldr	r3, [pc, #44]	@ (8001f60 <global_stdio_init.part.0+0x30>)
 8001f34:	4c0b      	ldr	r4, [pc, #44]	@ (8001f64 <global_stdio_init.part.0+0x34>)
 8001f36:	4a0c      	ldr	r2, [pc, #48]	@ (8001f68 <global_stdio_init.part.0+0x38>)
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2104      	movs	r1, #4
 8001f40:	f7ff ff94 	bl	8001e6c <std>
 8001f44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001f48:	2201      	movs	r2, #1
 8001f4a:	2109      	movs	r1, #9
 8001f4c:	f7ff ff8e 	bl	8001e6c <std>
 8001f50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001f54:	2202      	movs	r2, #2
 8001f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f5a:	2112      	movs	r1, #18
 8001f5c:	f7ff bf86 	b.w	8001e6c <std>
 8001f60:	2000020c 	.word	0x2000020c
 8001f64:	200000d4 	.word	0x200000d4
 8001f68:	08001ed9 	.word	0x08001ed9

08001f6c <__sfp_lock_acquire>:
 8001f6c:	4801      	ldr	r0, [pc, #4]	@ (8001f74 <__sfp_lock_acquire+0x8>)
 8001f6e:	f000 ba00 	b.w	8002372 <__retarget_lock_acquire_recursive>
 8001f72:	bf00      	nop
 8001f74:	20000215 	.word	0x20000215

08001f78 <__sfp_lock_release>:
 8001f78:	4801      	ldr	r0, [pc, #4]	@ (8001f80 <__sfp_lock_release+0x8>)
 8001f7a:	f000 b9fb 	b.w	8002374 <__retarget_lock_release_recursive>
 8001f7e:	bf00      	nop
 8001f80:	20000215 	.word	0x20000215

08001f84 <__sinit>:
 8001f84:	b510      	push	{r4, lr}
 8001f86:	4604      	mov	r4, r0
 8001f88:	f7ff fff0 	bl	8001f6c <__sfp_lock_acquire>
 8001f8c:	6a23      	ldr	r3, [r4, #32]
 8001f8e:	b11b      	cbz	r3, 8001f98 <__sinit+0x14>
 8001f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f94:	f7ff bff0 	b.w	8001f78 <__sfp_lock_release>
 8001f98:	4b04      	ldr	r3, [pc, #16]	@ (8001fac <__sinit+0x28>)
 8001f9a:	6223      	str	r3, [r4, #32]
 8001f9c:	4b04      	ldr	r3, [pc, #16]	@ (8001fb0 <__sinit+0x2c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1f5      	bne.n	8001f90 <__sinit+0xc>
 8001fa4:	f7ff ffc4 	bl	8001f30 <global_stdio_init.part.0>
 8001fa8:	e7f2      	b.n	8001f90 <__sinit+0xc>
 8001faa:	bf00      	nop
 8001fac:	08001ef1 	.word	0x08001ef1
 8001fb0:	2000020c 	.word	0x2000020c

08001fb4 <_fwalk_sglue>:
 8001fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fb8:	4607      	mov	r7, r0
 8001fba:	4688      	mov	r8, r1
 8001fbc:	4614      	mov	r4, r2
 8001fbe:	2600      	movs	r6, #0
 8001fc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001fc4:	f1b9 0901 	subs.w	r9, r9, #1
 8001fc8:	d505      	bpl.n	8001fd6 <_fwalk_sglue+0x22>
 8001fca:	6824      	ldr	r4, [r4, #0]
 8001fcc:	2c00      	cmp	r4, #0
 8001fce:	d1f7      	bne.n	8001fc0 <_fwalk_sglue+0xc>
 8001fd0:	4630      	mov	r0, r6
 8001fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001fd6:	89ab      	ldrh	r3, [r5, #12]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d907      	bls.n	8001fec <_fwalk_sglue+0x38>
 8001fdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	d003      	beq.n	8001fec <_fwalk_sglue+0x38>
 8001fe4:	4629      	mov	r1, r5
 8001fe6:	4638      	mov	r0, r7
 8001fe8:	47c0      	blx	r8
 8001fea:	4306      	orrs	r6, r0
 8001fec:	3568      	adds	r5, #104	@ 0x68
 8001fee:	e7e9      	b.n	8001fc4 <_fwalk_sglue+0x10>

08001ff0 <iprintf>:
 8001ff0:	b40f      	push	{r0, r1, r2, r3}
 8001ff2:	b507      	push	{r0, r1, r2, lr}
 8001ff4:	4906      	ldr	r1, [pc, #24]	@ (8002010 <iprintf+0x20>)
 8001ff6:	ab04      	add	r3, sp, #16
 8001ff8:	6808      	ldr	r0, [r1, #0]
 8001ffa:	f853 2b04 	ldr.w	r2, [r3], #4
 8001ffe:	6881      	ldr	r1, [r0, #8]
 8002000:	9301      	str	r3, [sp, #4]
 8002002:	f000 fadb 	bl	80025bc <_vfiprintf_r>
 8002006:	b003      	add	sp, #12
 8002008:	f85d eb04 	ldr.w	lr, [sp], #4
 800200c:	b004      	add	sp, #16
 800200e:	4770      	bx	lr
 8002010:	20000018 	.word	0x20000018

08002014 <_puts_r>:
 8002014:	6a03      	ldr	r3, [r0, #32]
 8002016:	b570      	push	{r4, r5, r6, lr}
 8002018:	6884      	ldr	r4, [r0, #8]
 800201a:	4605      	mov	r5, r0
 800201c:	460e      	mov	r6, r1
 800201e:	b90b      	cbnz	r3, 8002024 <_puts_r+0x10>
 8002020:	f7ff ffb0 	bl	8001f84 <__sinit>
 8002024:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002026:	07db      	lsls	r3, r3, #31
 8002028:	d405      	bmi.n	8002036 <_puts_r+0x22>
 800202a:	89a3      	ldrh	r3, [r4, #12]
 800202c:	0598      	lsls	r0, r3, #22
 800202e:	d402      	bmi.n	8002036 <_puts_r+0x22>
 8002030:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002032:	f000 f99e 	bl	8002372 <__retarget_lock_acquire_recursive>
 8002036:	89a3      	ldrh	r3, [r4, #12]
 8002038:	0719      	lsls	r1, r3, #28
 800203a:	d502      	bpl.n	8002042 <_puts_r+0x2e>
 800203c:	6923      	ldr	r3, [r4, #16]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d135      	bne.n	80020ae <_puts_r+0x9a>
 8002042:	4621      	mov	r1, r4
 8002044:	4628      	mov	r0, r5
 8002046:	f000 f8c5 	bl	80021d4 <__swsetup_r>
 800204a:	b380      	cbz	r0, 80020ae <_puts_r+0x9a>
 800204c:	f04f 35ff 	mov.w	r5, #4294967295
 8002050:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002052:	07da      	lsls	r2, r3, #31
 8002054:	d405      	bmi.n	8002062 <_puts_r+0x4e>
 8002056:	89a3      	ldrh	r3, [r4, #12]
 8002058:	059b      	lsls	r3, r3, #22
 800205a:	d402      	bmi.n	8002062 <_puts_r+0x4e>
 800205c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800205e:	f000 f989 	bl	8002374 <__retarget_lock_release_recursive>
 8002062:	4628      	mov	r0, r5
 8002064:	bd70      	pop	{r4, r5, r6, pc}
 8002066:	2b00      	cmp	r3, #0
 8002068:	da04      	bge.n	8002074 <_puts_r+0x60>
 800206a:	69a2      	ldr	r2, [r4, #24]
 800206c:	429a      	cmp	r2, r3
 800206e:	dc17      	bgt.n	80020a0 <_puts_r+0x8c>
 8002070:	290a      	cmp	r1, #10
 8002072:	d015      	beq.n	80020a0 <_puts_r+0x8c>
 8002074:	6823      	ldr	r3, [r4, #0]
 8002076:	1c5a      	adds	r2, r3, #1
 8002078:	6022      	str	r2, [r4, #0]
 800207a:	7019      	strb	r1, [r3, #0]
 800207c:	68a3      	ldr	r3, [r4, #8]
 800207e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002082:	3b01      	subs	r3, #1
 8002084:	60a3      	str	r3, [r4, #8]
 8002086:	2900      	cmp	r1, #0
 8002088:	d1ed      	bne.n	8002066 <_puts_r+0x52>
 800208a:	2b00      	cmp	r3, #0
 800208c:	da11      	bge.n	80020b2 <_puts_r+0x9e>
 800208e:	4622      	mov	r2, r4
 8002090:	210a      	movs	r1, #10
 8002092:	4628      	mov	r0, r5
 8002094:	f000 f85f 	bl	8002156 <__swbuf_r>
 8002098:	3001      	adds	r0, #1
 800209a:	d0d7      	beq.n	800204c <_puts_r+0x38>
 800209c:	250a      	movs	r5, #10
 800209e:	e7d7      	b.n	8002050 <_puts_r+0x3c>
 80020a0:	4622      	mov	r2, r4
 80020a2:	4628      	mov	r0, r5
 80020a4:	f000 f857 	bl	8002156 <__swbuf_r>
 80020a8:	3001      	adds	r0, #1
 80020aa:	d1e7      	bne.n	800207c <_puts_r+0x68>
 80020ac:	e7ce      	b.n	800204c <_puts_r+0x38>
 80020ae:	3e01      	subs	r6, #1
 80020b0:	e7e4      	b.n	800207c <_puts_r+0x68>
 80020b2:	6823      	ldr	r3, [r4, #0]
 80020b4:	1c5a      	adds	r2, r3, #1
 80020b6:	6022      	str	r2, [r4, #0]
 80020b8:	220a      	movs	r2, #10
 80020ba:	701a      	strb	r2, [r3, #0]
 80020bc:	e7ee      	b.n	800209c <_puts_r+0x88>
	...

080020c0 <puts>:
 80020c0:	4b02      	ldr	r3, [pc, #8]	@ (80020cc <puts+0xc>)
 80020c2:	4601      	mov	r1, r0
 80020c4:	6818      	ldr	r0, [r3, #0]
 80020c6:	f7ff bfa5 	b.w	8002014 <_puts_r>
 80020ca:	bf00      	nop
 80020cc:	20000018 	.word	0x20000018

080020d0 <__sread>:
 80020d0:	b510      	push	{r4, lr}
 80020d2:	460c      	mov	r4, r1
 80020d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020d8:	f000 f8fc 	bl	80022d4 <_read_r>
 80020dc:	2800      	cmp	r0, #0
 80020de:	bfab      	itete	ge
 80020e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80020e2:	89a3      	ldrhlt	r3, [r4, #12]
 80020e4:	181b      	addge	r3, r3, r0
 80020e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80020ea:	bfac      	ite	ge
 80020ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80020ee:	81a3      	strhlt	r3, [r4, #12]
 80020f0:	bd10      	pop	{r4, pc}

080020f2 <__swrite>:
 80020f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020f6:	461f      	mov	r7, r3
 80020f8:	898b      	ldrh	r3, [r1, #12]
 80020fa:	05db      	lsls	r3, r3, #23
 80020fc:	4605      	mov	r5, r0
 80020fe:	460c      	mov	r4, r1
 8002100:	4616      	mov	r6, r2
 8002102:	d505      	bpl.n	8002110 <__swrite+0x1e>
 8002104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002108:	2302      	movs	r3, #2
 800210a:	2200      	movs	r2, #0
 800210c:	f000 f8d0 	bl	80022b0 <_lseek_r>
 8002110:	89a3      	ldrh	r3, [r4, #12]
 8002112:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002116:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800211a:	81a3      	strh	r3, [r4, #12]
 800211c:	4632      	mov	r2, r6
 800211e:	463b      	mov	r3, r7
 8002120:	4628      	mov	r0, r5
 8002122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002126:	f000 b8e7 	b.w	80022f8 <_write_r>

0800212a <__sseek>:
 800212a:	b510      	push	{r4, lr}
 800212c:	460c      	mov	r4, r1
 800212e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002132:	f000 f8bd 	bl	80022b0 <_lseek_r>
 8002136:	1c43      	adds	r3, r0, #1
 8002138:	89a3      	ldrh	r3, [r4, #12]
 800213a:	bf15      	itete	ne
 800213c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800213e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002142:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002146:	81a3      	strheq	r3, [r4, #12]
 8002148:	bf18      	it	ne
 800214a:	81a3      	strhne	r3, [r4, #12]
 800214c:	bd10      	pop	{r4, pc}

0800214e <__sclose>:
 800214e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002152:	f000 b89d 	b.w	8002290 <_close_r>

08002156 <__swbuf_r>:
 8002156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002158:	460e      	mov	r6, r1
 800215a:	4614      	mov	r4, r2
 800215c:	4605      	mov	r5, r0
 800215e:	b118      	cbz	r0, 8002168 <__swbuf_r+0x12>
 8002160:	6a03      	ldr	r3, [r0, #32]
 8002162:	b90b      	cbnz	r3, 8002168 <__swbuf_r+0x12>
 8002164:	f7ff ff0e 	bl	8001f84 <__sinit>
 8002168:	69a3      	ldr	r3, [r4, #24]
 800216a:	60a3      	str	r3, [r4, #8]
 800216c:	89a3      	ldrh	r3, [r4, #12]
 800216e:	071a      	lsls	r2, r3, #28
 8002170:	d501      	bpl.n	8002176 <__swbuf_r+0x20>
 8002172:	6923      	ldr	r3, [r4, #16]
 8002174:	b943      	cbnz	r3, 8002188 <__swbuf_r+0x32>
 8002176:	4621      	mov	r1, r4
 8002178:	4628      	mov	r0, r5
 800217a:	f000 f82b 	bl	80021d4 <__swsetup_r>
 800217e:	b118      	cbz	r0, 8002188 <__swbuf_r+0x32>
 8002180:	f04f 37ff 	mov.w	r7, #4294967295
 8002184:	4638      	mov	r0, r7
 8002186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002188:	6823      	ldr	r3, [r4, #0]
 800218a:	6922      	ldr	r2, [r4, #16]
 800218c:	1a98      	subs	r0, r3, r2
 800218e:	6963      	ldr	r3, [r4, #20]
 8002190:	b2f6      	uxtb	r6, r6
 8002192:	4283      	cmp	r3, r0
 8002194:	4637      	mov	r7, r6
 8002196:	dc05      	bgt.n	80021a4 <__swbuf_r+0x4e>
 8002198:	4621      	mov	r1, r4
 800219a:	4628      	mov	r0, r5
 800219c:	f000 fd36 	bl	8002c0c <_fflush_r>
 80021a0:	2800      	cmp	r0, #0
 80021a2:	d1ed      	bne.n	8002180 <__swbuf_r+0x2a>
 80021a4:	68a3      	ldr	r3, [r4, #8]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	60a3      	str	r3, [r4, #8]
 80021aa:	6823      	ldr	r3, [r4, #0]
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	6022      	str	r2, [r4, #0]
 80021b0:	701e      	strb	r6, [r3, #0]
 80021b2:	6962      	ldr	r2, [r4, #20]
 80021b4:	1c43      	adds	r3, r0, #1
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d004      	beq.n	80021c4 <__swbuf_r+0x6e>
 80021ba:	89a3      	ldrh	r3, [r4, #12]
 80021bc:	07db      	lsls	r3, r3, #31
 80021be:	d5e1      	bpl.n	8002184 <__swbuf_r+0x2e>
 80021c0:	2e0a      	cmp	r6, #10
 80021c2:	d1df      	bne.n	8002184 <__swbuf_r+0x2e>
 80021c4:	4621      	mov	r1, r4
 80021c6:	4628      	mov	r0, r5
 80021c8:	f000 fd20 	bl	8002c0c <_fflush_r>
 80021cc:	2800      	cmp	r0, #0
 80021ce:	d0d9      	beq.n	8002184 <__swbuf_r+0x2e>
 80021d0:	e7d6      	b.n	8002180 <__swbuf_r+0x2a>
	...

080021d4 <__swsetup_r>:
 80021d4:	b538      	push	{r3, r4, r5, lr}
 80021d6:	4b29      	ldr	r3, [pc, #164]	@ (800227c <__swsetup_r+0xa8>)
 80021d8:	4605      	mov	r5, r0
 80021da:	6818      	ldr	r0, [r3, #0]
 80021dc:	460c      	mov	r4, r1
 80021de:	b118      	cbz	r0, 80021e8 <__swsetup_r+0x14>
 80021e0:	6a03      	ldr	r3, [r0, #32]
 80021e2:	b90b      	cbnz	r3, 80021e8 <__swsetup_r+0x14>
 80021e4:	f7ff fece 	bl	8001f84 <__sinit>
 80021e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021ec:	0719      	lsls	r1, r3, #28
 80021ee:	d422      	bmi.n	8002236 <__swsetup_r+0x62>
 80021f0:	06da      	lsls	r2, r3, #27
 80021f2:	d407      	bmi.n	8002204 <__swsetup_r+0x30>
 80021f4:	2209      	movs	r2, #9
 80021f6:	602a      	str	r2, [r5, #0]
 80021f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021fc:	81a3      	strh	r3, [r4, #12]
 80021fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002202:	e033      	b.n	800226c <__swsetup_r+0x98>
 8002204:	0758      	lsls	r0, r3, #29
 8002206:	d512      	bpl.n	800222e <__swsetup_r+0x5a>
 8002208:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800220a:	b141      	cbz	r1, 800221e <__swsetup_r+0x4a>
 800220c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002210:	4299      	cmp	r1, r3
 8002212:	d002      	beq.n	800221a <__swsetup_r+0x46>
 8002214:	4628      	mov	r0, r5
 8002216:	f000 f8af 	bl	8002378 <_free_r>
 800221a:	2300      	movs	r3, #0
 800221c:	6363      	str	r3, [r4, #52]	@ 0x34
 800221e:	89a3      	ldrh	r3, [r4, #12]
 8002220:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002224:	81a3      	strh	r3, [r4, #12]
 8002226:	2300      	movs	r3, #0
 8002228:	6063      	str	r3, [r4, #4]
 800222a:	6923      	ldr	r3, [r4, #16]
 800222c:	6023      	str	r3, [r4, #0]
 800222e:	89a3      	ldrh	r3, [r4, #12]
 8002230:	f043 0308 	orr.w	r3, r3, #8
 8002234:	81a3      	strh	r3, [r4, #12]
 8002236:	6923      	ldr	r3, [r4, #16]
 8002238:	b94b      	cbnz	r3, 800224e <__swsetup_r+0x7a>
 800223a:	89a3      	ldrh	r3, [r4, #12]
 800223c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002240:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002244:	d003      	beq.n	800224e <__swsetup_r+0x7a>
 8002246:	4621      	mov	r1, r4
 8002248:	4628      	mov	r0, r5
 800224a:	f000 fd2d 	bl	8002ca8 <__smakebuf_r>
 800224e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002252:	f013 0201 	ands.w	r2, r3, #1
 8002256:	d00a      	beq.n	800226e <__swsetup_r+0x9a>
 8002258:	2200      	movs	r2, #0
 800225a:	60a2      	str	r2, [r4, #8]
 800225c:	6962      	ldr	r2, [r4, #20]
 800225e:	4252      	negs	r2, r2
 8002260:	61a2      	str	r2, [r4, #24]
 8002262:	6922      	ldr	r2, [r4, #16]
 8002264:	b942      	cbnz	r2, 8002278 <__swsetup_r+0xa4>
 8002266:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800226a:	d1c5      	bne.n	80021f8 <__swsetup_r+0x24>
 800226c:	bd38      	pop	{r3, r4, r5, pc}
 800226e:	0799      	lsls	r1, r3, #30
 8002270:	bf58      	it	pl
 8002272:	6962      	ldrpl	r2, [r4, #20]
 8002274:	60a2      	str	r2, [r4, #8]
 8002276:	e7f4      	b.n	8002262 <__swsetup_r+0x8e>
 8002278:	2000      	movs	r0, #0
 800227a:	e7f7      	b.n	800226c <__swsetup_r+0x98>
 800227c:	20000018 	.word	0x20000018

08002280 <memset>:
 8002280:	4402      	add	r2, r0
 8002282:	4603      	mov	r3, r0
 8002284:	4293      	cmp	r3, r2
 8002286:	d100      	bne.n	800228a <memset+0xa>
 8002288:	4770      	bx	lr
 800228a:	f803 1b01 	strb.w	r1, [r3], #1
 800228e:	e7f9      	b.n	8002284 <memset+0x4>

08002290 <_close_r>:
 8002290:	b538      	push	{r3, r4, r5, lr}
 8002292:	4d06      	ldr	r5, [pc, #24]	@ (80022ac <_close_r+0x1c>)
 8002294:	2300      	movs	r3, #0
 8002296:	4604      	mov	r4, r0
 8002298:	4608      	mov	r0, r1
 800229a:	602b      	str	r3, [r5, #0]
 800229c:	f7fe f9eb 	bl	8000676 <_close>
 80022a0:	1c43      	adds	r3, r0, #1
 80022a2:	d102      	bne.n	80022aa <_close_r+0x1a>
 80022a4:	682b      	ldr	r3, [r5, #0]
 80022a6:	b103      	cbz	r3, 80022aa <_close_r+0x1a>
 80022a8:	6023      	str	r3, [r4, #0]
 80022aa:	bd38      	pop	{r3, r4, r5, pc}
 80022ac:	20000210 	.word	0x20000210

080022b0 <_lseek_r>:
 80022b0:	b538      	push	{r3, r4, r5, lr}
 80022b2:	4d07      	ldr	r5, [pc, #28]	@ (80022d0 <_lseek_r+0x20>)
 80022b4:	4604      	mov	r4, r0
 80022b6:	4608      	mov	r0, r1
 80022b8:	4611      	mov	r1, r2
 80022ba:	2200      	movs	r2, #0
 80022bc:	602a      	str	r2, [r5, #0]
 80022be:	461a      	mov	r2, r3
 80022c0:	f7fe fa00 	bl	80006c4 <_lseek>
 80022c4:	1c43      	adds	r3, r0, #1
 80022c6:	d102      	bne.n	80022ce <_lseek_r+0x1e>
 80022c8:	682b      	ldr	r3, [r5, #0]
 80022ca:	b103      	cbz	r3, 80022ce <_lseek_r+0x1e>
 80022cc:	6023      	str	r3, [r4, #0]
 80022ce:	bd38      	pop	{r3, r4, r5, pc}
 80022d0:	20000210 	.word	0x20000210

080022d4 <_read_r>:
 80022d4:	b538      	push	{r3, r4, r5, lr}
 80022d6:	4d07      	ldr	r5, [pc, #28]	@ (80022f4 <_read_r+0x20>)
 80022d8:	4604      	mov	r4, r0
 80022da:	4608      	mov	r0, r1
 80022dc:	4611      	mov	r1, r2
 80022de:	2200      	movs	r2, #0
 80022e0:	602a      	str	r2, [r5, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	f7fe f98e 	bl	8000604 <_read>
 80022e8:	1c43      	adds	r3, r0, #1
 80022ea:	d102      	bne.n	80022f2 <_read_r+0x1e>
 80022ec:	682b      	ldr	r3, [r5, #0]
 80022ee:	b103      	cbz	r3, 80022f2 <_read_r+0x1e>
 80022f0:	6023      	str	r3, [r4, #0]
 80022f2:	bd38      	pop	{r3, r4, r5, pc}
 80022f4:	20000210 	.word	0x20000210

080022f8 <_write_r>:
 80022f8:	b538      	push	{r3, r4, r5, lr}
 80022fa:	4d07      	ldr	r5, [pc, #28]	@ (8002318 <_write_r+0x20>)
 80022fc:	4604      	mov	r4, r0
 80022fe:	4608      	mov	r0, r1
 8002300:	4611      	mov	r1, r2
 8002302:	2200      	movs	r2, #0
 8002304:	602a      	str	r2, [r5, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	f7fe f999 	bl	800063e <_write>
 800230c:	1c43      	adds	r3, r0, #1
 800230e:	d102      	bne.n	8002316 <_write_r+0x1e>
 8002310:	682b      	ldr	r3, [r5, #0]
 8002312:	b103      	cbz	r3, 8002316 <_write_r+0x1e>
 8002314:	6023      	str	r3, [r4, #0]
 8002316:	bd38      	pop	{r3, r4, r5, pc}
 8002318:	20000210 	.word	0x20000210

0800231c <__errno>:
 800231c:	4b01      	ldr	r3, [pc, #4]	@ (8002324 <__errno+0x8>)
 800231e:	6818      	ldr	r0, [r3, #0]
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	20000018 	.word	0x20000018

08002328 <__libc_init_array>:
 8002328:	b570      	push	{r4, r5, r6, lr}
 800232a:	4d0d      	ldr	r5, [pc, #52]	@ (8002360 <__libc_init_array+0x38>)
 800232c:	4c0d      	ldr	r4, [pc, #52]	@ (8002364 <__libc_init_array+0x3c>)
 800232e:	1b64      	subs	r4, r4, r5
 8002330:	10a4      	asrs	r4, r4, #2
 8002332:	2600      	movs	r6, #0
 8002334:	42a6      	cmp	r6, r4
 8002336:	d109      	bne.n	800234c <__libc_init_array+0x24>
 8002338:	4d0b      	ldr	r5, [pc, #44]	@ (8002368 <__libc_init_array+0x40>)
 800233a:	4c0c      	ldr	r4, [pc, #48]	@ (800236c <__libc_init_array+0x44>)
 800233c:	f000 fd22 	bl	8002d84 <_init>
 8002340:	1b64      	subs	r4, r4, r5
 8002342:	10a4      	asrs	r4, r4, #2
 8002344:	2600      	movs	r6, #0
 8002346:	42a6      	cmp	r6, r4
 8002348:	d105      	bne.n	8002356 <__libc_init_array+0x2e>
 800234a:	bd70      	pop	{r4, r5, r6, pc}
 800234c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002350:	4798      	blx	r3
 8002352:	3601      	adds	r6, #1
 8002354:	e7ee      	b.n	8002334 <__libc_init_array+0xc>
 8002356:	f855 3b04 	ldr.w	r3, [r5], #4
 800235a:	4798      	blx	r3
 800235c:	3601      	adds	r6, #1
 800235e:	e7f2      	b.n	8002346 <__libc_init_array+0x1e>
 8002360:	08002e94 	.word	0x08002e94
 8002364:	08002e94 	.word	0x08002e94
 8002368:	08002e94 	.word	0x08002e94
 800236c:	08002e98 	.word	0x08002e98

08002370 <__retarget_lock_init_recursive>:
 8002370:	4770      	bx	lr

08002372 <__retarget_lock_acquire_recursive>:
 8002372:	4770      	bx	lr

08002374 <__retarget_lock_release_recursive>:
 8002374:	4770      	bx	lr
	...

08002378 <_free_r>:
 8002378:	b538      	push	{r3, r4, r5, lr}
 800237a:	4605      	mov	r5, r0
 800237c:	2900      	cmp	r1, #0
 800237e:	d041      	beq.n	8002404 <_free_r+0x8c>
 8002380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002384:	1f0c      	subs	r4, r1, #4
 8002386:	2b00      	cmp	r3, #0
 8002388:	bfb8      	it	lt
 800238a:	18e4      	addlt	r4, r4, r3
 800238c:	f000 f8e0 	bl	8002550 <__malloc_lock>
 8002390:	4a1d      	ldr	r2, [pc, #116]	@ (8002408 <_free_r+0x90>)
 8002392:	6813      	ldr	r3, [r2, #0]
 8002394:	b933      	cbnz	r3, 80023a4 <_free_r+0x2c>
 8002396:	6063      	str	r3, [r4, #4]
 8002398:	6014      	str	r4, [r2, #0]
 800239a:	4628      	mov	r0, r5
 800239c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80023a0:	f000 b8dc 	b.w	800255c <__malloc_unlock>
 80023a4:	42a3      	cmp	r3, r4
 80023a6:	d908      	bls.n	80023ba <_free_r+0x42>
 80023a8:	6820      	ldr	r0, [r4, #0]
 80023aa:	1821      	adds	r1, r4, r0
 80023ac:	428b      	cmp	r3, r1
 80023ae:	bf01      	itttt	eq
 80023b0:	6819      	ldreq	r1, [r3, #0]
 80023b2:	685b      	ldreq	r3, [r3, #4]
 80023b4:	1809      	addeq	r1, r1, r0
 80023b6:	6021      	streq	r1, [r4, #0]
 80023b8:	e7ed      	b.n	8002396 <_free_r+0x1e>
 80023ba:	461a      	mov	r2, r3
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	b10b      	cbz	r3, 80023c4 <_free_r+0x4c>
 80023c0:	42a3      	cmp	r3, r4
 80023c2:	d9fa      	bls.n	80023ba <_free_r+0x42>
 80023c4:	6811      	ldr	r1, [r2, #0]
 80023c6:	1850      	adds	r0, r2, r1
 80023c8:	42a0      	cmp	r0, r4
 80023ca:	d10b      	bne.n	80023e4 <_free_r+0x6c>
 80023cc:	6820      	ldr	r0, [r4, #0]
 80023ce:	4401      	add	r1, r0
 80023d0:	1850      	adds	r0, r2, r1
 80023d2:	4283      	cmp	r3, r0
 80023d4:	6011      	str	r1, [r2, #0]
 80023d6:	d1e0      	bne.n	800239a <_free_r+0x22>
 80023d8:	6818      	ldr	r0, [r3, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	6053      	str	r3, [r2, #4]
 80023de:	4408      	add	r0, r1
 80023e0:	6010      	str	r0, [r2, #0]
 80023e2:	e7da      	b.n	800239a <_free_r+0x22>
 80023e4:	d902      	bls.n	80023ec <_free_r+0x74>
 80023e6:	230c      	movs	r3, #12
 80023e8:	602b      	str	r3, [r5, #0]
 80023ea:	e7d6      	b.n	800239a <_free_r+0x22>
 80023ec:	6820      	ldr	r0, [r4, #0]
 80023ee:	1821      	adds	r1, r4, r0
 80023f0:	428b      	cmp	r3, r1
 80023f2:	bf04      	itt	eq
 80023f4:	6819      	ldreq	r1, [r3, #0]
 80023f6:	685b      	ldreq	r3, [r3, #4]
 80023f8:	6063      	str	r3, [r4, #4]
 80023fa:	bf04      	itt	eq
 80023fc:	1809      	addeq	r1, r1, r0
 80023fe:	6021      	streq	r1, [r4, #0]
 8002400:	6054      	str	r4, [r2, #4]
 8002402:	e7ca      	b.n	800239a <_free_r+0x22>
 8002404:	bd38      	pop	{r3, r4, r5, pc}
 8002406:	bf00      	nop
 8002408:	2000021c 	.word	0x2000021c

0800240c <sbrk_aligned>:
 800240c:	b570      	push	{r4, r5, r6, lr}
 800240e:	4e0f      	ldr	r6, [pc, #60]	@ (800244c <sbrk_aligned+0x40>)
 8002410:	460c      	mov	r4, r1
 8002412:	6831      	ldr	r1, [r6, #0]
 8002414:	4605      	mov	r5, r0
 8002416:	b911      	cbnz	r1, 800241e <sbrk_aligned+0x12>
 8002418:	f000 fca4 	bl	8002d64 <_sbrk_r>
 800241c:	6030      	str	r0, [r6, #0]
 800241e:	4621      	mov	r1, r4
 8002420:	4628      	mov	r0, r5
 8002422:	f000 fc9f 	bl	8002d64 <_sbrk_r>
 8002426:	1c43      	adds	r3, r0, #1
 8002428:	d103      	bne.n	8002432 <sbrk_aligned+0x26>
 800242a:	f04f 34ff 	mov.w	r4, #4294967295
 800242e:	4620      	mov	r0, r4
 8002430:	bd70      	pop	{r4, r5, r6, pc}
 8002432:	1cc4      	adds	r4, r0, #3
 8002434:	f024 0403 	bic.w	r4, r4, #3
 8002438:	42a0      	cmp	r0, r4
 800243a:	d0f8      	beq.n	800242e <sbrk_aligned+0x22>
 800243c:	1a21      	subs	r1, r4, r0
 800243e:	4628      	mov	r0, r5
 8002440:	f000 fc90 	bl	8002d64 <_sbrk_r>
 8002444:	3001      	adds	r0, #1
 8002446:	d1f2      	bne.n	800242e <sbrk_aligned+0x22>
 8002448:	e7ef      	b.n	800242a <sbrk_aligned+0x1e>
 800244a:	bf00      	nop
 800244c:	20000218 	.word	0x20000218

08002450 <_malloc_r>:
 8002450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002454:	1ccd      	adds	r5, r1, #3
 8002456:	f025 0503 	bic.w	r5, r5, #3
 800245a:	3508      	adds	r5, #8
 800245c:	2d0c      	cmp	r5, #12
 800245e:	bf38      	it	cc
 8002460:	250c      	movcc	r5, #12
 8002462:	2d00      	cmp	r5, #0
 8002464:	4606      	mov	r6, r0
 8002466:	db01      	blt.n	800246c <_malloc_r+0x1c>
 8002468:	42a9      	cmp	r1, r5
 800246a:	d904      	bls.n	8002476 <_malloc_r+0x26>
 800246c:	230c      	movs	r3, #12
 800246e:	6033      	str	r3, [r6, #0]
 8002470:	2000      	movs	r0, #0
 8002472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002476:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800254c <_malloc_r+0xfc>
 800247a:	f000 f869 	bl	8002550 <__malloc_lock>
 800247e:	f8d8 3000 	ldr.w	r3, [r8]
 8002482:	461c      	mov	r4, r3
 8002484:	bb44      	cbnz	r4, 80024d8 <_malloc_r+0x88>
 8002486:	4629      	mov	r1, r5
 8002488:	4630      	mov	r0, r6
 800248a:	f7ff ffbf 	bl	800240c <sbrk_aligned>
 800248e:	1c43      	adds	r3, r0, #1
 8002490:	4604      	mov	r4, r0
 8002492:	d158      	bne.n	8002546 <_malloc_r+0xf6>
 8002494:	f8d8 4000 	ldr.w	r4, [r8]
 8002498:	4627      	mov	r7, r4
 800249a:	2f00      	cmp	r7, #0
 800249c:	d143      	bne.n	8002526 <_malloc_r+0xd6>
 800249e:	2c00      	cmp	r4, #0
 80024a0:	d04b      	beq.n	800253a <_malloc_r+0xea>
 80024a2:	6823      	ldr	r3, [r4, #0]
 80024a4:	4639      	mov	r1, r7
 80024a6:	4630      	mov	r0, r6
 80024a8:	eb04 0903 	add.w	r9, r4, r3
 80024ac:	f000 fc5a 	bl	8002d64 <_sbrk_r>
 80024b0:	4581      	cmp	r9, r0
 80024b2:	d142      	bne.n	800253a <_malloc_r+0xea>
 80024b4:	6821      	ldr	r1, [r4, #0]
 80024b6:	1a6d      	subs	r5, r5, r1
 80024b8:	4629      	mov	r1, r5
 80024ba:	4630      	mov	r0, r6
 80024bc:	f7ff ffa6 	bl	800240c <sbrk_aligned>
 80024c0:	3001      	adds	r0, #1
 80024c2:	d03a      	beq.n	800253a <_malloc_r+0xea>
 80024c4:	6823      	ldr	r3, [r4, #0]
 80024c6:	442b      	add	r3, r5
 80024c8:	6023      	str	r3, [r4, #0]
 80024ca:	f8d8 3000 	ldr.w	r3, [r8]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	bb62      	cbnz	r2, 800252c <_malloc_r+0xdc>
 80024d2:	f8c8 7000 	str.w	r7, [r8]
 80024d6:	e00f      	b.n	80024f8 <_malloc_r+0xa8>
 80024d8:	6822      	ldr	r2, [r4, #0]
 80024da:	1b52      	subs	r2, r2, r5
 80024dc:	d420      	bmi.n	8002520 <_malloc_r+0xd0>
 80024de:	2a0b      	cmp	r2, #11
 80024e0:	d917      	bls.n	8002512 <_malloc_r+0xc2>
 80024e2:	1961      	adds	r1, r4, r5
 80024e4:	42a3      	cmp	r3, r4
 80024e6:	6025      	str	r5, [r4, #0]
 80024e8:	bf18      	it	ne
 80024ea:	6059      	strne	r1, [r3, #4]
 80024ec:	6863      	ldr	r3, [r4, #4]
 80024ee:	bf08      	it	eq
 80024f0:	f8c8 1000 	streq.w	r1, [r8]
 80024f4:	5162      	str	r2, [r4, r5]
 80024f6:	604b      	str	r3, [r1, #4]
 80024f8:	4630      	mov	r0, r6
 80024fa:	f000 f82f 	bl	800255c <__malloc_unlock>
 80024fe:	f104 000b 	add.w	r0, r4, #11
 8002502:	1d23      	adds	r3, r4, #4
 8002504:	f020 0007 	bic.w	r0, r0, #7
 8002508:	1ac2      	subs	r2, r0, r3
 800250a:	bf1c      	itt	ne
 800250c:	1a1b      	subne	r3, r3, r0
 800250e:	50a3      	strne	r3, [r4, r2]
 8002510:	e7af      	b.n	8002472 <_malloc_r+0x22>
 8002512:	6862      	ldr	r2, [r4, #4]
 8002514:	42a3      	cmp	r3, r4
 8002516:	bf0c      	ite	eq
 8002518:	f8c8 2000 	streq.w	r2, [r8]
 800251c:	605a      	strne	r2, [r3, #4]
 800251e:	e7eb      	b.n	80024f8 <_malloc_r+0xa8>
 8002520:	4623      	mov	r3, r4
 8002522:	6864      	ldr	r4, [r4, #4]
 8002524:	e7ae      	b.n	8002484 <_malloc_r+0x34>
 8002526:	463c      	mov	r4, r7
 8002528:	687f      	ldr	r7, [r7, #4]
 800252a:	e7b6      	b.n	800249a <_malloc_r+0x4a>
 800252c:	461a      	mov	r2, r3
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	42a3      	cmp	r3, r4
 8002532:	d1fb      	bne.n	800252c <_malloc_r+0xdc>
 8002534:	2300      	movs	r3, #0
 8002536:	6053      	str	r3, [r2, #4]
 8002538:	e7de      	b.n	80024f8 <_malloc_r+0xa8>
 800253a:	230c      	movs	r3, #12
 800253c:	6033      	str	r3, [r6, #0]
 800253e:	4630      	mov	r0, r6
 8002540:	f000 f80c 	bl	800255c <__malloc_unlock>
 8002544:	e794      	b.n	8002470 <_malloc_r+0x20>
 8002546:	6005      	str	r5, [r0, #0]
 8002548:	e7d6      	b.n	80024f8 <_malloc_r+0xa8>
 800254a:	bf00      	nop
 800254c:	2000021c 	.word	0x2000021c

08002550 <__malloc_lock>:
 8002550:	4801      	ldr	r0, [pc, #4]	@ (8002558 <__malloc_lock+0x8>)
 8002552:	f7ff bf0e 	b.w	8002372 <__retarget_lock_acquire_recursive>
 8002556:	bf00      	nop
 8002558:	20000214 	.word	0x20000214

0800255c <__malloc_unlock>:
 800255c:	4801      	ldr	r0, [pc, #4]	@ (8002564 <__malloc_unlock+0x8>)
 800255e:	f7ff bf09 	b.w	8002374 <__retarget_lock_release_recursive>
 8002562:	bf00      	nop
 8002564:	20000214 	.word	0x20000214

08002568 <__sfputc_r>:
 8002568:	6893      	ldr	r3, [r2, #8]
 800256a:	3b01      	subs	r3, #1
 800256c:	2b00      	cmp	r3, #0
 800256e:	b410      	push	{r4}
 8002570:	6093      	str	r3, [r2, #8]
 8002572:	da08      	bge.n	8002586 <__sfputc_r+0x1e>
 8002574:	6994      	ldr	r4, [r2, #24]
 8002576:	42a3      	cmp	r3, r4
 8002578:	db01      	blt.n	800257e <__sfputc_r+0x16>
 800257a:	290a      	cmp	r1, #10
 800257c:	d103      	bne.n	8002586 <__sfputc_r+0x1e>
 800257e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002582:	f7ff bde8 	b.w	8002156 <__swbuf_r>
 8002586:	6813      	ldr	r3, [r2, #0]
 8002588:	1c58      	adds	r0, r3, #1
 800258a:	6010      	str	r0, [r2, #0]
 800258c:	7019      	strb	r1, [r3, #0]
 800258e:	4608      	mov	r0, r1
 8002590:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002594:	4770      	bx	lr

08002596 <__sfputs_r>:
 8002596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002598:	4606      	mov	r6, r0
 800259a:	460f      	mov	r7, r1
 800259c:	4614      	mov	r4, r2
 800259e:	18d5      	adds	r5, r2, r3
 80025a0:	42ac      	cmp	r4, r5
 80025a2:	d101      	bne.n	80025a8 <__sfputs_r+0x12>
 80025a4:	2000      	movs	r0, #0
 80025a6:	e007      	b.n	80025b8 <__sfputs_r+0x22>
 80025a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025ac:	463a      	mov	r2, r7
 80025ae:	4630      	mov	r0, r6
 80025b0:	f7ff ffda 	bl	8002568 <__sfputc_r>
 80025b4:	1c43      	adds	r3, r0, #1
 80025b6:	d1f3      	bne.n	80025a0 <__sfputs_r+0xa>
 80025b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080025bc <_vfiprintf_r>:
 80025bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025c0:	460d      	mov	r5, r1
 80025c2:	b09d      	sub	sp, #116	@ 0x74
 80025c4:	4614      	mov	r4, r2
 80025c6:	4698      	mov	r8, r3
 80025c8:	4606      	mov	r6, r0
 80025ca:	b118      	cbz	r0, 80025d4 <_vfiprintf_r+0x18>
 80025cc:	6a03      	ldr	r3, [r0, #32]
 80025ce:	b90b      	cbnz	r3, 80025d4 <_vfiprintf_r+0x18>
 80025d0:	f7ff fcd8 	bl	8001f84 <__sinit>
 80025d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80025d6:	07d9      	lsls	r1, r3, #31
 80025d8:	d405      	bmi.n	80025e6 <_vfiprintf_r+0x2a>
 80025da:	89ab      	ldrh	r3, [r5, #12]
 80025dc:	059a      	lsls	r2, r3, #22
 80025de:	d402      	bmi.n	80025e6 <_vfiprintf_r+0x2a>
 80025e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80025e2:	f7ff fec6 	bl	8002372 <__retarget_lock_acquire_recursive>
 80025e6:	89ab      	ldrh	r3, [r5, #12]
 80025e8:	071b      	lsls	r3, r3, #28
 80025ea:	d501      	bpl.n	80025f0 <_vfiprintf_r+0x34>
 80025ec:	692b      	ldr	r3, [r5, #16]
 80025ee:	b99b      	cbnz	r3, 8002618 <_vfiprintf_r+0x5c>
 80025f0:	4629      	mov	r1, r5
 80025f2:	4630      	mov	r0, r6
 80025f4:	f7ff fdee 	bl	80021d4 <__swsetup_r>
 80025f8:	b170      	cbz	r0, 8002618 <_vfiprintf_r+0x5c>
 80025fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80025fc:	07dc      	lsls	r4, r3, #31
 80025fe:	d504      	bpl.n	800260a <_vfiprintf_r+0x4e>
 8002600:	f04f 30ff 	mov.w	r0, #4294967295
 8002604:	b01d      	add	sp, #116	@ 0x74
 8002606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800260a:	89ab      	ldrh	r3, [r5, #12]
 800260c:	0598      	lsls	r0, r3, #22
 800260e:	d4f7      	bmi.n	8002600 <_vfiprintf_r+0x44>
 8002610:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002612:	f7ff feaf 	bl	8002374 <__retarget_lock_release_recursive>
 8002616:	e7f3      	b.n	8002600 <_vfiprintf_r+0x44>
 8002618:	2300      	movs	r3, #0
 800261a:	9309      	str	r3, [sp, #36]	@ 0x24
 800261c:	2320      	movs	r3, #32
 800261e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002622:	f8cd 800c 	str.w	r8, [sp, #12]
 8002626:	2330      	movs	r3, #48	@ 0x30
 8002628:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80027d8 <_vfiprintf_r+0x21c>
 800262c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002630:	f04f 0901 	mov.w	r9, #1
 8002634:	4623      	mov	r3, r4
 8002636:	469a      	mov	sl, r3
 8002638:	f813 2b01 	ldrb.w	r2, [r3], #1
 800263c:	b10a      	cbz	r2, 8002642 <_vfiprintf_r+0x86>
 800263e:	2a25      	cmp	r2, #37	@ 0x25
 8002640:	d1f9      	bne.n	8002636 <_vfiprintf_r+0x7a>
 8002642:	ebba 0b04 	subs.w	fp, sl, r4
 8002646:	d00b      	beq.n	8002660 <_vfiprintf_r+0xa4>
 8002648:	465b      	mov	r3, fp
 800264a:	4622      	mov	r2, r4
 800264c:	4629      	mov	r1, r5
 800264e:	4630      	mov	r0, r6
 8002650:	f7ff ffa1 	bl	8002596 <__sfputs_r>
 8002654:	3001      	adds	r0, #1
 8002656:	f000 80a7 	beq.w	80027a8 <_vfiprintf_r+0x1ec>
 800265a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800265c:	445a      	add	r2, fp
 800265e:	9209      	str	r2, [sp, #36]	@ 0x24
 8002660:	f89a 3000 	ldrb.w	r3, [sl]
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 809f 	beq.w	80027a8 <_vfiprintf_r+0x1ec>
 800266a:	2300      	movs	r3, #0
 800266c:	f04f 32ff 	mov.w	r2, #4294967295
 8002670:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002674:	f10a 0a01 	add.w	sl, sl, #1
 8002678:	9304      	str	r3, [sp, #16]
 800267a:	9307      	str	r3, [sp, #28]
 800267c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002680:	931a      	str	r3, [sp, #104]	@ 0x68
 8002682:	4654      	mov	r4, sl
 8002684:	2205      	movs	r2, #5
 8002686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800268a:	4853      	ldr	r0, [pc, #332]	@ (80027d8 <_vfiprintf_r+0x21c>)
 800268c:	f7fd fda8 	bl	80001e0 <memchr>
 8002690:	9a04      	ldr	r2, [sp, #16]
 8002692:	b9d8      	cbnz	r0, 80026cc <_vfiprintf_r+0x110>
 8002694:	06d1      	lsls	r1, r2, #27
 8002696:	bf44      	itt	mi
 8002698:	2320      	movmi	r3, #32
 800269a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800269e:	0713      	lsls	r3, r2, #28
 80026a0:	bf44      	itt	mi
 80026a2:	232b      	movmi	r3, #43	@ 0x2b
 80026a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80026a8:	f89a 3000 	ldrb.w	r3, [sl]
 80026ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80026ae:	d015      	beq.n	80026dc <_vfiprintf_r+0x120>
 80026b0:	9a07      	ldr	r2, [sp, #28]
 80026b2:	4654      	mov	r4, sl
 80026b4:	2000      	movs	r0, #0
 80026b6:	f04f 0c0a 	mov.w	ip, #10
 80026ba:	4621      	mov	r1, r4
 80026bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80026c0:	3b30      	subs	r3, #48	@ 0x30
 80026c2:	2b09      	cmp	r3, #9
 80026c4:	d94b      	bls.n	800275e <_vfiprintf_r+0x1a2>
 80026c6:	b1b0      	cbz	r0, 80026f6 <_vfiprintf_r+0x13a>
 80026c8:	9207      	str	r2, [sp, #28]
 80026ca:	e014      	b.n	80026f6 <_vfiprintf_r+0x13a>
 80026cc:	eba0 0308 	sub.w	r3, r0, r8
 80026d0:	fa09 f303 	lsl.w	r3, r9, r3
 80026d4:	4313      	orrs	r3, r2
 80026d6:	9304      	str	r3, [sp, #16]
 80026d8:	46a2      	mov	sl, r4
 80026da:	e7d2      	b.n	8002682 <_vfiprintf_r+0xc6>
 80026dc:	9b03      	ldr	r3, [sp, #12]
 80026de:	1d19      	adds	r1, r3, #4
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	9103      	str	r1, [sp, #12]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	bfbb      	ittet	lt
 80026e8:	425b      	neglt	r3, r3
 80026ea:	f042 0202 	orrlt.w	r2, r2, #2
 80026ee:	9307      	strge	r3, [sp, #28]
 80026f0:	9307      	strlt	r3, [sp, #28]
 80026f2:	bfb8      	it	lt
 80026f4:	9204      	strlt	r2, [sp, #16]
 80026f6:	7823      	ldrb	r3, [r4, #0]
 80026f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80026fa:	d10a      	bne.n	8002712 <_vfiprintf_r+0x156>
 80026fc:	7863      	ldrb	r3, [r4, #1]
 80026fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8002700:	d132      	bne.n	8002768 <_vfiprintf_r+0x1ac>
 8002702:	9b03      	ldr	r3, [sp, #12]
 8002704:	1d1a      	adds	r2, r3, #4
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	9203      	str	r2, [sp, #12]
 800270a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800270e:	3402      	adds	r4, #2
 8002710:	9305      	str	r3, [sp, #20]
 8002712:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80027e8 <_vfiprintf_r+0x22c>
 8002716:	7821      	ldrb	r1, [r4, #0]
 8002718:	2203      	movs	r2, #3
 800271a:	4650      	mov	r0, sl
 800271c:	f7fd fd60 	bl	80001e0 <memchr>
 8002720:	b138      	cbz	r0, 8002732 <_vfiprintf_r+0x176>
 8002722:	9b04      	ldr	r3, [sp, #16]
 8002724:	eba0 000a 	sub.w	r0, r0, sl
 8002728:	2240      	movs	r2, #64	@ 0x40
 800272a:	4082      	lsls	r2, r0
 800272c:	4313      	orrs	r3, r2
 800272e:	3401      	adds	r4, #1
 8002730:	9304      	str	r3, [sp, #16]
 8002732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002736:	4829      	ldr	r0, [pc, #164]	@ (80027dc <_vfiprintf_r+0x220>)
 8002738:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800273c:	2206      	movs	r2, #6
 800273e:	f7fd fd4f 	bl	80001e0 <memchr>
 8002742:	2800      	cmp	r0, #0
 8002744:	d03f      	beq.n	80027c6 <_vfiprintf_r+0x20a>
 8002746:	4b26      	ldr	r3, [pc, #152]	@ (80027e0 <_vfiprintf_r+0x224>)
 8002748:	bb1b      	cbnz	r3, 8002792 <_vfiprintf_r+0x1d6>
 800274a:	9b03      	ldr	r3, [sp, #12]
 800274c:	3307      	adds	r3, #7
 800274e:	f023 0307 	bic.w	r3, r3, #7
 8002752:	3308      	adds	r3, #8
 8002754:	9303      	str	r3, [sp, #12]
 8002756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002758:	443b      	add	r3, r7
 800275a:	9309      	str	r3, [sp, #36]	@ 0x24
 800275c:	e76a      	b.n	8002634 <_vfiprintf_r+0x78>
 800275e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002762:	460c      	mov	r4, r1
 8002764:	2001      	movs	r0, #1
 8002766:	e7a8      	b.n	80026ba <_vfiprintf_r+0xfe>
 8002768:	2300      	movs	r3, #0
 800276a:	3401      	adds	r4, #1
 800276c:	9305      	str	r3, [sp, #20]
 800276e:	4619      	mov	r1, r3
 8002770:	f04f 0c0a 	mov.w	ip, #10
 8002774:	4620      	mov	r0, r4
 8002776:	f810 2b01 	ldrb.w	r2, [r0], #1
 800277a:	3a30      	subs	r2, #48	@ 0x30
 800277c:	2a09      	cmp	r2, #9
 800277e:	d903      	bls.n	8002788 <_vfiprintf_r+0x1cc>
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0c6      	beq.n	8002712 <_vfiprintf_r+0x156>
 8002784:	9105      	str	r1, [sp, #20]
 8002786:	e7c4      	b.n	8002712 <_vfiprintf_r+0x156>
 8002788:	fb0c 2101 	mla	r1, ip, r1, r2
 800278c:	4604      	mov	r4, r0
 800278e:	2301      	movs	r3, #1
 8002790:	e7f0      	b.n	8002774 <_vfiprintf_r+0x1b8>
 8002792:	ab03      	add	r3, sp, #12
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	462a      	mov	r2, r5
 8002798:	4b12      	ldr	r3, [pc, #72]	@ (80027e4 <_vfiprintf_r+0x228>)
 800279a:	a904      	add	r1, sp, #16
 800279c:	4630      	mov	r0, r6
 800279e:	f3af 8000 	nop.w
 80027a2:	4607      	mov	r7, r0
 80027a4:	1c78      	adds	r0, r7, #1
 80027a6:	d1d6      	bne.n	8002756 <_vfiprintf_r+0x19a>
 80027a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80027aa:	07d9      	lsls	r1, r3, #31
 80027ac:	d405      	bmi.n	80027ba <_vfiprintf_r+0x1fe>
 80027ae:	89ab      	ldrh	r3, [r5, #12]
 80027b0:	059a      	lsls	r2, r3, #22
 80027b2:	d402      	bmi.n	80027ba <_vfiprintf_r+0x1fe>
 80027b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80027b6:	f7ff fddd 	bl	8002374 <__retarget_lock_release_recursive>
 80027ba:	89ab      	ldrh	r3, [r5, #12]
 80027bc:	065b      	lsls	r3, r3, #25
 80027be:	f53f af1f 	bmi.w	8002600 <_vfiprintf_r+0x44>
 80027c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80027c4:	e71e      	b.n	8002604 <_vfiprintf_r+0x48>
 80027c6:	ab03      	add	r3, sp, #12
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	462a      	mov	r2, r5
 80027cc:	4b05      	ldr	r3, [pc, #20]	@ (80027e4 <_vfiprintf_r+0x228>)
 80027ce:	a904      	add	r1, sp, #16
 80027d0:	4630      	mov	r0, r6
 80027d2:	f000 f879 	bl	80028c8 <_printf_i>
 80027d6:	e7e4      	b.n	80027a2 <_vfiprintf_r+0x1e6>
 80027d8:	08002e58 	.word	0x08002e58
 80027dc:	08002e62 	.word	0x08002e62
 80027e0:	00000000 	.word	0x00000000
 80027e4:	08002597 	.word	0x08002597
 80027e8:	08002e5e 	.word	0x08002e5e

080027ec <_printf_common>:
 80027ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027f0:	4616      	mov	r6, r2
 80027f2:	4698      	mov	r8, r3
 80027f4:	688a      	ldr	r2, [r1, #8]
 80027f6:	690b      	ldr	r3, [r1, #16]
 80027f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80027fc:	4293      	cmp	r3, r2
 80027fe:	bfb8      	it	lt
 8002800:	4613      	movlt	r3, r2
 8002802:	6033      	str	r3, [r6, #0]
 8002804:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002808:	4607      	mov	r7, r0
 800280a:	460c      	mov	r4, r1
 800280c:	b10a      	cbz	r2, 8002812 <_printf_common+0x26>
 800280e:	3301      	adds	r3, #1
 8002810:	6033      	str	r3, [r6, #0]
 8002812:	6823      	ldr	r3, [r4, #0]
 8002814:	0699      	lsls	r1, r3, #26
 8002816:	bf42      	ittt	mi
 8002818:	6833      	ldrmi	r3, [r6, #0]
 800281a:	3302      	addmi	r3, #2
 800281c:	6033      	strmi	r3, [r6, #0]
 800281e:	6825      	ldr	r5, [r4, #0]
 8002820:	f015 0506 	ands.w	r5, r5, #6
 8002824:	d106      	bne.n	8002834 <_printf_common+0x48>
 8002826:	f104 0a19 	add.w	sl, r4, #25
 800282a:	68e3      	ldr	r3, [r4, #12]
 800282c:	6832      	ldr	r2, [r6, #0]
 800282e:	1a9b      	subs	r3, r3, r2
 8002830:	42ab      	cmp	r3, r5
 8002832:	dc26      	bgt.n	8002882 <_printf_common+0x96>
 8002834:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002838:	6822      	ldr	r2, [r4, #0]
 800283a:	3b00      	subs	r3, #0
 800283c:	bf18      	it	ne
 800283e:	2301      	movne	r3, #1
 8002840:	0692      	lsls	r2, r2, #26
 8002842:	d42b      	bmi.n	800289c <_printf_common+0xb0>
 8002844:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002848:	4641      	mov	r1, r8
 800284a:	4638      	mov	r0, r7
 800284c:	47c8      	blx	r9
 800284e:	3001      	adds	r0, #1
 8002850:	d01e      	beq.n	8002890 <_printf_common+0xa4>
 8002852:	6823      	ldr	r3, [r4, #0]
 8002854:	6922      	ldr	r2, [r4, #16]
 8002856:	f003 0306 	and.w	r3, r3, #6
 800285a:	2b04      	cmp	r3, #4
 800285c:	bf02      	ittt	eq
 800285e:	68e5      	ldreq	r5, [r4, #12]
 8002860:	6833      	ldreq	r3, [r6, #0]
 8002862:	1aed      	subeq	r5, r5, r3
 8002864:	68a3      	ldr	r3, [r4, #8]
 8002866:	bf0c      	ite	eq
 8002868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800286c:	2500      	movne	r5, #0
 800286e:	4293      	cmp	r3, r2
 8002870:	bfc4      	itt	gt
 8002872:	1a9b      	subgt	r3, r3, r2
 8002874:	18ed      	addgt	r5, r5, r3
 8002876:	2600      	movs	r6, #0
 8002878:	341a      	adds	r4, #26
 800287a:	42b5      	cmp	r5, r6
 800287c:	d11a      	bne.n	80028b4 <_printf_common+0xc8>
 800287e:	2000      	movs	r0, #0
 8002880:	e008      	b.n	8002894 <_printf_common+0xa8>
 8002882:	2301      	movs	r3, #1
 8002884:	4652      	mov	r2, sl
 8002886:	4641      	mov	r1, r8
 8002888:	4638      	mov	r0, r7
 800288a:	47c8      	blx	r9
 800288c:	3001      	adds	r0, #1
 800288e:	d103      	bne.n	8002898 <_printf_common+0xac>
 8002890:	f04f 30ff 	mov.w	r0, #4294967295
 8002894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002898:	3501      	adds	r5, #1
 800289a:	e7c6      	b.n	800282a <_printf_common+0x3e>
 800289c:	18e1      	adds	r1, r4, r3
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	2030      	movs	r0, #48	@ 0x30
 80028a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80028a6:	4422      	add	r2, r4
 80028a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80028ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80028b0:	3302      	adds	r3, #2
 80028b2:	e7c7      	b.n	8002844 <_printf_common+0x58>
 80028b4:	2301      	movs	r3, #1
 80028b6:	4622      	mov	r2, r4
 80028b8:	4641      	mov	r1, r8
 80028ba:	4638      	mov	r0, r7
 80028bc:	47c8      	blx	r9
 80028be:	3001      	adds	r0, #1
 80028c0:	d0e6      	beq.n	8002890 <_printf_common+0xa4>
 80028c2:	3601      	adds	r6, #1
 80028c4:	e7d9      	b.n	800287a <_printf_common+0x8e>
	...

080028c8 <_printf_i>:
 80028c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80028cc:	7e0f      	ldrb	r7, [r1, #24]
 80028ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80028d0:	2f78      	cmp	r7, #120	@ 0x78
 80028d2:	4691      	mov	r9, r2
 80028d4:	4680      	mov	r8, r0
 80028d6:	460c      	mov	r4, r1
 80028d8:	469a      	mov	sl, r3
 80028da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80028de:	d807      	bhi.n	80028f0 <_printf_i+0x28>
 80028e0:	2f62      	cmp	r7, #98	@ 0x62
 80028e2:	d80a      	bhi.n	80028fa <_printf_i+0x32>
 80028e4:	2f00      	cmp	r7, #0
 80028e6:	f000 80d1 	beq.w	8002a8c <_printf_i+0x1c4>
 80028ea:	2f58      	cmp	r7, #88	@ 0x58
 80028ec:	f000 80b8 	beq.w	8002a60 <_printf_i+0x198>
 80028f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80028f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80028f8:	e03a      	b.n	8002970 <_printf_i+0xa8>
 80028fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80028fe:	2b15      	cmp	r3, #21
 8002900:	d8f6      	bhi.n	80028f0 <_printf_i+0x28>
 8002902:	a101      	add	r1, pc, #4	@ (adr r1, 8002908 <_printf_i+0x40>)
 8002904:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002908:	08002961 	.word	0x08002961
 800290c:	08002975 	.word	0x08002975
 8002910:	080028f1 	.word	0x080028f1
 8002914:	080028f1 	.word	0x080028f1
 8002918:	080028f1 	.word	0x080028f1
 800291c:	080028f1 	.word	0x080028f1
 8002920:	08002975 	.word	0x08002975
 8002924:	080028f1 	.word	0x080028f1
 8002928:	080028f1 	.word	0x080028f1
 800292c:	080028f1 	.word	0x080028f1
 8002930:	080028f1 	.word	0x080028f1
 8002934:	08002a73 	.word	0x08002a73
 8002938:	0800299f 	.word	0x0800299f
 800293c:	08002a2d 	.word	0x08002a2d
 8002940:	080028f1 	.word	0x080028f1
 8002944:	080028f1 	.word	0x080028f1
 8002948:	08002a95 	.word	0x08002a95
 800294c:	080028f1 	.word	0x080028f1
 8002950:	0800299f 	.word	0x0800299f
 8002954:	080028f1 	.word	0x080028f1
 8002958:	080028f1 	.word	0x080028f1
 800295c:	08002a35 	.word	0x08002a35
 8002960:	6833      	ldr	r3, [r6, #0]
 8002962:	1d1a      	adds	r2, r3, #4
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6032      	str	r2, [r6, #0]
 8002968:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800296c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002970:	2301      	movs	r3, #1
 8002972:	e09c      	b.n	8002aae <_printf_i+0x1e6>
 8002974:	6833      	ldr	r3, [r6, #0]
 8002976:	6820      	ldr	r0, [r4, #0]
 8002978:	1d19      	adds	r1, r3, #4
 800297a:	6031      	str	r1, [r6, #0]
 800297c:	0606      	lsls	r6, r0, #24
 800297e:	d501      	bpl.n	8002984 <_printf_i+0xbc>
 8002980:	681d      	ldr	r5, [r3, #0]
 8002982:	e003      	b.n	800298c <_printf_i+0xc4>
 8002984:	0645      	lsls	r5, r0, #25
 8002986:	d5fb      	bpl.n	8002980 <_printf_i+0xb8>
 8002988:	f9b3 5000 	ldrsh.w	r5, [r3]
 800298c:	2d00      	cmp	r5, #0
 800298e:	da03      	bge.n	8002998 <_printf_i+0xd0>
 8002990:	232d      	movs	r3, #45	@ 0x2d
 8002992:	426d      	negs	r5, r5
 8002994:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002998:	4858      	ldr	r0, [pc, #352]	@ (8002afc <_printf_i+0x234>)
 800299a:	230a      	movs	r3, #10
 800299c:	e011      	b.n	80029c2 <_printf_i+0xfa>
 800299e:	6821      	ldr	r1, [r4, #0]
 80029a0:	6833      	ldr	r3, [r6, #0]
 80029a2:	0608      	lsls	r0, r1, #24
 80029a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80029a8:	d402      	bmi.n	80029b0 <_printf_i+0xe8>
 80029aa:	0649      	lsls	r1, r1, #25
 80029ac:	bf48      	it	mi
 80029ae:	b2ad      	uxthmi	r5, r5
 80029b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80029b2:	4852      	ldr	r0, [pc, #328]	@ (8002afc <_printf_i+0x234>)
 80029b4:	6033      	str	r3, [r6, #0]
 80029b6:	bf14      	ite	ne
 80029b8:	230a      	movne	r3, #10
 80029ba:	2308      	moveq	r3, #8
 80029bc:	2100      	movs	r1, #0
 80029be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80029c2:	6866      	ldr	r6, [r4, #4]
 80029c4:	60a6      	str	r6, [r4, #8]
 80029c6:	2e00      	cmp	r6, #0
 80029c8:	db05      	blt.n	80029d6 <_printf_i+0x10e>
 80029ca:	6821      	ldr	r1, [r4, #0]
 80029cc:	432e      	orrs	r6, r5
 80029ce:	f021 0104 	bic.w	r1, r1, #4
 80029d2:	6021      	str	r1, [r4, #0]
 80029d4:	d04b      	beq.n	8002a6e <_printf_i+0x1a6>
 80029d6:	4616      	mov	r6, r2
 80029d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80029dc:	fb03 5711 	mls	r7, r3, r1, r5
 80029e0:	5dc7      	ldrb	r7, [r0, r7]
 80029e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80029e6:	462f      	mov	r7, r5
 80029e8:	42bb      	cmp	r3, r7
 80029ea:	460d      	mov	r5, r1
 80029ec:	d9f4      	bls.n	80029d8 <_printf_i+0x110>
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d10b      	bne.n	8002a0a <_printf_i+0x142>
 80029f2:	6823      	ldr	r3, [r4, #0]
 80029f4:	07df      	lsls	r7, r3, #31
 80029f6:	d508      	bpl.n	8002a0a <_printf_i+0x142>
 80029f8:	6923      	ldr	r3, [r4, #16]
 80029fa:	6861      	ldr	r1, [r4, #4]
 80029fc:	4299      	cmp	r1, r3
 80029fe:	bfde      	ittt	le
 8002a00:	2330      	movle	r3, #48	@ 0x30
 8002a02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002a06:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002a0a:	1b92      	subs	r2, r2, r6
 8002a0c:	6122      	str	r2, [r4, #16]
 8002a0e:	f8cd a000 	str.w	sl, [sp]
 8002a12:	464b      	mov	r3, r9
 8002a14:	aa03      	add	r2, sp, #12
 8002a16:	4621      	mov	r1, r4
 8002a18:	4640      	mov	r0, r8
 8002a1a:	f7ff fee7 	bl	80027ec <_printf_common>
 8002a1e:	3001      	adds	r0, #1
 8002a20:	d14a      	bne.n	8002ab8 <_printf_i+0x1f0>
 8002a22:	f04f 30ff 	mov.w	r0, #4294967295
 8002a26:	b004      	add	sp, #16
 8002a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a2c:	6823      	ldr	r3, [r4, #0]
 8002a2e:	f043 0320 	orr.w	r3, r3, #32
 8002a32:	6023      	str	r3, [r4, #0]
 8002a34:	4832      	ldr	r0, [pc, #200]	@ (8002b00 <_printf_i+0x238>)
 8002a36:	2778      	movs	r7, #120	@ 0x78
 8002a38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002a3c:	6823      	ldr	r3, [r4, #0]
 8002a3e:	6831      	ldr	r1, [r6, #0]
 8002a40:	061f      	lsls	r7, r3, #24
 8002a42:	f851 5b04 	ldr.w	r5, [r1], #4
 8002a46:	d402      	bmi.n	8002a4e <_printf_i+0x186>
 8002a48:	065f      	lsls	r7, r3, #25
 8002a4a:	bf48      	it	mi
 8002a4c:	b2ad      	uxthmi	r5, r5
 8002a4e:	6031      	str	r1, [r6, #0]
 8002a50:	07d9      	lsls	r1, r3, #31
 8002a52:	bf44      	itt	mi
 8002a54:	f043 0320 	orrmi.w	r3, r3, #32
 8002a58:	6023      	strmi	r3, [r4, #0]
 8002a5a:	b11d      	cbz	r5, 8002a64 <_printf_i+0x19c>
 8002a5c:	2310      	movs	r3, #16
 8002a5e:	e7ad      	b.n	80029bc <_printf_i+0xf4>
 8002a60:	4826      	ldr	r0, [pc, #152]	@ (8002afc <_printf_i+0x234>)
 8002a62:	e7e9      	b.n	8002a38 <_printf_i+0x170>
 8002a64:	6823      	ldr	r3, [r4, #0]
 8002a66:	f023 0320 	bic.w	r3, r3, #32
 8002a6a:	6023      	str	r3, [r4, #0]
 8002a6c:	e7f6      	b.n	8002a5c <_printf_i+0x194>
 8002a6e:	4616      	mov	r6, r2
 8002a70:	e7bd      	b.n	80029ee <_printf_i+0x126>
 8002a72:	6833      	ldr	r3, [r6, #0]
 8002a74:	6825      	ldr	r5, [r4, #0]
 8002a76:	6961      	ldr	r1, [r4, #20]
 8002a78:	1d18      	adds	r0, r3, #4
 8002a7a:	6030      	str	r0, [r6, #0]
 8002a7c:	062e      	lsls	r6, r5, #24
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	d501      	bpl.n	8002a86 <_printf_i+0x1be>
 8002a82:	6019      	str	r1, [r3, #0]
 8002a84:	e002      	b.n	8002a8c <_printf_i+0x1c4>
 8002a86:	0668      	lsls	r0, r5, #25
 8002a88:	d5fb      	bpl.n	8002a82 <_printf_i+0x1ba>
 8002a8a:	8019      	strh	r1, [r3, #0]
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	6123      	str	r3, [r4, #16]
 8002a90:	4616      	mov	r6, r2
 8002a92:	e7bc      	b.n	8002a0e <_printf_i+0x146>
 8002a94:	6833      	ldr	r3, [r6, #0]
 8002a96:	1d1a      	adds	r2, r3, #4
 8002a98:	6032      	str	r2, [r6, #0]
 8002a9a:	681e      	ldr	r6, [r3, #0]
 8002a9c:	6862      	ldr	r2, [r4, #4]
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	4630      	mov	r0, r6
 8002aa2:	f7fd fb9d 	bl	80001e0 <memchr>
 8002aa6:	b108      	cbz	r0, 8002aac <_printf_i+0x1e4>
 8002aa8:	1b80      	subs	r0, r0, r6
 8002aaa:	6060      	str	r0, [r4, #4]
 8002aac:	6863      	ldr	r3, [r4, #4]
 8002aae:	6123      	str	r3, [r4, #16]
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002ab6:	e7aa      	b.n	8002a0e <_printf_i+0x146>
 8002ab8:	6923      	ldr	r3, [r4, #16]
 8002aba:	4632      	mov	r2, r6
 8002abc:	4649      	mov	r1, r9
 8002abe:	4640      	mov	r0, r8
 8002ac0:	47d0      	blx	sl
 8002ac2:	3001      	adds	r0, #1
 8002ac4:	d0ad      	beq.n	8002a22 <_printf_i+0x15a>
 8002ac6:	6823      	ldr	r3, [r4, #0]
 8002ac8:	079b      	lsls	r3, r3, #30
 8002aca:	d413      	bmi.n	8002af4 <_printf_i+0x22c>
 8002acc:	68e0      	ldr	r0, [r4, #12]
 8002ace:	9b03      	ldr	r3, [sp, #12]
 8002ad0:	4298      	cmp	r0, r3
 8002ad2:	bfb8      	it	lt
 8002ad4:	4618      	movlt	r0, r3
 8002ad6:	e7a6      	b.n	8002a26 <_printf_i+0x15e>
 8002ad8:	2301      	movs	r3, #1
 8002ada:	4632      	mov	r2, r6
 8002adc:	4649      	mov	r1, r9
 8002ade:	4640      	mov	r0, r8
 8002ae0:	47d0      	blx	sl
 8002ae2:	3001      	adds	r0, #1
 8002ae4:	d09d      	beq.n	8002a22 <_printf_i+0x15a>
 8002ae6:	3501      	adds	r5, #1
 8002ae8:	68e3      	ldr	r3, [r4, #12]
 8002aea:	9903      	ldr	r1, [sp, #12]
 8002aec:	1a5b      	subs	r3, r3, r1
 8002aee:	42ab      	cmp	r3, r5
 8002af0:	dcf2      	bgt.n	8002ad8 <_printf_i+0x210>
 8002af2:	e7eb      	b.n	8002acc <_printf_i+0x204>
 8002af4:	2500      	movs	r5, #0
 8002af6:	f104 0619 	add.w	r6, r4, #25
 8002afa:	e7f5      	b.n	8002ae8 <_printf_i+0x220>
 8002afc:	08002e69 	.word	0x08002e69
 8002b00:	08002e7a 	.word	0x08002e7a

08002b04 <__sflush_r>:
 8002b04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b0c:	0716      	lsls	r6, r2, #28
 8002b0e:	4605      	mov	r5, r0
 8002b10:	460c      	mov	r4, r1
 8002b12:	d454      	bmi.n	8002bbe <__sflush_r+0xba>
 8002b14:	684b      	ldr	r3, [r1, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	dc02      	bgt.n	8002b20 <__sflush_r+0x1c>
 8002b1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	dd48      	ble.n	8002bb2 <__sflush_r+0xae>
 8002b20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002b22:	2e00      	cmp	r6, #0
 8002b24:	d045      	beq.n	8002bb2 <__sflush_r+0xae>
 8002b26:	2300      	movs	r3, #0
 8002b28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002b2c:	682f      	ldr	r7, [r5, #0]
 8002b2e:	6a21      	ldr	r1, [r4, #32]
 8002b30:	602b      	str	r3, [r5, #0]
 8002b32:	d030      	beq.n	8002b96 <__sflush_r+0x92>
 8002b34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002b36:	89a3      	ldrh	r3, [r4, #12]
 8002b38:	0759      	lsls	r1, r3, #29
 8002b3a:	d505      	bpl.n	8002b48 <__sflush_r+0x44>
 8002b3c:	6863      	ldr	r3, [r4, #4]
 8002b3e:	1ad2      	subs	r2, r2, r3
 8002b40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002b42:	b10b      	cbz	r3, 8002b48 <__sflush_r+0x44>
 8002b44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002b46:	1ad2      	subs	r2, r2, r3
 8002b48:	2300      	movs	r3, #0
 8002b4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002b4c:	6a21      	ldr	r1, [r4, #32]
 8002b4e:	4628      	mov	r0, r5
 8002b50:	47b0      	blx	r6
 8002b52:	1c43      	adds	r3, r0, #1
 8002b54:	89a3      	ldrh	r3, [r4, #12]
 8002b56:	d106      	bne.n	8002b66 <__sflush_r+0x62>
 8002b58:	6829      	ldr	r1, [r5, #0]
 8002b5a:	291d      	cmp	r1, #29
 8002b5c:	d82b      	bhi.n	8002bb6 <__sflush_r+0xb2>
 8002b5e:	4a2a      	ldr	r2, [pc, #168]	@ (8002c08 <__sflush_r+0x104>)
 8002b60:	40ca      	lsrs	r2, r1
 8002b62:	07d6      	lsls	r6, r2, #31
 8002b64:	d527      	bpl.n	8002bb6 <__sflush_r+0xb2>
 8002b66:	2200      	movs	r2, #0
 8002b68:	6062      	str	r2, [r4, #4]
 8002b6a:	04d9      	lsls	r1, r3, #19
 8002b6c:	6922      	ldr	r2, [r4, #16]
 8002b6e:	6022      	str	r2, [r4, #0]
 8002b70:	d504      	bpl.n	8002b7c <__sflush_r+0x78>
 8002b72:	1c42      	adds	r2, r0, #1
 8002b74:	d101      	bne.n	8002b7a <__sflush_r+0x76>
 8002b76:	682b      	ldr	r3, [r5, #0]
 8002b78:	b903      	cbnz	r3, 8002b7c <__sflush_r+0x78>
 8002b7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8002b7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002b7e:	602f      	str	r7, [r5, #0]
 8002b80:	b1b9      	cbz	r1, 8002bb2 <__sflush_r+0xae>
 8002b82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002b86:	4299      	cmp	r1, r3
 8002b88:	d002      	beq.n	8002b90 <__sflush_r+0x8c>
 8002b8a:	4628      	mov	r0, r5
 8002b8c:	f7ff fbf4 	bl	8002378 <_free_r>
 8002b90:	2300      	movs	r3, #0
 8002b92:	6363      	str	r3, [r4, #52]	@ 0x34
 8002b94:	e00d      	b.n	8002bb2 <__sflush_r+0xae>
 8002b96:	2301      	movs	r3, #1
 8002b98:	4628      	mov	r0, r5
 8002b9a:	47b0      	blx	r6
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	1c50      	adds	r0, r2, #1
 8002ba0:	d1c9      	bne.n	8002b36 <__sflush_r+0x32>
 8002ba2:	682b      	ldr	r3, [r5, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0c6      	beq.n	8002b36 <__sflush_r+0x32>
 8002ba8:	2b1d      	cmp	r3, #29
 8002baa:	d001      	beq.n	8002bb0 <__sflush_r+0xac>
 8002bac:	2b16      	cmp	r3, #22
 8002bae:	d11e      	bne.n	8002bee <__sflush_r+0xea>
 8002bb0:	602f      	str	r7, [r5, #0]
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	e022      	b.n	8002bfc <__sflush_r+0xf8>
 8002bb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bba:	b21b      	sxth	r3, r3
 8002bbc:	e01b      	b.n	8002bf6 <__sflush_r+0xf2>
 8002bbe:	690f      	ldr	r7, [r1, #16]
 8002bc0:	2f00      	cmp	r7, #0
 8002bc2:	d0f6      	beq.n	8002bb2 <__sflush_r+0xae>
 8002bc4:	0793      	lsls	r3, r2, #30
 8002bc6:	680e      	ldr	r6, [r1, #0]
 8002bc8:	bf08      	it	eq
 8002bca:	694b      	ldreq	r3, [r1, #20]
 8002bcc:	600f      	str	r7, [r1, #0]
 8002bce:	bf18      	it	ne
 8002bd0:	2300      	movne	r3, #0
 8002bd2:	eba6 0807 	sub.w	r8, r6, r7
 8002bd6:	608b      	str	r3, [r1, #8]
 8002bd8:	f1b8 0f00 	cmp.w	r8, #0
 8002bdc:	dde9      	ble.n	8002bb2 <__sflush_r+0xae>
 8002bde:	6a21      	ldr	r1, [r4, #32]
 8002be0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002be2:	4643      	mov	r3, r8
 8002be4:	463a      	mov	r2, r7
 8002be6:	4628      	mov	r0, r5
 8002be8:	47b0      	blx	r6
 8002bea:	2800      	cmp	r0, #0
 8002bec:	dc08      	bgt.n	8002c00 <__sflush_r+0xfc>
 8002bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002bf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bf6:	81a3      	strh	r3, [r4, #12]
 8002bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c00:	4407      	add	r7, r0
 8002c02:	eba8 0800 	sub.w	r8, r8, r0
 8002c06:	e7e7      	b.n	8002bd8 <__sflush_r+0xd4>
 8002c08:	20400001 	.word	0x20400001

08002c0c <_fflush_r>:
 8002c0c:	b538      	push	{r3, r4, r5, lr}
 8002c0e:	690b      	ldr	r3, [r1, #16]
 8002c10:	4605      	mov	r5, r0
 8002c12:	460c      	mov	r4, r1
 8002c14:	b913      	cbnz	r3, 8002c1c <_fflush_r+0x10>
 8002c16:	2500      	movs	r5, #0
 8002c18:	4628      	mov	r0, r5
 8002c1a:	bd38      	pop	{r3, r4, r5, pc}
 8002c1c:	b118      	cbz	r0, 8002c26 <_fflush_r+0x1a>
 8002c1e:	6a03      	ldr	r3, [r0, #32]
 8002c20:	b90b      	cbnz	r3, 8002c26 <_fflush_r+0x1a>
 8002c22:	f7ff f9af 	bl	8001f84 <__sinit>
 8002c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f3      	beq.n	8002c16 <_fflush_r+0xa>
 8002c2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002c30:	07d0      	lsls	r0, r2, #31
 8002c32:	d404      	bmi.n	8002c3e <_fflush_r+0x32>
 8002c34:	0599      	lsls	r1, r3, #22
 8002c36:	d402      	bmi.n	8002c3e <_fflush_r+0x32>
 8002c38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002c3a:	f7ff fb9a 	bl	8002372 <__retarget_lock_acquire_recursive>
 8002c3e:	4628      	mov	r0, r5
 8002c40:	4621      	mov	r1, r4
 8002c42:	f7ff ff5f 	bl	8002b04 <__sflush_r>
 8002c46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002c48:	07da      	lsls	r2, r3, #31
 8002c4a:	4605      	mov	r5, r0
 8002c4c:	d4e4      	bmi.n	8002c18 <_fflush_r+0xc>
 8002c4e:	89a3      	ldrh	r3, [r4, #12]
 8002c50:	059b      	lsls	r3, r3, #22
 8002c52:	d4e1      	bmi.n	8002c18 <_fflush_r+0xc>
 8002c54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002c56:	f7ff fb8d 	bl	8002374 <__retarget_lock_release_recursive>
 8002c5a:	e7dd      	b.n	8002c18 <_fflush_r+0xc>

08002c5c <__swhatbuf_r>:
 8002c5c:	b570      	push	{r4, r5, r6, lr}
 8002c5e:	460c      	mov	r4, r1
 8002c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c64:	2900      	cmp	r1, #0
 8002c66:	b096      	sub	sp, #88	@ 0x58
 8002c68:	4615      	mov	r5, r2
 8002c6a:	461e      	mov	r6, r3
 8002c6c:	da0d      	bge.n	8002c8a <__swhatbuf_r+0x2e>
 8002c6e:	89a3      	ldrh	r3, [r4, #12]
 8002c70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002c74:	f04f 0100 	mov.w	r1, #0
 8002c78:	bf14      	ite	ne
 8002c7a:	2340      	movne	r3, #64	@ 0x40
 8002c7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002c80:	2000      	movs	r0, #0
 8002c82:	6031      	str	r1, [r6, #0]
 8002c84:	602b      	str	r3, [r5, #0]
 8002c86:	b016      	add	sp, #88	@ 0x58
 8002c88:	bd70      	pop	{r4, r5, r6, pc}
 8002c8a:	466a      	mov	r2, sp
 8002c8c:	f000 f848 	bl	8002d20 <_fstat_r>
 8002c90:	2800      	cmp	r0, #0
 8002c92:	dbec      	blt.n	8002c6e <__swhatbuf_r+0x12>
 8002c94:	9901      	ldr	r1, [sp, #4]
 8002c96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002c9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002c9e:	4259      	negs	r1, r3
 8002ca0:	4159      	adcs	r1, r3
 8002ca2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ca6:	e7eb      	b.n	8002c80 <__swhatbuf_r+0x24>

08002ca8 <__smakebuf_r>:
 8002ca8:	898b      	ldrh	r3, [r1, #12]
 8002caa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002cac:	079d      	lsls	r5, r3, #30
 8002cae:	4606      	mov	r6, r0
 8002cb0:	460c      	mov	r4, r1
 8002cb2:	d507      	bpl.n	8002cc4 <__smakebuf_r+0x1c>
 8002cb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002cb8:	6023      	str	r3, [r4, #0]
 8002cba:	6123      	str	r3, [r4, #16]
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	6163      	str	r3, [r4, #20]
 8002cc0:	b003      	add	sp, #12
 8002cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cc4:	ab01      	add	r3, sp, #4
 8002cc6:	466a      	mov	r2, sp
 8002cc8:	f7ff ffc8 	bl	8002c5c <__swhatbuf_r>
 8002ccc:	9f00      	ldr	r7, [sp, #0]
 8002cce:	4605      	mov	r5, r0
 8002cd0:	4639      	mov	r1, r7
 8002cd2:	4630      	mov	r0, r6
 8002cd4:	f7ff fbbc 	bl	8002450 <_malloc_r>
 8002cd8:	b948      	cbnz	r0, 8002cee <__smakebuf_r+0x46>
 8002cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cde:	059a      	lsls	r2, r3, #22
 8002ce0:	d4ee      	bmi.n	8002cc0 <__smakebuf_r+0x18>
 8002ce2:	f023 0303 	bic.w	r3, r3, #3
 8002ce6:	f043 0302 	orr.w	r3, r3, #2
 8002cea:	81a3      	strh	r3, [r4, #12]
 8002cec:	e7e2      	b.n	8002cb4 <__smakebuf_r+0xc>
 8002cee:	89a3      	ldrh	r3, [r4, #12]
 8002cf0:	6020      	str	r0, [r4, #0]
 8002cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cf6:	81a3      	strh	r3, [r4, #12]
 8002cf8:	9b01      	ldr	r3, [sp, #4]
 8002cfa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002cfe:	b15b      	cbz	r3, 8002d18 <__smakebuf_r+0x70>
 8002d00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d04:	4630      	mov	r0, r6
 8002d06:	f000 f81d 	bl	8002d44 <_isatty_r>
 8002d0a:	b128      	cbz	r0, 8002d18 <__smakebuf_r+0x70>
 8002d0c:	89a3      	ldrh	r3, [r4, #12]
 8002d0e:	f023 0303 	bic.w	r3, r3, #3
 8002d12:	f043 0301 	orr.w	r3, r3, #1
 8002d16:	81a3      	strh	r3, [r4, #12]
 8002d18:	89a3      	ldrh	r3, [r4, #12]
 8002d1a:	431d      	orrs	r5, r3
 8002d1c:	81a5      	strh	r5, [r4, #12]
 8002d1e:	e7cf      	b.n	8002cc0 <__smakebuf_r+0x18>

08002d20 <_fstat_r>:
 8002d20:	b538      	push	{r3, r4, r5, lr}
 8002d22:	4d07      	ldr	r5, [pc, #28]	@ (8002d40 <_fstat_r+0x20>)
 8002d24:	2300      	movs	r3, #0
 8002d26:	4604      	mov	r4, r0
 8002d28:	4608      	mov	r0, r1
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	602b      	str	r3, [r5, #0]
 8002d2e:	f7fd fcae 	bl	800068e <_fstat>
 8002d32:	1c43      	adds	r3, r0, #1
 8002d34:	d102      	bne.n	8002d3c <_fstat_r+0x1c>
 8002d36:	682b      	ldr	r3, [r5, #0]
 8002d38:	b103      	cbz	r3, 8002d3c <_fstat_r+0x1c>
 8002d3a:	6023      	str	r3, [r4, #0]
 8002d3c:	bd38      	pop	{r3, r4, r5, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000210 	.word	0x20000210

08002d44 <_isatty_r>:
 8002d44:	b538      	push	{r3, r4, r5, lr}
 8002d46:	4d06      	ldr	r5, [pc, #24]	@ (8002d60 <_isatty_r+0x1c>)
 8002d48:	2300      	movs	r3, #0
 8002d4a:	4604      	mov	r4, r0
 8002d4c:	4608      	mov	r0, r1
 8002d4e:	602b      	str	r3, [r5, #0]
 8002d50:	f7fd fcad 	bl	80006ae <_isatty>
 8002d54:	1c43      	adds	r3, r0, #1
 8002d56:	d102      	bne.n	8002d5e <_isatty_r+0x1a>
 8002d58:	682b      	ldr	r3, [r5, #0]
 8002d5a:	b103      	cbz	r3, 8002d5e <_isatty_r+0x1a>
 8002d5c:	6023      	str	r3, [r4, #0]
 8002d5e:	bd38      	pop	{r3, r4, r5, pc}
 8002d60:	20000210 	.word	0x20000210

08002d64 <_sbrk_r>:
 8002d64:	b538      	push	{r3, r4, r5, lr}
 8002d66:	4d06      	ldr	r5, [pc, #24]	@ (8002d80 <_sbrk_r+0x1c>)
 8002d68:	2300      	movs	r3, #0
 8002d6a:	4604      	mov	r4, r0
 8002d6c:	4608      	mov	r0, r1
 8002d6e:	602b      	str	r3, [r5, #0]
 8002d70:	f7fd fcb6 	bl	80006e0 <_sbrk>
 8002d74:	1c43      	adds	r3, r0, #1
 8002d76:	d102      	bne.n	8002d7e <_sbrk_r+0x1a>
 8002d78:	682b      	ldr	r3, [r5, #0]
 8002d7a:	b103      	cbz	r3, 8002d7e <_sbrk_r+0x1a>
 8002d7c:	6023      	str	r3, [r4, #0]
 8002d7e:	bd38      	pop	{r3, r4, r5, pc}
 8002d80:	20000210 	.word	0x20000210

08002d84 <_init>:
 8002d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d86:	bf00      	nop
 8002d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d8a:	bc08      	pop	{r3}
 8002d8c:	469e      	mov	lr, r3
 8002d8e:	4770      	bx	lr

08002d90 <_fini>:
 8002d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d92:	bf00      	nop
 8002d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d96:	bc08      	pop	{r3}
 8002d98:	469e      	mov	lr, r3
 8002d9a:	4770      	bx	lr
