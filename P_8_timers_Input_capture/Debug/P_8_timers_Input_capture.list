
P_8_timers_Input_capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000568c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  08005830  08005830  00006830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bdc  08005bdc  000071d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005bdc  08005bdc  00006bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005be4  08005be4  000071d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005be4  08005be4  00006be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005be8  08005be8  00006be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08005bec  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  200001d8  08005dc4  000071d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08005dc4  0000739c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000071d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009157  00000000  00000000  00007208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000188b  00000000  00000000  0001035f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  00011bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007a2  00000000  00000000  000125e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016bad  00000000  00000000  00012d8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae1b  00000000  00000000  00029937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d7de  00000000  00000000  00034752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1f30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039e4  00000000  00000000  000c1f74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000c5958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005814 	.word	0x08005814

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08005814 	.word	0x08005814

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <SysTick_Handler>:
#include "stm32f4xx_hal.h"
extern TIM_HandleTypeDef timer2;
void SysTick_Handler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000ee8:	f000 fb38 	bl	800155c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000eec:	f000 fc67 	bl	80017be <HAL_SYSTICK_IRQHandler>
}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&timer2);
 8000ef8:	4802      	ldr	r0, [pc, #8]	@ (8000f04 <TIM2_IRQHandler+0x10>)
 8000efa:	f001 fc07 	bl	800270c <HAL_TIM_IRQHandler>
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200001f4 	.word	0x200001f4

08000f08 <main>:
uint8_t count = 1;
uint32_t capture[2] = {0};
uint8_t is_capture_done = 0;

int main(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	@ 0x28
 8000f0c:	af00      	add	r7, sp, #0
	HAL_Init();
 8000f0e:	f000 facb 	bl	80014a8 <HAL_Init>
	GPIO_SWO();
 8000f12:	f000 f88f 	bl	8001034 <GPIO_SWO>
	LSE_Init();
 8000f16:	f000 f8eb 	bl	80010f0 <LSE_Init>
	SysClk_config();
 8000f1a:	f000 f909 	bl	8001130 <SysClk_config>
	TIMER_Init();
 8000f1e:	f000 f8b5 	bl	800108c <TIMER_Init>
	printf("Hello \n");
 8000f22:	483d      	ldr	r0, [pc, #244]	@ (8001018 <main+0x110>)
 8000f24:	f002 fd02 	bl	800392c <puts>

	// Start the timer
	if (HAL_TIM_IC_Start_IT(&timer2, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 8000f28:	2100      	movs	r1, #0
 8000f2a:	483c      	ldr	r0, [pc, #240]	@ (800101c <main+0x114>)
 8000f2c:	f001 fad4 	bl	80024d8 <HAL_TIM_IC_Start_IT>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <main+0x32>
 8000f36:	f000 f8a5 	bl	8001084 <Error_Handler>
	uint32_t difference = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	@ 0x24
	double counter_time_period = 0;
 8000f3e:	f04f 0200 	mov.w	r2, #0
 8000f42:	f04f 0300 	mov.w	r3, #0
 8000f46:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double counter_freq;
	double signal_time_period = 0;
 8000f4a:	f04f 0200 	mov.w	r2, #0
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double signal_freq = 0;
 8000f56:	f04f 0200 	mov.w	r2, #0
 8000f5a:	f04f 0300 	mov.w	r3, #0
 8000f5e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	while(1)
	{
		if(is_capture_done == 1)
 8000f62:	4b2f      	ldr	r3, [pc, #188]	@ (8001020 <main+0x118>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d1fb      	bne.n	8000f62 <main+0x5a>
		{
			if(capture[1] > capture[0])
 8000f6a:	4b2e      	ldr	r3, [pc, #184]	@ (8001024 <main+0x11c>)
 8000f6c:	685a      	ldr	r2, [r3, #4]
 8000f6e:	4b2d      	ldr	r3, [pc, #180]	@ (8001024 <main+0x11c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d906      	bls.n	8000f84 <main+0x7c>
			{
				difference = capture[1] - capture[0];
 8000f76:	4b2b      	ldr	r3, [pc, #172]	@ (8001024 <main+0x11c>)
 8000f78:	685a      	ldr	r2, [r3, #4]
 8000f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8001024 <main+0x11c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f82:	e006      	b.n	8000f92 <main+0x8a>
			}
			else
			{
				difference = (0xFFFFFFFF - capture[0]) + capture[1];
 8000f84:	4b27      	ldr	r3, [pc, #156]	@ (8001024 <main+0x11c>)
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	4b26      	ldr	r3, [pc, #152]	@ (8001024 <main+0x11c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	627b      	str	r3, [r7, #36]	@ 0x24
			}

			counter_freq = (HAL_RCC_GetPCLK1Freq() * 1) / (timer2.Init.Prescaler + 1);
 8000f92:	f001 fa3d 	bl	8002410 <HAL_RCC_GetPCLK1Freq>
 8000f96:	4602      	mov	r2, r0
 8000f98:	4b20      	ldr	r3, [pc, #128]	@ (800101c <main+0x114>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fab6 	bl	8000514 <__aeabi_ui2d>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	e9c7 2300 	strd	r2, r3, [r7]
			counter_time_period = 1.0 / counter_freq;
 8000fb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fb4:	f04f 0000 	mov.w	r0, #0
 8000fb8:	491b      	ldr	r1, [pc, #108]	@ (8001028 <main+0x120>)
 8000fba:	f7ff fc4f 	bl	800085c <__aeabi_ddiv>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	e9c7 2306 	strd	r2, r3, [r7, #24]
			signal_time_period = difference * counter_time_period;
 8000fc6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000fc8:	f7ff faa4 	bl	8000514 <__aeabi_ui2d>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000fd4:	f7ff fb18 	bl	8000608 <__aeabi_dmul>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	e9c7 2304 	strd	r2, r3, [r7, #16]
			signal_freq = 1.0 / signal_time_period;
 8000fe0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000fe4:	f04f 0000 	mov.w	r0, #0
 8000fe8:	490f      	ldr	r1, [pc, #60]	@ (8001028 <main+0x120>)
 8000fea:	f7ff fc37 	bl	800085c <__aeabi_ddiv>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	e9c7 2302 	strd	r2, r3, [r7, #8]
			printf("pclk1 = %lu\n", HAL_RCC_GetPCLK1Freq());
 8000ff6:	f001 fa0b 	bl	8002410 <HAL_RCC_GetPCLK1Freq>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	480b      	ldr	r0, [pc, #44]	@ (800102c <main+0x124>)
 8001000:	f002 fc2c 	bl	800385c <iprintf>
			printf("%f \n",signal_freq);
 8001004:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001008:	4809      	ldr	r0, [pc, #36]	@ (8001030 <main+0x128>)
 800100a:	f002 fc27 	bl	800385c <iprintf>
			is_capture_done = 0;
 800100e:	4b04      	ldr	r3, [pc, #16]	@ (8001020 <main+0x118>)
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
		if(is_capture_done == 1)
 8001014:	e7a5      	b.n	8000f62 <main+0x5a>
 8001016:	bf00      	nop
 8001018:	08005830 	.word	0x08005830
 800101c:	200001f4 	.word	0x200001f4
 8001020:	20000244 	.word	0x20000244
 8001024:	2000023c 	.word	0x2000023c
 8001028:	3ff00000 	.word	0x3ff00000
 800102c:	08005838 	.word	0x08005838
 8001030:	08005848 	.word	0x08005848

08001034 <GPIO_SWO>:


}

void GPIO_SWO(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	4b0f      	ldr	r3, [pc, #60]	@ (800107c <GPIO_SWO+0x48>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	4a0e      	ldr	r2, [pc, #56]	@ (800107c <GPIO_SWO+0x48>)
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	6313      	str	r3, [r2, #48]	@ 0x30
 800104a:	4b0c      	ldr	r3, [pc, #48]	@ (800107c <GPIO_SWO+0x48>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef gpio_swo;
	gpio_swo.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	60bb      	str	r3, [r7, #8]
	gpio_swo.Pin = GPIO_PIN_3;
 800105a:	2308      	movs	r3, #8
 800105c:	607b      	str	r3, [r7, #4]
	gpio_swo.Alternate = GPIO_AF0_SWJ;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
	gpio_swo.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
	gpio_swo.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(GPIOB, &gpio_swo);
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	4619      	mov	r1, r3
 800106e:	4804      	ldr	r0, [pc, #16]	@ (8001080 <GPIO_SWO+0x4c>)
 8001070:	f000 fbb2 	bl	80017d8 <HAL_GPIO_Init>
}
 8001074:	bf00      	nop
 8001076:	3718      	adds	r7, #24
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40023800 	.word	0x40023800
 8001080:	40020400 	.word	0x40020400

08001084 <Error_Handler>:



void Error_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
	while(1);
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <Error_Handler+0x4>

0800108c <TIMER_Init>:
}


void TIMER_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
	timer2.Instance = TIM2;
 8001092:	4b16      	ldr	r3, [pc, #88]	@ (80010ec <TIMER_Init+0x60>)
 8001094:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001098:	601a      	str	r2, [r3, #0]
	timer2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109a:	4b14      	ldr	r3, [pc, #80]	@ (80010ec <TIMER_Init+0x60>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
	timer2.Init.Period = 0xFFFFFFFF;
 80010a0:	4b12      	ldr	r3, [pc, #72]	@ (80010ec <TIMER_Init+0x60>)
 80010a2:	f04f 32ff 	mov.w	r2, #4294967295
 80010a6:	60da      	str	r2, [r3, #12]
	timer2.Init.Prescaler = 1;
 80010a8:	4b10      	ldr	r3, [pc, #64]	@ (80010ec <TIMER_Init+0x60>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	605a      	str	r2, [r3, #4]
	if(HAL_TIM_IC_Init(&timer2) != HAL_OK) Error_Handler();
 80010ae:	480f      	ldr	r0, [pc, #60]	@ (80010ec <TIMER_Init+0x60>)
 80010b0:	f001 f9c2 	bl	8002438 <HAL_TIM_IC_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <TIMER_Init+0x32>
 80010ba:	f7ff ffe3 	bl	8001084 <Error_Handler>

	TIM_IC_InitTypeDef timer2IC;

	timer2IC.ICFilter = 1;
 80010be:	2301      	movs	r3, #1
 80010c0:	60fb      	str	r3, [r7, #12]
	timer2IC.ICPolarity = TIM_ICPOLARITY_RISING;
 80010c2:	2300      	movs	r3, #0
 80010c4:	603b      	str	r3, [r7, #0]
	timer2IC.ICPrescaler = TIM_ICPSC_DIV1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60bb      	str	r3, [r7, #8]
	timer2IC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010ca:	2301      	movs	r3, #1
 80010cc:	607b      	str	r3, [r7, #4]

	if(HAL_TIM_IC_ConfigChannel(&timer2, &timer2IC, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 80010ce:	463b      	mov	r3, r7
 80010d0:	2200      	movs	r2, #0
 80010d2:	4619      	mov	r1, r3
 80010d4:	4805      	ldr	r0, [pc, #20]	@ (80010ec <TIMER_Init+0x60>)
 80010d6:	f001 fc09 	bl	80028ec <HAL_TIM_IC_ConfigChannel>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <TIMER_Init+0x58>
 80010e0:	f7ff ffd0 	bl	8001084 <Error_Handler>

}
 80010e4:	bf00      	nop
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200001f4 	.word	0x200001f4

080010f0 <LSE_Init>:

void LSE_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08c      	sub	sp, #48	@ 0x30
 80010f4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef lse;
	lse.OscillatorType = RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_HSE;// Hse is configured here as it is used as sys
 80010f6:	2305      	movs	r3, #5
 80010f8:	603b      	str	r3, [r7, #0]
	// clk here
	lse.LSEState = RCC_LSE_ON;
 80010fa:	2301      	movs	r3, #1
 80010fc:	60bb      	str	r3, [r7, #8]
	lse.HSEState = RCC_HSE_ON;
 80010fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001102:	607b      	str	r3, [r7, #4]
	lse.PLL.PLLState = RCC_PLL_NONE;
 8001104:	2300      	movs	r3, #0
 8001106:	61bb      	str	r3, [r7, #24]
	if(HAL_RCC_OscConfig(&lse) != HAL_OK) Error_Handler();
 8001108:	463b      	mov	r3, r7
 800110a:	4618      	mov	r0, r3
 800110c:	f000 fce8 	bl	8001ae0 <HAL_RCC_OscConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <LSE_Init+0x2a>
 8001116:	f7ff ffb5 	bl	8001084 <Error_Handler>

	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_LSE, RCC_MCODIV_1);
 800111a:	2200      	movs	r2, #0
 800111c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8001120:	2000      	movs	r0, #0
 8001122:	f001 f83b 	bl	800219c <HAL_RCC_MCOConfig>

}
 8001126:	bf00      	nop
 8001128:	3730      	adds	r7, #48	@ 0x30
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <SysClk_config>:

void SysClk_config(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef clk;
	clk.ClockType = RCC_CLOCKTYPE_SYSCLK;
 8001136:	2301      	movs	r3, #1
 8001138:	607b      	str	r3, [r7, #4]
	clk.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800113a:	2301      	movs	r3, #1
 800113c:	60bb      	str	r3, [r7, #8]
	HAL_RCC_ClockConfig(&clk, FLASH_ACR_LATENCY_0WS);
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f000 ff44 	bl	8001fd0 <HAL_RCC_ClockConfig>
	__HAL_RCC_HSI_DISABLE();// always disable hsi after making hse as clock source not before that
 8001148:	4b03      	ldr	r3, [pc, #12]	@ (8001158 <SysClk_config+0x28>)
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]

}
 800114e:	bf00      	nop
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	42470000 	.word	0x42470000

0800115c <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	if(is_capture_done == 0)
 8001164:	4b14      	ldr	r3, [pc, #80]	@ (80011b8 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d11e      	bne.n	80011aa <HAL_TIM_IC_CaptureCallback+0x4e>
	{
		if(count == 1)
 800116c:	4b13      	ldr	r3, [pc, #76]	@ (80011bc <HAL_TIM_IC_CaptureCallback+0x60>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d10b      	bne.n	800118c <HAL_TIM_IC_CaptureCallback+0x30>
		{
			capture[0] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800117a:	4a11      	ldr	r2, [pc, #68]	@ (80011c0 <HAL_TIM_IC_CaptureCallback+0x64>)
 800117c:	6013      	str	r3, [r2, #0]
			count ++;
 800117e:	4b0f      	ldr	r3, [pc, #60]	@ (80011bc <HAL_TIM_IC_CaptureCallback+0x60>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	3301      	adds	r3, #1
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4b0d      	ldr	r3, [pc, #52]	@ (80011bc <HAL_TIM_IC_CaptureCallback+0x60>)
 8001188:	701a      	strb	r2, [r3, #0]
			capture[1] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
			is_capture_done = 1;
			count = 1;
		}
	}
}
 800118a:	e00e      	b.n	80011aa <HAL_TIM_IC_CaptureCallback+0x4e>
		else if (count == 2)
 800118c:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <HAL_TIM_IC_CaptureCallback+0x60>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b02      	cmp	r3, #2
 8001192:	d10a      	bne.n	80011aa <HAL_TIM_IC_CaptureCallback+0x4e>
			capture[1] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800119a:	4a09      	ldr	r2, [pc, #36]	@ (80011c0 <HAL_TIM_IC_CaptureCallback+0x64>)
 800119c:	6053      	str	r3, [r2, #4]
			is_capture_done = 1;
 800119e:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <HAL_TIM_IC_CaptureCallback+0x5c>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	701a      	strb	r2, [r3, #0]
			count = 1;
 80011a4:	4b05      	ldr	r3, [pc, #20]	@ (80011bc <HAL_TIM_IC_CaptureCallback+0x60>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	701a      	strb	r2, [r3, #0]
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000244 	.word	0x20000244
 80011bc:	20000000 	.word	0x20000000
 80011c0:	2000023c 	.word	0x2000023c

080011c4 <HAL_TIM_IC_MspInit>:
#include "stm32f4xx_hal.h"
void GPIO_Init_tim(void);

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	//1. Enable the clock for the peripheral
	__HAL_RCC_TIM2_CLK_ENABLE();
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001204 <HAL_TIM_IC_MspInit+0x40>)
 80011d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001204 <HAL_TIM_IC_MspInit+0x40>)
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	6413      	str	r3, [r2, #64]	@ 0x40
 80011dc:	4b09      	ldr	r3, [pc, #36]	@ (8001204 <HAL_TIM_IC_MspInit+0x40>)
 80011de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]

	//2. Enable the channel ( by alternate function mapping of the gpios)
	GPIO_Init_tim();
 80011e8:	f000 f80e 	bl	8001208 <GPIO_Init_tim>

	//3. nvic settings
	HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	210f      	movs	r1, #15
 80011f0:	201c      	movs	r0, #28
 80011f2:	f000 faae 	bl	8001752 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011f6:	201c      	movs	r0, #28
 80011f8:	f000 fac7 	bl	800178a <HAL_NVIC_EnableIRQ>
}
 80011fc:	bf00      	nop
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40023800 	.word	0x40023800

08001208 <GPIO_Init_tim>:

void GPIO_Init_tim(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpiotim;
	gpiotim.Alternate = GPIO_AF1_TIM2;
 800120e:	2301      	movs	r3, #1
 8001210:	617b      	str	r3, [r7, #20]
	gpiotim.Pin = GPIO_PIN_0;
 8001212:	2301      	movs	r3, #1
 8001214:	607b      	str	r3, [r7, #4]
	gpiotim.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	60bb      	str	r3, [r7, #8]
	gpiotim.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	603b      	str	r3, [r7, #0]
 8001222:	4b0a      	ldr	r3, [pc, #40]	@ (800124c <GPIO_Init_tim+0x44>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	4a09      	ldr	r2, [pc, #36]	@ (800124c <GPIO_Init_tim+0x44>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6313      	str	r3, [r2, #48]	@ 0x30
 800122e:	4b07      	ldr	r3, [pc, #28]	@ (800124c <GPIO_Init_tim+0x44>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	603b      	str	r3, [r7, #0]
 8001238:	683b      	ldr	r3, [r7, #0]

	HAL_GPIO_Init(GPIOA,  &gpiotim);
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	4619      	mov	r1, r3
 800123e:	4804      	ldr	r0, [pc, #16]	@ (8001250 <GPIO_Init_tim+0x48>)
 8001240:	f000 faca 	bl	80017d8 <HAL_GPIO_Init>
}
 8001244:	bf00      	nop
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40023800 	.word	0x40023800
 8001250:	40020000 	.word	0x40020000

08001254 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800125e:	4b0f      	ldr	r3, [pc, #60]	@ (800129c <ITM_SendChar+0x48>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a0e      	ldr	r2, [pc, #56]	@ (800129c <ITM_SendChar+0x48>)
 8001264:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001268:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800126a:	4b0d      	ldr	r3, [pc, #52]	@ (80012a0 <ITM_SendChar+0x4c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a0c      	ldr	r2, [pc, #48]	@ (80012a0 <ITM_SendChar+0x4c>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001276:	bf00      	nop
 8001278:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0f8      	beq.n	8001278 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001286:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	6013      	str	r3, [r2, #0]
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000edfc 	.word	0xe000edfc
 80012a0:	e0000e00 	.word	0xe0000e00

080012a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return 1;
 80012a8:	2301      	movs	r3, #1
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <_kill>:

int _kill(int pid, int sig)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012be:	f002 fc67 	bl	8003b90 <__errno>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2216      	movs	r2, #22
 80012c6:	601a      	str	r2, [r3, #0]
  return -1;
 80012c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <_exit>:

void _exit (int status)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012dc:	f04f 31ff 	mov.w	r1, #4294967295
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ffe7 	bl	80012b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012e6:	bf00      	nop
 80012e8:	e7fd      	b.n	80012e6 <_exit+0x12>

080012ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b086      	sub	sp, #24
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	60f8      	str	r0, [r7, #12]
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	e00a      	b.n	8001312 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012fc:	f3af 8000 	nop.w
 8001300:	4601      	mov	r1, r0
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	1c5a      	adds	r2, r3, #1
 8001306:	60ba      	str	r2, [r7, #8]
 8001308:	b2ca      	uxtb	r2, r1
 800130a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	3301      	adds	r3, #1
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	429a      	cmp	r2, r3
 8001318:	dbf0      	blt.n	80012fc <_read+0x12>
  }

  return len;
 800131a:	687b      	ldr	r3, [r7, #4]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	e009      	b.n	800134a <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	1c5a      	adds	r2, r3, #1
 800133a:	60ba      	str	r2, [r7, #8]
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff ff88 	bl	8001254 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	3301      	adds	r3, #1
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	429a      	cmp	r2, r3
 8001350:	dbf1      	blt.n	8001336 <_write+0x12>
  }
  return len;
 8001352:	687b      	ldr	r3, [r7, #4]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <_close>:

int _close(int file)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001364:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001368:	4618      	mov	r0, r3
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001384:	605a      	str	r2, [r3, #4]
  return 0;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <_isatty>:

int _isatty(int file)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800139c:	2301      	movs	r3, #1
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b085      	sub	sp, #20
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	60f8      	str	r0, [r7, #12]
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013cc:	4a14      	ldr	r2, [pc, #80]	@ (8001420 <_sbrk+0x5c>)
 80013ce:	4b15      	ldr	r3, [pc, #84]	@ (8001424 <_sbrk+0x60>)
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d8:	4b13      	ldr	r3, [pc, #76]	@ (8001428 <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d102      	bne.n	80013e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e0:	4b11      	ldr	r3, [pc, #68]	@ (8001428 <_sbrk+0x64>)
 80013e2:	4a12      	ldr	r2, [pc, #72]	@ (800142c <_sbrk+0x68>)
 80013e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013e6:	4b10      	ldr	r3, [pc, #64]	@ (8001428 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d207      	bcs.n	8001404 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f4:	f002 fbcc 	bl	8003b90 <__errno>
 80013f8:	4603      	mov	r3, r0
 80013fa:	220c      	movs	r2, #12
 80013fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001402:	e009      	b.n	8001418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001404:	4b08      	ldr	r3, [pc, #32]	@ (8001428 <_sbrk+0x64>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800140a:	4b07      	ldr	r3, [pc, #28]	@ (8001428 <_sbrk+0x64>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	4a05      	ldr	r2, [pc, #20]	@ (8001428 <_sbrk+0x64>)
 8001414:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001416:	68fb      	ldr	r3, [r7, #12]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20020000 	.word	0x20020000
 8001424:	00000400 	.word	0x00000400
 8001428:	20000248 	.word	0x20000248
 800142c:	200003a0 	.word	0x200003a0

08001430 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001434:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <SystemInit+0x20>)
 8001436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800143a:	4a05      	ldr	r2, [pc, #20]	@ (8001450 <SystemInit+0x20>)
 800143c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001440:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001454:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800148c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001458:	f7ff ffea 	bl	8001430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800145c:	480c      	ldr	r0, [pc, #48]	@ (8001490 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800145e:	490d      	ldr	r1, [pc, #52]	@ (8001494 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001460:	4a0d      	ldr	r2, [pc, #52]	@ (8001498 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001464:	e002      	b.n	800146c <LoopCopyDataInit>

08001466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146a:	3304      	adds	r3, #4

0800146c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800146c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001470:	d3f9      	bcc.n	8001466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001472:	4a0a      	ldr	r2, [pc, #40]	@ (800149c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001474:	4c0a      	ldr	r4, [pc, #40]	@ (80014a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001478:	e001      	b.n	800147e <LoopFillZerobss>

0800147a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800147c:	3204      	adds	r2, #4

0800147e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001480:	d3fb      	bcc.n	800147a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001482:	f002 fb8b 	bl	8003b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001486:	f7ff fd3f 	bl	8000f08 <main>
  bx  lr    
 800148a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800148c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001494:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001498:	08005bec 	.word	0x08005bec
  ldr r2, =_sbss
 800149c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80014a0:	2000039c 	.word	0x2000039c

080014a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014a4:	e7fe      	b.n	80014a4 <ADC_IRQHandler>
	...

080014a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014ac:	4b0e      	ldr	r3, [pc, #56]	@ (80014e8 <HAL_Init+0x40>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a0d      	ldr	r2, [pc, #52]	@ (80014e8 <HAL_Init+0x40>)
 80014b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014b8:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <HAL_Init+0x40>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a0a      	ldr	r2, [pc, #40]	@ (80014e8 <HAL_Init+0x40>)
 80014be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c4:	4b08      	ldr	r3, [pc, #32]	@ (80014e8 <HAL_Init+0x40>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a07      	ldr	r2, [pc, #28]	@ (80014e8 <HAL_Init+0x40>)
 80014ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d0:	2003      	movs	r0, #3
 80014d2:	f000 f933 	bl	800173c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014d6:	200f      	movs	r0, #15
 80014d8:	f000 f810 	bl	80014fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014dc:	f000 f806 	bl	80014ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40023c00 	.word	0x40023c00

080014ec <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
	...

080014fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001504:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <HAL_InitTick+0x54>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b12      	ldr	r3, [pc, #72]	@ (8001554 <HAL_InitTick+0x58>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4619      	mov	r1, r3
 800150e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001512:	fbb3 f3f1 	udiv	r3, r3, r1
 8001516:	fbb2 f3f3 	udiv	r3, r2, r3
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f943 	bl	80017a6 <HAL_SYSTICK_Config>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e00e      	b.n	8001548 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b0f      	cmp	r3, #15
 800152e:	d80a      	bhi.n	8001546 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001530:	2200      	movs	r2, #0
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	f04f 30ff 	mov.w	r0, #4294967295
 8001538:	f000 f90b 	bl	8001752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800153c:	4a06      	ldr	r2, [pc, #24]	@ (8001558 <HAL_InitTick+0x5c>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	e000      	b.n	8001548 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000004 	.word	0x20000004
 8001554:	2000000c 	.word	0x2000000c
 8001558:	20000008 	.word	0x20000008

0800155c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001560:	4b06      	ldr	r3, [pc, #24]	@ (800157c <HAL_IncTick+0x20>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <HAL_IncTick+0x24>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4413      	add	r3, r2
 800156c:	4a04      	ldr	r2, [pc, #16]	@ (8001580 <HAL_IncTick+0x24>)
 800156e:	6013      	str	r3, [r2, #0]
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	2000000c 	.word	0x2000000c
 8001580:	2000024c 	.word	0x2000024c

08001584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return uwTick;
 8001588:	4b03      	ldr	r3, [pc, #12]	@ (8001598 <HAL_GetTick+0x14>)
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	2000024c 	.word	0x2000024c

0800159c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ac:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <__NVIC_SetPriorityGrouping+0x44>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015b8:	4013      	ands	r3, r2
 80015ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ce:	4a04      	ldr	r2, [pc, #16]	@ (80015e0 <__NVIC_SetPriorityGrouping+0x44>)
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	60d3      	str	r3, [r2, #12]
}
 80015d4:	bf00      	nop
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e8:	4b04      	ldr	r3, [pc, #16]	@ (80015fc <__NVIC_GetPriorityGrouping+0x18>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	f003 0307 	and.w	r3, r3, #7
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	2b00      	cmp	r3, #0
 8001610:	db0b      	blt.n	800162a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	f003 021f 	and.w	r2, r3, #31
 8001618:	4907      	ldr	r1, [pc, #28]	@ (8001638 <__NVIC_EnableIRQ+0x38>)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	095b      	lsrs	r3, r3, #5
 8001620:	2001      	movs	r0, #1
 8001622:	fa00 f202 	lsl.w	r2, r0, r2
 8001626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	e000e100 	.word	0xe000e100

0800163c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	6039      	str	r1, [r7, #0]
 8001646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164c:	2b00      	cmp	r3, #0
 800164e:	db0a      	blt.n	8001666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	b2da      	uxtb	r2, r3
 8001654:	490c      	ldr	r1, [pc, #48]	@ (8001688 <__NVIC_SetPriority+0x4c>)
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	0112      	lsls	r2, r2, #4
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	440b      	add	r3, r1
 8001660:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001664:	e00a      	b.n	800167c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	b2da      	uxtb	r2, r3
 800166a:	4908      	ldr	r1, [pc, #32]	@ (800168c <__NVIC_SetPriority+0x50>)
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	3b04      	subs	r3, #4
 8001674:	0112      	lsls	r2, r2, #4
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	440b      	add	r3, r1
 800167a:	761a      	strb	r2, [r3, #24]
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	e000e100 	.word	0xe000e100
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001690:	b480      	push	{r7}
 8001692:	b089      	sub	sp, #36	@ 0x24
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f1c3 0307 	rsb	r3, r3, #7
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	bf28      	it	cs
 80016ae:	2304      	movcs	r3, #4
 80016b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3304      	adds	r3, #4
 80016b6:	2b06      	cmp	r3, #6
 80016b8:	d902      	bls.n	80016c0 <NVIC_EncodePriority+0x30>
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3b03      	subs	r3, #3
 80016be:	e000      	b.n	80016c2 <NVIC_EncodePriority+0x32>
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c4:	f04f 32ff 	mov.w	r2, #4294967295
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43da      	mvns	r2, r3
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	401a      	ands	r2, r3
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d8:	f04f 31ff 	mov.w	r1, #4294967295
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	fa01 f303 	lsl.w	r3, r1, r3
 80016e2:	43d9      	mvns	r1, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e8:	4313      	orrs	r3, r2
         );
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3724      	adds	r7, #36	@ 0x24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
	...

080016f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3b01      	subs	r3, #1
 8001704:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001708:	d301      	bcc.n	800170e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800170a:	2301      	movs	r3, #1
 800170c:	e00f      	b.n	800172e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800170e:	4a0a      	ldr	r2, [pc, #40]	@ (8001738 <SysTick_Config+0x40>)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3b01      	subs	r3, #1
 8001714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001716:	210f      	movs	r1, #15
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	f7ff ff8e 	bl	800163c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001720:	4b05      	ldr	r3, [pc, #20]	@ (8001738 <SysTick_Config+0x40>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001726:	4b04      	ldr	r3, [pc, #16]	@ (8001738 <SysTick_Config+0x40>)
 8001728:	2207      	movs	r2, #7
 800172a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	e000e010 	.word	0xe000e010

0800173c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff ff29 	bl	800159c <__NVIC_SetPriorityGrouping>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001752:	b580      	push	{r7, lr}
 8001754:	b086      	sub	sp, #24
 8001756:	af00      	add	r7, sp, #0
 8001758:	4603      	mov	r3, r0
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
 800175e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001764:	f7ff ff3e 	bl	80015e4 <__NVIC_GetPriorityGrouping>
 8001768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68b9      	ldr	r1, [r7, #8]
 800176e:	6978      	ldr	r0, [r7, #20]
 8001770:	f7ff ff8e 	bl	8001690 <NVIC_EncodePriority>
 8001774:	4602      	mov	r2, r0
 8001776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177a:	4611      	mov	r1, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff5d 	bl	800163c <__NVIC_SetPriority>
}
 8001782:	bf00      	nop
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff31 	bl	8001600 <__NVIC_EnableIRQ>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff ffa2 	bl	80016f8 <SysTick_Config>
 80017b4:	4603      	mov	r3, r0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80017c2:	f000 f802 	bl	80017ca <HAL_SYSTICK_Callback>
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	@ 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
 80017f2:	e159      	b.n	8001aa8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017f4:	2201      	movs	r2, #1
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	429a      	cmp	r2, r3
 800180e:	f040 8148 	bne.w	8001aa2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	2b01      	cmp	r3, #1
 800181c:	d005      	beq.n	800182a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001826:	2b02      	cmp	r3, #2
 8001828:	d130      	bne.n	800188c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	2203      	movs	r2, #3
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001860:	2201      	movs	r2, #1
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	091b      	lsrs	r3, r3, #4
 8001876:	f003 0201 	and.w	r2, r3, #1
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	2b03      	cmp	r3, #3
 8001896:	d017      	beq.n	80018c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	2203      	movs	r2, #3
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d123      	bne.n	800191c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	08da      	lsrs	r2, r3, #3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3208      	adds	r2, #8
 80018dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	220f      	movs	r2, #15
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	691a      	ldr	r2, [r3, #16]
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	08da      	lsrs	r2, r3, #3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3208      	adds	r2, #8
 8001916:	69b9      	ldr	r1, [r7, #24]
 8001918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	2203      	movs	r2, #3
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0203 	and.w	r2, r3, #3
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 80a2 	beq.w	8001aa2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b57      	ldr	r3, [pc, #348]	@ (8001ac0 <HAL_GPIO_Init+0x2e8>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001966:	4a56      	ldr	r2, [pc, #344]	@ (8001ac0 <HAL_GPIO_Init+0x2e8>)
 8001968:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800196c:	6453      	str	r3, [r2, #68]	@ 0x44
 800196e:	4b54      	ldr	r3, [pc, #336]	@ (8001ac0 <HAL_GPIO_Init+0x2e8>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001972:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800197a:	4a52      	ldr	r2, [pc, #328]	@ (8001ac4 <HAL_GPIO_Init+0x2ec>)
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	089b      	lsrs	r3, r3, #2
 8001980:	3302      	adds	r3, #2
 8001982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	220f      	movs	r2, #15
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a49      	ldr	r2, [pc, #292]	@ (8001ac8 <HAL_GPIO_Init+0x2f0>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d019      	beq.n	80019da <HAL_GPIO_Init+0x202>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a48      	ldr	r2, [pc, #288]	@ (8001acc <HAL_GPIO_Init+0x2f4>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d013      	beq.n	80019d6 <HAL_GPIO_Init+0x1fe>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a47      	ldr	r2, [pc, #284]	@ (8001ad0 <HAL_GPIO_Init+0x2f8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d00d      	beq.n	80019d2 <HAL_GPIO_Init+0x1fa>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a46      	ldr	r2, [pc, #280]	@ (8001ad4 <HAL_GPIO_Init+0x2fc>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d007      	beq.n	80019ce <HAL_GPIO_Init+0x1f6>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a45      	ldr	r2, [pc, #276]	@ (8001ad8 <HAL_GPIO_Init+0x300>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d101      	bne.n	80019ca <HAL_GPIO_Init+0x1f2>
 80019c6:	2304      	movs	r3, #4
 80019c8:	e008      	b.n	80019dc <HAL_GPIO_Init+0x204>
 80019ca:	2307      	movs	r3, #7
 80019cc:	e006      	b.n	80019dc <HAL_GPIO_Init+0x204>
 80019ce:	2303      	movs	r3, #3
 80019d0:	e004      	b.n	80019dc <HAL_GPIO_Init+0x204>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e002      	b.n	80019dc <HAL_GPIO_Init+0x204>
 80019d6:	2301      	movs	r3, #1
 80019d8:	e000      	b.n	80019dc <HAL_GPIO_Init+0x204>
 80019da:	2300      	movs	r3, #0
 80019dc:	69fa      	ldr	r2, [r7, #28]
 80019de:	f002 0203 	and.w	r2, r2, #3
 80019e2:	0092      	lsls	r2, r2, #2
 80019e4:	4093      	lsls	r3, r2
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019ec:	4935      	ldr	r1, [pc, #212]	@ (8001ac4 <HAL_GPIO_Init+0x2ec>)
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	089b      	lsrs	r3, r3, #2
 80019f2:	3302      	adds	r3, #2
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019fa:	4b38      	ldr	r3, [pc, #224]	@ (8001adc <HAL_GPIO_Init+0x304>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a1e:	4a2f      	ldr	r2, [pc, #188]	@ (8001adc <HAL_GPIO_Init+0x304>)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a24:	4b2d      	ldr	r3, [pc, #180]	@ (8001adc <HAL_GPIO_Init+0x304>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a48:	4a24      	ldr	r2, [pc, #144]	@ (8001adc <HAL_GPIO_Init+0x304>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a4e:	4b23      	ldr	r3, [pc, #140]	@ (8001adc <HAL_GPIO_Init+0x304>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a72:	4a1a      	ldr	r2, [pc, #104]	@ (8001adc <HAL_GPIO_Init+0x304>)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a78:	4b18      	ldr	r3, [pc, #96]	@ (8001adc <HAL_GPIO_Init+0x304>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a9c:	4a0f      	ldr	r2, [pc, #60]	@ (8001adc <HAL_GPIO_Init+0x304>)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	61fb      	str	r3, [r7, #28]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	2b0f      	cmp	r3, #15
 8001aac:	f67f aea2 	bls.w	80017f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	3724      	adds	r7, #36	@ 0x24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40013800 	.word	0x40013800
 8001ac8:	40020000 	.word	0x40020000
 8001acc:	40020400 	.word	0x40020400
 8001ad0:	40020800 	.word	0x40020800
 8001ad4:	40020c00 	.word	0x40020c00
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40013c00 	.word	0x40013c00

08001ae0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e267      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d075      	beq.n	8001bea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001afe:	4b88      	ldr	r3, [pc, #544]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 030c 	and.w	r3, r3, #12
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d00c      	beq.n	8001b24 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b0a:	4b85      	ldr	r3, [pc, #532]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d112      	bne.n	8001b3c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b16:	4b82      	ldr	r3, [pc, #520]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b22:	d10b      	bne.n	8001b3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b24:	4b7e      	ldr	r3, [pc, #504]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d05b      	beq.n	8001be8 <HAL_RCC_OscConfig+0x108>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d157      	bne.n	8001be8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e242      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b44:	d106      	bne.n	8001b54 <HAL_RCC_OscConfig+0x74>
 8001b46:	4b76      	ldr	r3, [pc, #472]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a75      	ldr	r2, [pc, #468]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e01d      	b.n	8001b90 <HAL_RCC_OscConfig+0xb0>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b5c:	d10c      	bne.n	8001b78 <HAL_RCC_OscConfig+0x98>
 8001b5e:	4b70      	ldr	r3, [pc, #448]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a6f      	ldr	r2, [pc, #444]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	4b6d      	ldr	r3, [pc, #436]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a6c      	ldr	r2, [pc, #432]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e00b      	b.n	8001b90 <HAL_RCC_OscConfig+0xb0>
 8001b78:	4b69      	ldr	r3, [pc, #420]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a68      	ldr	r2, [pc, #416]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	4b66      	ldr	r3, [pc, #408]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a65      	ldr	r2, [pc, #404]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001b8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d013      	beq.n	8001bc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b98:	f7ff fcf4 	bl	8001584 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba0:	f7ff fcf0 	bl	8001584 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b64      	cmp	r3, #100	@ 0x64
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e207      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb2:	4b5b      	ldr	r3, [pc, #364]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f0      	beq.n	8001ba0 <HAL_RCC_OscConfig+0xc0>
 8001bbe:	e014      	b.n	8001bea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7ff fce0 	bl	8001584 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc8:	f7ff fcdc 	bl	8001584 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b64      	cmp	r3, #100	@ 0x64
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e1f3      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bda:	4b51      	ldr	r3, [pc, #324]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0xe8>
 8001be6:	e000      	b.n	8001bea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d063      	beq.n	8001cbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001bf6:	4b4a      	ldr	r3, [pc, #296]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00b      	beq.n	8001c1a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c02:	4b47      	ldr	r3, [pc, #284]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d11c      	bne.n	8001c48 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c0e:	4b44      	ldr	r3, [pc, #272]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d116      	bne.n	8001c48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1a:	4b41      	ldr	r3, [pc, #260]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d005      	beq.n	8001c32 <HAL_RCC_OscConfig+0x152>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d001      	beq.n	8001c32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e1c7      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c32:	4b3b      	ldr	r3, [pc, #236]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	4937      	ldr	r1, [pc, #220]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c46:	e03a      	b.n	8001cbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d020      	beq.n	8001c92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c50:	4b34      	ldr	r3, [pc, #208]	@ (8001d24 <HAL_RCC_OscConfig+0x244>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c56:	f7ff fc95 	bl	8001584 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c5e:	f7ff fc91 	bl	8001584 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e1a8      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c70:	4b2b      	ldr	r3, [pc, #172]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7c:	4b28      	ldr	r3, [pc, #160]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	4925      	ldr	r1, [pc, #148]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	600b      	str	r3, [r1, #0]
 8001c90:	e015      	b.n	8001cbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c92:	4b24      	ldr	r3, [pc, #144]	@ (8001d24 <HAL_RCC_OscConfig+0x244>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c98:	f7ff fc74 	bl	8001584 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca0:	f7ff fc70 	bl	8001584 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e187      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d036      	beq.n	8001d38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d016      	beq.n	8001d00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cd2:	4b15      	ldr	r3, [pc, #84]	@ (8001d28 <HAL_RCC_OscConfig+0x248>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd8:	f7ff fc54 	bl	8001584 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ce0:	f7ff fc50 	bl	8001584 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e167      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d20 <HAL_RCC_OscConfig+0x240>)
 8001cf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x200>
 8001cfe:	e01b      	b.n	8001d38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d00:	4b09      	ldr	r3, [pc, #36]	@ (8001d28 <HAL_RCC_OscConfig+0x248>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d06:	f7ff fc3d 	bl	8001584 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d0c:	e00e      	b.n	8001d2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d0e:	f7ff fc39 	bl	8001584 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d907      	bls.n	8001d2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e150      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
 8001d20:	40023800 	.word	0x40023800
 8001d24:	42470000 	.word	0x42470000
 8001d28:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d2c:	4b88      	ldr	r3, [pc, #544]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001d2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1ea      	bne.n	8001d0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 8097 	beq.w	8001e74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d46:	2300      	movs	r3, #0
 8001d48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d4a:	4b81      	ldr	r3, [pc, #516]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10f      	bne.n	8001d76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	4b7d      	ldr	r3, [pc, #500]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5e:	4a7c      	ldr	r2, [pc, #496]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001d60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d66:	4b7a      	ldr	r3, [pc, #488]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d72:	2301      	movs	r3, #1
 8001d74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d76:	4b77      	ldr	r3, [pc, #476]	@ (8001f54 <HAL_RCC_OscConfig+0x474>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d118      	bne.n	8001db4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d82:	4b74      	ldr	r3, [pc, #464]	@ (8001f54 <HAL_RCC_OscConfig+0x474>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a73      	ldr	r2, [pc, #460]	@ (8001f54 <HAL_RCC_OscConfig+0x474>)
 8001d88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d8e:	f7ff fbf9 	bl	8001584 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d96:	f7ff fbf5 	bl	8001584 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e10c      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da8:	4b6a      	ldr	r3, [pc, #424]	@ (8001f54 <HAL_RCC_OscConfig+0x474>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0f0      	beq.n	8001d96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d106      	bne.n	8001dca <HAL_RCC_OscConfig+0x2ea>
 8001dbc:	4b64      	ldr	r3, [pc, #400]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dc0:	4a63      	ldr	r2, [pc, #396]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dc8:	e01c      	b.n	8001e04 <HAL_RCC_OscConfig+0x324>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	2b05      	cmp	r3, #5
 8001dd0:	d10c      	bne.n	8001dec <HAL_RCC_OscConfig+0x30c>
 8001dd2:	4b5f      	ldr	r3, [pc, #380]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd6:	4a5e      	ldr	r2, [pc, #376]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001dd8:	f043 0304 	orr.w	r3, r3, #4
 8001ddc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dde:	4b5c      	ldr	r3, [pc, #368]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de2:	4a5b      	ldr	r2, [pc, #364]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dea:	e00b      	b.n	8001e04 <HAL_RCC_OscConfig+0x324>
 8001dec:	4b58      	ldr	r3, [pc, #352]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001df0:	4a57      	ldr	r2, [pc, #348]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001df2:	f023 0301 	bic.w	r3, r3, #1
 8001df6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001df8:	4b55      	ldr	r3, [pc, #340]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dfc:	4a54      	ldr	r2, [pc, #336]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001dfe:	f023 0304 	bic.w	r3, r3, #4
 8001e02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d015      	beq.n	8001e38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0c:	f7ff fbba 	bl	8001584 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e12:	e00a      	b.n	8001e2a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e14:	f7ff fbb6 	bl	8001584 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e0cb      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2a:	4b49      	ldr	r3, [pc, #292]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0ee      	beq.n	8001e14 <HAL_RCC_OscConfig+0x334>
 8001e36:	e014      	b.n	8001e62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e38:	f7ff fba4 	bl	8001584 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e3e:	e00a      	b.n	8001e56 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e40:	f7ff fba0 	bl	8001584 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e0b5      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e56:	4b3e      	ldr	r3, [pc, #248]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1ee      	bne.n	8001e40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e62:	7dfb      	ldrb	r3, [r7, #23]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d105      	bne.n	8001e74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e68:	4b39      	ldr	r3, [pc, #228]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6c:	4a38      	ldr	r2, [pc, #224]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001e6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e72:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 80a1 	beq.w	8001fc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e7e:	4b34      	ldr	r3, [pc, #208]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 030c 	and.w	r3, r3, #12
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d05c      	beq.n	8001f44 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d141      	bne.n	8001f16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e92:	4b31      	ldr	r3, [pc, #196]	@ (8001f58 <HAL_RCC_OscConfig+0x478>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7ff fb74 	bl	8001584 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea0:	f7ff fb70 	bl	8001584 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e087      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb2:	4b27      	ldr	r3, [pc, #156]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69da      	ldr	r2, [r3, #28]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ecc:	019b      	lsls	r3, r3, #6
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed4:	085b      	lsrs	r3, r3, #1
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	041b      	lsls	r3, r3, #16
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee0:	061b      	lsls	r3, r3, #24
 8001ee2:	491b      	ldr	r1, [pc, #108]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f58 <HAL_RCC_OscConfig+0x478>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eee:	f7ff fb49 	bl	8001584 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef6:	f7ff fb45 	bl	8001584 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e05c      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f08:	4b11      	ldr	r3, [pc, #68]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0f0      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x416>
 8001f14:	e054      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f16:	4b10      	ldr	r3, [pc, #64]	@ (8001f58 <HAL_RCC_OscConfig+0x478>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1c:	f7ff fb32 	bl	8001584 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f24:	f7ff fb2e 	bl	8001584 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e045      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f36:	4b06      	ldr	r3, [pc, #24]	@ (8001f50 <HAL_RCC_OscConfig+0x470>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x444>
 8001f42:	e03d      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d107      	bne.n	8001f5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e038      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40007000 	.word	0x40007000
 8001f58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fcc <HAL_RCC_OscConfig+0x4ec>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d028      	beq.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d121      	bne.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d11a      	bne.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d111      	bne.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa2:	085b      	lsrs	r3, r3, #1
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d107      	bne.n	8001fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800

08001fd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e0cc      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe4:	4b68      	ldr	r3, [pc, #416]	@ (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d90c      	bls.n	800200c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff2:	4b65      	ldr	r3, [pc, #404]	@ (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffa:	4b63      	ldr	r3, [pc, #396]	@ (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d001      	beq.n	800200c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0b8      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d020      	beq.n	800205a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	d005      	beq.n	8002030 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002024:	4b59      	ldr	r3, [pc, #356]	@ (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	4a58      	ldr	r2, [pc, #352]	@ (800218c <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800202e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	2b00      	cmp	r3, #0
 800203a:	d005      	beq.n	8002048 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800203c:	4b53      	ldr	r3, [pc, #332]	@ (800218c <HAL_RCC_ClockConfig+0x1bc>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	4a52      	ldr	r2, [pc, #328]	@ (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002046:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002048:	4b50      	ldr	r3, [pc, #320]	@ (800218c <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	494d      	ldr	r1, [pc, #308]	@ (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	4313      	orrs	r3, r2
 8002058:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d044      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d107      	bne.n	800207e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206e:	4b47      	ldr	r3, [pc, #284]	@ (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d119      	bne.n	80020ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e07f      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d003      	beq.n	800208e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800208a:	2b03      	cmp	r3, #3
 800208c:	d107      	bne.n	800209e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800208e:	4b3f      	ldr	r3, [pc, #252]	@ (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d109      	bne.n	80020ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e06f      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209e:	4b3b      	ldr	r3, [pc, #236]	@ (800218c <HAL_RCC_ClockConfig+0x1bc>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e067      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ae:	4b37      	ldr	r3, [pc, #220]	@ (800218c <HAL_RCC_ClockConfig+0x1bc>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f023 0203 	bic.w	r2, r3, #3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	4934      	ldr	r1, [pc, #208]	@ (800218c <HAL_RCC_ClockConfig+0x1bc>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c0:	f7ff fa60 	bl	8001584 <HAL_GetTick>
 80020c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c6:	e00a      	b.n	80020de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c8:	f7ff fa5c 	bl	8001584 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e04f      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020de:	4b2b      	ldr	r3, [pc, #172]	@ (800218c <HAL_RCC_ClockConfig+0x1bc>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 020c 	and.w	r2, r3, #12
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d1eb      	bne.n	80020c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020f0:	4b25      	ldr	r3, [pc, #148]	@ (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d20c      	bcs.n	8002118 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fe:	4b22      	ldr	r3, [pc, #136]	@ (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002106:	4b20      	ldr	r3, [pc, #128]	@ (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d001      	beq.n	8002118 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e032      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d008      	beq.n	8002136 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002124:	4b19      	ldr	r3, [pc, #100]	@ (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	4916      	ldr	r1, [pc, #88]	@ (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	4313      	orrs	r3, r2
 8002134:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d009      	beq.n	8002156 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002142:	4b12      	ldr	r3, [pc, #72]	@ (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	490e      	ldr	r1, [pc, #56]	@ (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	4313      	orrs	r3, r2
 8002154:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002156:	f000 f889 	bl	800226c <HAL_RCC_GetSysClockFreq>
 800215a:	4602      	mov	r2, r0
 800215c:	4b0b      	ldr	r3, [pc, #44]	@ (800218c <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	490a      	ldr	r1, [pc, #40]	@ (8002190 <HAL_RCC_ClockConfig+0x1c0>)
 8002168:	5ccb      	ldrb	r3, [r1, r3]
 800216a:	fa22 f303 	lsr.w	r3, r2, r3
 800216e:	4a09      	ldr	r2, [pc, #36]	@ (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002172:	4b09      	ldr	r3, [pc, #36]	@ (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff f9c0 	bl	80014fc <HAL_InitTick>

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40023c00 	.word	0x40023c00
 800218c:	40023800 	.word	0x40023800
 8002190:	08005850 	.word	0x08005850
 8002194:	20000004 	.word	0x20000004
 8002198:	20000008 	.word	0x20000008

0800219c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08c      	sub	sp, #48	@ 0x30
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d129      	bne.n	8002202 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
 80021b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002260 <HAL_RCC_MCOConfig+0xc4>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b6:	4a2a      	ldr	r2, [pc, #168]	@ (8002260 <HAL_RCC_MCOConfig+0xc4>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021be:	4b28      	ldr	r3, [pc, #160]	@ (8002260 <HAL_RCC_MCOConfig+0xc4>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	61bb      	str	r3, [r7, #24]
 80021c8:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80021ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	2302      	movs	r3, #2
 80021d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d4:	2303      	movs	r3, #3
 80021d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80021dc:	2300      	movs	r3, #0
 80021de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80021e0:	f107 031c 	add.w	r3, r7, #28
 80021e4:	4619      	mov	r1, r3
 80021e6:	481f      	ldr	r0, [pc, #124]	@ (8002264 <HAL_RCC_MCOConfig+0xc8>)
 80021e8:	f7ff faf6 	bl	80017d8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80021ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002260 <HAL_RCC_MCOConfig+0xc4>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 80021f4:	68b9      	ldr	r1, [r7, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	430b      	orrs	r3, r1
 80021fa:	4919      	ldr	r1, [pc, #100]	@ (8002260 <HAL_RCC_MCOConfig+0xc4>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8002200:	e029      	b.n	8002256 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	4b16      	ldr	r3, [pc, #88]	@ (8002260 <HAL_RCC_MCOConfig+0xc4>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	4a15      	ldr	r2, [pc, #84]	@ (8002260 <HAL_RCC_MCOConfig+0xc4>)
 800220c:	f043 0304 	orr.w	r3, r3, #4
 8002210:	6313      	str	r3, [r2, #48]	@ 0x30
 8002212:	4b13      	ldr	r3, [pc, #76]	@ (8002260 <HAL_RCC_MCOConfig+0xc4>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002216:	f003 0304 	and.w	r3, r3, #4
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800221e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002224:	2302      	movs	r3, #2
 8002226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002228:	2303      	movs	r3, #3
 800222a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002230:	2300      	movs	r3, #0
 8002232:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002234:	f107 031c 	add.w	r3, r7, #28
 8002238:	4619      	mov	r1, r3
 800223a:	480b      	ldr	r0, [pc, #44]	@ (8002268 <HAL_RCC_MCOConfig+0xcc>)
 800223c:	f7ff facc 	bl	80017d8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8002240:	4b07      	ldr	r3, [pc, #28]	@ (8002260 <HAL_RCC_MCOConfig+0xc4>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	00d9      	lsls	r1, r3, #3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	430b      	orrs	r3, r1
 8002250:	4903      	ldr	r1, [pc, #12]	@ (8002260 <HAL_RCC_MCOConfig+0xc4>)
 8002252:	4313      	orrs	r3, r2
 8002254:	608b      	str	r3, [r1, #8]
}
 8002256:	bf00      	nop
 8002258:	3730      	adds	r7, #48	@ 0x30
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40023800 	.word	0x40023800
 8002264:	40020000 	.word	0x40020000
 8002268:	40020800 	.word	0x40020800

0800226c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800226c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002270:	b090      	sub	sp, #64	@ 0x40
 8002272:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002278:	2300      	movs	r3, #0
 800227a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800227c:	2300      	movs	r3, #0
 800227e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002284:	4b59      	ldr	r3, [pc, #356]	@ (80023ec <HAL_RCC_GetSysClockFreq+0x180>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 030c 	and.w	r3, r3, #12
 800228c:	2b08      	cmp	r3, #8
 800228e:	d00d      	beq.n	80022ac <HAL_RCC_GetSysClockFreq+0x40>
 8002290:	2b08      	cmp	r3, #8
 8002292:	f200 80a1 	bhi.w	80023d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <HAL_RCC_GetSysClockFreq+0x34>
 800229a:	2b04      	cmp	r3, #4
 800229c:	d003      	beq.n	80022a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800229e:	e09b      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022a0:	4b53      	ldr	r3, [pc, #332]	@ (80023f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80022a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022a4:	e09b      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022a6:	4b53      	ldr	r3, [pc, #332]	@ (80023f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80022a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022aa:	e098      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022ac:	4b4f      	ldr	r3, [pc, #316]	@ (80023ec <HAL_RCC_GetSysClockFreq+0x180>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022b6:	4b4d      	ldr	r3, [pc, #308]	@ (80023ec <HAL_RCC_GetSysClockFreq+0x180>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d028      	beq.n	8002314 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022c2:	4b4a      	ldr	r3, [pc, #296]	@ (80023ec <HAL_RCC_GetSysClockFreq+0x180>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	099b      	lsrs	r3, r3, #6
 80022c8:	2200      	movs	r2, #0
 80022ca:	623b      	str	r3, [r7, #32]
 80022cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80022d4:	2100      	movs	r1, #0
 80022d6:	4b47      	ldr	r3, [pc, #284]	@ (80023f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80022d8:	fb03 f201 	mul.w	r2, r3, r1
 80022dc:	2300      	movs	r3, #0
 80022de:	fb00 f303 	mul.w	r3, r0, r3
 80022e2:	4413      	add	r3, r2
 80022e4:	4a43      	ldr	r2, [pc, #268]	@ (80023f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80022e6:	fba0 1202 	umull	r1, r2, r0, r2
 80022ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022ec:	460a      	mov	r2, r1
 80022ee:	62ba      	str	r2, [r7, #40]	@ 0x28
 80022f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022f2:	4413      	add	r3, r2
 80022f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022f8:	2200      	movs	r2, #0
 80022fa:	61bb      	str	r3, [r7, #24]
 80022fc:	61fa      	str	r2, [r7, #28]
 80022fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002302:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002306:	f7fe fc57 	bl	8000bb8 <__aeabi_uldivmod>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4613      	mov	r3, r2
 8002310:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002312:	e053      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002314:	4b35      	ldr	r3, [pc, #212]	@ (80023ec <HAL_RCC_GetSysClockFreq+0x180>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	099b      	lsrs	r3, r3, #6
 800231a:	2200      	movs	r2, #0
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	617a      	str	r2, [r7, #20]
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002326:	f04f 0b00 	mov.w	fp, #0
 800232a:	4652      	mov	r2, sl
 800232c:	465b      	mov	r3, fp
 800232e:	f04f 0000 	mov.w	r0, #0
 8002332:	f04f 0100 	mov.w	r1, #0
 8002336:	0159      	lsls	r1, r3, #5
 8002338:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800233c:	0150      	lsls	r0, r2, #5
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	ebb2 080a 	subs.w	r8, r2, sl
 8002346:	eb63 090b 	sbc.w	r9, r3, fp
 800234a:	f04f 0200 	mov.w	r2, #0
 800234e:	f04f 0300 	mov.w	r3, #0
 8002352:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002356:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800235a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800235e:	ebb2 0408 	subs.w	r4, r2, r8
 8002362:	eb63 0509 	sbc.w	r5, r3, r9
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	f04f 0300 	mov.w	r3, #0
 800236e:	00eb      	lsls	r3, r5, #3
 8002370:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002374:	00e2      	lsls	r2, r4, #3
 8002376:	4614      	mov	r4, r2
 8002378:	461d      	mov	r5, r3
 800237a:	eb14 030a 	adds.w	r3, r4, sl
 800237e:	603b      	str	r3, [r7, #0]
 8002380:	eb45 030b 	adc.w	r3, r5, fp
 8002384:	607b      	str	r3, [r7, #4]
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	f04f 0300 	mov.w	r3, #0
 800238e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002392:	4629      	mov	r1, r5
 8002394:	028b      	lsls	r3, r1, #10
 8002396:	4621      	mov	r1, r4
 8002398:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800239c:	4621      	mov	r1, r4
 800239e:	028a      	lsls	r2, r1, #10
 80023a0:	4610      	mov	r0, r2
 80023a2:	4619      	mov	r1, r3
 80023a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023a6:	2200      	movs	r2, #0
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	60fa      	str	r2, [r7, #12]
 80023ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023b0:	f7fe fc02 	bl	8000bb8 <__aeabi_uldivmod>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4613      	mov	r3, r2
 80023ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80023bc:	4b0b      	ldr	r3, [pc, #44]	@ (80023ec <HAL_RCC_GetSysClockFreq+0x180>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	0c1b      	lsrs	r3, r3, #16
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	3301      	adds	r3, #1
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80023cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80023ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80023d6:	e002      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023d8:	4b05      	ldr	r3, [pc, #20]	@ (80023f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80023da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80023dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3740      	adds	r7, #64	@ 0x40
 80023e4:	46bd      	mov	sp, r7
 80023e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023ea:	bf00      	nop
 80023ec:	40023800 	.word	0x40023800
 80023f0:	00f42400 	.word	0x00f42400
 80023f4:	017d7840 	.word	0x017d7840

080023f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023fc:	4b03      	ldr	r3, [pc, #12]	@ (800240c <HAL_RCC_GetHCLKFreq+0x14>)
 80023fe:	681b      	ldr	r3, [r3, #0]
}
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	20000004 	.word	0x20000004

08002410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002414:	f7ff fff0 	bl	80023f8 <HAL_RCC_GetHCLKFreq>
 8002418:	4602      	mov	r2, r0
 800241a:	4b05      	ldr	r3, [pc, #20]	@ (8002430 <HAL_RCC_GetPCLK1Freq+0x20>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	0a9b      	lsrs	r3, r3, #10
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	4903      	ldr	r1, [pc, #12]	@ (8002434 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002426:	5ccb      	ldrb	r3, [r1, r3]
 8002428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800242c:	4618      	mov	r0, r3
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40023800 	.word	0x40023800
 8002434:	08005860 	.word	0x08005860

08002438 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e041      	b.n	80024ce <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d106      	bne.n	8002464 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7fe feb0 	bl	80011c4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3304      	adds	r3, #4
 8002474:	4619      	mov	r1, r3
 8002476:	4610      	mov	r0, r2
 8002478:	f000 fafc 	bl	8002a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024e2:	2300      	movs	r3, #0
 80024e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d104      	bne.n	80024f6 <HAL_TIM_IC_Start_IT+0x1e>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	e013      	b.n	800251e <HAL_TIM_IC_Start_IT+0x46>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d104      	bne.n	8002506 <HAL_TIM_IC_Start_IT+0x2e>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002502:	b2db      	uxtb	r3, r3
 8002504:	e00b      	b.n	800251e <HAL_TIM_IC_Start_IT+0x46>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2b08      	cmp	r3, #8
 800250a:	d104      	bne.n	8002516 <HAL_TIM_IC_Start_IT+0x3e>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002512:	b2db      	uxtb	r3, r3
 8002514:	e003      	b.n	800251e <HAL_TIM_IC_Start_IT+0x46>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800251c:	b2db      	uxtb	r3, r3
 800251e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d104      	bne.n	8002530 <HAL_TIM_IC_Start_IT+0x58>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800252c:	b2db      	uxtb	r3, r3
 800252e:	e013      	b.n	8002558 <HAL_TIM_IC_Start_IT+0x80>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	2b04      	cmp	r3, #4
 8002534:	d104      	bne.n	8002540 <HAL_TIM_IC_Start_IT+0x68>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800253c:	b2db      	uxtb	r3, r3
 800253e:	e00b      	b.n	8002558 <HAL_TIM_IC_Start_IT+0x80>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	2b08      	cmp	r3, #8
 8002544:	d104      	bne.n	8002550 <HAL_TIM_IC_Start_IT+0x78>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800254c:	b2db      	uxtb	r3, r3
 800254e:	e003      	b.n	8002558 <HAL_TIM_IC_Start_IT+0x80>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002556:	b2db      	uxtb	r3, r3
 8002558:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800255a:	7bbb      	ldrb	r3, [r7, #14]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d102      	bne.n	8002566 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002560:	7b7b      	ldrb	r3, [r7, #13]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d001      	beq.n	800256a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e0c2      	b.n	80026f0 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d104      	bne.n	800257a <HAL_TIM_IC_Start_IT+0xa2>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2202      	movs	r2, #2
 8002574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002578:	e013      	b.n	80025a2 <HAL_TIM_IC_Start_IT+0xca>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	2b04      	cmp	r3, #4
 800257e:	d104      	bne.n	800258a <HAL_TIM_IC_Start_IT+0xb2>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002588:	e00b      	b.n	80025a2 <HAL_TIM_IC_Start_IT+0xca>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	2b08      	cmp	r3, #8
 800258e:	d104      	bne.n	800259a <HAL_TIM_IC_Start_IT+0xc2>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002598:	e003      	b.n	80025a2 <HAL_TIM_IC_Start_IT+0xca>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2202      	movs	r2, #2
 800259e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d104      	bne.n	80025b2 <HAL_TIM_IC_Start_IT+0xda>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2202      	movs	r2, #2
 80025ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025b0:	e013      	b.n	80025da <HAL_TIM_IC_Start_IT+0x102>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2b04      	cmp	r3, #4
 80025b6:	d104      	bne.n	80025c2 <HAL_TIM_IC_Start_IT+0xea>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2202      	movs	r2, #2
 80025bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80025c0:	e00b      	b.n	80025da <HAL_TIM_IC_Start_IT+0x102>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d104      	bne.n	80025d2 <HAL_TIM_IC_Start_IT+0xfa>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2202      	movs	r2, #2
 80025cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025d0:	e003      	b.n	80025da <HAL_TIM_IC_Start_IT+0x102>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2202      	movs	r2, #2
 80025d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	2b0c      	cmp	r3, #12
 80025de:	d841      	bhi.n	8002664 <HAL_TIM_IC_Start_IT+0x18c>
 80025e0:	a201      	add	r2, pc, #4	@ (adr r2, 80025e8 <HAL_TIM_IC_Start_IT+0x110>)
 80025e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e6:	bf00      	nop
 80025e8:	0800261d 	.word	0x0800261d
 80025ec:	08002665 	.word	0x08002665
 80025f0:	08002665 	.word	0x08002665
 80025f4:	08002665 	.word	0x08002665
 80025f8:	0800262f 	.word	0x0800262f
 80025fc:	08002665 	.word	0x08002665
 8002600:	08002665 	.word	0x08002665
 8002604:	08002665 	.word	0x08002665
 8002608:	08002641 	.word	0x08002641
 800260c:	08002665 	.word	0x08002665
 8002610:	08002665 	.word	0x08002665
 8002614:	08002665 	.word	0x08002665
 8002618:	08002653 	.word	0x08002653
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 0202 	orr.w	r2, r2, #2
 800262a:	60da      	str	r2, [r3, #12]
      break;
 800262c:	e01d      	b.n	800266a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68da      	ldr	r2, [r3, #12]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f042 0204 	orr.w	r2, r2, #4
 800263c:	60da      	str	r2, [r3, #12]
      break;
 800263e:	e014      	b.n	800266a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0208 	orr.w	r2, r2, #8
 800264e:	60da      	str	r2, [r3, #12]
      break;
 8002650:	e00b      	b.n	800266a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68da      	ldr	r2, [r3, #12]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f042 0210 	orr.w	r2, r2, #16
 8002660:	60da      	str	r2, [r3, #12]
      break;
 8002662:	e002      	b.n	800266a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	73fb      	strb	r3, [r7, #15]
      break;
 8002668:	bf00      	nop
  }

  if (status == HAL_OK)
 800266a:	7bfb      	ldrb	r3, [r7, #15]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d13e      	bne.n	80026ee <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2201      	movs	r2, #1
 8002676:	6839      	ldr	r1, [r7, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f000 fb9f 	bl	8002dbc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a1d      	ldr	r2, [pc, #116]	@ (80026f8 <HAL_TIM_IC_Start_IT+0x220>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d018      	beq.n	80026ba <HAL_TIM_IC_Start_IT+0x1e2>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002690:	d013      	beq.n	80026ba <HAL_TIM_IC_Start_IT+0x1e2>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a19      	ldr	r2, [pc, #100]	@ (80026fc <HAL_TIM_IC_Start_IT+0x224>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d00e      	beq.n	80026ba <HAL_TIM_IC_Start_IT+0x1e2>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a17      	ldr	r2, [pc, #92]	@ (8002700 <HAL_TIM_IC_Start_IT+0x228>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d009      	beq.n	80026ba <HAL_TIM_IC_Start_IT+0x1e2>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a16      	ldr	r2, [pc, #88]	@ (8002704 <HAL_TIM_IC_Start_IT+0x22c>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d004      	beq.n	80026ba <HAL_TIM_IC_Start_IT+0x1e2>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a14      	ldr	r2, [pc, #80]	@ (8002708 <HAL_TIM_IC_Start_IT+0x230>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d111      	bne.n	80026de <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2b06      	cmp	r3, #6
 80026ca:	d010      	beq.n	80026ee <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0201 	orr.w	r2, r2, #1
 80026da:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026dc:	e007      	b.n	80026ee <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 0201 	orr.w	r2, r2, #1
 80026ec:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40010000 	.word	0x40010000
 80026fc:	40000400 	.word	0x40000400
 8002700:	40000800 	.word	0x40000800
 8002704:	40000c00 	.word	0x40000c00
 8002708:	40014000 	.word	0x40014000

0800270c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d020      	beq.n	8002770 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d01b      	beq.n	8002770 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f06f 0202 	mvn.w	r2, #2
 8002740:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7fe fd00 	bl	800115c <HAL_TIM_IC_CaptureCallback>
 800275c:	e005      	b.n	800276a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f96a 	bl	8002a38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f971 	bl	8002a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	2b00      	cmp	r3, #0
 8002778:	d020      	beq.n	80027bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	d01b      	beq.n	80027bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f06f 0204 	mvn.w	r2, #4
 800278c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2202      	movs	r2, #2
 8002792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7fe fcda 	bl	800115c <HAL_TIM_IC_CaptureCallback>
 80027a8:	e005      	b.n	80027b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f944 	bl	8002a38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 f94b 	bl	8002a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d020      	beq.n	8002808 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d01b      	beq.n	8002808 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f06f 0208 	mvn.w	r2, #8
 80027d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2204      	movs	r2, #4
 80027de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7fe fcb4 	bl	800115c <HAL_TIM_IC_CaptureCallback>
 80027f4:	e005      	b.n	8002802 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f91e 	bl	8002a38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f925 	bl	8002a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f003 0310 	and.w	r3, r3, #16
 800280e:	2b00      	cmp	r3, #0
 8002810:	d020      	beq.n	8002854 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f003 0310 	and.w	r3, r3, #16
 8002818:	2b00      	cmp	r3, #0
 800281a:	d01b      	beq.n	8002854 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f06f 0210 	mvn.w	r2, #16
 8002824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2208      	movs	r2, #8
 800282a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7fe fc8e 	bl	800115c <HAL_TIM_IC_CaptureCallback>
 8002840:	e005      	b.n	800284e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f8f8 	bl	8002a38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f8ff 	bl	8002a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00c      	beq.n	8002878 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b00      	cmp	r3, #0
 8002866:	d007      	beq.n	8002878 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f06f 0201 	mvn.w	r2, #1
 8002870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f8d6 	bl	8002a24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00c      	beq.n	800289c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002888:	2b00      	cmp	r3, #0
 800288a:	d007      	beq.n	800289c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 fabf 	bl	8002e1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00c      	beq.n	80028c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d007      	beq.n	80028c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80028b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f8d0 	bl	8002a60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	f003 0320 	and.w	r3, r3, #32
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00c      	beq.n	80028e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f003 0320 	and.w	r3, r3, #32
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d007      	beq.n	80028e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f06f 0220 	mvn.w	r2, #32
 80028dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 fa91 	bl	8002e06 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028e4:	bf00      	nop
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028f8:	2300      	movs	r3, #0
 80028fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002902:	2b01      	cmp	r3, #1
 8002904:	d101      	bne.n	800290a <HAL_TIM_IC_ConfigChannel+0x1e>
 8002906:	2302      	movs	r3, #2
 8002908:	e088      	b.n	8002a1c <HAL_TIM_IC_ConfigChannel+0x130>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d11b      	bne.n	8002950 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002928:	f000 f92a 	bl	8002b80 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	699a      	ldr	r2, [r3, #24]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 020c 	bic.w	r2, r2, #12
 800293a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6999      	ldr	r1, [r3, #24]
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	619a      	str	r2, [r3, #24]
 800294e:	e060      	b.n	8002a12 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b04      	cmp	r3, #4
 8002954:	d11c      	bne.n	8002990 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002966:	f000 f973 	bl	8002c50 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	699a      	ldr	r2, [r3, #24]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002978:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6999      	ldr	r1, [r3, #24]
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	021a      	lsls	r2, r3, #8
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	619a      	str	r2, [r3, #24]
 800298e:	e040      	b.n	8002a12 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b08      	cmp	r3, #8
 8002994:	d11b      	bne.n	80029ce <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80029a6:	f000 f990 	bl	8002cca <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	69da      	ldr	r2, [r3, #28]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 020c 	bic.w	r2, r2, #12
 80029b8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	69d9      	ldr	r1, [r3, #28]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	61da      	str	r2, [r3, #28]
 80029cc:	e021      	b.n	8002a12 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b0c      	cmp	r3, #12
 80029d2:	d11c      	bne.n	8002a0e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80029e4:	f000 f9ad 	bl	8002d42 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	69da      	ldr	r2, [r3, #28]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80029f6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	69d9      	ldr	r1, [r3, #28]
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	021a      	lsls	r2, r3, #8
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	61da      	str	r2, [r3, #28]
 8002a0c:	e001      	b.n	8002a12 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a37      	ldr	r2, [pc, #220]	@ (8002b64 <TIM_Base_SetConfig+0xf0>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d00f      	beq.n	8002aac <TIM_Base_SetConfig+0x38>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a92:	d00b      	beq.n	8002aac <TIM_Base_SetConfig+0x38>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a34      	ldr	r2, [pc, #208]	@ (8002b68 <TIM_Base_SetConfig+0xf4>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d007      	beq.n	8002aac <TIM_Base_SetConfig+0x38>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a33      	ldr	r2, [pc, #204]	@ (8002b6c <TIM_Base_SetConfig+0xf8>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d003      	beq.n	8002aac <TIM_Base_SetConfig+0x38>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a32      	ldr	r2, [pc, #200]	@ (8002b70 <TIM_Base_SetConfig+0xfc>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d108      	bne.n	8002abe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ab2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a28      	ldr	r2, [pc, #160]	@ (8002b64 <TIM_Base_SetConfig+0xf0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d01b      	beq.n	8002afe <TIM_Base_SetConfig+0x8a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002acc:	d017      	beq.n	8002afe <TIM_Base_SetConfig+0x8a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a25      	ldr	r2, [pc, #148]	@ (8002b68 <TIM_Base_SetConfig+0xf4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d013      	beq.n	8002afe <TIM_Base_SetConfig+0x8a>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a24      	ldr	r2, [pc, #144]	@ (8002b6c <TIM_Base_SetConfig+0xf8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d00f      	beq.n	8002afe <TIM_Base_SetConfig+0x8a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a23      	ldr	r2, [pc, #140]	@ (8002b70 <TIM_Base_SetConfig+0xfc>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d00b      	beq.n	8002afe <TIM_Base_SetConfig+0x8a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a22      	ldr	r2, [pc, #136]	@ (8002b74 <TIM_Base_SetConfig+0x100>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d007      	beq.n	8002afe <TIM_Base_SetConfig+0x8a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a21      	ldr	r2, [pc, #132]	@ (8002b78 <TIM_Base_SetConfig+0x104>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d003      	beq.n	8002afe <TIM_Base_SetConfig+0x8a>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a20      	ldr	r2, [pc, #128]	@ (8002b7c <TIM_Base_SetConfig+0x108>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d108      	bne.n	8002b10 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a0c      	ldr	r2, [pc, #48]	@ (8002b64 <TIM_Base_SetConfig+0xf0>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d103      	bne.n	8002b3e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	691a      	ldr	r2, [r3, #16]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f043 0204 	orr.w	r2, r3, #4
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	601a      	str	r2, [r3, #0]
}
 8002b56:	bf00      	nop
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40010000 	.word	0x40010000
 8002b68:	40000400 	.word	0x40000400
 8002b6c:	40000800 	.word	0x40000800
 8002b70:	40000c00 	.word	0x40000c00
 8002b74:	40014000 	.word	0x40014000
 8002b78:	40014400 	.word	0x40014400
 8002b7c:	40014800 	.word	0x40014800

08002b80 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
 8002b8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	f023 0201 	bic.w	r2, r3, #1
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4a24      	ldr	r2, [pc, #144]	@ (8002c3c <TIM_TI1_SetConfig+0xbc>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d013      	beq.n	8002bd6 <TIM_TI1_SetConfig+0x56>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bb4:	d00f      	beq.n	8002bd6 <TIM_TI1_SetConfig+0x56>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4a21      	ldr	r2, [pc, #132]	@ (8002c40 <TIM_TI1_SetConfig+0xc0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00b      	beq.n	8002bd6 <TIM_TI1_SetConfig+0x56>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	4a20      	ldr	r2, [pc, #128]	@ (8002c44 <TIM_TI1_SetConfig+0xc4>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d007      	beq.n	8002bd6 <TIM_TI1_SetConfig+0x56>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4a1f      	ldr	r2, [pc, #124]	@ (8002c48 <TIM_TI1_SetConfig+0xc8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d003      	beq.n	8002bd6 <TIM_TI1_SetConfig+0x56>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	4a1e      	ldr	r2, [pc, #120]	@ (8002c4c <TIM_TI1_SetConfig+0xcc>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d101      	bne.n	8002bda <TIM_TI1_SetConfig+0x5a>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <TIM_TI1_SetConfig+0x5c>
 8002bda:	2300      	movs	r3, #0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d008      	beq.n	8002bf2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f023 0303 	bic.w	r3, r3, #3
 8002be6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	e003      	b.n	8002bfa <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	f023 030a 	bic.w	r3, r3, #10
 8002c14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	f003 030a 	and.w	r3, r3, #10
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	621a      	str	r2, [r3, #32]
}
 8002c2e:	bf00      	nop
 8002c30:	371c      	adds	r7, #28
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	40010000 	.word	0x40010000
 8002c40:	40000400 	.word	0x40000400
 8002c44:	40000800 	.word	0x40000800
 8002c48:	40000c00 	.word	0x40000c00
 8002c4c:	40014000 	.word	0x40014000

08002c50 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b087      	sub	sp, #28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
 8002c5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	f023 0210 	bic.w	r2, r3, #16
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	021b      	lsls	r3, r3, #8
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	031b      	lsls	r3, r3, #12
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002ca2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	621a      	str	r2, [r3, #32]
}
 8002cbe:	bf00      	nop
 8002cc0:	371c      	adds	r7, #28
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b087      	sub	sp, #28
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	607a      	str	r2, [r7, #4]
 8002cd6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	f023 0303 	bic.w	r3, r3, #3
 8002cf6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d06:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	011b      	lsls	r3, r3, #4
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8002d1a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	021b      	lsls	r3, r3, #8
 8002d20:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	621a      	str	r2, [r3, #32]
}
 8002d36:	bf00      	nop
 8002d38:	371c      	adds	r7, #28
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b087      	sub	sp, #28
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	60f8      	str	r0, [r7, #12]
 8002d4a:	60b9      	str	r1, [r7, #8]
 8002d4c:	607a      	str	r2, [r7, #4]
 8002d4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d6e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	021b      	lsls	r3, r3, #8
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d80:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	031b      	lsls	r3, r3, #12
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8002d94:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	031b      	lsls	r3, r3, #12
 8002d9a:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	621a      	str	r2, [r3, #32]
}
 8002db0:	bf00      	nop
 8002db2:	371c      	adds	r7, #28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f003 031f 	and.w	r3, r3, #31
 8002dce:	2201      	movs	r2, #1
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6a1a      	ldr	r2, [r3, #32]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	401a      	ands	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a1a      	ldr	r2, [r3, #32]
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f003 031f 	and.w	r3, r3, #31
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	fa01 f303 	lsl.w	r3, r1, r3
 8002df4:	431a      	orrs	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	621a      	str	r2, [r3, #32]
}
 8002dfa:	bf00      	nop
 8002dfc:	371c      	adds	r7, #28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <__cvt>:
 8002e2e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e32:	ec57 6b10 	vmov	r6, r7, d0
 8002e36:	2f00      	cmp	r7, #0
 8002e38:	460c      	mov	r4, r1
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	463b      	mov	r3, r7
 8002e3e:	bfbb      	ittet	lt
 8002e40:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8002e44:	461f      	movlt	r7, r3
 8002e46:	2300      	movge	r3, #0
 8002e48:	232d      	movlt	r3, #45	@ 0x2d
 8002e4a:	700b      	strb	r3, [r1, #0]
 8002e4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002e4e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8002e52:	4691      	mov	r9, r2
 8002e54:	f023 0820 	bic.w	r8, r3, #32
 8002e58:	bfbc      	itt	lt
 8002e5a:	4632      	movlt	r2, r6
 8002e5c:	4616      	movlt	r6, r2
 8002e5e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002e62:	d005      	beq.n	8002e70 <__cvt+0x42>
 8002e64:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002e68:	d100      	bne.n	8002e6c <__cvt+0x3e>
 8002e6a:	3401      	adds	r4, #1
 8002e6c:	2102      	movs	r1, #2
 8002e6e:	e000      	b.n	8002e72 <__cvt+0x44>
 8002e70:	2103      	movs	r1, #3
 8002e72:	ab03      	add	r3, sp, #12
 8002e74:	9301      	str	r3, [sp, #4]
 8002e76:	ab02      	add	r3, sp, #8
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	ec47 6b10 	vmov	d0, r6, r7
 8002e7e:	4653      	mov	r3, sl
 8002e80:	4622      	mov	r2, r4
 8002e82:	f000 ff3d 	bl	8003d00 <_dtoa_r>
 8002e86:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002e8a:	4605      	mov	r5, r0
 8002e8c:	d119      	bne.n	8002ec2 <__cvt+0x94>
 8002e8e:	f019 0f01 	tst.w	r9, #1
 8002e92:	d00e      	beq.n	8002eb2 <__cvt+0x84>
 8002e94:	eb00 0904 	add.w	r9, r0, r4
 8002e98:	2200      	movs	r2, #0
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	4630      	mov	r0, r6
 8002e9e:	4639      	mov	r1, r7
 8002ea0:	f7fd fe1a 	bl	8000ad8 <__aeabi_dcmpeq>
 8002ea4:	b108      	cbz	r0, 8002eaa <__cvt+0x7c>
 8002ea6:	f8cd 900c 	str.w	r9, [sp, #12]
 8002eaa:	2230      	movs	r2, #48	@ 0x30
 8002eac:	9b03      	ldr	r3, [sp, #12]
 8002eae:	454b      	cmp	r3, r9
 8002eb0:	d31e      	bcc.n	8002ef0 <__cvt+0xc2>
 8002eb2:	9b03      	ldr	r3, [sp, #12]
 8002eb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002eb6:	1b5b      	subs	r3, r3, r5
 8002eb8:	4628      	mov	r0, r5
 8002eba:	6013      	str	r3, [r2, #0]
 8002ebc:	b004      	add	sp, #16
 8002ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ec2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002ec6:	eb00 0904 	add.w	r9, r0, r4
 8002eca:	d1e5      	bne.n	8002e98 <__cvt+0x6a>
 8002ecc:	7803      	ldrb	r3, [r0, #0]
 8002ece:	2b30      	cmp	r3, #48	@ 0x30
 8002ed0:	d10a      	bne.n	8002ee8 <__cvt+0xba>
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	4630      	mov	r0, r6
 8002ed8:	4639      	mov	r1, r7
 8002eda:	f7fd fdfd 	bl	8000ad8 <__aeabi_dcmpeq>
 8002ede:	b918      	cbnz	r0, 8002ee8 <__cvt+0xba>
 8002ee0:	f1c4 0401 	rsb	r4, r4, #1
 8002ee4:	f8ca 4000 	str.w	r4, [sl]
 8002ee8:	f8da 3000 	ldr.w	r3, [sl]
 8002eec:	4499      	add	r9, r3
 8002eee:	e7d3      	b.n	8002e98 <__cvt+0x6a>
 8002ef0:	1c59      	adds	r1, r3, #1
 8002ef2:	9103      	str	r1, [sp, #12]
 8002ef4:	701a      	strb	r2, [r3, #0]
 8002ef6:	e7d9      	b.n	8002eac <__cvt+0x7e>

08002ef8 <__exponent>:
 8002ef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002efa:	2900      	cmp	r1, #0
 8002efc:	bfba      	itte	lt
 8002efe:	4249      	neglt	r1, r1
 8002f00:	232d      	movlt	r3, #45	@ 0x2d
 8002f02:	232b      	movge	r3, #43	@ 0x2b
 8002f04:	2909      	cmp	r1, #9
 8002f06:	7002      	strb	r2, [r0, #0]
 8002f08:	7043      	strb	r3, [r0, #1]
 8002f0a:	dd29      	ble.n	8002f60 <__exponent+0x68>
 8002f0c:	f10d 0307 	add.w	r3, sp, #7
 8002f10:	461d      	mov	r5, r3
 8002f12:	270a      	movs	r7, #10
 8002f14:	461a      	mov	r2, r3
 8002f16:	fbb1 f6f7 	udiv	r6, r1, r7
 8002f1a:	fb07 1416 	mls	r4, r7, r6, r1
 8002f1e:	3430      	adds	r4, #48	@ 0x30
 8002f20:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002f24:	460c      	mov	r4, r1
 8002f26:	2c63      	cmp	r4, #99	@ 0x63
 8002f28:	f103 33ff 	add.w	r3, r3, #4294967295
 8002f2c:	4631      	mov	r1, r6
 8002f2e:	dcf1      	bgt.n	8002f14 <__exponent+0x1c>
 8002f30:	3130      	adds	r1, #48	@ 0x30
 8002f32:	1e94      	subs	r4, r2, #2
 8002f34:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002f38:	1c41      	adds	r1, r0, #1
 8002f3a:	4623      	mov	r3, r4
 8002f3c:	42ab      	cmp	r3, r5
 8002f3e:	d30a      	bcc.n	8002f56 <__exponent+0x5e>
 8002f40:	f10d 0309 	add.w	r3, sp, #9
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	42ac      	cmp	r4, r5
 8002f48:	bf88      	it	hi
 8002f4a:	2300      	movhi	r3, #0
 8002f4c:	3302      	adds	r3, #2
 8002f4e:	4403      	add	r3, r0
 8002f50:	1a18      	subs	r0, r3, r0
 8002f52:	b003      	add	sp, #12
 8002f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f56:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002f5a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002f5e:	e7ed      	b.n	8002f3c <__exponent+0x44>
 8002f60:	2330      	movs	r3, #48	@ 0x30
 8002f62:	3130      	adds	r1, #48	@ 0x30
 8002f64:	7083      	strb	r3, [r0, #2]
 8002f66:	70c1      	strb	r1, [r0, #3]
 8002f68:	1d03      	adds	r3, r0, #4
 8002f6a:	e7f1      	b.n	8002f50 <__exponent+0x58>

08002f6c <_printf_float>:
 8002f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f70:	b08d      	sub	sp, #52	@ 0x34
 8002f72:	460c      	mov	r4, r1
 8002f74:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8002f78:	4616      	mov	r6, r2
 8002f7a:	461f      	mov	r7, r3
 8002f7c:	4605      	mov	r5, r0
 8002f7e:	f000 fdbd 	bl	8003afc <_localeconv_r>
 8002f82:	6803      	ldr	r3, [r0, #0]
 8002f84:	9304      	str	r3, [sp, #16]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fd f97a 	bl	8000280 <strlen>
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8002f90:	f8d8 3000 	ldr.w	r3, [r8]
 8002f94:	9005      	str	r0, [sp, #20]
 8002f96:	3307      	adds	r3, #7
 8002f98:	f023 0307 	bic.w	r3, r3, #7
 8002f9c:	f103 0208 	add.w	r2, r3, #8
 8002fa0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002fa4:	f8d4 b000 	ldr.w	fp, [r4]
 8002fa8:	f8c8 2000 	str.w	r2, [r8]
 8002fac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002fb0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002fb4:	9307      	str	r3, [sp, #28]
 8002fb6:	f8cd 8018 	str.w	r8, [sp, #24]
 8002fba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002fbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002fc2:	4b9c      	ldr	r3, [pc, #624]	@ (8003234 <_printf_float+0x2c8>)
 8002fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc8:	f7fd fdb8 	bl	8000b3c <__aeabi_dcmpun>
 8002fcc:	bb70      	cbnz	r0, 800302c <_printf_float+0xc0>
 8002fce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002fd2:	4b98      	ldr	r3, [pc, #608]	@ (8003234 <_printf_float+0x2c8>)
 8002fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd8:	f7fd fd92 	bl	8000b00 <__aeabi_dcmple>
 8002fdc:	bb30      	cbnz	r0, 800302c <_printf_float+0xc0>
 8002fde:	2200      	movs	r2, #0
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	4640      	mov	r0, r8
 8002fe4:	4649      	mov	r1, r9
 8002fe6:	f7fd fd81 	bl	8000aec <__aeabi_dcmplt>
 8002fea:	b110      	cbz	r0, 8002ff2 <_printf_float+0x86>
 8002fec:	232d      	movs	r3, #45	@ 0x2d
 8002fee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002ff2:	4a91      	ldr	r2, [pc, #580]	@ (8003238 <_printf_float+0x2cc>)
 8002ff4:	4b91      	ldr	r3, [pc, #580]	@ (800323c <_printf_float+0x2d0>)
 8002ff6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002ffa:	bf8c      	ite	hi
 8002ffc:	4690      	movhi	r8, r2
 8002ffe:	4698      	movls	r8, r3
 8003000:	2303      	movs	r3, #3
 8003002:	6123      	str	r3, [r4, #16]
 8003004:	f02b 0304 	bic.w	r3, fp, #4
 8003008:	6023      	str	r3, [r4, #0]
 800300a:	f04f 0900 	mov.w	r9, #0
 800300e:	9700      	str	r7, [sp, #0]
 8003010:	4633      	mov	r3, r6
 8003012:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003014:	4621      	mov	r1, r4
 8003016:	4628      	mov	r0, r5
 8003018:	f000 f9d2 	bl	80033c0 <_printf_common>
 800301c:	3001      	adds	r0, #1
 800301e:	f040 808d 	bne.w	800313c <_printf_float+0x1d0>
 8003022:	f04f 30ff 	mov.w	r0, #4294967295
 8003026:	b00d      	add	sp, #52	@ 0x34
 8003028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800302c:	4642      	mov	r2, r8
 800302e:	464b      	mov	r3, r9
 8003030:	4640      	mov	r0, r8
 8003032:	4649      	mov	r1, r9
 8003034:	f7fd fd82 	bl	8000b3c <__aeabi_dcmpun>
 8003038:	b140      	cbz	r0, 800304c <_printf_float+0xe0>
 800303a:	464b      	mov	r3, r9
 800303c:	2b00      	cmp	r3, #0
 800303e:	bfbc      	itt	lt
 8003040:	232d      	movlt	r3, #45	@ 0x2d
 8003042:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003046:	4a7e      	ldr	r2, [pc, #504]	@ (8003240 <_printf_float+0x2d4>)
 8003048:	4b7e      	ldr	r3, [pc, #504]	@ (8003244 <_printf_float+0x2d8>)
 800304a:	e7d4      	b.n	8002ff6 <_printf_float+0x8a>
 800304c:	6863      	ldr	r3, [r4, #4]
 800304e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003052:	9206      	str	r2, [sp, #24]
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	d13b      	bne.n	80030d0 <_printf_float+0x164>
 8003058:	2306      	movs	r3, #6
 800305a:	6063      	str	r3, [r4, #4]
 800305c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003060:	2300      	movs	r3, #0
 8003062:	6022      	str	r2, [r4, #0]
 8003064:	9303      	str	r3, [sp, #12]
 8003066:	ab0a      	add	r3, sp, #40	@ 0x28
 8003068:	e9cd a301 	strd	sl, r3, [sp, #4]
 800306c:	ab09      	add	r3, sp, #36	@ 0x24
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	6861      	ldr	r1, [r4, #4]
 8003072:	ec49 8b10 	vmov	d0, r8, r9
 8003076:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800307a:	4628      	mov	r0, r5
 800307c:	f7ff fed7 	bl	8002e2e <__cvt>
 8003080:	9b06      	ldr	r3, [sp, #24]
 8003082:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003084:	2b47      	cmp	r3, #71	@ 0x47
 8003086:	4680      	mov	r8, r0
 8003088:	d129      	bne.n	80030de <_printf_float+0x172>
 800308a:	1cc8      	adds	r0, r1, #3
 800308c:	db02      	blt.n	8003094 <_printf_float+0x128>
 800308e:	6863      	ldr	r3, [r4, #4]
 8003090:	4299      	cmp	r1, r3
 8003092:	dd41      	ble.n	8003118 <_printf_float+0x1ac>
 8003094:	f1aa 0a02 	sub.w	sl, sl, #2
 8003098:	fa5f fa8a 	uxtb.w	sl, sl
 800309c:	3901      	subs	r1, #1
 800309e:	4652      	mov	r2, sl
 80030a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80030a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80030a6:	f7ff ff27 	bl	8002ef8 <__exponent>
 80030aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80030ac:	1813      	adds	r3, r2, r0
 80030ae:	2a01      	cmp	r2, #1
 80030b0:	4681      	mov	r9, r0
 80030b2:	6123      	str	r3, [r4, #16]
 80030b4:	dc02      	bgt.n	80030bc <_printf_float+0x150>
 80030b6:	6822      	ldr	r2, [r4, #0]
 80030b8:	07d2      	lsls	r2, r2, #31
 80030ba:	d501      	bpl.n	80030c0 <_printf_float+0x154>
 80030bc:	3301      	adds	r3, #1
 80030be:	6123      	str	r3, [r4, #16]
 80030c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0a2      	beq.n	800300e <_printf_float+0xa2>
 80030c8:	232d      	movs	r3, #45	@ 0x2d
 80030ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80030ce:	e79e      	b.n	800300e <_printf_float+0xa2>
 80030d0:	9a06      	ldr	r2, [sp, #24]
 80030d2:	2a47      	cmp	r2, #71	@ 0x47
 80030d4:	d1c2      	bne.n	800305c <_printf_float+0xf0>
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1c0      	bne.n	800305c <_printf_float+0xf0>
 80030da:	2301      	movs	r3, #1
 80030dc:	e7bd      	b.n	800305a <_printf_float+0xee>
 80030de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80030e2:	d9db      	bls.n	800309c <_printf_float+0x130>
 80030e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80030e8:	d118      	bne.n	800311c <_printf_float+0x1b0>
 80030ea:	2900      	cmp	r1, #0
 80030ec:	6863      	ldr	r3, [r4, #4]
 80030ee:	dd0b      	ble.n	8003108 <_printf_float+0x19c>
 80030f0:	6121      	str	r1, [r4, #16]
 80030f2:	b913      	cbnz	r3, 80030fa <_printf_float+0x18e>
 80030f4:	6822      	ldr	r2, [r4, #0]
 80030f6:	07d0      	lsls	r0, r2, #31
 80030f8:	d502      	bpl.n	8003100 <_printf_float+0x194>
 80030fa:	3301      	adds	r3, #1
 80030fc:	440b      	add	r3, r1
 80030fe:	6123      	str	r3, [r4, #16]
 8003100:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003102:	f04f 0900 	mov.w	r9, #0
 8003106:	e7db      	b.n	80030c0 <_printf_float+0x154>
 8003108:	b913      	cbnz	r3, 8003110 <_printf_float+0x1a4>
 800310a:	6822      	ldr	r2, [r4, #0]
 800310c:	07d2      	lsls	r2, r2, #31
 800310e:	d501      	bpl.n	8003114 <_printf_float+0x1a8>
 8003110:	3302      	adds	r3, #2
 8003112:	e7f4      	b.n	80030fe <_printf_float+0x192>
 8003114:	2301      	movs	r3, #1
 8003116:	e7f2      	b.n	80030fe <_printf_float+0x192>
 8003118:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800311c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800311e:	4299      	cmp	r1, r3
 8003120:	db05      	blt.n	800312e <_printf_float+0x1c2>
 8003122:	6823      	ldr	r3, [r4, #0]
 8003124:	6121      	str	r1, [r4, #16]
 8003126:	07d8      	lsls	r0, r3, #31
 8003128:	d5ea      	bpl.n	8003100 <_printf_float+0x194>
 800312a:	1c4b      	adds	r3, r1, #1
 800312c:	e7e7      	b.n	80030fe <_printf_float+0x192>
 800312e:	2900      	cmp	r1, #0
 8003130:	bfd4      	ite	le
 8003132:	f1c1 0202 	rsble	r2, r1, #2
 8003136:	2201      	movgt	r2, #1
 8003138:	4413      	add	r3, r2
 800313a:	e7e0      	b.n	80030fe <_printf_float+0x192>
 800313c:	6823      	ldr	r3, [r4, #0]
 800313e:	055a      	lsls	r2, r3, #21
 8003140:	d407      	bmi.n	8003152 <_printf_float+0x1e6>
 8003142:	6923      	ldr	r3, [r4, #16]
 8003144:	4642      	mov	r2, r8
 8003146:	4631      	mov	r1, r6
 8003148:	4628      	mov	r0, r5
 800314a:	47b8      	blx	r7
 800314c:	3001      	adds	r0, #1
 800314e:	d12b      	bne.n	80031a8 <_printf_float+0x23c>
 8003150:	e767      	b.n	8003022 <_printf_float+0xb6>
 8003152:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003156:	f240 80dd 	bls.w	8003314 <_printf_float+0x3a8>
 800315a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800315e:	2200      	movs	r2, #0
 8003160:	2300      	movs	r3, #0
 8003162:	f7fd fcb9 	bl	8000ad8 <__aeabi_dcmpeq>
 8003166:	2800      	cmp	r0, #0
 8003168:	d033      	beq.n	80031d2 <_printf_float+0x266>
 800316a:	4a37      	ldr	r2, [pc, #220]	@ (8003248 <_printf_float+0x2dc>)
 800316c:	2301      	movs	r3, #1
 800316e:	4631      	mov	r1, r6
 8003170:	4628      	mov	r0, r5
 8003172:	47b8      	blx	r7
 8003174:	3001      	adds	r0, #1
 8003176:	f43f af54 	beq.w	8003022 <_printf_float+0xb6>
 800317a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800317e:	4543      	cmp	r3, r8
 8003180:	db02      	blt.n	8003188 <_printf_float+0x21c>
 8003182:	6823      	ldr	r3, [r4, #0]
 8003184:	07d8      	lsls	r0, r3, #31
 8003186:	d50f      	bpl.n	80031a8 <_printf_float+0x23c>
 8003188:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800318c:	4631      	mov	r1, r6
 800318e:	4628      	mov	r0, r5
 8003190:	47b8      	blx	r7
 8003192:	3001      	adds	r0, #1
 8003194:	f43f af45 	beq.w	8003022 <_printf_float+0xb6>
 8003198:	f04f 0900 	mov.w	r9, #0
 800319c:	f108 38ff 	add.w	r8, r8, #4294967295
 80031a0:	f104 0a1a 	add.w	sl, r4, #26
 80031a4:	45c8      	cmp	r8, r9
 80031a6:	dc09      	bgt.n	80031bc <_printf_float+0x250>
 80031a8:	6823      	ldr	r3, [r4, #0]
 80031aa:	079b      	lsls	r3, r3, #30
 80031ac:	f100 8103 	bmi.w	80033b6 <_printf_float+0x44a>
 80031b0:	68e0      	ldr	r0, [r4, #12]
 80031b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80031b4:	4298      	cmp	r0, r3
 80031b6:	bfb8      	it	lt
 80031b8:	4618      	movlt	r0, r3
 80031ba:	e734      	b.n	8003026 <_printf_float+0xba>
 80031bc:	2301      	movs	r3, #1
 80031be:	4652      	mov	r2, sl
 80031c0:	4631      	mov	r1, r6
 80031c2:	4628      	mov	r0, r5
 80031c4:	47b8      	blx	r7
 80031c6:	3001      	adds	r0, #1
 80031c8:	f43f af2b 	beq.w	8003022 <_printf_float+0xb6>
 80031cc:	f109 0901 	add.w	r9, r9, #1
 80031d0:	e7e8      	b.n	80031a4 <_printf_float+0x238>
 80031d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	dc39      	bgt.n	800324c <_printf_float+0x2e0>
 80031d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003248 <_printf_float+0x2dc>)
 80031da:	2301      	movs	r3, #1
 80031dc:	4631      	mov	r1, r6
 80031de:	4628      	mov	r0, r5
 80031e0:	47b8      	blx	r7
 80031e2:	3001      	adds	r0, #1
 80031e4:	f43f af1d 	beq.w	8003022 <_printf_float+0xb6>
 80031e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80031ec:	ea59 0303 	orrs.w	r3, r9, r3
 80031f0:	d102      	bne.n	80031f8 <_printf_float+0x28c>
 80031f2:	6823      	ldr	r3, [r4, #0]
 80031f4:	07d9      	lsls	r1, r3, #31
 80031f6:	d5d7      	bpl.n	80031a8 <_printf_float+0x23c>
 80031f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80031fc:	4631      	mov	r1, r6
 80031fe:	4628      	mov	r0, r5
 8003200:	47b8      	blx	r7
 8003202:	3001      	adds	r0, #1
 8003204:	f43f af0d 	beq.w	8003022 <_printf_float+0xb6>
 8003208:	f04f 0a00 	mov.w	sl, #0
 800320c:	f104 0b1a 	add.w	fp, r4, #26
 8003210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003212:	425b      	negs	r3, r3
 8003214:	4553      	cmp	r3, sl
 8003216:	dc01      	bgt.n	800321c <_printf_float+0x2b0>
 8003218:	464b      	mov	r3, r9
 800321a:	e793      	b.n	8003144 <_printf_float+0x1d8>
 800321c:	2301      	movs	r3, #1
 800321e:	465a      	mov	r2, fp
 8003220:	4631      	mov	r1, r6
 8003222:	4628      	mov	r0, r5
 8003224:	47b8      	blx	r7
 8003226:	3001      	adds	r0, #1
 8003228:	f43f aefb 	beq.w	8003022 <_printf_float+0xb6>
 800322c:	f10a 0a01 	add.w	sl, sl, #1
 8003230:	e7ee      	b.n	8003210 <_printf_float+0x2a4>
 8003232:	bf00      	nop
 8003234:	7fefffff 	.word	0x7fefffff
 8003238:	0800586c 	.word	0x0800586c
 800323c:	08005868 	.word	0x08005868
 8003240:	08005874 	.word	0x08005874
 8003244:	08005870 	.word	0x08005870
 8003248:	08005878 	.word	0x08005878
 800324c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800324e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003252:	4553      	cmp	r3, sl
 8003254:	bfa8      	it	ge
 8003256:	4653      	movge	r3, sl
 8003258:	2b00      	cmp	r3, #0
 800325a:	4699      	mov	r9, r3
 800325c:	dc36      	bgt.n	80032cc <_printf_float+0x360>
 800325e:	f04f 0b00 	mov.w	fp, #0
 8003262:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003266:	f104 021a 	add.w	r2, r4, #26
 800326a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800326c:	9306      	str	r3, [sp, #24]
 800326e:	eba3 0309 	sub.w	r3, r3, r9
 8003272:	455b      	cmp	r3, fp
 8003274:	dc31      	bgt.n	80032da <_printf_float+0x36e>
 8003276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003278:	459a      	cmp	sl, r3
 800327a:	dc3a      	bgt.n	80032f2 <_printf_float+0x386>
 800327c:	6823      	ldr	r3, [r4, #0]
 800327e:	07da      	lsls	r2, r3, #31
 8003280:	d437      	bmi.n	80032f2 <_printf_float+0x386>
 8003282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003284:	ebaa 0903 	sub.w	r9, sl, r3
 8003288:	9b06      	ldr	r3, [sp, #24]
 800328a:	ebaa 0303 	sub.w	r3, sl, r3
 800328e:	4599      	cmp	r9, r3
 8003290:	bfa8      	it	ge
 8003292:	4699      	movge	r9, r3
 8003294:	f1b9 0f00 	cmp.w	r9, #0
 8003298:	dc33      	bgt.n	8003302 <_printf_float+0x396>
 800329a:	f04f 0800 	mov.w	r8, #0
 800329e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80032a2:	f104 0b1a 	add.w	fp, r4, #26
 80032a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032a8:	ebaa 0303 	sub.w	r3, sl, r3
 80032ac:	eba3 0309 	sub.w	r3, r3, r9
 80032b0:	4543      	cmp	r3, r8
 80032b2:	f77f af79 	ble.w	80031a8 <_printf_float+0x23c>
 80032b6:	2301      	movs	r3, #1
 80032b8:	465a      	mov	r2, fp
 80032ba:	4631      	mov	r1, r6
 80032bc:	4628      	mov	r0, r5
 80032be:	47b8      	blx	r7
 80032c0:	3001      	adds	r0, #1
 80032c2:	f43f aeae 	beq.w	8003022 <_printf_float+0xb6>
 80032c6:	f108 0801 	add.w	r8, r8, #1
 80032ca:	e7ec      	b.n	80032a6 <_printf_float+0x33a>
 80032cc:	4642      	mov	r2, r8
 80032ce:	4631      	mov	r1, r6
 80032d0:	4628      	mov	r0, r5
 80032d2:	47b8      	blx	r7
 80032d4:	3001      	adds	r0, #1
 80032d6:	d1c2      	bne.n	800325e <_printf_float+0x2f2>
 80032d8:	e6a3      	b.n	8003022 <_printf_float+0xb6>
 80032da:	2301      	movs	r3, #1
 80032dc:	4631      	mov	r1, r6
 80032de:	4628      	mov	r0, r5
 80032e0:	9206      	str	r2, [sp, #24]
 80032e2:	47b8      	blx	r7
 80032e4:	3001      	adds	r0, #1
 80032e6:	f43f ae9c 	beq.w	8003022 <_printf_float+0xb6>
 80032ea:	9a06      	ldr	r2, [sp, #24]
 80032ec:	f10b 0b01 	add.w	fp, fp, #1
 80032f0:	e7bb      	b.n	800326a <_printf_float+0x2fe>
 80032f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80032f6:	4631      	mov	r1, r6
 80032f8:	4628      	mov	r0, r5
 80032fa:	47b8      	blx	r7
 80032fc:	3001      	adds	r0, #1
 80032fe:	d1c0      	bne.n	8003282 <_printf_float+0x316>
 8003300:	e68f      	b.n	8003022 <_printf_float+0xb6>
 8003302:	9a06      	ldr	r2, [sp, #24]
 8003304:	464b      	mov	r3, r9
 8003306:	4442      	add	r2, r8
 8003308:	4631      	mov	r1, r6
 800330a:	4628      	mov	r0, r5
 800330c:	47b8      	blx	r7
 800330e:	3001      	adds	r0, #1
 8003310:	d1c3      	bne.n	800329a <_printf_float+0x32e>
 8003312:	e686      	b.n	8003022 <_printf_float+0xb6>
 8003314:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003318:	f1ba 0f01 	cmp.w	sl, #1
 800331c:	dc01      	bgt.n	8003322 <_printf_float+0x3b6>
 800331e:	07db      	lsls	r3, r3, #31
 8003320:	d536      	bpl.n	8003390 <_printf_float+0x424>
 8003322:	2301      	movs	r3, #1
 8003324:	4642      	mov	r2, r8
 8003326:	4631      	mov	r1, r6
 8003328:	4628      	mov	r0, r5
 800332a:	47b8      	blx	r7
 800332c:	3001      	adds	r0, #1
 800332e:	f43f ae78 	beq.w	8003022 <_printf_float+0xb6>
 8003332:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003336:	4631      	mov	r1, r6
 8003338:	4628      	mov	r0, r5
 800333a:	47b8      	blx	r7
 800333c:	3001      	adds	r0, #1
 800333e:	f43f ae70 	beq.w	8003022 <_printf_float+0xb6>
 8003342:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003346:	2200      	movs	r2, #0
 8003348:	2300      	movs	r3, #0
 800334a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800334e:	f7fd fbc3 	bl	8000ad8 <__aeabi_dcmpeq>
 8003352:	b9c0      	cbnz	r0, 8003386 <_printf_float+0x41a>
 8003354:	4653      	mov	r3, sl
 8003356:	f108 0201 	add.w	r2, r8, #1
 800335a:	4631      	mov	r1, r6
 800335c:	4628      	mov	r0, r5
 800335e:	47b8      	blx	r7
 8003360:	3001      	adds	r0, #1
 8003362:	d10c      	bne.n	800337e <_printf_float+0x412>
 8003364:	e65d      	b.n	8003022 <_printf_float+0xb6>
 8003366:	2301      	movs	r3, #1
 8003368:	465a      	mov	r2, fp
 800336a:	4631      	mov	r1, r6
 800336c:	4628      	mov	r0, r5
 800336e:	47b8      	blx	r7
 8003370:	3001      	adds	r0, #1
 8003372:	f43f ae56 	beq.w	8003022 <_printf_float+0xb6>
 8003376:	f108 0801 	add.w	r8, r8, #1
 800337a:	45d0      	cmp	r8, sl
 800337c:	dbf3      	blt.n	8003366 <_printf_float+0x3fa>
 800337e:	464b      	mov	r3, r9
 8003380:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003384:	e6df      	b.n	8003146 <_printf_float+0x1da>
 8003386:	f04f 0800 	mov.w	r8, #0
 800338a:	f104 0b1a 	add.w	fp, r4, #26
 800338e:	e7f4      	b.n	800337a <_printf_float+0x40e>
 8003390:	2301      	movs	r3, #1
 8003392:	4642      	mov	r2, r8
 8003394:	e7e1      	b.n	800335a <_printf_float+0x3ee>
 8003396:	2301      	movs	r3, #1
 8003398:	464a      	mov	r2, r9
 800339a:	4631      	mov	r1, r6
 800339c:	4628      	mov	r0, r5
 800339e:	47b8      	blx	r7
 80033a0:	3001      	adds	r0, #1
 80033a2:	f43f ae3e 	beq.w	8003022 <_printf_float+0xb6>
 80033a6:	f108 0801 	add.w	r8, r8, #1
 80033aa:	68e3      	ldr	r3, [r4, #12]
 80033ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80033ae:	1a5b      	subs	r3, r3, r1
 80033b0:	4543      	cmp	r3, r8
 80033b2:	dcf0      	bgt.n	8003396 <_printf_float+0x42a>
 80033b4:	e6fc      	b.n	80031b0 <_printf_float+0x244>
 80033b6:	f04f 0800 	mov.w	r8, #0
 80033ba:	f104 0919 	add.w	r9, r4, #25
 80033be:	e7f4      	b.n	80033aa <_printf_float+0x43e>

080033c0 <_printf_common>:
 80033c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033c4:	4616      	mov	r6, r2
 80033c6:	4698      	mov	r8, r3
 80033c8:	688a      	ldr	r2, [r1, #8]
 80033ca:	690b      	ldr	r3, [r1, #16]
 80033cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80033d0:	4293      	cmp	r3, r2
 80033d2:	bfb8      	it	lt
 80033d4:	4613      	movlt	r3, r2
 80033d6:	6033      	str	r3, [r6, #0]
 80033d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80033dc:	4607      	mov	r7, r0
 80033de:	460c      	mov	r4, r1
 80033e0:	b10a      	cbz	r2, 80033e6 <_printf_common+0x26>
 80033e2:	3301      	adds	r3, #1
 80033e4:	6033      	str	r3, [r6, #0]
 80033e6:	6823      	ldr	r3, [r4, #0]
 80033e8:	0699      	lsls	r1, r3, #26
 80033ea:	bf42      	ittt	mi
 80033ec:	6833      	ldrmi	r3, [r6, #0]
 80033ee:	3302      	addmi	r3, #2
 80033f0:	6033      	strmi	r3, [r6, #0]
 80033f2:	6825      	ldr	r5, [r4, #0]
 80033f4:	f015 0506 	ands.w	r5, r5, #6
 80033f8:	d106      	bne.n	8003408 <_printf_common+0x48>
 80033fa:	f104 0a19 	add.w	sl, r4, #25
 80033fe:	68e3      	ldr	r3, [r4, #12]
 8003400:	6832      	ldr	r2, [r6, #0]
 8003402:	1a9b      	subs	r3, r3, r2
 8003404:	42ab      	cmp	r3, r5
 8003406:	dc26      	bgt.n	8003456 <_printf_common+0x96>
 8003408:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800340c:	6822      	ldr	r2, [r4, #0]
 800340e:	3b00      	subs	r3, #0
 8003410:	bf18      	it	ne
 8003412:	2301      	movne	r3, #1
 8003414:	0692      	lsls	r2, r2, #26
 8003416:	d42b      	bmi.n	8003470 <_printf_common+0xb0>
 8003418:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800341c:	4641      	mov	r1, r8
 800341e:	4638      	mov	r0, r7
 8003420:	47c8      	blx	r9
 8003422:	3001      	adds	r0, #1
 8003424:	d01e      	beq.n	8003464 <_printf_common+0xa4>
 8003426:	6823      	ldr	r3, [r4, #0]
 8003428:	6922      	ldr	r2, [r4, #16]
 800342a:	f003 0306 	and.w	r3, r3, #6
 800342e:	2b04      	cmp	r3, #4
 8003430:	bf02      	ittt	eq
 8003432:	68e5      	ldreq	r5, [r4, #12]
 8003434:	6833      	ldreq	r3, [r6, #0]
 8003436:	1aed      	subeq	r5, r5, r3
 8003438:	68a3      	ldr	r3, [r4, #8]
 800343a:	bf0c      	ite	eq
 800343c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003440:	2500      	movne	r5, #0
 8003442:	4293      	cmp	r3, r2
 8003444:	bfc4      	itt	gt
 8003446:	1a9b      	subgt	r3, r3, r2
 8003448:	18ed      	addgt	r5, r5, r3
 800344a:	2600      	movs	r6, #0
 800344c:	341a      	adds	r4, #26
 800344e:	42b5      	cmp	r5, r6
 8003450:	d11a      	bne.n	8003488 <_printf_common+0xc8>
 8003452:	2000      	movs	r0, #0
 8003454:	e008      	b.n	8003468 <_printf_common+0xa8>
 8003456:	2301      	movs	r3, #1
 8003458:	4652      	mov	r2, sl
 800345a:	4641      	mov	r1, r8
 800345c:	4638      	mov	r0, r7
 800345e:	47c8      	blx	r9
 8003460:	3001      	adds	r0, #1
 8003462:	d103      	bne.n	800346c <_printf_common+0xac>
 8003464:	f04f 30ff 	mov.w	r0, #4294967295
 8003468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800346c:	3501      	adds	r5, #1
 800346e:	e7c6      	b.n	80033fe <_printf_common+0x3e>
 8003470:	18e1      	adds	r1, r4, r3
 8003472:	1c5a      	adds	r2, r3, #1
 8003474:	2030      	movs	r0, #48	@ 0x30
 8003476:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800347a:	4422      	add	r2, r4
 800347c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003480:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003484:	3302      	adds	r3, #2
 8003486:	e7c7      	b.n	8003418 <_printf_common+0x58>
 8003488:	2301      	movs	r3, #1
 800348a:	4622      	mov	r2, r4
 800348c:	4641      	mov	r1, r8
 800348e:	4638      	mov	r0, r7
 8003490:	47c8      	blx	r9
 8003492:	3001      	adds	r0, #1
 8003494:	d0e6      	beq.n	8003464 <_printf_common+0xa4>
 8003496:	3601      	adds	r6, #1
 8003498:	e7d9      	b.n	800344e <_printf_common+0x8e>
	...

0800349c <_printf_i>:
 800349c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034a0:	7e0f      	ldrb	r7, [r1, #24]
 80034a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80034a4:	2f78      	cmp	r7, #120	@ 0x78
 80034a6:	4691      	mov	r9, r2
 80034a8:	4680      	mov	r8, r0
 80034aa:	460c      	mov	r4, r1
 80034ac:	469a      	mov	sl, r3
 80034ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80034b2:	d807      	bhi.n	80034c4 <_printf_i+0x28>
 80034b4:	2f62      	cmp	r7, #98	@ 0x62
 80034b6:	d80a      	bhi.n	80034ce <_printf_i+0x32>
 80034b8:	2f00      	cmp	r7, #0
 80034ba:	f000 80d1 	beq.w	8003660 <_printf_i+0x1c4>
 80034be:	2f58      	cmp	r7, #88	@ 0x58
 80034c0:	f000 80b8 	beq.w	8003634 <_printf_i+0x198>
 80034c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80034c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80034cc:	e03a      	b.n	8003544 <_printf_i+0xa8>
 80034ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80034d2:	2b15      	cmp	r3, #21
 80034d4:	d8f6      	bhi.n	80034c4 <_printf_i+0x28>
 80034d6:	a101      	add	r1, pc, #4	@ (adr r1, 80034dc <_printf_i+0x40>)
 80034d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034dc:	08003535 	.word	0x08003535
 80034e0:	08003549 	.word	0x08003549
 80034e4:	080034c5 	.word	0x080034c5
 80034e8:	080034c5 	.word	0x080034c5
 80034ec:	080034c5 	.word	0x080034c5
 80034f0:	080034c5 	.word	0x080034c5
 80034f4:	08003549 	.word	0x08003549
 80034f8:	080034c5 	.word	0x080034c5
 80034fc:	080034c5 	.word	0x080034c5
 8003500:	080034c5 	.word	0x080034c5
 8003504:	080034c5 	.word	0x080034c5
 8003508:	08003647 	.word	0x08003647
 800350c:	08003573 	.word	0x08003573
 8003510:	08003601 	.word	0x08003601
 8003514:	080034c5 	.word	0x080034c5
 8003518:	080034c5 	.word	0x080034c5
 800351c:	08003669 	.word	0x08003669
 8003520:	080034c5 	.word	0x080034c5
 8003524:	08003573 	.word	0x08003573
 8003528:	080034c5 	.word	0x080034c5
 800352c:	080034c5 	.word	0x080034c5
 8003530:	08003609 	.word	0x08003609
 8003534:	6833      	ldr	r3, [r6, #0]
 8003536:	1d1a      	adds	r2, r3, #4
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6032      	str	r2, [r6, #0]
 800353c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003540:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003544:	2301      	movs	r3, #1
 8003546:	e09c      	b.n	8003682 <_printf_i+0x1e6>
 8003548:	6833      	ldr	r3, [r6, #0]
 800354a:	6820      	ldr	r0, [r4, #0]
 800354c:	1d19      	adds	r1, r3, #4
 800354e:	6031      	str	r1, [r6, #0]
 8003550:	0606      	lsls	r6, r0, #24
 8003552:	d501      	bpl.n	8003558 <_printf_i+0xbc>
 8003554:	681d      	ldr	r5, [r3, #0]
 8003556:	e003      	b.n	8003560 <_printf_i+0xc4>
 8003558:	0645      	lsls	r5, r0, #25
 800355a:	d5fb      	bpl.n	8003554 <_printf_i+0xb8>
 800355c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003560:	2d00      	cmp	r5, #0
 8003562:	da03      	bge.n	800356c <_printf_i+0xd0>
 8003564:	232d      	movs	r3, #45	@ 0x2d
 8003566:	426d      	negs	r5, r5
 8003568:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800356c:	4858      	ldr	r0, [pc, #352]	@ (80036d0 <_printf_i+0x234>)
 800356e:	230a      	movs	r3, #10
 8003570:	e011      	b.n	8003596 <_printf_i+0xfa>
 8003572:	6821      	ldr	r1, [r4, #0]
 8003574:	6833      	ldr	r3, [r6, #0]
 8003576:	0608      	lsls	r0, r1, #24
 8003578:	f853 5b04 	ldr.w	r5, [r3], #4
 800357c:	d402      	bmi.n	8003584 <_printf_i+0xe8>
 800357e:	0649      	lsls	r1, r1, #25
 8003580:	bf48      	it	mi
 8003582:	b2ad      	uxthmi	r5, r5
 8003584:	2f6f      	cmp	r7, #111	@ 0x6f
 8003586:	4852      	ldr	r0, [pc, #328]	@ (80036d0 <_printf_i+0x234>)
 8003588:	6033      	str	r3, [r6, #0]
 800358a:	bf14      	ite	ne
 800358c:	230a      	movne	r3, #10
 800358e:	2308      	moveq	r3, #8
 8003590:	2100      	movs	r1, #0
 8003592:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003596:	6866      	ldr	r6, [r4, #4]
 8003598:	60a6      	str	r6, [r4, #8]
 800359a:	2e00      	cmp	r6, #0
 800359c:	db05      	blt.n	80035aa <_printf_i+0x10e>
 800359e:	6821      	ldr	r1, [r4, #0]
 80035a0:	432e      	orrs	r6, r5
 80035a2:	f021 0104 	bic.w	r1, r1, #4
 80035a6:	6021      	str	r1, [r4, #0]
 80035a8:	d04b      	beq.n	8003642 <_printf_i+0x1a6>
 80035aa:	4616      	mov	r6, r2
 80035ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80035b0:	fb03 5711 	mls	r7, r3, r1, r5
 80035b4:	5dc7      	ldrb	r7, [r0, r7]
 80035b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80035ba:	462f      	mov	r7, r5
 80035bc:	42bb      	cmp	r3, r7
 80035be:	460d      	mov	r5, r1
 80035c0:	d9f4      	bls.n	80035ac <_printf_i+0x110>
 80035c2:	2b08      	cmp	r3, #8
 80035c4:	d10b      	bne.n	80035de <_printf_i+0x142>
 80035c6:	6823      	ldr	r3, [r4, #0]
 80035c8:	07df      	lsls	r7, r3, #31
 80035ca:	d508      	bpl.n	80035de <_printf_i+0x142>
 80035cc:	6923      	ldr	r3, [r4, #16]
 80035ce:	6861      	ldr	r1, [r4, #4]
 80035d0:	4299      	cmp	r1, r3
 80035d2:	bfde      	ittt	le
 80035d4:	2330      	movle	r3, #48	@ 0x30
 80035d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80035da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80035de:	1b92      	subs	r2, r2, r6
 80035e0:	6122      	str	r2, [r4, #16]
 80035e2:	f8cd a000 	str.w	sl, [sp]
 80035e6:	464b      	mov	r3, r9
 80035e8:	aa03      	add	r2, sp, #12
 80035ea:	4621      	mov	r1, r4
 80035ec:	4640      	mov	r0, r8
 80035ee:	f7ff fee7 	bl	80033c0 <_printf_common>
 80035f2:	3001      	adds	r0, #1
 80035f4:	d14a      	bne.n	800368c <_printf_i+0x1f0>
 80035f6:	f04f 30ff 	mov.w	r0, #4294967295
 80035fa:	b004      	add	sp, #16
 80035fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003600:	6823      	ldr	r3, [r4, #0]
 8003602:	f043 0320 	orr.w	r3, r3, #32
 8003606:	6023      	str	r3, [r4, #0]
 8003608:	4832      	ldr	r0, [pc, #200]	@ (80036d4 <_printf_i+0x238>)
 800360a:	2778      	movs	r7, #120	@ 0x78
 800360c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003610:	6823      	ldr	r3, [r4, #0]
 8003612:	6831      	ldr	r1, [r6, #0]
 8003614:	061f      	lsls	r7, r3, #24
 8003616:	f851 5b04 	ldr.w	r5, [r1], #4
 800361a:	d402      	bmi.n	8003622 <_printf_i+0x186>
 800361c:	065f      	lsls	r7, r3, #25
 800361e:	bf48      	it	mi
 8003620:	b2ad      	uxthmi	r5, r5
 8003622:	6031      	str	r1, [r6, #0]
 8003624:	07d9      	lsls	r1, r3, #31
 8003626:	bf44      	itt	mi
 8003628:	f043 0320 	orrmi.w	r3, r3, #32
 800362c:	6023      	strmi	r3, [r4, #0]
 800362e:	b11d      	cbz	r5, 8003638 <_printf_i+0x19c>
 8003630:	2310      	movs	r3, #16
 8003632:	e7ad      	b.n	8003590 <_printf_i+0xf4>
 8003634:	4826      	ldr	r0, [pc, #152]	@ (80036d0 <_printf_i+0x234>)
 8003636:	e7e9      	b.n	800360c <_printf_i+0x170>
 8003638:	6823      	ldr	r3, [r4, #0]
 800363a:	f023 0320 	bic.w	r3, r3, #32
 800363e:	6023      	str	r3, [r4, #0]
 8003640:	e7f6      	b.n	8003630 <_printf_i+0x194>
 8003642:	4616      	mov	r6, r2
 8003644:	e7bd      	b.n	80035c2 <_printf_i+0x126>
 8003646:	6833      	ldr	r3, [r6, #0]
 8003648:	6825      	ldr	r5, [r4, #0]
 800364a:	6961      	ldr	r1, [r4, #20]
 800364c:	1d18      	adds	r0, r3, #4
 800364e:	6030      	str	r0, [r6, #0]
 8003650:	062e      	lsls	r6, r5, #24
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	d501      	bpl.n	800365a <_printf_i+0x1be>
 8003656:	6019      	str	r1, [r3, #0]
 8003658:	e002      	b.n	8003660 <_printf_i+0x1c4>
 800365a:	0668      	lsls	r0, r5, #25
 800365c:	d5fb      	bpl.n	8003656 <_printf_i+0x1ba>
 800365e:	8019      	strh	r1, [r3, #0]
 8003660:	2300      	movs	r3, #0
 8003662:	6123      	str	r3, [r4, #16]
 8003664:	4616      	mov	r6, r2
 8003666:	e7bc      	b.n	80035e2 <_printf_i+0x146>
 8003668:	6833      	ldr	r3, [r6, #0]
 800366a:	1d1a      	adds	r2, r3, #4
 800366c:	6032      	str	r2, [r6, #0]
 800366e:	681e      	ldr	r6, [r3, #0]
 8003670:	6862      	ldr	r2, [r4, #4]
 8003672:	2100      	movs	r1, #0
 8003674:	4630      	mov	r0, r6
 8003676:	f7fc fdb3 	bl	80001e0 <memchr>
 800367a:	b108      	cbz	r0, 8003680 <_printf_i+0x1e4>
 800367c:	1b80      	subs	r0, r0, r6
 800367e:	6060      	str	r0, [r4, #4]
 8003680:	6863      	ldr	r3, [r4, #4]
 8003682:	6123      	str	r3, [r4, #16]
 8003684:	2300      	movs	r3, #0
 8003686:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800368a:	e7aa      	b.n	80035e2 <_printf_i+0x146>
 800368c:	6923      	ldr	r3, [r4, #16]
 800368e:	4632      	mov	r2, r6
 8003690:	4649      	mov	r1, r9
 8003692:	4640      	mov	r0, r8
 8003694:	47d0      	blx	sl
 8003696:	3001      	adds	r0, #1
 8003698:	d0ad      	beq.n	80035f6 <_printf_i+0x15a>
 800369a:	6823      	ldr	r3, [r4, #0]
 800369c:	079b      	lsls	r3, r3, #30
 800369e:	d413      	bmi.n	80036c8 <_printf_i+0x22c>
 80036a0:	68e0      	ldr	r0, [r4, #12]
 80036a2:	9b03      	ldr	r3, [sp, #12]
 80036a4:	4298      	cmp	r0, r3
 80036a6:	bfb8      	it	lt
 80036a8:	4618      	movlt	r0, r3
 80036aa:	e7a6      	b.n	80035fa <_printf_i+0x15e>
 80036ac:	2301      	movs	r3, #1
 80036ae:	4632      	mov	r2, r6
 80036b0:	4649      	mov	r1, r9
 80036b2:	4640      	mov	r0, r8
 80036b4:	47d0      	blx	sl
 80036b6:	3001      	adds	r0, #1
 80036b8:	d09d      	beq.n	80035f6 <_printf_i+0x15a>
 80036ba:	3501      	adds	r5, #1
 80036bc:	68e3      	ldr	r3, [r4, #12]
 80036be:	9903      	ldr	r1, [sp, #12]
 80036c0:	1a5b      	subs	r3, r3, r1
 80036c2:	42ab      	cmp	r3, r5
 80036c4:	dcf2      	bgt.n	80036ac <_printf_i+0x210>
 80036c6:	e7eb      	b.n	80036a0 <_printf_i+0x204>
 80036c8:	2500      	movs	r5, #0
 80036ca:	f104 0619 	add.w	r6, r4, #25
 80036ce:	e7f5      	b.n	80036bc <_printf_i+0x220>
 80036d0:	0800587a 	.word	0x0800587a
 80036d4:	0800588b 	.word	0x0800588b

080036d8 <std>:
 80036d8:	2300      	movs	r3, #0
 80036da:	b510      	push	{r4, lr}
 80036dc:	4604      	mov	r4, r0
 80036de:	e9c0 3300 	strd	r3, r3, [r0]
 80036e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80036e6:	6083      	str	r3, [r0, #8]
 80036e8:	8181      	strh	r1, [r0, #12]
 80036ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80036ec:	81c2      	strh	r2, [r0, #14]
 80036ee:	6183      	str	r3, [r0, #24]
 80036f0:	4619      	mov	r1, r3
 80036f2:	2208      	movs	r2, #8
 80036f4:	305c      	adds	r0, #92	@ 0x5c
 80036f6:	f000 f9f9 	bl	8003aec <memset>
 80036fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003730 <std+0x58>)
 80036fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80036fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003734 <std+0x5c>)
 8003700:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003702:	4b0d      	ldr	r3, [pc, #52]	@ (8003738 <std+0x60>)
 8003704:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003706:	4b0d      	ldr	r3, [pc, #52]	@ (800373c <std+0x64>)
 8003708:	6323      	str	r3, [r4, #48]	@ 0x30
 800370a:	4b0d      	ldr	r3, [pc, #52]	@ (8003740 <std+0x68>)
 800370c:	6224      	str	r4, [r4, #32]
 800370e:	429c      	cmp	r4, r3
 8003710:	d006      	beq.n	8003720 <std+0x48>
 8003712:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003716:	4294      	cmp	r4, r2
 8003718:	d002      	beq.n	8003720 <std+0x48>
 800371a:	33d0      	adds	r3, #208	@ 0xd0
 800371c:	429c      	cmp	r4, r3
 800371e:	d105      	bne.n	800372c <std+0x54>
 8003720:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003728:	f000 ba5c 	b.w	8003be4 <__retarget_lock_init_recursive>
 800372c:	bd10      	pop	{r4, pc}
 800372e:	bf00      	nop
 8003730:	0800393d 	.word	0x0800393d
 8003734:	0800395f 	.word	0x0800395f
 8003738:	08003997 	.word	0x08003997
 800373c:	080039bb 	.word	0x080039bb
 8003740:	20000250 	.word	0x20000250

08003744 <stdio_exit_handler>:
 8003744:	4a02      	ldr	r2, [pc, #8]	@ (8003750 <stdio_exit_handler+0xc>)
 8003746:	4903      	ldr	r1, [pc, #12]	@ (8003754 <stdio_exit_handler+0x10>)
 8003748:	4803      	ldr	r0, [pc, #12]	@ (8003758 <stdio_exit_handler+0x14>)
 800374a:	f000 b869 	b.w	8003820 <_fwalk_sglue>
 800374e:	bf00      	nop
 8003750:	20000010 	.word	0x20000010
 8003754:	08005521 	.word	0x08005521
 8003758:	20000020 	.word	0x20000020

0800375c <cleanup_stdio>:
 800375c:	6841      	ldr	r1, [r0, #4]
 800375e:	4b0c      	ldr	r3, [pc, #48]	@ (8003790 <cleanup_stdio+0x34>)
 8003760:	4299      	cmp	r1, r3
 8003762:	b510      	push	{r4, lr}
 8003764:	4604      	mov	r4, r0
 8003766:	d001      	beq.n	800376c <cleanup_stdio+0x10>
 8003768:	f001 feda 	bl	8005520 <_fflush_r>
 800376c:	68a1      	ldr	r1, [r4, #8]
 800376e:	4b09      	ldr	r3, [pc, #36]	@ (8003794 <cleanup_stdio+0x38>)
 8003770:	4299      	cmp	r1, r3
 8003772:	d002      	beq.n	800377a <cleanup_stdio+0x1e>
 8003774:	4620      	mov	r0, r4
 8003776:	f001 fed3 	bl	8005520 <_fflush_r>
 800377a:	68e1      	ldr	r1, [r4, #12]
 800377c:	4b06      	ldr	r3, [pc, #24]	@ (8003798 <cleanup_stdio+0x3c>)
 800377e:	4299      	cmp	r1, r3
 8003780:	d004      	beq.n	800378c <cleanup_stdio+0x30>
 8003782:	4620      	mov	r0, r4
 8003784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003788:	f001 beca 	b.w	8005520 <_fflush_r>
 800378c:	bd10      	pop	{r4, pc}
 800378e:	bf00      	nop
 8003790:	20000250 	.word	0x20000250
 8003794:	200002b8 	.word	0x200002b8
 8003798:	20000320 	.word	0x20000320

0800379c <global_stdio_init.part.0>:
 800379c:	b510      	push	{r4, lr}
 800379e:	4b0b      	ldr	r3, [pc, #44]	@ (80037cc <global_stdio_init.part.0+0x30>)
 80037a0:	4c0b      	ldr	r4, [pc, #44]	@ (80037d0 <global_stdio_init.part.0+0x34>)
 80037a2:	4a0c      	ldr	r2, [pc, #48]	@ (80037d4 <global_stdio_init.part.0+0x38>)
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	4620      	mov	r0, r4
 80037a8:	2200      	movs	r2, #0
 80037aa:	2104      	movs	r1, #4
 80037ac:	f7ff ff94 	bl	80036d8 <std>
 80037b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80037b4:	2201      	movs	r2, #1
 80037b6:	2109      	movs	r1, #9
 80037b8:	f7ff ff8e 	bl	80036d8 <std>
 80037bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80037c0:	2202      	movs	r2, #2
 80037c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037c6:	2112      	movs	r1, #18
 80037c8:	f7ff bf86 	b.w	80036d8 <std>
 80037cc:	20000388 	.word	0x20000388
 80037d0:	20000250 	.word	0x20000250
 80037d4:	08003745 	.word	0x08003745

080037d8 <__sfp_lock_acquire>:
 80037d8:	4801      	ldr	r0, [pc, #4]	@ (80037e0 <__sfp_lock_acquire+0x8>)
 80037da:	f000 ba04 	b.w	8003be6 <__retarget_lock_acquire_recursive>
 80037de:	bf00      	nop
 80037e0:	20000391 	.word	0x20000391

080037e4 <__sfp_lock_release>:
 80037e4:	4801      	ldr	r0, [pc, #4]	@ (80037ec <__sfp_lock_release+0x8>)
 80037e6:	f000 b9ff 	b.w	8003be8 <__retarget_lock_release_recursive>
 80037ea:	bf00      	nop
 80037ec:	20000391 	.word	0x20000391

080037f0 <__sinit>:
 80037f0:	b510      	push	{r4, lr}
 80037f2:	4604      	mov	r4, r0
 80037f4:	f7ff fff0 	bl	80037d8 <__sfp_lock_acquire>
 80037f8:	6a23      	ldr	r3, [r4, #32]
 80037fa:	b11b      	cbz	r3, 8003804 <__sinit+0x14>
 80037fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003800:	f7ff bff0 	b.w	80037e4 <__sfp_lock_release>
 8003804:	4b04      	ldr	r3, [pc, #16]	@ (8003818 <__sinit+0x28>)
 8003806:	6223      	str	r3, [r4, #32]
 8003808:	4b04      	ldr	r3, [pc, #16]	@ (800381c <__sinit+0x2c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1f5      	bne.n	80037fc <__sinit+0xc>
 8003810:	f7ff ffc4 	bl	800379c <global_stdio_init.part.0>
 8003814:	e7f2      	b.n	80037fc <__sinit+0xc>
 8003816:	bf00      	nop
 8003818:	0800375d 	.word	0x0800375d
 800381c:	20000388 	.word	0x20000388

08003820 <_fwalk_sglue>:
 8003820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003824:	4607      	mov	r7, r0
 8003826:	4688      	mov	r8, r1
 8003828:	4614      	mov	r4, r2
 800382a:	2600      	movs	r6, #0
 800382c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003830:	f1b9 0901 	subs.w	r9, r9, #1
 8003834:	d505      	bpl.n	8003842 <_fwalk_sglue+0x22>
 8003836:	6824      	ldr	r4, [r4, #0]
 8003838:	2c00      	cmp	r4, #0
 800383a:	d1f7      	bne.n	800382c <_fwalk_sglue+0xc>
 800383c:	4630      	mov	r0, r6
 800383e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003842:	89ab      	ldrh	r3, [r5, #12]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d907      	bls.n	8003858 <_fwalk_sglue+0x38>
 8003848:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800384c:	3301      	adds	r3, #1
 800384e:	d003      	beq.n	8003858 <_fwalk_sglue+0x38>
 8003850:	4629      	mov	r1, r5
 8003852:	4638      	mov	r0, r7
 8003854:	47c0      	blx	r8
 8003856:	4306      	orrs	r6, r0
 8003858:	3568      	adds	r5, #104	@ 0x68
 800385a:	e7e9      	b.n	8003830 <_fwalk_sglue+0x10>

0800385c <iprintf>:
 800385c:	b40f      	push	{r0, r1, r2, r3}
 800385e:	b507      	push	{r0, r1, r2, lr}
 8003860:	4906      	ldr	r1, [pc, #24]	@ (800387c <iprintf+0x20>)
 8003862:	ab04      	add	r3, sp, #16
 8003864:	6808      	ldr	r0, [r1, #0]
 8003866:	f853 2b04 	ldr.w	r2, [r3], #4
 800386a:	6881      	ldr	r1, [r0, #8]
 800386c:	9301      	str	r3, [sp, #4]
 800386e:	f001 fcbb 	bl	80051e8 <_vfiprintf_r>
 8003872:	b003      	add	sp, #12
 8003874:	f85d eb04 	ldr.w	lr, [sp], #4
 8003878:	b004      	add	sp, #16
 800387a:	4770      	bx	lr
 800387c:	2000001c 	.word	0x2000001c

08003880 <_puts_r>:
 8003880:	6a03      	ldr	r3, [r0, #32]
 8003882:	b570      	push	{r4, r5, r6, lr}
 8003884:	6884      	ldr	r4, [r0, #8]
 8003886:	4605      	mov	r5, r0
 8003888:	460e      	mov	r6, r1
 800388a:	b90b      	cbnz	r3, 8003890 <_puts_r+0x10>
 800388c:	f7ff ffb0 	bl	80037f0 <__sinit>
 8003890:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003892:	07db      	lsls	r3, r3, #31
 8003894:	d405      	bmi.n	80038a2 <_puts_r+0x22>
 8003896:	89a3      	ldrh	r3, [r4, #12]
 8003898:	0598      	lsls	r0, r3, #22
 800389a:	d402      	bmi.n	80038a2 <_puts_r+0x22>
 800389c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800389e:	f000 f9a2 	bl	8003be6 <__retarget_lock_acquire_recursive>
 80038a2:	89a3      	ldrh	r3, [r4, #12]
 80038a4:	0719      	lsls	r1, r3, #28
 80038a6:	d502      	bpl.n	80038ae <_puts_r+0x2e>
 80038a8:	6923      	ldr	r3, [r4, #16]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d135      	bne.n	800391a <_puts_r+0x9a>
 80038ae:	4621      	mov	r1, r4
 80038b0:	4628      	mov	r0, r5
 80038b2:	f000 f8c5 	bl	8003a40 <__swsetup_r>
 80038b6:	b380      	cbz	r0, 800391a <_puts_r+0x9a>
 80038b8:	f04f 35ff 	mov.w	r5, #4294967295
 80038bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80038be:	07da      	lsls	r2, r3, #31
 80038c0:	d405      	bmi.n	80038ce <_puts_r+0x4e>
 80038c2:	89a3      	ldrh	r3, [r4, #12]
 80038c4:	059b      	lsls	r3, r3, #22
 80038c6:	d402      	bmi.n	80038ce <_puts_r+0x4e>
 80038c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038ca:	f000 f98d 	bl	8003be8 <__retarget_lock_release_recursive>
 80038ce:	4628      	mov	r0, r5
 80038d0:	bd70      	pop	{r4, r5, r6, pc}
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	da04      	bge.n	80038e0 <_puts_r+0x60>
 80038d6:	69a2      	ldr	r2, [r4, #24]
 80038d8:	429a      	cmp	r2, r3
 80038da:	dc17      	bgt.n	800390c <_puts_r+0x8c>
 80038dc:	290a      	cmp	r1, #10
 80038de:	d015      	beq.n	800390c <_puts_r+0x8c>
 80038e0:	6823      	ldr	r3, [r4, #0]
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	6022      	str	r2, [r4, #0]
 80038e6:	7019      	strb	r1, [r3, #0]
 80038e8:	68a3      	ldr	r3, [r4, #8]
 80038ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80038ee:	3b01      	subs	r3, #1
 80038f0:	60a3      	str	r3, [r4, #8]
 80038f2:	2900      	cmp	r1, #0
 80038f4:	d1ed      	bne.n	80038d2 <_puts_r+0x52>
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	da11      	bge.n	800391e <_puts_r+0x9e>
 80038fa:	4622      	mov	r2, r4
 80038fc:	210a      	movs	r1, #10
 80038fe:	4628      	mov	r0, r5
 8003900:	f000 f85f 	bl	80039c2 <__swbuf_r>
 8003904:	3001      	adds	r0, #1
 8003906:	d0d7      	beq.n	80038b8 <_puts_r+0x38>
 8003908:	250a      	movs	r5, #10
 800390a:	e7d7      	b.n	80038bc <_puts_r+0x3c>
 800390c:	4622      	mov	r2, r4
 800390e:	4628      	mov	r0, r5
 8003910:	f000 f857 	bl	80039c2 <__swbuf_r>
 8003914:	3001      	adds	r0, #1
 8003916:	d1e7      	bne.n	80038e8 <_puts_r+0x68>
 8003918:	e7ce      	b.n	80038b8 <_puts_r+0x38>
 800391a:	3e01      	subs	r6, #1
 800391c:	e7e4      	b.n	80038e8 <_puts_r+0x68>
 800391e:	6823      	ldr	r3, [r4, #0]
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	6022      	str	r2, [r4, #0]
 8003924:	220a      	movs	r2, #10
 8003926:	701a      	strb	r2, [r3, #0]
 8003928:	e7ee      	b.n	8003908 <_puts_r+0x88>
	...

0800392c <puts>:
 800392c:	4b02      	ldr	r3, [pc, #8]	@ (8003938 <puts+0xc>)
 800392e:	4601      	mov	r1, r0
 8003930:	6818      	ldr	r0, [r3, #0]
 8003932:	f7ff bfa5 	b.w	8003880 <_puts_r>
 8003936:	bf00      	nop
 8003938:	2000001c 	.word	0x2000001c

0800393c <__sread>:
 800393c:	b510      	push	{r4, lr}
 800393e:	460c      	mov	r4, r1
 8003940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003944:	f000 f900 	bl	8003b48 <_read_r>
 8003948:	2800      	cmp	r0, #0
 800394a:	bfab      	itete	ge
 800394c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800394e:	89a3      	ldrhlt	r3, [r4, #12]
 8003950:	181b      	addge	r3, r3, r0
 8003952:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003956:	bfac      	ite	ge
 8003958:	6563      	strge	r3, [r4, #84]	@ 0x54
 800395a:	81a3      	strhlt	r3, [r4, #12]
 800395c:	bd10      	pop	{r4, pc}

0800395e <__swrite>:
 800395e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003962:	461f      	mov	r7, r3
 8003964:	898b      	ldrh	r3, [r1, #12]
 8003966:	05db      	lsls	r3, r3, #23
 8003968:	4605      	mov	r5, r0
 800396a:	460c      	mov	r4, r1
 800396c:	4616      	mov	r6, r2
 800396e:	d505      	bpl.n	800397c <__swrite+0x1e>
 8003970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003974:	2302      	movs	r3, #2
 8003976:	2200      	movs	r2, #0
 8003978:	f000 f8d4 	bl	8003b24 <_lseek_r>
 800397c:	89a3      	ldrh	r3, [r4, #12]
 800397e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003982:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003986:	81a3      	strh	r3, [r4, #12]
 8003988:	4632      	mov	r2, r6
 800398a:	463b      	mov	r3, r7
 800398c:	4628      	mov	r0, r5
 800398e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003992:	f000 b8eb 	b.w	8003b6c <_write_r>

08003996 <__sseek>:
 8003996:	b510      	push	{r4, lr}
 8003998:	460c      	mov	r4, r1
 800399a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800399e:	f000 f8c1 	bl	8003b24 <_lseek_r>
 80039a2:	1c43      	adds	r3, r0, #1
 80039a4:	89a3      	ldrh	r3, [r4, #12]
 80039a6:	bf15      	itete	ne
 80039a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80039aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80039ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80039b2:	81a3      	strheq	r3, [r4, #12]
 80039b4:	bf18      	it	ne
 80039b6:	81a3      	strhne	r3, [r4, #12]
 80039b8:	bd10      	pop	{r4, pc}

080039ba <__sclose>:
 80039ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039be:	f000 b8a1 	b.w	8003b04 <_close_r>

080039c2 <__swbuf_r>:
 80039c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c4:	460e      	mov	r6, r1
 80039c6:	4614      	mov	r4, r2
 80039c8:	4605      	mov	r5, r0
 80039ca:	b118      	cbz	r0, 80039d4 <__swbuf_r+0x12>
 80039cc:	6a03      	ldr	r3, [r0, #32]
 80039ce:	b90b      	cbnz	r3, 80039d4 <__swbuf_r+0x12>
 80039d0:	f7ff ff0e 	bl	80037f0 <__sinit>
 80039d4:	69a3      	ldr	r3, [r4, #24]
 80039d6:	60a3      	str	r3, [r4, #8]
 80039d8:	89a3      	ldrh	r3, [r4, #12]
 80039da:	071a      	lsls	r2, r3, #28
 80039dc:	d501      	bpl.n	80039e2 <__swbuf_r+0x20>
 80039de:	6923      	ldr	r3, [r4, #16]
 80039e0:	b943      	cbnz	r3, 80039f4 <__swbuf_r+0x32>
 80039e2:	4621      	mov	r1, r4
 80039e4:	4628      	mov	r0, r5
 80039e6:	f000 f82b 	bl	8003a40 <__swsetup_r>
 80039ea:	b118      	cbz	r0, 80039f4 <__swbuf_r+0x32>
 80039ec:	f04f 37ff 	mov.w	r7, #4294967295
 80039f0:	4638      	mov	r0, r7
 80039f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039f4:	6823      	ldr	r3, [r4, #0]
 80039f6:	6922      	ldr	r2, [r4, #16]
 80039f8:	1a98      	subs	r0, r3, r2
 80039fa:	6963      	ldr	r3, [r4, #20]
 80039fc:	b2f6      	uxtb	r6, r6
 80039fe:	4283      	cmp	r3, r0
 8003a00:	4637      	mov	r7, r6
 8003a02:	dc05      	bgt.n	8003a10 <__swbuf_r+0x4e>
 8003a04:	4621      	mov	r1, r4
 8003a06:	4628      	mov	r0, r5
 8003a08:	f001 fd8a 	bl	8005520 <_fflush_r>
 8003a0c:	2800      	cmp	r0, #0
 8003a0e:	d1ed      	bne.n	80039ec <__swbuf_r+0x2a>
 8003a10:	68a3      	ldr	r3, [r4, #8]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	60a3      	str	r3, [r4, #8]
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	1c5a      	adds	r2, r3, #1
 8003a1a:	6022      	str	r2, [r4, #0]
 8003a1c:	701e      	strb	r6, [r3, #0]
 8003a1e:	6962      	ldr	r2, [r4, #20]
 8003a20:	1c43      	adds	r3, r0, #1
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d004      	beq.n	8003a30 <__swbuf_r+0x6e>
 8003a26:	89a3      	ldrh	r3, [r4, #12]
 8003a28:	07db      	lsls	r3, r3, #31
 8003a2a:	d5e1      	bpl.n	80039f0 <__swbuf_r+0x2e>
 8003a2c:	2e0a      	cmp	r6, #10
 8003a2e:	d1df      	bne.n	80039f0 <__swbuf_r+0x2e>
 8003a30:	4621      	mov	r1, r4
 8003a32:	4628      	mov	r0, r5
 8003a34:	f001 fd74 	bl	8005520 <_fflush_r>
 8003a38:	2800      	cmp	r0, #0
 8003a3a:	d0d9      	beq.n	80039f0 <__swbuf_r+0x2e>
 8003a3c:	e7d6      	b.n	80039ec <__swbuf_r+0x2a>
	...

08003a40 <__swsetup_r>:
 8003a40:	b538      	push	{r3, r4, r5, lr}
 8003a42:	4b29      	ldr	r3, [pc, #164]	@ (8003ae8 <__swsetup_r+0xa8>)
 8003a44:	4605      	mov	r5, r0
 8003a46:	6818      	ldr	r0, [r3, #0]
 8003a48:	460c      	mov	r4, r1
 8003a4a:	b118      	cbz	r0, 8003a54 <__swsetup_r+0x14>
 8003a4c:	6a03      	ldr	r3, [r0, #32]
 8003a4e:	b90b      	cbnz	r3, 8003a54 <__swsetup_r+0x14>
 8003a50:	f7ff fece 	bl	80037f0 <__sinit>
 8003a54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a58:	0719      	lsls	r1, r3, #28
 8003a5a:	d422      	bmi.n	8003aa2 <__swsetup_r+0x62>
 8003a5c:	06da      	lsls	r2, r3, #27
 8003a5e:	d407      	bmi.n	8003a70 <__swsetup_r+0x30>
 8003a60:	2209      	movs	r2, #9
 8003a62:	602a      	str	r2, [r5, #0]
 8003a64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a68:	81a3      	strh	r3, [r4, #12]
 8003a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a6e:	e033      	b.n	8003ad8 <__swsetup_r+0x98>
 8003a70:	0758      	lsls	r0, r3, #29
 8003a72:	d512      	bpl.n	8003a9a <__swsetup_r+0x5a>
 8003a74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a76:	b141      	cbz	r1, 8003a8a <__swsetup_r+0x4a>
 8003a78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a7c:	4299      	cmp	r1, r3
 8003a7e:	d002      	beq.n	8003a86 <__swsetup_r+0x46>
 8003a80:	4628      	mov	r0, r5
 8003a82:	f000 ff0d 	bl	80048a0 <_free_r>
 8003a86:	2300      	movs	r3, #0
 8003a88:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a8a:	89a3      	ldrh	r3, [r4, #12]
 8003a8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003a90:	81a3      	strh	r3, [r4, #12]
 8003a92:	2300      	movs	r3, #0
 8003a94:	6063      	str	r3, [r4, #4]
 8003a96:	6923      	ldr	r3, [r4, #16]
 8003a98:	6023      	str	r3, [r4, #0]
 8003a9a:	89a3      	ldrh	r3, [r4, #12]
 8003a9c:	f043 0308 	orr.w	r3, r3, #8
 8003aa0:	81a3      	strh	r3, [r4, #12]
 8003aa2:	6923      	ldr	r3, [r4, #16]
 8003aa4:	b94b      	cbnz	r3, 8003aba <__swsetup_r+0x7a>
 8003aa6:	89a3      	ldrh	r3, [r4, #12]
 8003aa8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003aac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ab0:	d003      	beq.n	8003aba <__swsetup_r+0x7a>
 8003ab2:	4621      	mov	r1, r4
 8003ab4:	4628      	mov	r0, r5
 8003ab6:	f001 fd81 	bl	80055bc <__smakebuf_r>
 8003aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003abe:	f013 0201 	ands.w	r2, r3, #1
 8003ac2:	d00a      	beq.n	8003ada <__swsetup_r+0x9a>
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	60a2      	str	r2, [r4, #8]
 8003ac8:	6962      	ldr	r2, [r4, #20]
 8003aca:	4252      	negs	r2, r2
 8003acc:	61a2      	str	r2, [r4, #24]
 8003ace:	6922      	ldr	r2, [r4, #16]
 8003ad0:	b942      	cbnz	r2, 8003ae4 <__swsetup_r+0xa4>
 8003ad2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003ad6:	d1c5      	bne.n	8003a64 <__swsetup_r+0x24>
 8003ad8:	bd38      	pop	{r3, r4, r5, pc}
 8003ada:	0799      	lsls	r1, r3, #30
 8003adc:	bf58      	it	pl
 8003ade:	6962      	ldrpl	r2, [r4, #20]
 8003ae0:	60a2      	str	r2, [r4, #8]
 8003ae2:	e7f4      	b.n	8003ace <__swsetup_r+0x8e>
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	e7f7      	b.n	8003ad8 <__swsetup_r+0x98>
 8003ae8:	2000001c 	.word	0x2000001c

08003aec <memset>:
 8003aec:	4402      	add	r2, r0
 8003aee:	4603      	mov	r3, r0
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d100      	bne.n	8003af6 <memset+0xa>
 8003af4:	4770      	bx	lr
 8003af6:	f803 1b01 	strb.w	r1, [r3], #1
 8003afa:	e7f9      	b.n	8003af0 <memset+0x4>

08003afc <_localeconv_r>:
 8003afc:	4800      	ldr	r0, [pc, #0]	@ (8003b00 <_localeconv_r+0x4>)
 8003afe:	4770      	bx	lr
 8003b00:	2000015c 	.word	0x2000015c

08003b04 <_close_r>:
 8003b04:	b538      	push	{r3, r4, r5, lr}
 8003b06:	4d06      	ldr	r5, [pc, #24]	@ (8003b20 <_close_r+0x1c>)
 8003b08:	2300      	movs	r3, #0
 8003b0a:	4604      	mov	r4, r0
 8003b0c:	4608      	mov	r0, r1
 8003b0e:	602b      	str	r3, [r5, #0]
 8003b10:	f7fd fc24 	bl	800135c <_close>
 8003b14:	1c43      	adds	r3, r0, #1
 8003b16:	d102      	bne.n	8003b1e <_close_r+0x1a>
 8003b18:	682b      	ldr	r3, [r5, #0]
 8003b1a:	b103      	cbz	r3, 8003b1e <_close_r+0x1a>
 8003b1c:	6023      	str	r3, [r4, #0]
 8003b1e:	bd38      	pop	{r3, r4, r5, pc}
 8003b20:	2000038c 	.word	0x2000038c

08003b24 <_lseek_r>:
 8003b24:	b538      	push	{r3, r4, r5, lr}
 8003b26:	4d07      	ldr	r5, [pc, #28]	@ (8003b44 <_lseek_r+0x20>)
 8003b28:	4604      	mov	r4, r0
 8003b2a:	4608      	mov	r0, r1
 8003b2c:	4611      	mov	r1, r2
 8003b2e:	2200      	movs	r2, #0
 8003b30:	602a      	str	r2, [r5, #0]
 8003b32:	461a      	mov	r2, r3
 8003b34:	f7fd fc39 	bl	80013aa <_lseek>
 8003b38:	1c43      	adds	r3, r0, #1
 8003b3a:	d102      	bne.n	8003b42 <_lseek_r+0x1e>
 8003b3c:	682b      	ldr	r3, [r5, #0]
 8003b3e:	b103      	cbz	r3, 8003b42 <_lseek_r+0x1e>
 8003b40:	6023      	str	r3, [r4, #0]
 8003b42:	bd38      	pop	{r3, r4, r5, pc}
 8003b44:	2000038c 	.word	0x2000038c

08003b48 <_read_r>:
 8003b48:	b538      	push	{r3, r4, r5, lr}
 8003b4a:	4d07      	ldr	r5, [pc, #28]	@ (8003b68 <_read_r+0x20>)
 8003b4c:	4604      	mov	r4, r0
 8003b4e:	4608      	mov	r0, r1
 8003b50:	4611      	mov	r1, r2
 8003b52:	2200      	movs	r2, #0
 8003b54:	602a      	str	r2, [r5, #0]
 8003b56:	461a      	mov	r2, r3
 8003b58:	f7fd fbc7 	bl	80012ea <_read>
 8003b5c:	1c43      	adds	r3, r0, #1
 8003b5e:	d102      	bne.n	8003b66 <_read_r+0x1e>
 8003b60:	682b      	ldr	r3, [r5, #0]
 8003b62:	b103      	cbz	r3, 8003b66 <_read_r+0x1e>
 8003b64:	6023      	str	r3, [r4, #0]
 8003b66:	bd38      	pop	{r3, r4, r5, pc}
 8003b68:	2000038c 	.word	0x2000038c

08003b6c <_write_r>:
 8003b6c:	b538      	push	{r3, r4, r5, lr}
 8003b6e:	4d07      	ldr	r5, [pc, #28]	@ (8003b8c <_write_r+0x20>)
 8003b70:	4604      	mov	r4, r0
 8003b72:	4608      	mov	r0, r1
 8003b74:	4611      	mov	r1, r2
 8003b76:	2200      	movs	r2, #0
 8003b78:	602a      	str	r2, [r5, #0]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	f7fd fbd2 	bl	8001324 <_write>
 8003b80:	1c43      	adds	r3, r0, #1
 8003b82:	d102      	bne.n	8003b8a <_write_r+0x1e>
 8003b84:	682b      	ldr	r3, [r5, #0]
 8003b86:	b103      	cbz	r3, 8003b8a <_write_r+0x1e>
 8003b88:	6023      	str	r3, [r4, #0]
 8003b8a:	bd38      	pop	{r3, r4, r5, pc}
 8003b8c:	2000038c 	.word	0x2000038c

08003b90 <__errno>:
 8003b90:	4b01      	ldr	r3, [pc, #4]	@ (8003b98 <__errno+0x8>)
 8003b92:	6818      	ldr	r0, [r3, #0]
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	2000001c 	.word	0x2000001c

08003b9c <__libc_init_array>:
 8003b9c:	b570      	push	{r4, r5, r6, lr}
 8003b9e:	4d0d      	ldr	r5, [pc, #52]	@ (8003bd4 <__libc_init_array+0x38>)
 8003ba0:	4c0d      	ldr	r4, [pc, #52]	@ (8003bd8 <__libc_init_array+0x3c>)
 8003ba2:	1b64      	subs	r4, r4, r5
 8003ba4:	10a4      	asrs	r4, r4, #2
 8003ba6:	2600      	movs	r6, #0
 8003ba8:	42a6      	cmp	r6, r4
 8003baa:	d109      	bne.n	8003bc0 <__libc_init_array+0x24>
 8003bac:	4d0b      	ldr	r5, [pc, #44]	@ (8003bdc <__libc_init_array+0x40>)
 8003bae:	4c0c      	ldr	r4, [pc, #48]	@ (8003be0 <__libc_init_array+0x44>)
 8003bb0:	f001 fe30 	bl	8005814 <_init>
 8003bb4:	1b64      	subs	r4, r4, r5
 8003bb6:	10a4      	asrs	r4, r4, #2
 8003bb8:	2600      	movs	r6, #0
 8003bba:	42a6      	cmp	r6, r4
 8003bbc:	d105      	bne.n	8003bca <__libc_init_array+0x2e>
 8003bbe:	bd70      	pop	{r4, r5, r6, pc}
 8003bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bc4:	4798      	blx	r3
 8003bc6:	3601      	adds	r6, #1
 8003bc8:	e7ee      	b.n	8003ba8 <__libc_init_array+0xc>
 8003bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bce:	4798      	blx	r3
 8003bd0:	3601      	adds	r6, #1
 8003bd2:	e7f2      	b.n	8003bba <__libc_init_array+0x1e>
 8003bd4:	08005be4 	.word	0x08005be4
 8003bd8:	08005be4 	.word	0x08005be4
 8003bdc:	08005be4 	.word	0x08005be4
 8003be0:	08005be8 	.word	0x08005be8

08003be4 <__retarget_lock_init_recursive>:
 8003be4:	4770      	bx	lr

08003be6 <__retarget_lock_acquire_recursive>:
 8003be6:	4770      	bx	lr

08003be8 <__retarget_lock_release_recursive>:
 8003be8:	4770      	bx	lr

08003bea <quorem>:
 8003bea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bee:	6903      	ldr	r3, [r0, #16]
 8003bf0:	690c      	ldr	r4, [r1, #16]
 8003bf2:	42a3      	cmp	r3, r4
 8003bf4:	4607      	mov	r7, r0
 8003bf6:	db7e      	blt.n	8003cf6 <quorem+0x10c>
 8003bf8:	3c01      	subs	r4, #1
 8003bfa:	f101 0814 	add.w	r8, r1, #20
 8003bfe:	00a3      	lsls	r3, r4, #2
 8003c00:	f100 0514 	add.w	r5, r0, #20
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003c0a:	9301      	str	r3, [sp, #4]
 8003c0c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003c10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c14:	3301      	adds	r3, #1
 8003c16:	429a      	cmp	r2, r3
 8003c18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003c1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003c20:	d32e      	bcc.n	8003c80 <quorem+0x96>
 8003c22:	f04f 0a00 	mov.w	sl, #0
 8003c26:	46c4      	mov	ip, r8
 8003c28:	46ae      	mov	lr, r5
 8003c2a:	46d3      	mov	fp, sl
 8003c2c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003c30:	b298      	uxth	r0, r3
 8003c32:	fb06 a000 	mla	r0, r6, r0, sl
 8003c36:	0c02      	lsrs	r2, r0, #16
 8003c38:	0c1b      	lsrs	r3, r3, #16
 8003c3a:	fb06 2303 	mla	r3, r6, r3, r2
 8003c3e:	f8de 2000 	ldr.w	r2, [lr]
 8003c42:	b280      	uxth	r0, r0
 8003c44:	b292      	uxth	r2, r2
 8003c46:	1a12      	subs	r2, r2, r0
 8003c48:	445a      	add	r2, fp
 8003c4a:	f8de 0000 	ldr.w	r0, [lr]
 8003c4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003c58:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003c5c:	b292      	uxth	r2, r2
 8003c5e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003c62:	45e1      	cmp	r9, ip
 8003c64:	f84e 2b04 	str.w	r2, [lr], #4
 8003c68:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003c6c:	d2de      	bcs.n	8003c2c <quorem+0x42>
 8003c6e:	9b00      	ldr	r3, [sp, #0]
 8003c70:	58eb      	ldr	r3, [r5, r3]
 8003c72:	b92b      	cbnz	r3, 8003c80 <quorem+0x96>
 8003c74:	9b01      	ldr	r3, [sp, #4]
 8003c76:	3b04      	subs	r3, #4
 8003c78:	429d      	cmp	r5, r3
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	d32f      	bcc.n	8003cde <quorem+0xf4>
 8003c7e:	613c      	str	r4, [r7, #16]
 8003c80:	4638      	mov	r0, r7
 8003c82:	f001 f97f 	bl	8004f84 <__mcmp>
 8003c86:	2800      	cmp	r0, #0
 8003c88:	db25      	blt.n	8003cd6 <quorem+0xec>
 8003c8a:	4629      	mov	r1, r5
 8003c8c:	2000      	movs	r0, #0
 8003c8e:	f858 2b04 	ldr.w	r2, [r8], #4
 8003c92:	f8d1 c000 	ldr.w	ip, [r1]
 8003c96:	fa1f fe82 	uxth.w	lr, r2
 8003c9a:	fa1f f38c 	uxth.w	r3, ip
 8003c9e:	eba3 030e 	sub.w	r3, r3, lr
 8003ca2:	4403      	add	r3, r0
 8003ca4:	0c12      	lsrs	r2, r2, #16
 8003ca6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003caa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003cb4:	45c1      	cmp	r9, r8
 8003cb6:	f841 3b04 	str.w	r3, [r1], #4
 8003cba:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003cbe:	d2e6      	bcs.n	8003c8e <quorem+0xa4>
 8003cc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003cc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003cc8:	b922      	cbnz	r2, 8003cd4 <quorem+0xea>
 8003cca:	3b04      	subs	r3, #4
 8003ccc:	429d      	cmp	r5, r3
 8003cce:	461a      	mov	r2, r3
 8003cd0:	d30b      	bcc.n	8003cea <quorem+0x100>
 8003cd2:	613c      	str	r4, [r7, #16]
 8003cd4:	3601      	adds	r6, #1
 8003cd6:	4630      	mov	r0, r6
 8003cd8:	b003      	add	sp, #12
 8003cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cde:	6812      	ldr	r2, [r2, #0]
 8003ce0:	3b04      	subs	r3, #4
 8003ce2:	2a00      	cmp	r2, #0
 8003ce4:	d1cb      	bne.n	8003c7e <quorem+0x94>
 8003ce6:	3c01      	subs	r4, #1
 8003ce8:	e7c6      	b.n	8003c78 <quorem+0x8e>
 8003cea:	6812      	ldr	r2, [r2, #0]
 8003cec:	3b04      	subs	r3, #4
 8003cee:	2a00      	cmp	r2, #0
 8003cf0:	d1ef      	bne.n	8003cd2 <quorem+0xe8>
 8003cf2:	3c01      	subs	r4, #1
 8003cf4:	e7ea      	b.n	8003ccc <quorem+0xe2>
 8003cf6:	2000      	movs	r0, #0
 8003cf8:	e7ee      	b.n	8003cd8 <quorem+0xee>
 8003cfa:	0000      	movs	r0, r0
 8003cfc:	0000      	movs	r0, r0
	...

08003d00 <_dtoa_r>:
 8003d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d04:	69c7      	ldr	r7, [r0, #28]
 8003d06:	b097      	sub	sp, #92	@ 0x5c
 8003d08:	ed8d 0b04 	vstr	d0, [sp, #16]
 8003d0c:	ec55 4b10 	vmov	r4, r5, d0
 8003d10:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8003d12:	9107      	str	r1, [sp, #28]
 8003d14:	4681      	mov	r9, r0
 8003d16:	920c      	str	r2, [sp, #48]	@ 0x30
 8003d18:	9311      	str	r3, [sp, #68]	@ 0x44
 8003d1a:	b97f      	cbnz	r7, 8003d3c <_dtoa_r+0x3c>
 8003d1c:	2010      	movs	r0, #16
 8003d1e:	f000 fe09 	bl	8004934 <malloc>
 8003d22:	4602      	mov	r2, r0
 8003d24:	f8c9 001c 	str.w	r0, [r9, #28]
 8003d28:	b920      	cbnz	r0, 8003d34 <_dtoa_r+0x34>
 8003d2a:	4ba9      	ldr	r3, [pc, #676]	@ (8003fd0 <_dtoa_r+0x2d0>)
 8003d2c:	21ef      	movs	r1, #239	@ 0xef
 8003d2e:	48a9      	ldr	r0, [pc, #676]	@ (8003fd4 <_dtoa_r+0x2d4>)
 8003d30:	f001 fcc0 	bl	80056b4 <__assert_func>
 8003d34:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003d38:	6007      	str	r7, [r0, #0]
 8003d3a:	60c7      	str	r7, [r0, #12]
 8003d3c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003d40:	6819      	ldr	r1, [r3, #0]
 8003d42:	b159      	cbz	r1, 8003d5c <_dtoa_r+0x5c>
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	604a      	str	r2, [r1, #4]
 8003d48:	2301      	movs	r3, #1
 8003d4a:	4093      	lsls	r3, r2
 8003d4c:	608b      	str	r3, [r1, #8]
 8003d4e:	4648      	mov	r0, r9
 8003d50:	f000 fee6 	bl	8004b20 <_Bfree>
 8003d54:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	1e2b      	subs	r3, r5, #0
 8003d5e:	bfb9      	ittee	lt
 8003d60:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003d64:	9305      	strlt	r3, [sp, #20]
 8003d66:	2300      	movge	r3, #0
 8003d68:	6033      	strge	r3, [r6, #0]
 8003d6a:	9f05      	ldr	r7, [sp, #20]
 8003d6c:	4b9a      	ldr	r3, [pc, #616]	@ (8003fd8 <_dtoa_r+0x2d8>)
 8003d6e:	bfbc      	itt	lt
 8003d70:	2201      	movlt	r2, #1
 8003d72:	6032      	strlt	r2, [r6, #0]
 8003d74:	43bb      	bics	r3, r7
 8003d76:	d112      	bne.n	8003d9e <_dtoa_r+0x9e>
 8003d78:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8003d7a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003d7e:	6013      	str	r3, [r2, #0]
 8003d80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003d84:	4323      	orrs	r3, r4
 8003d86:	f000 855a 	beq.w	800483e <_dtoa_r+0xb3e>
 8003d8a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003d8c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8003fec <_dtoa_r+0x2ec>
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 855c 	beq.w	800484e <_dtoa_r+0xb4e>
 8003d96:	f10a 0303 	add.w	r3, sl, #3
 8003d9a:	f000 bd56 	b.w	800484a <_dtoa_r+0xb4a>
 8003d9e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8003da2:	2200      	movs	r2, #0
 8003da4:	ec51 0b17 	vmov	r0, r1, d7
 8003da8:	2300      	movs	r3, #0
 8003daa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8003dae:	f7fc fe93 	bl	8000ad8 <__aeabi_dcmpeq>
 8003db2:	4680      	mov	r8, r0
 8003db4:	b158      	cbz	r0, 8003dce <_dtoa_r+0xce>
 8003db6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8003db8:	2301      	movs	r3, #1
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003dbe:	b113      	cbz	r3, 8003dc6 <_dtoa_r+0xc6>
 8003dc0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8003dc2:	4b86      	ldr	r3, [pc, #536]	@ (8003fdc <_dtoa_r+0x2dc>)
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8003ff0 <_dtoa_r+0x2f0>
 8003dca:	f000 bd40 	b.w	800484e <_dtoa_r+0xb4e>
 8003dce:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8003dd2:	aa14      	add	r2, sp, #80	@ 0x50
 8003dd4:	a915      	add	r1, sp, #84	@ 0x54
 8003dd6:	4648      	mov	r0, r9
 8003dd8:	f001 f984 	bl	80050e4 <__d2b>
 8003ddc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8003de0:	9002      	str	r0, [sp, #8]
 8003de2:	2e00      	cmp	r6, #0
 8003de4:	d078      	beq.n	8003ed8 <_dtoa_r+0x1d8>
 8003de6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003de8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8003dec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003df0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003df4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003df8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003dfc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003e00:	4619      	mov	r1, r3
 8003e02:	2200      	movs	r2, #0
 8003e04:	4b76      	ldr	r3, [pc, #472]	@ (8003fe0 <_dtoa_r+0x2e0>)
 8003e06:	f7fc fa47 	bl	8000298 <__aeabi_dsub>
 8003e0a:	a36b      	add	r3, pc, #428	@ (adr r3, 8003fb8 <_dtoa_r+0x2b8>)
 8003e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e10:	f7fc fbfa 	bl	8000608 <__aeabi_dmul>
 8003e14:	a36a      	add	r3, pc, #424	@ (adr r3, 8003fc0 <_dtoa_r+0x2c0>)
 8003e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1a:	f7fc fa3f 	bl	800029c <__adddf3>
 8003e1e:	4604      	mov	r4, r0
 8003e20:	4630      	mov	r0, r6
 8003e22:	460d      	mov	r5, r1
 8003e24:	f7fc fb86 	bl	8000534 <__aeabi_i2d>
 8003e28:	a367      	add	r3, pc, #412	@ (adr r3, 8003fc8 <_dtoa_r+0x2c8>)
 8003e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2e:	f7fc fbeb 	bl	8000608 <__aeabi_dmul>
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	4620      	mov	r0, r4
 8003e38:	4629      	mov	r1, r5
 8003e3a:	f7fc fa2f 	bl	800029c <__adddf3>
 8003e3e:	4604      	mov	r4, r0
 8003e40:	460d      	mov	r5, r1
 8003e42:	f7fc fe91 	bl	8000b68 <__aeabi_d2iz>
 8003e46:	2200      	movs	r2, #0
 8003e48:	4607      	mov	r7, r0
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	4629      	mov	r1, r5
 8003e50:	f7fc fe4c 	bl	8000aec <__aeabi_dcmplt>
 8003e54:	b140      	cbz	r0, 8003e68 <_dtoa_r+0x168>
 8003e56:	4638      	mov	r0, r7
 8003e58:	f7fc fb6c 	bl	8000534 <__aeabi_i2d>
 8003e5c:	4622      	mov	r2, r4
 8003e5e:	462b      	mov	r3, r5
 8003e60:	f7fc fe3a 	bl	8000ad8 <__aeabi_dcmpeq>
 8003e64:	b900      	cbnz	r0, 8003e68 <_dtoa_r+0x168>
 8003e66:	3f01      	subs	r7, #1
 8003e68:	2f16      	cmp	r7, #22
 8003e6a:	d852      	bhi.n	8003f12 <_dtoa_r+0x212>
 8003e6c:	4b5d      	ldr	r3, [pc, #372]	@ (8003fe4 <_dtoa_r+0x2e4>)
 8003e6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003e7a:	f7fc fe37 	bl	8000aec <__aeabi_dcmplt>
 8003e7e:	2800      	cmp	r0, #0
 8003e80:	d049      	beq.n	8003f16 <_dtoa_r+0x216>
 8003e82:	3f01      	subs	r7, #1
 8003e84:	2300      	movs	r3, #0
 8003e86:	9310      	str	r3, [sp, #64]	@ 0x40
 8003e88:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003e8a:	1b9b      	subs	r3, r3, r6
 8003e8c:	1e5a      	subs	r2, r3, #1
 8003e8e:	bf45      	ittet	mi
 8003e90:	f1c3 0301 	rsbmi	r3, r3, #1
 8003e94:	9300      	strmi	r3, [sp, #0]
 8003e96:	2300      	movpl	r3, #0
 8003e98:	2300      	movmi	r3, #0
 8003e9a:	9206      	str	r2, [sp, #24]
 8003e9c:	bf54      	ite	pl
 8003e9e:	9300      	strpl	r3, [sp, #0]
 8003ea0:	9306      	strmi	r3, [sp, #24]
 8003ea2:	2f00      	cmp	r7, #0
 8003ea4:	db39      	blt.n	8003f1a <_dtoa_r+0x21a>
 8003ea6:	9b06      	ldr	r3, [sp, #24]
 8003ea8:	970d      	str	r7, [sp, #52]	@ 0x34
 8003eaa:	443b      	add	r3, r7
 8003eac:	9306      	str	r3, [sp, #24]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	9308      	str	r3, [sp, #32]
 8003eb2:	9b07      	ldr	r3, [sp, #28]
 8003eb4:	2b09      	cmp	r3, #9
 8003eb6:	d863      	bhi.n	8003f80 <_dtoa_r+0x280>
 8003eb8:	2b05      	cmp	r3, #5
 8003eba:	bfc4      	itt	gt
 8003ebc:	3b04      	subgt	r3, #4
 8003ebe:	9307      	strgt	r3, [sp, #28]
 8003ec0:	9b07      	ldr	r3, [sp, #28]
 8003ec2:	f1a3 0302 	sub.w	r3, r3, #2
 8003ec6:	bfcc      	ite	gt
 8003ec8:	2400      	movgt	r4, #0
 8003eca:	2401      	movle	r4, #1
 8003ecc:	2b03      	cmp	r3, #3
 8003ece:	d863      	bhi.n	8003f98 <_dtoa_r+0x298>
 8003ed0:	e8df f003 	tbb	[pc, r3]
 8003ed4:	2b375452 	.word	0x2b375452
 8003ed8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003edc:	441e      	add	r6, r3
 8003ede:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003ee2:	2b20      	cmp	r3, #32
 8003ee4:	bfc1      	itttt	gt
 8003ee6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003eea:	409f      	lslgt	r7, r3
 8003eec:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003ef0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003ef4:	bfd6      	itet	le
 8003ef6:	f1c3 0320 	rsble	r3, r3, #32
 8003efa:	ea47 0003 	orrgt.w	r0, r7, r3
 8003efe:	fa04 f003 	lslle.w	r0, r4, r3
 8003f02:	f7fc fb07 	bl	8000514 <__aeabi_ui2d>
 8003f06:	2201      	movs	r2, #1
 8003f08:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003f0c:	3e01      	subs	r6, #1
 8003f0e:	9212      	str	r2, [sp, #72]	@ 0x48
 8003f10:	e776      	b.n	8003e00 <_dtoa_r+0x100>
 8003f12:	2301      	movs	r3, #1
 8003f14:	e7b7      	b.n	8003e86 <_dtoa_r+0x186>
 8003f16:	9010      	str	r0, [sp, #64]	@ 0x40
 8003f18:	e7b6      	b.n	8003e88 <_dtoa_r+0x188>
 8003f1a:	9b00      	ldr	r3, [sp, #0]
 8003f1c:	1bdb      	subs	r3, r3, r7
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	427b      	negs	r3, r7
 8003f22:	9308      	str	r3, [sp, #32]
 8003f24:	2300      	movs	r3, #0
 8003f26:	930d      	str	r3, [sp, #52]	@ 0x34
 8003f28:	e7c3      	b.n	8003eb2 <_dtoa_r+0x1b2>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003f30:	eb07 0b03 	add.w	fp, r7, r3
 8003f34:	f10b 0301 	add.w	r3, fp, #1
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	9303      	str	r3, [sp, #12]
 8003f3c:	bfb8      	it	lt
 8003f3e:	2301      	movlt	r3, #1
 8003f40:	e006      	b.n	8003f50 <_dtoa_r+0x250>
 8003f42:	2301      	movs	r3, #1
 8003f44:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	dd28      	ble.n	8003f9e <_dtoa_r+0x29e>
 8003f4c:	469b      	mov	fp, r3
 8003f4e:	9303      	str	r3, [sp, #12]
 8003f50:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8003f54:	2100      	movs	r1, #0
 8003f56:	2204      	movs	r2, #4
 8003f58:	f102 0514 	add.w	r5, r2, #20
 8003f5c:	429d      	cmp	r5, r3
 8003f5e:	d926      	bls.n	8003fae <_dtoa_r+0x2ae>
 8003f60:	6041      	str	r1, [r0, #4]
 8003f62:	4648      	mov	r0, r9
 8003f64:	f000 fd9c 	bl	8004aa0 <_Balloc>
 8003f68:	4682      	mov	sl, r0
 8003f6a:	2800      	cmp	r0, #0
 8003f6c:	d142      	bne.n	8003ff4 <_dtoa_r+0x2f4>
 8003f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8003fe8 <_dtoa_r+0x2e8>)
 8003f70:	4602      	mov	r2, r0
 8003f72:	f240 11af 	movw	r1, #431	@ 0x1af
 8003f76:	e6da      	b.n	8003d2e <_dtoa_r+0x2e>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	e7e3      	b.n	8003f44 <_dtoa_r+0x244>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	e7d5      	b.n	8003f2c <_dtoa_r+0x22c>
 8003f80:	2401      	movs	r4, #1
 8003f82:	2300      	movs	r3, #0
 8003f84:	9307      	str	r3, [sp, #28]
 8003f86:	9409      	str	r4, [sp, #36]	@ 0x24
 8003f88:	f04f 3bff 	mov.w	fp, #4294967295
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f8cd b00c 	str.w	fp, [sp, #12]
 8003f92:	2312      	movs	r3, #18
 8003f94:	920c      	str	r2, [sp, #48]	@ 0x30
 8003f96:	e7db      	b.n	8003f50 <_dtoa_r+0x250>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f9c:	e7f4      	b.n	8003f88 <_dtoa_r+0x288>
 8003f9e:	f04f 0b01 	mov.w	fp, #1
 8003fa2:	f8cd b00c 	str.w	fp, [sp, #12]
 8003fa6:	465b      	mov	r3, fp
 8003fa8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8003fac:	e7d0      	b.n	8003f50 <_dtoa_r+0x250>
 8003fae:	3101      	adds	r1, #1
 8003fb0:	0052      	lsls	r2, r2, #1
 8003fb2:	e7d1      	b.n	8003f58 <_dtoa_r+0x258>
 8003fb4:	f3af 8000 	nop.w
 8003fb8:	636f4361 	.word	0x636f4361
 8003fbc:	3fd287a7 	.word	0x3fd287a7
 8003fc0:	8b60c8b3 	.word	0x8b60c8b3
 8003fc4:	3fc68a28 	.word	0x3fc68a28
 8003fc8:	509f79fb 	.word	0x509f79fb
 8003fcc:	3fd34413 	.word	0x3fd34413
 8003fd0:	080058a9 	.word	0x080058a9
 8003fd4:	080058c0 	.word	0x080058c0
 8003fd8:	7ff00000 	.word	0x7ff00000
 8003fdc:	08005879 	.word	0x08005879
 8003fe0:	3ff80000 	.word	0x3ff80000
 8003fe4:	08005a10 	.word	0x08005a10
 8003fe8:	08005918 	.word	0x08005918
 8003fec:	080058a5 	.word	0x080058a5
 8003ff0:	08005878 	.word	0x08005878
 8003ff4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003ff8:	6018      	str	r0, [r3, #0]
 8003ffa:	9b03      	ldr	r3, [sp, #12]
 8003ffc:	2b0e      	cmp	r3, #14
 8003ffe:	f200 80a1 	bhi.w	8004144 <_dtoa_r+0x444>
 8004002:	2c00      	cmp	r4, #0
 8004004:	f000 809e 	beq.w	8004144 <_dtoa_r+0x444>
 8004008:	2f00      	cmp	r7, #0
 800400a:	dd33      	ble.n	8004074 <_dtoa_r+0x374>
 800400c:	4b9c      	ldr	r3, [pc, #624]	@ (8004280 <_dtoa_r+0x580>)
 800400e:	f007 020f 	and.w	r2, r7, #15
 8004012:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004016:	ed93 7b00 	vldr	d7, [r3]
 800401a:	05f8      	lsls	r0, r7, #23
 800401c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8004020:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004024:	d516      	bpl.n	8004054 <_dtoa_r+0x354>
 8004026:	4b97      	ldr	r3, [pc, #604]	@ (8004284 <_dtoa_r+0x584>)
 8004028:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800402c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004030:	f7fc fc14 	bl	800085c <__aeabi_ddiv>
 8004034:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004038:	f004 040f 	and.w	r4, r4, #15
 800403c:	2603      	movs	r6, #3
 800403e:	4d91      	ldr	r5, [pc, #580]	@ (8004284 <_dtoa_r+0x584>)
 8004040:	b954      	cbnz	r4, 8004058 <_dtoa_r+0x358>
 8004042:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004046:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800404a:	f7fc fc07 	bl	800085c <__aeabi_ddiv>
 800404e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004052:	e028      	b.n	80040a6 <_dtoa_r+0x3a6>
 8004054:	2602      	movs	r6, #2
 8004056:	e7f2      	b.n	800403e <_dtoa_r+0x33e>
 8004058:	07e1      	lsls	r1, r4, #31
 800405a:	d508      	bpl.n	800406e <_dtoa_r+0x36e>
 800405c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004060:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004064:	f7fc fad0 	bl	8000608 <__aeabi_dmul>
 8004068:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800406c:	3601      	adds	r6, #1
 800406e:	1064      	asrs	r4, r4, #1
 8004070:	3508      	adds	r5, #8
 8004072:	e7e5      	b.n	8004040 <_dtoa_r+0x340>
 8004074:	f000 80af 	beq.w	80041d6 <_dtoa_r+0x4d6>
 8004078:	427c      	negs	r4, r7
 800407a:	4b81      	ldr	r3, [pc, #516]	@ (8004280 <_dtoa_r+0x580>)
 800407c:	4d81      	ldr	r5, [pc, #516]	@ (8004284 <_dtoa_r+0x584>)
 800407e:	f004 020f 	and.w	r2, r4, #15
 8004082:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800408e:	f7fc fabb 	bl	8000608 <__aeabi_dmul>
 8004092:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004096:	1124      	asrs	r4, r4, #4
 8004098:	2300      	movs	r3, #0
 800409a:	2602      	movs	r6, #2
 800409c:	2c00      	cmp	r4, #0
 800409e:	f040 808f 	bne.w	80041c0 <_dtoa_r+0x4c0>
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1d3      	bne.n	800404e <_dtoa_r+0x34e>
 80040a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80040a8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 8094 	beq.w	80041da <_dtoa_r+0x4da>
 80040b2:	4b75      	ldr	r3, [pc, #468]	@ (8004288 <_dtoa_r+0x588>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	4620      	mov	r0, r4
 80040b8:	4629      	mov	r1, r5
 80040ba:	f7fc fd17 	bl	8000aec <__aeabi_dcmplt>
 80040be:	2800      	cmp	r0, #0
 80040c0:	f000 808b 	beq.w	80041da <_dtoa_r+0x4da>
 80040c4:	9b03      	ldr	r3, [sp, #12]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 8087 	beq.w	80041da <_dtoa_r+0x4da>
 80040cc:	f1bb 0f00 	cmp.w	fp, #0
 80040d0:	dd34      	ble.n	800413c <_dtoa_r+0x43c>
 80040d2:	4620      	mov	r0, r4
 80040d4:	4b6d      	ldr	r3, [pc, #436]	@ (800428c <_dtoa_r+0x58c>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	4629      	mov	r1, r5
 80040da:	f7fc fa95 	bl	8000608 <__aeabi_dmul>
 80040de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80040e2:	f107 38ff 	add.w	r8, r7, #4294967295
 80040e6:	3601      	adds	r6, #1
 80040e8:	465c      	mov	r4, fp
 80040ea:	4630      	mov	r0, r6
 80040ec:	f7fc fa22 	bl	8000534 <__aeabi_i2d>
 80040f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040f4:	f7fc fa88 	bl	8000608 <__aeabi_dmul>
 80040f8:	4b65      	ldr	r3, [pc, #404]	@ (8004290 <_dtoa_r+0x590>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	f7fc f8ce 	bl	800029c <__adddf3>
 8004100:	4605      	mov	r5, r0
 8004102:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004106:	2c00      	cmp	r4, #0
 8004108:	d16a      	bne.n	80041e0 <_dtoa_r+0x4e0>
 800410a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800410e:	4b61      	ldr	r3, [pc, #388]	@ (8004294 <_dtoa_r+0x594>)
 8004110:	2200      	movs	r2, #0
 8004112:	f7fc f8c1 	bl	8000298 <__aeabi_dsub>
 8004116:	4602      	mov	r2, r0
 8004118:	460b      	mov	r3, r1
 800411a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800411e:	462a      	mov	r2, r5
 8004120:	4633      	mov	r3, r6
 8004122:	f7fc fd01 	bl	8000b28 <__aeabi_dcmpgt>
 8004126:	2800      	cmp	r0, #0
 8004128:	f040 8298 	bne.w	800465c <_dtoa_r+0x95c>
 800412c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004130:	462a      	mov	r2, r5
 8004132:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004136:	f7fc fcd9 	bl	8000aec <__aeabi_dcmplt>
 800413a:	bb38      	cbnz	r0, 800418c <_dtoa_r+0x48c>
 800413c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8004140:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004144:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004146:	2b00      	cmp	r3, #0
 8004148:	f2c0 8157 	blt.w	80043fa <_dtoa_r+0x6fa>
 800414c:	2f0e      	cmp	r7, #14
 800414e:	f300 8154 	bgt.w	80043fa <_dtoa_r+0x6fa>
 8004152:	4b4b      	ldr	r3, [pc, #300]	@ (8004280 <_dtoa_r+0x580>)
 8004154:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004158:	ed93 7b00 	vldr	d7, [r3]
 800415c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800415e:	2b00      	cmp	r3, #0
 8004160:	ed8d 7b00 	vstr	d7, [sp]
 8004164:	f280 80e5 	bge.w	8004332 <_dtoa_r+0x632>
 8004168:	9b03      	ldr	r3, [sp, #12]
 800416a:	2b00      	cmp	r3, #0
 800416c:	f300 80e1 	bgt.w	8004332 <_dtoa_r+0x632>
 8004170:	d10c      	bne.n	800418c <_dtoa_r+0x48c>
 8004172:	4b48      	ldr	r3, [pc, #288]	@ (8004294 <_dtoa_r+0x594>)
 8004174:	2200      	movs	r2, #0
 8004176:	ec51 0b17 	vmov	r0, r1, d7
 800417a:	f7fc fa45 	bl	8000608 <__aeabi_dmul>
 800417e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004182:	f7fc fcc7 	bl	8000b14 <__aeabi_dcmpge>
 8004186:	2800      	cmp	r0, #0
 8004188:	f000 8266 	beq.w	8004658 <_dtoa_r+0x958>
 800418c:	2400      	movs	r4, #0
 800418e:	4625      	mov	r5, r4
 8004190:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004192:	4656      	mov	r6, sl
 8004194:	ea6f 0803 	mvn.w	r8, r3
 8004198:	2700      	movs	r7, #0
 800419a:	4621      	mov	r1, r4
 800419c:	4648      	mov	r0, r9
 800419e:	f000 fcbf 	bl	8004b20 <_Bfree>
 80041a2:	2d00      	cmp	r5, #0
 80041a4:	f000 80bd 	beq.w	8004322 <_dtoa_r+0x622>
 80041a8:	b12f      	cbz	r7, 80041b6 <_dtoa_r+0x4b6>
 80041aa:	42af      	cmp	r7, r5
 80041ac:	d003      	beq.n	80041b6 <_dtoa_r+0x4b6>
 80041ae:	4639      	mov	r1, r7
 80041b0:	4648      	mov	r0, r9
 80041b2:	f000 fcb5 	bl	8004b20 <_Bfree>
 80041b6:	4629      	mov	r1, r5
 80041b8:	4648      	mov	r0, r9
 80041ba:	f000 fcb1 	bl	8004b20 <_Bfree>
 80041be:	e0b0      	b.n	8004322 <_dtoa_r+0x622>
 80041c0:	07e2      	lsls	r2, r4, #31
 80041c2:	d505      	bpl.n	80041d0 <_dtoa_r+0x4d0>
 80041c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80041c8:	f7fc fa1e 	bl	8000608 <__aeabi_dmul>
 80041cc:	3601      	adds	r6, #1
 80041ce:	2301      	movs	r3, #1
 80041d0:	1064      	asrs	r4, r4, #1
 80041d2:	3508      	adds	r5, #8
 80041d4:	e762      	b.n	800409c <_dtoa_r+0x39c>
 80041d6:	2602      	movs	r6, #2
 80041d8:	e765      	b.n	80040a6 <_dtoa_r+0x3a6>
 80041da:	9c03      	ldr	r4, [sp, #12]
 80041dc:	46b8      	mov	r8, r7
 80041de:	e784      	b.n	80040ea <_dtoa_r+0x3ea>
 80041e0:	4b27      	ldr	r3, [pc, #156]	@ (8004280 <_dtoa_r+0x580>)
 80041e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80041e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80041e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80041ec:	4454      	add	r4, sl
 80041ee:	2900      	cmp	r1, #0
 80041f0:	d054      	beq.n	800429c <_dtoa_r+0x59c>
 80041f2:	4929      	ldr	r1, [pc, #164]	@ (8004298 <_dtoa_r+0x598>)
 80041f4:	2000      	movs	r0, #0
 80041f6:	f7fc fb31 	bl	800085c <__aeabi_ddiv>
 80041fa:	4633      	mov	r3, r6
 80041fc:	462a      	mov	r2, r5
 80041fe:	f7fc f84b 	bl	8000298 <__aeabi_dsub>
 8004202:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004206:	4656      	mov	r6, sl
 8004208:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800420c:	f7fc fcac 	bl	8000b68 <__aeabi_d2iz>
 8004210:	4605      	mov	r5, r0
 8004212:	f7fc f98f 	bl	8000534 <__aeabi_i2d>
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800421e:	f7fc f83b 	bl	8000298 <__aeabi_dsub>
 8004222:	3530      	adds	r5, #48	@ 0x30
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800422c:	f806 5b01 	strb.w	r5, [r6], #1
 8004230:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004234:	f7fc fc5a 	bl	8000aec <__aeabi_dcmplt>
 8004238:	2800      	cmp	r0, #0
 800423a:	d172      	bne.n	8004322 <_dtoa_r+0x622>
 800423c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004240:	4911      	ldr	r1, [pc, #68]	@ (8004288 <_dtoa_r+0x588>)
 8004242:	2000      	movs	r0, #0
 8004244:	f7fc f828 	bl	8000298 <__aeabi_dsub>
 8004248:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800424c:	f7fc fc4e 	bl	8000aec <__aeabi_dcmplt>
 8004250:	2800      	cmp	r0, #0
 8004252:	f040 80b4 	bne.w	80043be <_dtoa_r+0x6be>
 8004256:	42a6      	cmp	r6, r4
 8004258:	f43f af70 	beq.w	800413c <_dtoa_r+0x43c>
 800425c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004260:	4b0a      	ldr	r3, [pc, #40]	@ (800428c <_dtoa_r+0x58c>)
 8004262:	2200      	movs	r2, #0
 8004264:	f7fc f9d0 	bl	8000608 <__aeabi_dmul>
 8004268:	4b08      	ldr	r3, [pc, #32]	@ (800428c <_dtoa_r+0x58c>)
 800426a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800426e:	2200      	movs	r2, #0
 8004270:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004274:	f7fc f9c8 	bl	8000608 <__aeabi_dmul>
 8004278:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800427c:	e7c4      	b.n	8004208 <_dtoa_r+0x508>
 800427e:	bf00      	nop
 8004280:	08005a10 	.word	0x08005a10
 8004284:	080059e8 	.word	0x080059e8
 8004288:	3ff00000 	.word	0x3ff00000
 800428c:	40240000 	.word	0x40240000
 8004290:	401c0000 	.word	0x401c0000
 8004294:	40140000 	.word	0x40140000
 8004298:	3fe00000 	.word	0x3fe00000
 800429c:	4631      	mov	r1, r6
 800429e:	4628      	mov	r0, r5
 80042a0:	f7fc f9b2 	bl	8000608 <__aeabi_dmul>
 80042a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80042a8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80042aa:	4656      	mov	r6, sl
 80042ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042b0:	f7fc fc5a 	bl	8000b68 <__aeabi_d2iz>
 80042b4:	4605      	mov	r5, r0
 80042b6:	f7fc f93d 	bl	8000534 <__aeabi_i2d>
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042c2:	f7fb ffe9 	bl	8000298 <__aeabi_dsub>
 80042c6:	3530      	adds	r5, #48	@ 0x30
 80042c8:	f806 5b01 	strb.w	r5, [r6], #1
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	42a6      	cmp	r6, r4
 80042d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80042d6:	f04f 0200 	mov.w	r2, #0
 80042da:	d124      	bne.n	8004326 <_dtoa_r+0x626>
 80042dc:	4baf      	ldr	r3, [pc, #700]	@ (800459c <_dtoa_r+0x89c>)
 80042de:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80042e2:	f7fb ffdb 	bl	800029c <__adddf3>
 80042e6:	4602      	mov	r2, r0
 80042e8:	460b      	mov	r3, r1
 80042ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042ee:	f7fc fc1b 	bl	8000b28 <__aeabi_dcmpgt>
 80042f2:	2800      	cmp	r0, #0
 80042f4:	d163      	bne.n	80043be <_dtoa_r+0x6be>
 80042f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80042fa:	49a8      	ldr	r1, [pc, #672]	@ (800459c <_dtoa_r+0x89c>)
 80042fc:	2000      	movs	r0, #0
 80042fe:	f7fb ffcb 	bl	8000298 <__aeabi_dsub>
 8004302:	4602      	mov	r2, r0
 8004304:	460b      	mov	r3, r1
 8004306:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800430a:	f7fc fbef 	bl	8000aec <__aeabi_dcmplt>
 800430e:	2800      	cmp	r0, #0
 8004310:	f43f af14 	beq.w	800413c <_dtoa_r+0x43c>
 8004314:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004316:	1e73      	subs	r3, r6, #1
 8004318:	9313      	str	r3, [sp, #76]	@ 0x4c
 800431a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800431e:	2b30      	cmp	r3, #48	@ 0x30
 8004320:	d0f8      	beq.n	8004314 <_dtoa_r+0x614>
 8004322:	4647      	mov	r7, r8
 8004324:	e03b      	b.n	800439e <_dtoa_r+0x69e>
 8004326:	4b9e      	ldr	r3, [pc, #632]	@ (80045a0 <_dtoa_r+0x8a0>)
 8004328:	f7fc f96e 	bl	8000608 <__aeabi_dmul>
 800432c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004330:	e7bc      	b.n	80042ac <_dtoa_r+0x5ac>
 8004332:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004336:	4656      	mov	r6, sl
 8004338:	e9dd 2300 	ldrd	r2, r3, [sp]
 800433c:	4620      	mov	r0, r4
 800433e:	4629      	mov	r1, r5
 8004340:	f7fc fa8c 	bl	800085c <__aeabi_ddiv>
 8004344:	f7fc fc10 	bl	8000b68 <__aeabi_d2iz>
 8004348:	4680      	mov	r8, r0
 800434a:	f7fc f8f3 	bl	8000534 <__aeabi_i2d>
 800434e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004352:	f7fc f959 	bl	8000608 <__aeabi_dmul>
 8004356:	4602      	mov	r2, r0
 8004358:	460b      	mov	r3, r1
 800435a:	4620      	mov	r0, r4
 800435c:	4629      	mov	r1, r5
 800435e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004362:	f7fb ff99 	bl	8000298 <__aeabi_dsub>
 8004366:	f806 4b01 	strb.w	r4, [r6], #1
 800436a:	9d03      	ldr	r5, [sp, #12]
 800436c:	eba6 040a 	sub.w	r4, r6, sl
 8004370:	42a5      	cmp	r5, r4
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	d133      	bne.n	80043e0 <_dtoa_r+0x6e0>
 8004378:	f7fb ff90 	bl	800029c <__adddf3>
 800437c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004380:	4604      	mov	r4, r0
 8004382:	460d      	mov	r5, r1
 8004384:	f7fc fbd0 	bl	8000b28 <__aeabi_dcmpgt>
 8004388:	b9c0      	cbnz	r0, 80043bc <_dtoa_r+0x6bc>
 800438a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800438e:	4620      	mov	r0, r4
 8004390:	4629      	mov	r1, r5
 8004392:	f7fc fba1 	bl	8000ad8 <__aeabi_dcmpeq>
 8004396:	b110      	cbz	r0, 800439e <_dtoa_r+0x69e>
 8004398:	f018 0f01 	tst.w	r8, #1
 800439c:	d10e      	bne.n	80043bc <_dtoa_r+0x6bc>
 800439e:	9902      	ldr	r1, [sp, #8]
 80043a0:	4648      	mov	r0, r9
 80043a2:	f000 fbbd 	bl	8004b20 <_Bfree>
 80043a6:	2300      	movs	r3, #0
 80043a8:	7033      	strb	r3, [r6, #0]
 80043aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80043ac:	3701      	adds	r7, #1
 80043ae:	601f      	str	r7, [r3, #0]
 80043b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 824b 	beq.w	800484e <_dtoa_r+0xb4e>
 80043b8:	601e      	str	r6, [r3, #0]
 80043ba:	e248      	b.n	800484e <_dtoa_r+0xb4e>
 80043bc:	46b8      	mov	r8, r7
 80043be:	4633      	mov	r3, r6
 80043c0:	461e      	mov	r6, r3
 80043c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80043c6:	2a39      	cmp	r2, #57	@ 0x39
 80043c8:	d106      	bne.n	80043d8 <_dtoa_r+0x6d8>
 80043ca:	459a      	cmp	sl, r3
 80043cc:	d1f8      	bne.n	80043c0 <_dtoa_r+0x6c0>
 80043ce:	2230      	movs	r2, #48	@ 0x30
 80043d0:	f108 0801 	add.w	r8, r8, #1
 80043d4:	f88a 2000 	strb.w	r2, [sl]
 80043d8:	781a      	ldrb	r2, [r3, #0]
 80043da:	3201      	adds	r2, #1
 80043dc:	701a      	strb	r2, [r3, #0]
 80043de:	e7a0      	b.n	8004322 <_dtoa_r+0x622>
 80043e0:	4b6f      	ldr	r3, [pc, #444]	@ (80045a0 <_dtoa_r+0x8a0>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	f7fc f910 	bl	8000608 <__aeabi_dmul>
 80043e8:	2200      	movs	r2, #0
 80043ea:	2300      	movs	r3, #0
 80043ec:	4604      	mov	r4, r0
 80043ee:	460d      	mov	r5, r1
 80043f0:	f7fc fb72 	bl	8000ad8 <__aeabi_dcmpeq>
 80043f4:	2800      	cmp	r0, #0
 80043f6:	d09f      	beq.n	8004338 <_dtoa_r+0x638>
 80043f8:	e7d1      	b.n	800439e <_dtoa_r+0x69e>
 80043fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80043fc:	2a00      	cmp	r2, #0
 80043fe:	f000 80ea 	beq.w	80045d6 <_dtoa_r+0x8d6>
 8004402:	9a07      	ldr	r2, [sp, #28]
 8004404:	2a01      	cmp	r2, #1
 8004406:	f300 80cd 	bgt.w	80045a4 <_dtoa_r+0x8a4>
 800440a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800440c:	2a00      	cmp	r2, #0
 800440e:	f000 80c1 	beq.w	8004594 <_dtoa_r+0x894>
 8004412:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004416:	9c08      	ldr	r4, [sp, #32]
 8004418:	9e00      	ldr	r6, [sp, #0]
 800441a:	9a00      	ldr	r2, [sp, #0]
 800441c:	441a      	add	r2, r3
 800441e:	9200      	str	r2, [sp, #0]
 8004420:	9a06      	ldr	r2, [sp, #24]
 8004422:	2101      	movs	r1, #1
 8004424:	441a      	add	r2, r3
 8004426:	4648      	mov	r0, r9
 8004428:	9206      	str	r2, [sp, #24]
 800442a:	f000 fc2d 	bl	8004c88 <__i2b>
 800442e:	4605      	mov	r5, r0
 8004430:	b166      	cbz	r6, 800444c <_dtoa_r+0x74c>
 8004432:	9b06      	ldr	r3, [sp, #24]
 8004434:	2b00      	cmp	r3, #0
 8004436:	dd09      	ble.n	800444c <_dtoa_r+0x74c>
 8004438:	42b3      	cmp	r3, r6
 800443a:	9a00      	ldr	r2, [sp, #0]
 800443c:	bfa8      	it	ge
 800443e:	4633      	movge	r3, r6
 8004440:	1ad2      	subs	r2, r2, r3
 8004442:	9200      	str	r2, [sp, #0]
 8004444:	9a06      	ldr	r2, [sp, #24]
 8004446:	1af6      	subs	r6, r6, r3
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	9306      	str	r3, [sp, #24]
 800444c:	9b08      	ldr	r3, [sp, #32]
 800444e:	b30b      	cbz	r3, 8004494 <_dtoa_r+0x794>
 8004450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 80c6 	beq.w	80045e4 <_dtoa_r+0x8e4>
 8004458:	2c00      	cmp	r4, #0
 800445a:	f000 80c0 	beq.w	80045de <_dtoa_r+0x8de>
 800445e:	4629      	mov	r1, r5
 8004460:	4622      	mov	r2, r4
 8004462:	4648      	mov	r0, r9
 8004464:	f000 fcc8 	bl	8004df8 <__pow5mult>
 8004468:	9a02      	ldr	r2, [sp, #8]
 800446a:	4601      	mov	r1, r0
 800446c:	4605      	mov	r5, r0
 800446e:	4648      	mov	r0, r9
 8004470:	f000 fc20 	bl	8004cb4 <__multiply>
 8004474:	9902      	ldr	r1, [sp, #8]
 8004476:	4680      	mov	r8, r0
 8004478:	4648      	mov	r0, r9
 800447a:	f000 fb51 	bl	8004b20 <_Bfree>
 800447e:	9b08      	ldr	r3, [sp, #32]
 8004480:	1b1b      	subs	r3, r3, r4
 8004482:	9308      	str	r3, [sp, #32]
 8004484:	f000 80b1 	beq.w	80045ea <_dtoa_r+0x8ea>
 8004488:	9a08      	ldr	r2, [sp, #32]
 800448a:	4641      	mov	r1, r8
 800448c:	4648      	mov	r0, r9
 800448e:	f000 fcb3 	bl	8004df8 <__pow5mult>
 8004492:	9002      	str	r0, [sp, #8]
 8004494:	2101      	movs	r1, #1
 8004496:	4648      	mov	r0, r9
 8004498:	f000 fbf6 	bl	8004c88 <__i2b>
 800449c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800449e:	4604      	mov	r4, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 81d8 	beq.w	8004856 <_dtoa_r+0xb56>
 80044a6:	461a      	mov	r2, r3
 80044a8:	4601      	mov	r1, r0
 80044aa:	4648      	mov	r0, r9
 80044ac:	f000 fca4 	bl	8004df8 <__pow5mult>
 80044b0:	9b07      	ldr	r3, [sp, #28]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	4604      	mov	r4, r0
 80044b6:	f300 809f 	bgt.w	80045f8 <_dtoa_r+0x8f8>
 80044ba:	9b04      	ldr	r3, [sp, #16]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f040 8097 	bne.w	80045f0 <_dtoa_r+0x8f0>
 80044c2:	9b05      	ldr	r3, [sp, #20]
 80044c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f040 8093 	bne.w	80045f4 <_dtoa_r+0x8f4>
 80044ce:	9b05      	ldr	r3, [sp, #20]
 80044d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80044d4:	0d1b      	lsrs	r3, r3, #20
 80044d6:	051b      	lsls	r3, r3, #20
 80044d8:	b133      	cbz	r3, 80044e8 <_dtoa_r+0x7e8>
 80044da:	9b00      	ldr	r3, [sp, #0]
 80044dc:	3301      	adds	r3, #1
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	9b06      	ldr	r3, [sp, #24]
 80044e2:	3301      	adds	r3, #1
 80044e4:	9306      	str	r3, [sp, #24]
 80044e6:	2301      	movs	r3, #1
 80044e8:	9308      	str	r3, [sp, #32]
 80044ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 81b8 	beq.w	8004862 <_dtoa_r+0xb62>
 80044f2:	6923      	ldr	r3, [r4, #16]
 80044f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80044f8:	6918      	ldr	r0, [r3, #16]
 80044fa:	f000 fb79 	bl	8004bf0 <__hi0bits>
 80044fe:	f1c0 0020 	rsb	r0, r0, #32
 8004502:	9b06      	ldr	r3, [sp, #24]
 8004504:	4418      	add	r0, r3
 8004506:	f010 001f 	ands.w	r0, r0, #31
 800450a:	f000 8082 	beq.w	8004612 <_dtoa_r+0x912>
 800450e:	f1c0 0320 	rsb	r3, r0, #32
 8004512:	2b04      	cmp	r3, #4
 8004514:	dd73      	ble.n	80045fe <_dtoa_r+0x8fe>
 8004516:	9b00      	ldr	r3, [sp, #0]
 8004518:	f1c0 001c 	rsb	r0, r0, #28
 800451c:	4403      	add	r3, r0
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	9b06      	ldr	r3, [sp, #24]
 8004522:	4403      	add	r3, r0
 8004524:	4406      	add	r6, r0
 8004526:	9306      	str	r3, [sp, #24]
 8004528:	9b00      	ldr	r3, [sp, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	dd05      	ble.n	800453a <_dtoa_r+0x83a>
 800452e:	9902      	ldr	r1, [sp, #8]
 8004530:	461a      	mov	r2, r3
 8004532:	4648      	mov	r0, r9
 8004534:	f000 fcba 	bl	8004eac <__lshift>
 8004538:	9002      	str	r0, [sp, #8]
 800453a:	9b06      	ldr	r3, [sp, #24]
 800453c:	2b00      	cmp	r3, #0
 800453e:	dd05      	ble.n	800454c <_dtoa_r+0x84c>
 8004540:	4621      	mov	r1, r4
 8004542:	461a      	mov	r2, r3
 8004544:	4648      	mov	r0, r9
 8004546:	f000 fcb1 	bl	8004eac <__lshift>
 800454a:	4604      	mov	r4, r0
 800454c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800454e:	2b00      	cmp	r3, #0
 8004550:	d061      	beq.n	8004616 <_dtoa_r+0x916>
 8004552:	9802      	ldr	r0, [sp, #8]
 8004554:	4621      	mov	r1, r4
 8004556:	f000 fd15 	bl	8004f84 <__mcmp>
 800455a:	2800      	cmp	r0, #0
 800455c:	da5b      	bge.n	8004616 <_dtoa_r+0x916>
 800455e:	2300      	movs	r3, #0
 8004560:	9902      	ldr	r1, [sp, #8]
 8004562:	220a      	movs	r2, #10
 8004564:	4648      	mov	r0, r9
 8004566:	f000 fafd 	bl	8004b64 <__multadd>
 800456a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800456c:	9002      	str	r0, [sp, #8]
 800456e:	f107 38ff 	add.w	r8, r7, #4294967295
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 8177 	beq.w	8004866 <_dtoa_r+0xb66>
 8004578:	4629      	mov	r1, r5
 800457a:	2300      	movs	r3, #0
 800457c:	220a      	movs	r2, #10
 800457e:	4648      	mov	r0, r9
 8004580:	f000 faf0 	bl	8004b64 <__multadd>
 8004584:	f1bb 0f00 	cmp.w	fp, #0
 8004588:	4605      	mov	r5, r0
 800458a:	dc6f      	bgt.n	800466c <_dtoa_r+0x96c>
 800458c:	9b07      	ldr	r3, [sp, #28]
 800458e:	2b02      	cmp	r3, #2
 8004590:	dc49      	bgt.n	8004626 <_dtoa_r+0x926>
 8004592:	e06b      	b.n	800466c <_dtoa_r+0x96c>
 8004594:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004596:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800459a:	e73c      	b.n	8004416 <_dtoa_r+0x716>
 800459c:	3fe00000 	.word	0x3fe00000
 80045a0:	40240000 	.word	0x40240000
 80045a4:	9b03      	ldr	r3, [sp, #12]
 80045a6:	1e5c      	subs	r4, r3, #1
 80045a8:	9b08      	ldr	r3, [sp, #32]
 80045aa:	42a3      	cmp	r3, r4
 80045ac:	db09      	blt.n	80045c2 <_dtoa_r+0x8c2>
 80045ae:	1b1c      	subs	r4, r3, r4
 80045b0:	9b03      	ldr	r3, [sp, #12]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f6bf af30 	bge.w	8004418 <_dtoa_r+0x718>
 80045b8:	9b00      	ldr	r3, [sp, #0]
 80045ba:	9a03      	ldr	r2, [sp, #12]
 80045bc:	1a9e      	subs	r6, r3, r2
 80045be:	2300      	movs	r3, #0
 80045c0:	e72b      	b.n	800441a <_dtoa_r+0x71a>
 80045c2:	9b08      	ldr	r3, [sp, #32]
 80045c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80045c6:	9408      	str	r4, [sp, #32]
 80045c8:	1ae3      	subs	r3, r4, r3
 80045ca:	441a      	add	r2, r3
 80045cc:	9e00      	ldr	r6, [sp, #0]
 80045ce:	9b03      	ldr	r3, [sp, #12]
 80045d0:	920d      	str	r2, [sp, #52]	@ 0x34
 80045d2:	2400      	movs	r4, #0
 80045d4:	e721      	b.n	800441a <_dtoa_r+0x71a>
 80045d6:	9c08      	ldr	r4, [sp, #32]
 80045d8:	9e00      	ldr	r6, [sp, #0]
 80045da:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80045dc:	e728      	b.n	8004430 <_dtoa_r+0x730>
 80045de:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80045e2:	e751      	b.n	8004488 <_dtoa_r+0x788>
 80045e4:	9a08      	ldr	r2, [sp, #32]
 80045e6:	9902      	ldr	r1, [sp, #8]
 80045e8:	e750      	b.n	800448c <_dtoa_r+0x78c>
 80045ea:	f8cd 8008 	str.w	r8, [sp, #8]
 80045ee:	e751      	b.n	8004494 <_dtoa_r+0x794>
 80045f0:	2300      	movs	r3, #0
 80045f2:	e779      	b.n	80044e8 <_dtoa_r+0x7e8>
 80045f4:	9b04      	ldr	r3, [sp, #16]
 80045f6:	e777      	b.n	80044e8 <_dtoa_r+0x7e8>
 80045f8:	2300      	movs	r3, #0
 80045fa:	9308      	str	r3, [sp, #32]
 80045fc:	e779      	b.n	80044f2 <_dtoa_r+0x7f2>
 80045fe:	d093      	beq.n	8004528 <_dtoa_r+0x828>
 8004600:	9a00      	ldr	r2, [sp, #0]
 8004602:	331c      	adds	r3, #28
 8004604:	441a      	add	r2, r3
 8004606:	9200      	str	r2, [sp, #0]
 8004608:	9a06      	ldr	r2, [sp, #24]
 800460a:	441a      	add	r2, r3
 800460c:	441e      	add	r6, r3
 800460e:	9206      	str	r2, [sp, #24]
 8004610:	e78a      	b.n	8004528 <_dtoa_r+0x828>
 8004612:	4603      	mov	r3, r0
 8004614:	e7f4      	b.n	8004600 <_dtoa_r+0x900>
 8004616:	9b03      	ldr	r3, [sp, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	46b8      	mov	r8, r7
 800461c:	dc20      	bgt.n	8004660 <_dtoa_r+0x960>
 800461e:	469b      	mov	fp, r3
 8004620:	9b07      	ldr	r3, [sp, #28]
 8004622:	2b02      	cmp	r3, #2
 8004624:	dd1e      	ble.n	8004664 <_dtoa_r+0x964>
 8004626:	f1bb 0f00 	cmp.w	fp, #0
 800462a:	f47f adb1 	bne.w	8004190 <_dtoa_r+0x490>
 800462e:	4621      	mov	r1, r4
 8004630:	465b      	mov	r3, fp
 8004632:	2205      	movs	r2, #5
 8004634:	4648      	mov	r0, r9
 8004636:	f000 fa95 	bl	8004b64 <__multadd>
 800463a:	4601      	mov	r1, r0
 800463c:	4604      	mov	r4, r0
 800463e:	9802      	ldr	r0, [sp, #8]
 8004640:	f000 fca0 	bl	8004f84 <__mcmp>
 8004644:	2800      	cmp	r0, #0
 8004646:	f77f ada3 	ble.w	8004190 <_dtoa_r+0x490>
 800464a:	4656      	mov	r6, sl
 800464c:	2331      	movs	r3, #49	@ 0x31
 800464e:	f806 3b01 	strb.w	r3, [r6], #1
 8004652:	f108 0801 	add.w	r8, r8, #1
 8004656:	e59f      	b.n	8004198 <_dtoa_r+0x498>
 8004658:	9c03      	ldr	r4, [sp, #12]
 800465a:	46b8      	mov	r8, r7
 800465c:	4625      	mov	r5, r4
 800465e:	e7f4      	b.n	800464a <_dtoa_r+0x94a>
 8004660:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8004664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 8101 	beq.w	800486e <_dtoa_r+0xb6e>
 800466c:	2e00      	cmp	r6, #0
 800466e:	dd05      	ble.n	800467c <_dtoa_r+0x97c>
 8004670:	4629      	mov	r1, r5
 8004672:	4632      	mov	r2, r6
 8004674:	4648      	mov	r0, r9
 8004676:	f000 fc19 	bl	8004eac <__lshift>
 800467a:	4605      	mov	r5, r0
 800467c:	9b08      	ldr	r3, [sp, #32]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d05c      	beq.n	800473c <_dtoa_r+0xa3c>
 8004682:	6869      	ldr	r1, [r5, #4]
 8004684:	4648      	mov	r0, r9
 8004686:	f000 fa0b 	bl	8004aa0 <_Balloc>
 800468a:	4606      	mov	r6, r0
 800468c:	b928      	cbnz	r0, 800469a <_dtoa_r+0x99a>
 800468e:	4b82      	ldr	r3, [pc, #520]	@ (8004898 <_dtoa_r+0xb98>)
 8004690:	4602      	mov	r2, r0
 8004692:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004696:	f7ff bb4a 	b.w	8003d2e <_dtoa_r+0x2e>
 800469a:	692a      	ldr	r2, [r5, #16]
 800469c:	3202      	adds	r2, #2
 800469e:	0092      	lsls	r2, r2, #2
 80046a0:	f105 010c 	add.w	r1, r5, #12
 80046a4:	300c      	adds	r0, #12
 80046a6:	f000 fff7 	bl	8005698 <memcpy>
 80046aa:	2201      	movs	r2, #1
 80046ac:	4631      	mov	r1, r6
 80046ae:	4648      	mov	r0, r9
 80046b0:	f000 fbfc 	bl	8004eac <__lshift>
 80046b4:	f10a 0301 	add.w	r3, sl, #1
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	eb0a 030b 	add.w	r3, sl, fp
 80046be:	9308      	str	r3, [sp, #32]
 80046c0:	9b04      	ldr	r3, [sp, #16]
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	462f      	mov	r7, r5
 80046c8:	9306      	str	r3, [sp, #24]
 80046ca:	4605      	mov	r5, r0
 80046cc:	9b00      	ldr	r3, [sp, #0]
 80046ce:	9802      	ldr	r0, [sp, #8]
 80046d0:	4621      	mov	r1, r4
 80046d2:	f103 3bff 	add.w	fp, r3, #4294967295
 80046d6:	f7ff fa88 	bl	8003bea <quorem>
 80046da:	4603      	mov	r3, r0
 80046dc:	3330      	adds	r3, #48	@ 0x30
 80046de:	9003      	str	r0, [sp, #12]
 80046e0:	4639      	mov	r1, r7
 80046e2:	9802      	ldr	r0, [sp, #8]
 80046e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80046e6:	f000 fc4d 	bl	8004f84 <__mcmp>
 80046ea:	462a      	mov	r2, r5
 80046ec:	9004      	str	r0, [sp, #16]
 80046ee:	4621      	mov	r1, r4
 80046f0:	4648      	mov	r0, r9
 80046f2:	f000 fc63 	bl	8004fbc <__mdiff>
 80046f6:	68c2      	ldr	r2, [r0, #12]
 80046f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046fa:	4606      	mov	r6, r0
 80046fc:	bb02      	cbnz	r2, 8004740 <_dtoa_r+0xa40>
 80046fe:	4601      	mov	r1, r0
 8004700:	9802      	ldr	r0, [sp, #8]
 8004702:	f000 fc3f 	bl	8004f84 <__mcmp>
 8004706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004708:	4602      	mov	r2, r0
 800470a:	4631      	mov	r1, r6
 800470c:	4648      	mov	r0, r9
 800470e:	920c      	str	r2, [sp, #48]	@ 0x30
 8004710:	9309      	str	r3, [sp, #36]	@ 0x24
 8004712:	f000 fa05 	bl	8004b20 <_Bfree>
 8004716:	9b07      	ldr	r3, [sp, #28]
 8004718:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800471a:	9e00      	ldr	r6, [sp, #0]
 800471c:	ea42 0103 	orr.w	r1, r2, r3
 8004720:	9b06      	ldr	r3, [sp, #24]
 8004722:	4319      	orrs	r1, r3
 8004724:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004726:	d10d      	bne.n	8004744 <_dtoa_r+0xa44>
 8004728:	2b39      	cmp	r3, #57	@ 0x39
 800472a:	d027      	beq.n	800477c <_dtoa_r+0xa7c>
 800472c:	9a04      	ldr	r2, [sp, #16]
 800472e:	2a00      	cmp	r2, #0
 8004730:	dd01      	ble.n	8004736 <_dtoa_r+0xa36>
 8004732:	9b03      	ldr	r3, [sp, #12]
 8004734:	3331      	adds	r3, #49	@ 0x31
 8004736:	f88b 3000 	strb.w	r3, [fp]
 800473a:	e52e      	b.n	800419a <_dtoa_r+0x49a>
 800473c:	4628      	mov	r0, r5
 800473e:	e7b9      	b.n	80046b4 <_dtoa_r+0x9b4>
 8004740:	2201      	movs	r2, #1
 8004742:	e7e2      	b.n	800470a <_dtoa_r+0xa0a>
 8004744:	9904      	ldr	r1, [sp, #16]
 8004746:	2900      	cmp	r1, #0
 8004748:	db04      	blt.n	8004754 <_dtoa_r+0xa54>
 800474a:	9807      	ldr	r0, [sp, #28]
 800474c:	4301      	orrs	r1, r0
 800474e:	9806      	ldr	r0, [sp, #24]
 8004750:	4301      	orrs	r1, r0
 8004752:	d120      	bne.n	8004796 <_dtoa_r+0xa96>
 8004754:	2a00      	cmp	r2, #0
 8004756:	ddee      	ble.n	8004736 <_dtoa_r+0xa36>
 8004758:	9902      	ldr	r1, [sp, #8]
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	2201      	movs	r2, #1
 800475e:	4648      	mov	r0, r9
 8004760:	f000 fba4 	bl	8004eac <__lshift>
 8004764:	4621      	mov	r1, r4
 8004766:	9002      	str	r0, [sp, #8]
 8004768:	f000 fc0c 	bl	8004f84 <__mcmp>
 800476c:	2800      	cmp	r0, #0
 800476e:	9b00      	ldr	r3, [sp, #0]
 8004770:	dc02      	bgt.n	8004778 <_dtoa_r+0xa78>
 8004772:	d1e0      	bne.n	8004736 <_dtoa_r+0xa36>
 8004774:	07da      	lsls	r2, r3, #31
 8004776:	d5de      	bpl.n	8004736 <_dtoa_r+0xa36>
 8004778:	2b39      	cmp	r3, #57	@ 0x39
 800477a:	d1da      	bne.n	8004732 <_dtoa_r+0xa32>
 800477c:	2339      	movs	r3, #57	@ 0x39
 800477e:	f88b 3000 	strb.w	r3, [fp]
 8004782:	4633      	mov	r3, r6
 8004784:	461e      	mov	r6, r3
 8004786:	3b01      	subs	r3, #1
 8004788:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800478c:	2a39      	cmp	r2, #57	@ 0x39
 800478e:	d04e      	beq.n	800482e <_dtoa_r+0xb2e>
 8004790:	3201      	adds	r2, #1
 8004792:	701a      	strb	r2, [r3, #0]
 8004794:	e501      	b.n	800419a <_dtoa_r+0x49a>
 8004796:	2a00      	cmp	r2, #0
 8004798:	dd03      	ble.n	80047a2 <_dtoa_r+0xaa2>
 800479a:	2b39      	cmp	r3, #57	@ 0x39
 800479c:	d0ee      	beq.n	800477c <_dtoa_r+0xa7c>
 800479e:	3301      	adds	r3, #1
 80047a0:	e7c9      	b.n	8004736 <_dtoa_r+0xa36>
 80047a2:	9a00      	ldr	r2, [sp, #0]
 80047a4:	9908      	ldr	r1, [sp, #32]
 80047a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80047aa:	428a      	cmp	r2, r1
 80047ac:	d028      	beq.n	8004800 <_dtoa_r+0xb00>
 80047ae:	9902      	ldr	r1, [sp, #8]
 80047b0:	2300      	movs	r3, #0
 80047b2:	220a      	movs	r2, #10
 80047b4:	4648      	mov	r0, r9
 80047b6:	f000 f9d5 	bl	8004b64 <__multadd>
 80047ba:	42af      	cmp	r7, r5
 80047bc:	9002      	str	r0, [sp, #8]
 80047be:	f04f 0300 	mov.w	r3, #0
 80047c2:	f04f 020a 	mov.w	r2, #10
 80047c6:	4639      	mov	r1, r7
 80047c8:	4648      	mov	r0, r9
 80047ca:	d107      	bne.n	80047dc <_dtoa_r+0xadc>
 80047cc:	f000 f9ca 	bl	8004b64 <__multadd>
 80047d0:	4607      	mov	r7, r0
 80047d2:	4605      	mov	r5, r0
 80047d4:	9b00      	ldr	r3, [sp, #0]
 80047d6:	3301      	adds	r3, #1
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	e777      	b.n	80046cc <_dtoa_r+0x9cc>
 80047dc:	f000 f9c2 	bl	8004b64 <__multadd>
 80047e0:	4629      	mov	r1, r5
 80047e2:	4607      	mov	r7, r0
 80047e4:	2300      	movs	r3, #0
 80047e6:	220a      	movs	r2, #10
 80047e8:	4648      	mov	r0, r9
 80047ea:	f000 f9bb 	bl	8004b64 <__multadd>
 80047ee:	4605      	mov	r5, r0
 80047f0:	e7f0      	b.n	80047d4 <_dtoa_r+0xad4>
 80047f2:	f1bb 0f00 	cmp.w	fp, #0
 80047f6:	bfcc      	ite	gt
 80047f8:	465e      	movgt	r6, fp
 80047fa:	2601      	movle	r6, #1
 80047fc:	4456      	add	r6, sl
 80047fe:	2700      	movs	r7, #0
 8004800:	9902      	ldr	r1, [sp, #8]
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	2201      	movs	r2, #1
 8004806:	4648      	mov	r0, r9
 8004808:	f000 fb50 	bl	8004eac <__lshift>
 800480c:	4621      	mov	r1, r4
 800480e:	9002      	str	r0, [sp, #8]
 8004810:	f000 fbb8 	bl	8004f84 <__mcmp>
 8004814:	2800      	cmp	r0, #0
 8004816:	dcb4      	bgt.n	8004782 <_dtoa_r+0xa82>
 8004818:	d102      	bne.n	8004820 <_dtoa_r+0xb20>
 800481a:	9b00      	ldr	r3, [sp, #0]
 800481c:	07db      	lsls	r3, r3, #31
 800481e:	d4b0      	bmi.n	8004782 <_dtoa_r+0xa82>
 8004820:	4633      	mov	r3, r6
 8004822:	461e      	mov	r6, r3
 8004824:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004828:	2a30      	cmp	r2, #48	@ 0x30
 800482a:	d0fa      	beq.n	8004822 <_dtoa_r+0xb22>
 800482c:	e4b5      	b.n	800419a <_dtoa_r+0x49a>
 800482e:	459a      	cmp	sl, r3
 8004830:	d1a8      	bne.n	8004784 <_dtoa_r+0xa84>
 8004832:	2331      	movs	r3, #49	@ 0x31
 8004834:	f108 0801 	add.w	r8, r8, #1
 8004838:	f88a 3000 	strb.w	r3, [sl]
 800483c:	e4ad      	b.n	800419a <_dtoa_r+0x49a>
 800483e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004840:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800489c <_dtoa_r+0xb9c>
 8004844:	b11b      	cbz	r3, 800484e <_dtoa_r+0xb4e>
 8004846:	f10a 0308 	add.w	r3, sl, #8
 800484a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	4650      	mov	r0, sl
 8004850:	b017      	add	sp, #92	@ 0x5c
 8004852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004856:	9b07      	ldr	r3, [sp, #28]
 8004858:	2b01      	cmp	r3, #1
 800485a:	f77f ae2e 	ble.w	80044ba <_dtoa_r+0x7ba>
 800485e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004860:	9308      	str	r3, [sp, #32]
 8004862:	2001      	movs	r0, #1
 8004864:	e64d      	b.n	8004502 <_dtoa_r+0x802>
 8004866:	f1bb 0f00 	cmp.w	fp, #0
 800486a:	f77f aed9 	ble.w	8004620 <_dtoa_r+0x920>
 800486e:	4656      	mov	r6, sl
 8004870:	9802      	ldr	r0, [sp, #8]
 8004872:	4621      	mov	r1, r4
 8004874:	f7ff f9b9 	bl	8003bea <quorem>
 8004878:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800487c:	f806 3b01 	strb.w	r3, [r6], #1
 8004880:	eba6 020a 	sub.w	r2, r6, sl
 8004884:	4593      	cmp	fp, r2
 8004886:	ddb4      	ble.n	80047f2 <_dtoa_r+0xaf2>
 8004888:	9902      	ldr	r1, [sp, #8]
 800488a:	2300      	movs	r3, #0
 800488c:	220a      	movs	r2, #10
 800488e:	4648      	mov	r0, r9
 8004890:	f000 f968 	bl	8004b64 <__multadd>
 8004894:	9002      	str	r0, [sp, #8]
 8004896:	e7eb      	b.n	8004870 <_dtoa_r+0xb70>
 8004898:	08005918 	.word	0x08005918
 800489c:	0800589c 	.word	0x0800589c

080048a0 <_free_r>:
 80048a0:	b538      	push	{r3, r4, r5, lr}
 80048a2:	4605      	mov	r5, r0
 80048a4:	2900      	cmp	r1, #0
 80048a6:	d041      	beq.n	800492c <_free_r+0x8c>
 80048a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048ac:	1f0c      	subs	r4, r1, #4
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	bfb8      	it	lt
 80048b2:	18e4      	addlt	r4, r4, r3
 80048b4:	f000 f8e8 	bl	8004a88 <__malloc_lock>
 80048b8:	4a1d      	ldr	r2, [pc, #116]	@ (8004930 <_free_r+0x90>)
 80048ba:	6813      	ldr	r3, [r2, #0]
 80048bc:	b933      	cbnz	r3, 80048cc <_free_r+0x2c>
 80048be:	6063      	str	r3, [r4, #4]
 80048c0:	6014      	str	r4, [r2, #0]
 80048c2:	4628      	mov	r0, r5
 80048c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048c8:	f000 b8e4 	b.w	8004a94 <__malloc_unlock>
 80048cc:	42a3      	cmp	r3, r4
 80048ce:	d908      	bls.n	80048e2 <_free_r+0x42>
 80048d0:	6820      	ldr	r0, [r4, #0]
 80048d2:	1821      	adds	r1, r4, r0
 80048d4:	428b      	cmp	r3, r1
 80048d6:	bf01      	itttt	eq
 80048d8:	6819      	ldreq	r1, [r3, #0]
 80048da:	685b      	ldreq	r3, [r3, #4]
 80048dc:	1809      	addeq	r1, r1, r0
 80048de:	6021      	streq	r1, [r4, #0]
 80048e0:	e7ed      	b.n	80048be <_free_r+0x1e>
 80048e2:	461a      	mov	r2, r3
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	b10b      	cbz	r3, 80048ec <_free_r+0x4c>
 80048e8:	42a3      	cmp	r3, r4
 80048ea:	d9fa      	bls.n	80048e2 <_free_r+0x42>
 80048ec:	6811      	ldr	r1, [r2, #0]
 80048ee:	1850      	adds	r0, r2, r1
 80048f0:	42a0      	cmp	r0, r4
 80048f2:	d10b      	bne.n	800490c <_free_r+0x6c>
 80048f4:	6820      	ldr	r0, [r4, #0]
 80048f6:	4401      	add	r1, r0
 80048f8:	1850      	adds	r0, r2, r1
 80048fa:	4283      	cmp	r3, r0
 80048fc:	6011      	str	r1, [r2, #0]
 80048fe:	d1e0      	bne.n	80048c2 <_free_r+0x22>
 8004900:	6818      	ldr	r0, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	6053      	str	r3, [r2, #4]
 8004906:	4408      	add	r0, r1
 8004908:	6010      	str	r0, [r2, #0]
 800490a:	e7da      	b.n	80048c2 <_free_r+0x22>
 800490c:	d902      	bls.n	8004914 <_free_r+0x74>
 800490e:	230c      	movs	r3, #12
 8004910:	602b      	str	r3, [r5, #0]
 8004912:	e7d6      	b.n	80048c2 <_free_r+0x22>
 8004914:	6820      	ldr	r0, [r4, #0]
 8004916:	1821      	adds	r1, r4, r0
 8004918:	428b      	cmp	r3, r1
 800491a:	bf04      	itt	eq
 800491c:	6819      	ldreq	r1, [r3, #0]
 800491e:	685b      	ldreq	r3, [r3, #4]
 8004920:	6063      	str	r3, [r4, #4]
 8004922:	bf04      	itt	eq
 8004924:	1809      	addeq	r1, r1, r0
 8004926:	6021      	streq	r1, [r4, #0]
 8004928:	6054      	str	r4, [r2, #4]
 800492a:	e7ca      	b.n	80048c2 <_free_r+0x22>
 800492c:	bd38      	pop	{r3, r4, r5, pc}
 800492e:	bf00      	nop
 8004930:	20000398 	.word	0x20000398

08004934 <malloc>:
 8004934:	4b02      	ldr	r3, [pc, #8]	@ (8004940 <malloc+0xc>)
 8004936:	4601      	mov	r1, r0
 8004938:	6818      	ldr	r0, [r3, #0]
 800493a:	f000 b825 	b.w	8004988 <_malloc_r>
 800493e:	bf00      	nop
 8004940:	2000001c 	.word	0x2000001c

08004944 <sbrk_aligned>:
 8004944:	b570      	push	{r4, r5, r6, lr}
 8004946:	4e0f      	ldr	r6, [pc, #60]	@ (8004984 <sbrk_aligned+0x40>)
 8004948:	460c      	mov	r4, r1
 800494a:	6831      	ldr	r1, [r6, #0]
 800494c:	4605      	mov	r5, r0
 800494e:	b911      	cbnz	r1, 8004956 <sbrk_aligned+0x12>
 8004950:	f000 fe92 	bl	8005678 <_sbrk_r>
 8004954:	6030      	str	r0, [r6, #0]
 8004956:	4621      	mov	r1, r4
 8004958:	4628      	mov	r0, r5
 800495a:	f000 fe8d 	bl	8005678 <_sbrk_r>
 800495e:	1c43      	adds	r3, r0, #1
 8004960:	d103      	bne.n	800496a <sbrk_aligned+0x26>
 8004962:	f04f 34ff 	mov.w	r4, #4294967295
 8004966:	4620      	mov	r0, r4
 8004968:	bd70      	pop	{r4, r5, r6, pc}
 800496a:	1cc4      	adds	r4, r0, #3
 800496c:	f024 0403 	bic.w	r4, r4, #3
 8004970:	42a0      	cmp	r0, r4
 8004972:	d0f8      	beq.n	8004966 <sbrk_aligned+0x22>
 8004974:	1a21      	subs	r1, r4, r0
 8004976:	4628      	mov	r0, r5
 8004978:	f000 fe7e 	bl	8005678 <_sbrk_r>
 800497c:	3001      	adds	r0, #1
 800497e:	d1f2      	bne.n	8004966 <sbrk_aligned+0x22>
 8004980:	e7ef      	b.n	8004962 <sbrk_aligned+0x1e>
 8004982:	bf00      	nop
 8004984:	20000394 	.word	0x20000394

08004988 <_malloc_r>:
 8004988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800498c:	1ccd      	adds	r5, r1, #3
 800498e:	f025 0503 	bic.w	r5, r5, #3
 8004992:	3508      	adds	r5, #8
 8004994:	2d0c      	cmp	r5, #12
 8004996:	bf38      	it	cc
 8004998:	250c      	movcc	r5, #12
 800499a:	2d00      	cmp	r5, #0
 800499c:	4606      	mov	r6, r0
 800499e:	db01      	blt.n	80049a4 <_malloc_r+0x1c>
 80049a0:	42a9      	cmp	r1, r5
 80049a2:	d904      	bls.n	80049ae <_malloc_r+0x26>
 80049a4:	230c      	movs	r3, #12
 80049a6:	6033      	str	r3, [r6, #0]
 80049a8:	2000      	movs	r0, #0
 80049aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a84 <_malloc_r+0xfc>
 80049b2:	f000 f869 	bl	8004a88 <__malloc_lock>
 80049b6:	f8d8 3000 	ldr.w	r3, [r8]
 80049ba:	461c      	mov	r4, r3
 80049bc:	bb44      	cbnz	r4, 8004a10 <_malloc_r+0x88>
 80049be:	4629      	mov	r1, r5
 80049c0:	4630      	mov	r0, r6
 80049c2:	f7ff ffbf 	bl	8004944 <sbrk_aligned>
 80049c6:	1c43      	adds	r3, r0, #1
 80049c8:	4604      	mov	r4, r0
 80049ca:	d158      	bne.n	8004a7e <_malloc_r+0xf6>
 80049cc:	f8d8 4000 	ldr.w	r4, [r8]
 80049d0:	4627      	mov	r7, r4
 80049d2:	2f00      	cmp	r7, #0
 80049d4:	d143      	bne.n	8004a5e <_malloc_r+0xd6>
 80049d6:	2c00      	cmp	r4, #0
 80049d8:	d04b      	beq.n	8004a72 <_malloc_r+0xea>
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	4639      	mov	r1, r7
 80049de:	4630      	mov	r0, r6
 80049e0:	eb04 0903 	add.w	r9, r4, r3
 80049e4:	f000 fe48 	bl	8005678 <_sbrk_r>
 80049e8:	4581      	cmp	r9, r0
 80049ea:	d142      	bne.n	8004a72 <_malloc_r+0xea>
 80049ec:	6821      	ldr	r1, [r4, #0]
 80049ee:	1a6d      	subs	r5, r5, r1
 80049f0:	4629      	mov	r1, r5
 80049f2:	4630      	mov	r0, r6
 80049f4:	f7ff ffa6 	bl	8004944 <sbrk_aligned>
 80049f8:	3001      	adds	r0, #1
 80049fa:	d03a      	beq.n	8004a72 <_malloc_r+0xea>
 80049fc:	6823      	ldr	r3, [r4, #0]
 80049fe:	442b      	add	r3, r5
 8004a00:	6023      	str	r3, [r4, #0]
 8004a02:	f8d8 3000 	ldr.w	r3, [r8]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	bb62      	cbnz	r2, 8004a64 <_malloc_r+0xdc>
 8004a0a:	f8c8 7000 	str.w	r7, [r8]
 8004a0e:	e00f      	b.n	8004a30 <_malloc_r+0xa8>
 8004a10:	6822      	ldr	r2, [r4, #0]
 8004a12:	1b52      	subs	r2, r2, r5
 8004a14:	d420      	bmi.n	8004a58 <_malloc_r+0xd0>
 8004a16:	2a0b      	cmp	r2, #11
 8004a18:	d917      	bls.n	8004a4a <_malloc_r+0xc2>
 8004a1a:	1961      	adds	r1, r4, r5
 8004a1c:	42a3      	cmp	r3, r4
 8004a1e:	6025      	str	r5, [r4, #0]
 8004a20:	bf18      	it	ne
 8004a22:	6059      	strne	r1, [r3, #4]
 8004a24:	6863      	ldr	r3, [r4, #4]
 8004a26:	bf08      	it	eq
 8004a28:	f8c8 1000 	streq.w	r1, [r8]
 8004a2c:	5162      	str	r2, [r4, r5]
 8004a2e:	604b      	str	r3, [r1, #4]
 8004a30:	4630      	mov	r0, r6
 8004a32:	f000 f82f 	bl	8004a94 <__malloc_unlock>
 8004a36:	f104 000b 	add.w	r0, r4, #11
 8004a3a:	1d23      	adds	r3, r4, #4
 8004a3c:	f020 0007 	bic.w	r0, r0, #7
 8004a40:	1ac2      	subs	r2, r0, r3
 8004a42:	bf1c      	itt	ne
 8004a44:	1a1b      	subne	r3, r3, r0
 8004a46:	50a3      	strne	r3, [r4, r2]
 8004a48:	e7af      	b.n	80049aa <_malloc_r+0x22>
 8004a4a:	6862      	ldr	r2, [r4, #4]
 8004a4c:	42a3      	cmp	r3, r4
 8004a4e:	bf0c      	ite	eq
 8004a50:	f8c8 2000 	streq.w	r2, [r8]
 8004a54:	605a      	strne	r2, [r3, #4]
 8004a56:	e7eb      	b.n	8004a30 <_malloc_r+0xa8>
 8004a58:	4623      	mov	r3, r4
 8004a5a:	6864      	ldr	r4, [r4, #4]
 8004a5c:	e7ae      	b.n	80049bc <_malloc_r+0x34>
 8004a5e:	463c      	mov	r4, r7
 8004a60:	687f      	ldr	r7, [r7, #4]
 8004a62:	e7b6      	b.n	80049d2 <_malloc_r+0x4a>
 8004a64:	461a      	mov	r2, r3
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	42a3      	cmp	r3, r4
 8004a6a:	d1fb      	bne.n	8004a64 <_malloc_r+0xdc>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	6053      	str	r3, [r2, #4]
 8004a70:	e7de      	b.n	8004a30 <_malloc_r+0xa8>
 8004a72:	230c      	movs	r3, #12
 8004a74:	6033      	str	r3, [r6, #0]
 8004a76:	4630      	mov	r0, r6
 8004a78:	f000 f80c 	bl	8004a94 <__malloc_unlock>
 8004a7c:	e794      	b.n	80049a8 <_malloc_r+0x20>
 8004a7e:	6005      	str	r5, [r0, #0]
 8004a80:	e7d6      	b.n	8004a30 <_malloc_r+0xa8>
 8004a82:	bf00      	nop
 8004a84:	20000398 	.word	0x20000398

08004a88 <__malloc_lock>:
 8004a88:	4801      	ldr	r0, [pc, #4]	@ (8004a90 <__malloc_lock+0x8>)
 8004a8a:	f7ff b8ac 	b.w	8003be6 <__retarget_lock_acquire_recursive>
 8004a8e:	bf00      	nop
 8004a90:	20000390 	.word	0x20000390

08004a94 <__malloc_unlock>:
 8004a94:	4801      	ldr	r0, [pc, #4]	@ (8004a9c <__malloc_unlock+0x8>)
 8004a96:	f7ff b8a7 	b.w	8003be8 <__retarget_lock_release_recursive>
 8004a9a:	bf00      	nop
 8004a9c:	20000390 	.word	0x20000390

08004aa0 <_Balloc>:
 8004aa0:	b570      	push	{r4, r5, r6, lr}
 8004aa2:	69c6      	ldr	r6, [r0, #28]
 8004aa4:	4604      	mov	r4, r0
 8004aa6:	460d      	mov	r5, r1
 8004aa8:	b976      	cbnz	r6, 8004ac8 <_Balloc+0x28>
 8004aaa:	2010      	movs	r0, #16
 8004aac:	f7ff ff42 	bl	8004934 <malloc>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	61e0      	str	r0, [r4, #28]
 8004ab4:	b920      	cbnz	r0, 8004ac0 <_Balloc+0x20>
 8004ab6:	4b18      	ldr	r3, [pc, #96]	@ (8004b18 <_Balloc+0x78>)
 8004ab8:	4818      	ldr	r0, [pc, #96]	@ (8004b1c <_Balloc+0x7c>)
 8004aba:	216b      	movs	r1, #107	@ 0x6b
 8004abc:	f000 fdfa 	bl	80056b4 <__assert_func>
 8004ac0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004ac4:	6006      	str	r6, [r0, #0]
 8004ac6:	60c6      	str	r6, [r0, #12]
 8004ac8:	69e6      	ldr	r6, [r4, #28]
 8004aca:	68f3      	ldr	r3, [r6, #12]
 8004acc:	b183      	cbz	r3, 8004af0 <_Balloc+0x50>
 8004ace:	69e3      	ldr	r3, [r4, #28]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004ad6:	b9b8      	cbnz	r0, 8004b08 <_Balloc+0x68>
 8004ad8:	2101      	movs	r1, #1
 8004ada:	fa01 f605 	lsl.w	r6, r1, r5
 8004ade:	1d72      	adds	r2, r6, #5
 8004ae0:	0092      	lsls	r2, r2, #2
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	f000 fe04 	bl	80056f0 <_calloc_r>
 8004ae8:	b160      	cbz	r0, 8004b04 <_Balloc+0x64>
 8004aea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004aee:	e00e      	b.n	8004b0e <_Balloc+0x6e>
 8004af0:	2221      	movs	r2, #33	@ 0x21
 8004af2:	2104      	movs	r1, #4
 8004af4:	4620      	mov	r0, r4
 8004af6:	f000 fdfb 	bl	80056f0 <_calloc_r>
 8004afa:	69e3      	ldr	r3, [r4, #28]
 8004afc:	60f0      	str	r0, [r6, #12]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1e4      	bne.n	8004ace <_Balloc+0x2e>
 8004b04:	2000      	movs	r0, #0
 8004b06:	bd70      	pop	{r4, r5, r6, pc}
 8004b08:	6802      	ldr	r2, [r0, #0]
 8004b0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004b0e:	2300      	movs	r3, #0
 8004b10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004b14:	e7f7      	b.n	8004b06 <_Balloc+0x66>
 8004b16:	bf00      	nop
 8004b18:	080058a9 	.word	0x080058a9
 8004b1c:	08005929 	.word	0x08005929

08004b20 <_Bfree>:
 8004b20:	b570      	push	{r4, r5, r6, lr}
 8004b22:	69c6      	ldr	r6, [r0, #28]
 8004b24:	4605      	mov	r5, r0
 8004b26:	460c      	mov	r4, r1
 8004b28:	b976      	cbnz	r6, 8004b48 <_Bfree+0x28>
 8004b2a:	2010      	movs	r0, #16
 8004b2c:	f7ff ff02 	bl	8004934 <malloc>
 8004b30:	4602      	mov	r2, r0
 8004b32:	61e8      	str	r0, [r5, #28]
 8004b34:	b920      	cbnz	r0, 8004b40 <_Bfree+0x20>
 8004b36:	4b09      	ldr	r3, [pc, #36]	@ (8004b5c <_Bfree+0x3c>)
 8004b38:	4809      	ldr	r0, [pc, #36]	@ (8004b60 <_Bfree+0x40>)
 8004b3a:	218f      	movs	r1, #143	@ 0x8f
 8004b3c:	f000 fdba 	bl	80056b4 <__assert_func>
 8004b40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004b44:	6006      	str	r6, [r0, #0]
 8004b46:	60c6      	str	r6, [r0, #12]
 8004b48:	b13c      	cbz	r4, 8004b5a <_Bfree+0x3a>
 8004b4a:	69eb      	ldr	r3, [r5, #28]
 8004b4c:	6862      	ldr	r2, [r4, #4]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b54:	6021      	str	r1, [r4, #0]
 8004b56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004b5a:	bd70      	pop	{r4, r5, r6, pc}
 8004b5c:	080058a9 	.word	0x080058a9
 8004b60:	08005929 	.word	0x08005929

08004b64 <__multadd>:
 8004b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b68:	690d      	ldr	r5, [r1, #16]
 8004b6a:	4607      	mov	r7, r0
 8004b6c:	460c      	mov	r4, r1
 8004b6e:	461e      	mov	r6, r3
 8004b70:	f101 0c14 	add.w	ip, r1, #20
 8004b74:	2000      	movs	r0, #0
 8004b76:	f8dc 3000 	ldr.w	r3, [ip]
 8004b7a:	b299      	uxth	r1, r3
 8004b7c:	fb02 6101 	mla	r1, r2, r1, r6
 8004b80:	0c1e      	lsrs	r6, r3, #16
 8004b82:	0c0b      	lsrs	r3, r1, #16
 8004b84:	fb02 3306 	mla	r3, r2, r6, r3
 8004b88:	b289      	uxth	r1, r1
 8004b8a:	3001      	adds	r0, #1
 8004b8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004b90:	4285      	cmp	r5, r0
 8004b92:	f84c 1b04 	str.w	r1, [ip], #4
 8004b96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004b9a:	dcec      	bgt.n	8004b76 <__multadd+0x12>
 8004b9c:	b30e      	cbz	r6, 8004be2 <__multadd+0x7e>
 8004b9e:	68a3      	ldr	r3, [r4, #8]
 8004ba0:	42ab      	cmp	r3, r5
 8004ba2:	dc19      	bgt.n	8004bd8 <__multadd+0x74>
 8004ba4:	6861      	ldr	r1, [r4, #4]
 8004ba6:	4638      	mov	r0, r7
 8004ba8:	3101      	adds	r1, #1
 8004baa:	f7ff ff79 	bl	8004aa0 <_Balloc>
 8004bae:	4680      	mov	r8, r0
 8004bb0:	b928      	cbnz	r0, 8004bbe <__multadd+0x5a>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8004be8 <__multadd+0x84>)
 8004bb6:	480d      	ldr	r0, [pc, #52]	@ (8004bec <__multadd+0x88>)
 8004bb8:	21ba      	movs	r1, #186	@ 0xba
 8004bba:	f000 fd7b 	bl	80056b4 <__assert_func>
 8004bbe:	6922      	ldr	r2, [r4, #16]
 8004bc0:	3202      	adds	r2, #2
 8004bc2:	f104 010c 	add.w	r1, r4, #12
 8004bc6:	0092      	lsls	r2, r2, #2
 8004bc8:	300c      	adds	r0, #12
 8004bca:	f000 fd65 	bl	8005698 <memcpy>
 8004bce:	4621      	mov	r1, r4
 8004bd0:	4638      	mov	r0, r7
 8004bd2:	f7ff ffa5 	bl	8004b20 <_Bfree>
 8004bd6:	4644      	mov	r4, r8
 8004bd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004bdc:	3501      	adds	r5, #1
 8004bde:	615e      	str	r6, [r3, #20]
 8004be0:	6125      	str	r5, [r4, #16]
 8004be2:	4620      	mov	r0, r4
 8004be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004be8:	08005918 	.word	0x08005918
 8004bec:	08005929 	.word	0x08005929

08004bf0 <__hi0bits>:
 8004bf0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	bf36      	itet	cc
 8004bf8:	0403      	lslcc	r3, r0, #16
 8004bfa:	2000      	movcs	r0, #0
 8004bfc:	2010      	movcc	r0, #16
 8004bfe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c02:	bf3c      	itt	cc
 8004c04:	021b      	lslcc	r3, r3, #8
 8004c06:	3008      	addcc	r0, #8
 8004c08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c0c:	bf3c      	itt	cc
 8004c0e:	011b      	lslcc	r3, r3, #4
 8004c10:	3004      	addcc	r0, #4
 8004c12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c16:	bf3c      	itt	cc
 8004c18:	009b      	lslcc	r3, r3, #2
 8004c1a:	3002      	addcc	r0, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	db05      	blt.n	8004c2c <__hi0bits+0x3c>
 8004c20:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004c24:	f100 0001 	add.w	r0, r0, #1
 8004c28:	bf08      	it	eq
 8004c2a:	2020      	moveq	r0, #32
 8004c2c:	4770      	bx	lr

08004c2e <__lo0bits>:
 8004c2e:	6803      	ldr	r3, [r0, #0]
 8004c30:	4602      	mov	r2, r0
 8004c32:	f013 0007 	ands.w	r0, r3, #7
 8004c36:	d00b      	beq.n	8004c50 <__lo0bits+0x22>
 8004c38:	07d9      	lsls	r1, r3, #31
 8004c3a:	d421      	bmi.n	8004c80 <__lo0bits+0x52>
 8004c3c:	0798      	lsls	r0, r3, #30
 8004c3e:	bf49      	itett	mi
 8004c40:	085b      	lsrmi	r3, r3, #1
 8004c42:	089b      	lsrpl	r3, r3, #2
 8004c44:	2001      	movmi	r0, #1
 8004c46:	6013      	strmi	r3, [r2, #0]
 8004c48:	bf5c      	itt	pl
 8004c4a:	6013      	strpl	r3, [r2, #0]
 8004c4c:	2002      	movpl	r0, #2
 8004c4e:	4770      	bx	lr
 8004c50:	b299      	uxth	r1, r3
 8004c52:	b909      	cbnz	r1, 8004c58 <__lo0bits+0x2a>
 8004c54:	0c1b      	lsrs	r3, r3, #16
 8004c56:	2010      	movs	r0, #16
 8004c58:	b2d9      	uxtb	r1, r3
 8004c5a:	b909      	cbnz	r1, 8004c60 <__lo0bits+0x32>
 8004c5c:	3008      	adds	r0, #8
 8004c5e:	0a1b      	lsrs	r3, r3, #8
 8004c60:	0719      	lsls	r1, r3, #28
 8004c62:	bf04      	itt	eq
 8004c64:	091b      	lsreq	r3, r3, #4
 8004c66:	3004      	addeq	r0, #4
 8004c68:	0799      	lsls	r1, r3, #30
 8004c6a:	bf04      	itt	eq
 8004c6c:	089b      	lsreq	r3, r3, #2
 8004c6e:	3002      	addeq	r0, #2
 8004c70:	07d9      	lsls	r1, r3, #31
 8004c72:	d403      	bmi.n	8004c7c <__lo0bits+0x4e>
 8004c74:	085b      	lsrs	r3, r3, #1
 8004c76:	f100 0001 	add.w	r0, r0, #1
 8004c7a:	d003      	beq.n	8004c84 <__lo0bits+0x56>
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	4770      	bx	lr
 8004c80:	2000      	movs	r0, #0
 8004c82:	4770      	bx	lr
 8004c84:	2020      	movs	r0, #32
 8004c86:	4770      	bx	lr

08004c88 <__i2b>:
 8004c88:	b510      	push	{r4, lr}
 8004c8a:	460c      	mov	r4, r1
 8004c8c:	2101      	movs	r1, #1
 8004c8e:	f7ff ff07 	bl	8004aa0 <_Balloc>
 8004c92:	4602      	mov	r2, r0
 8004c94:	b928      	cbnz	r0, 8004ca2 <__i2b+0x1a>
 8004c96:	4b05      	ldr	r3, [pc, #20]	@ (8004cac <__i2b+0x24>)
 8004c98:	4805      	ldr	r0, [pc, #20]	@ (8004cb0 <__i2b+0x28>)
 8004c9a:	f240 1145 	movw	r1, #325	@ 0x145
 8004c9e:	f000 fd09 	bl	80056b4 <__assert_func>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	6144      	str	r4, [r0, #20]
 8004ca6:	6103      	str	r3, [r0, #16]
 8004ca8:	bd10      	pop	{r4, pc}
 8004caa:	bf00      	nop
 8004cac:	08005918 	.word	0x08005918
 8004cb0:	08005929 	.word	0x08005929

08004cb4 <__multiply>:
 8004cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb8:	4617      	mov	r7, r2
 8004cba:	690a      	ldr	r2, [r1, #16]
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	bfa8      	it	ge
 8004cc2:	463b      	movge	r3, r7
 8004cc4:	4689      	mov	r9, r1
 8004cc6:	bfa4      	itt	ge
 8004cc8:	460f      	movge	r7, r1
 8004cca:	4699      	movge	r9, r3
 8004ccc:	693d      	ldr	r5, [r7, #16]
 8004cce:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	eb05 060a 	add.w	r6, r5, sl
 8004cda:	42b3      	cmp	r3, r6
 8004cdc:	b085      	sub	sp, #20
 8004cde:	bfb8      	it	lt
 8004ce0:	3101      	addlt	r1, #1
 8004ce2:	f7ff fedd 	bl	8004aa0 <_Balloc>
 8004ce6:	b930      	cbnz	r0, 8004cf6 <__multiply+0x42>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	4b41      	ldr	r3, [pc, #260]	@ (8004df0 <__multiply+0x13c>)
 8004cec:	4841      	ldr	r0, [pc, #260]	@ (8004df4 <__multiply+0x140>)
 8004cee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004cf2:	f000 fcdf 	bl	80056b4 <__assert_func>
 8004cf6:	f100 0414 	add.w	r4, r0, #20
 8004cfa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8004cfe:	4623      	mov	r3, r4
 8004d00:	2200      	movs	r2, #0
 8004d02:	4573      	cmp	r3, lr
 8004d04:	d320      	bcc.n	8004d48 <__multiply+0x94>
 8004d06:	f107 0814 	add.w	r8, r7, #20
 8004d0a:	f109 0114 	add.w	r1, r9, #20
 8004d0e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8004d12:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8004d16:	9302      	str	r3, [sp, #8]
 8004d18:	1beb      	subs	r3, r5, r7
 8004d1a:	3b15      	subs	r3, #21
 8004d1c:	f023 0303 	bic.w	r3, r3, #3
 8004d20:	3304      	adds	r3, #4
 8004d22:	3715      	adds	r7, #21
 8004d24:	42bd      	cmp	r5, r7
 8004d26:	bf38      	it	cc
 8004d28:	2304      	movcc	r3, #4
 8004d2a:	9301      	str	r3, [sp, #4]
 8004d2c:	9b02      	ldr	r3, [sp, #8]
 8004d2e:	9103      	str	r1, [sp, #12]
 8004d30:	428b      	cmp	r3, r1
 8004d32:	d80c      	bhi.n	8004d4e <__multiply+0x9a>
 8004d34:	2e00      	cmp	r6, #0
 8004d36:	dd03      	ble.n	8004d40 <__multiply+0x8c>
 8004d38:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d055      	beq.n	8004dec <__multiply+0x138>
 8004d40:	6106      	str	r6, [r0, #16]
 8004d42:	b005      	add	sp, #20
 8004d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d48:	f843 2b04 	str.w	r2, [r3], #4
 8004d4c:	e7d9      	b.n	8004d02 <__multiply+0x4e>
 8004d4e:	f8b1 a000 	ldrh.w	sl, [r1]
 8004d52:	f1ba 0f00 	cmp.w	sl, #0
 8004d56:	d01f      	beq.n	8004d98 <__multiply+0xe4>
 8004d58:	46c4      	mov	ip, r8
 8004d5a:	46a1      	mov	r9, r4
 8004d5c:	2700      	movs	r7, #0
 8004d5e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004d62:	f8d9 3000 	ldr.w	r3, [r9]
 8004d66:	fa1f fb82 	uxth.w	fp, r2
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	fb0a 330b 	mla	r3, sl, fp, r3
 8004d70:	443b      	add	r3, r7
 8004d72:	f8d9 7000 	ldr.w	r7, [r9]
 8004d76:	0c12      	lsrs	r2, r2, #16
 8004d78:	0c3f      	lsrs	r7, r7, #16
 8004d7a:	fb0a 7202 	mla	r2, sl, r2, r7
 8004d7e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d88:	4565      	cmp	r5, ip
 8004d8a:	f849 3b04 	str.w	r3, [r9], #4
 8004d8e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8004d92:	d8e4      	bhi.n	8004d5e <__multiply+0xaa>
 8004d94:	9b01      	ldr	r3, [sp, #4]
 8004d96:	50e7      	str	r7, [r4, r3]
 8004d98:	9b03      	ldr	r3, [sp, #12]
 8004d9a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004d9e:	3104      	adds	r1, #4
 8004da0:	f1b9 0f00 	cmp.w	r9, #0
 8004da4:	d020      	beq.n	8004de8 <__multiply+0x134>
 8004da6:	6823      	ldr	r3, [r4, #0]
 8004da8:	4647      	mov	r7, r8
 8004daa:	46a4      	mov	ip, r4
 8004dac:	f04f 0a00 	mov.w	sl, #0
 8004db0:	f8b7 b000 	ldrh.w	fp, [r7]
 8004db4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8004db8:	fb09 220b 	mla	r2, r9, fp, r2
 8004dbc:	4452      	add	r2, sl
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004dc4:	f84c 3b04 	str.w	r3, [ip], #4
 8004dc8:	f857 3b04 	ldr.w	r3, [r7], #4
 8004dcc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004dd0:	f8bc 3000 	ldrh.w	r3, [ip]
 8004dd4:	fb09 330a 	mla	r3, r9, sl, r3
 8004dd8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8004ddc:	42bd      	cmp	r5, r7
 8004dde:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004de2:	d8e5      	bhi.n	8004db0 <__multiply+0xfc>
 8004de4:	9a01      	ldr	r2, [sp, #4]
 8004de6:	50a3      	str	r3, [r4, r2]
 8004de8:	3404      	adds	r4, #4
 8004dea:	e79f      	b.n	8004d2c <__multiply+0x78>
 8004dec:	3e01      	subs	r6, #1
 8004dee:	e7a1      	b.n	8004d34 <__multiply+0x80>
 8004df0:	08005918 	.word	0x08005918
 8004df4:	08005929 	.word	0x08005929

08004df8 <__pow5mult>:
 8004df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dfc:	4615      	mov	r5, r2
 8004dfe:	f012 0203 	ands.w	r2, r2, #3
 8004e02:	4607      	mov	r7, r0
 8004e04:	460e      	mov	r6, r1
 8004e06:	d007      	beq.n	8004e18 <__pow5mult+0x20>
 8004e08:	4c25      	ldr	r4, [pc, #148]	@ (8004ea0 <__pow5mult+0xa8>)
 8004e0a:	3a01      	subs	r2, #1
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004e12:	f7ff fea7 	bl	8004b64 <__multadd>
 8004e16:	4606      	mov	r6, r0
 8004e18:	10ad      	asrs	r5, r5, #2
 8004e1a:	d03d      	beq.n	8004e98 <__pow5mult+0xa0>
 8004e1c:	69fc      	ldr	r4, [r7, #28]
 8004e1e:	b97c      	cbnz	r4, 8004e40 <__pow5mult+0x48>
 8004e20:	2010      	movs	r0, #16
 8004e22:	f7ff fd87 	bl	8004934 <malloc>
 8004e26:	4602      	mov	r2, r0
 8004e28:	61f8      	str	r0, [r7, #28]
 8004e2a:	b928      	cbnz	r0, 8004e38 <__pow5mult+0x40>
 8004e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ea4 <__pow5mult+0xac>)
 8004e2e:	481e      	ldr	r0, [pc, #120]	@ (8004ea8 <__pow5mult+0xb0>)
 8004e30:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004e34:	f000 fc3e 	bl	80056b4 <__assert_func>
 8004e38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004e3c:	6004      	str	r4, [r0, #0]
 8004e3e:	60c4      	str	r4, [r0, #12]
 8004e40:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004e44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004e48:	b94c      	cbnz	r4, 8004e5e <__pow5mult+0x66>
 8004e4a:	f240 2171 	movw	r1, #625	@ 0x271
 8004e4e:	4638      	mov	r0, r7
 8004e50:	f7ff ff1a 	bl	8004c88 <__i2b>
 8004e54:	2300      	movs	r3, #0
 8004e56:	f8c8 0008 	str.w	r0, [r8, #8]
 8004e5a:	4604      	mov	r4, r0
 8004e5c:	6003      	str	r3, [r0, #0]
 8004e5e:	f04f 0900 	mov.w	r9, #0
 8004e62:	07eb      	lsls	r3, r5, #31
 8004e64:	d50a      	bpl.n	8004e7c <__pow5mult+0x84>
 8004e66:	4631      	mov	r1, r6
 8004e68:	4622      	mov	r2, r4
 8004e6a:	4638      	mov	r0, r7
 8004e6c:	f7ff ff22 	bl	8004cb4 <__multiply>
 8004e70:	4631      	mov	r1, r6
 8004e72:	4680      	mov	r8, r0
 8004e74:	4638      	mov	r0, r7
 8004e76:	f7ff fe53 	bl	8004b20 <_Bfree>
 8004e7a:	4646      	mov	r6, r8
 8004e7c:	106d      	asrs	r5, r5, #1
 8004e7e:	d00b      	beq.n	8004e98 <__pow5mult+0xa0>
 8004e80:	6820      	ldr	r0, [r4, #0]
 8004e82:	b938      	cbnz	r0, 8004e94 <__pow5mult+0x9c>
 8004e84:	4622      	mov	r2, r4
 8004e86:	4621      	mov	r1, r4
 8004e88:	4638      	mov	r0, r7
 8004e8a:	f7ff ff13 	bl	8004cb4 <__multiply>
 8004e8e:	6020      	str	r0, [r4, #0]
 8004e90:	f8c0 9000 	str.w	r9, [r0]
 8004e94:	4604      	mov	r4, r0
 8004e96:	e7e4      	b.n	8004e62 <__pow5mult+0x6a>
 8004e98:	4630      	mov	r0, r6
 8004e9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e9e:	bf00      	nop
 8004ea0:	080059dc 	.word	0x080059dc
 8004ea4:	080058a9 	.word	0x080058a9
 8004ea8:	08005929 	.word	0x08005929

08004eac <__lshift>:
 8004eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb0:	460c      	mov	r4, r1
 8004eb2:	6849      	ldr	r1, [r1, #4]
 8004eb4:	6923      	ldr	r3, [r4, #16]
 8004eb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004eba:	68a3      	ldr	r3, [r4, #8]
 8004ebc:	4607      	mov	r7, r0
 8004ebe:	4691      	mov	r9, r2
 8004ec0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004ec4:	f108 0601 	add.w	r6, r8, #1
 8004ec8:	42b3      	cmp	r3, r6
 8004eca:	db0b      	blt.n	8004ee4 <__lshift+0x38>
 8004ecc:	4638      	mov	r0, r7
 8004ece:	f7ff fde7 	bl	8004aa0 <_Balloc>
 8004ed2:	4605      	mov	r5, r0
 8004ed4:	b948      	cbnz	r0, 8004eea <__lshift+0x3e>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	4b28      	ldr	r3, [pc, #160]	@ (8004f7c <__lshift+0xd0>)
 8004eda:	4829      	ldr	r0, [pc, #164]	@ (8004f80 <__lshift+0xd4>)
 8004edc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004ee0:	f000 fbe8 	bl	80056b4 <__assert_func>
 8004ee4:	3101      	adds	r1, #1
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	e7ee      	b.n	8004ec8 <__lshift+0x1c>
 8004eea:	2300      	movs	r3, #0
 8004eec:	f100 0114 	add.w	r1, r0, #20
 8004ef0:	f100 0210 	add.w	r2, r0, #16
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	4553      	cmp	r3, sl
 8004ef8:	db33      	blt.n	8004f62 <__lshift+0xb6>
 8004efa:	6920      	ldr	r0, [r4, #16]
 8004efc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004f00:	f104 0314 	add.w	r3, r4, #20
 8004f04:	f019 091f 	ands.w	r9, r9, #31
 8004f08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004f0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004f10:	d02b      	beq.n	8004f6a <__lshift+0xbe>
 8004f12:	f1c9 0e20 	rsb	lr, r9, #32
 8004f16:	468a      	mov	sl, r1
 8004f18:	2200      	movs	r2, #0
 8004f1a:	6818      	ldr	r0, [r3, #0]
 8004f1c:	fa00 f009 	lsl.w	r0, r0, r9
 8004f20:	4310      	orrs	r0, r2
 8004f22:	f84a 0b04 	str.w	r0, [sl], #4
 8004f26:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f2a:	459c      	cmp	ip, r3
 8004f2c:	fa22 f20e 	lsr.w	r2, r2, lr
 8004f30:	d8f3      	bhi.n	8004f1a <__lshift+0x6e>
 8004f32:	ebac 0304 	sub.w	r3, ip, r4
 8004f36:	3b15      	subs	r3, #21
 8004f38:	f023 0303 	bic.w	r3, r3, #3
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	f104 0015 	add.w	r0, r4, #21
 8004f42:	4560      	cmp	r0, ip
 8004f44:	bf88      	it	hi
 8004f46:	2304      	movhi	r3, #4
 8004f48:	50ca      	str	r2, [r1, r3]
 8004f4a:	b10a      	cbz	r2, 8004f50 <__lshift+0xa4>
 8004f4c:	f108 0602 	add.w	r6, r8, #2
 8004f50:	3e01      	subs	r6, #1
 8004f52:	4638      	mov	r0, r7
 8004f54:	612e      	str	r6, [r5, #16]
 8004f56:	4621      	mov	r1, r4
 8004f58:	f7ff fde2 	bl	8004b20 <_Bfree>
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f62:	f842 0f04 	str.w	r0, [r2, #4]!
 8004f66:	3301      	adds	r3, #1
 8004f68:	e7c5      	b.n	8004ef6 <__lshift+0x4a>
 8004f6a:	3904      	subs	r1, #4
 8004f6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f70:	f841 2f04 	str.w	r2, [r1, #4]!
 8004f74:	459c      	cmp	ip, r3
 8004f76:	d8f9      	bhi.n	8004f6c <__lshift+0xc0>
 8004f78:	e7ea      	b.n	8004f50 <__lshift+0xa4>
 8004f7a:	bf00      	nop
 8004f7c:	08005918 	.word	0x08005918
 8004f80:	08005929 	.word	0x08005929

08004f84 <__mcmp>:
 8004f84:	690a      	ldr	r2, [r1, #16]
 8004f86:	4603      	mov	r3, r0
 8004f88:	6900      	ldr	r0, [r0, #16]
 8004f8a:	1a80      	subs	r0, r0, r2
 8004f8c:	b530      	push	{r4, r5, lr}
 8004f8e:	d10e      	bne.n	8004fae <__mcmp+0x2a>
 8004f90:	3314      	adds	r3, #20
 8004f92:	3114      	adds	r1, #20
 8004f94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004f98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004f9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004fa0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004fa4:	4295      	cmp	r5, r2
 8004fa6:	d003      	beq.n	8004fb0 <__mcmp+0x2c>
 8004fa8:	d205      	bcs.n	8004fb6 <__mcmp+0x32>
 8004faa:	f04f 30ff 	mov.w	r0, #4294967295
 8004fae:	bd30      	pop	{r4, r5, pc}
 8004fb0:	42a3      	cmp	r3, r4
 8004fb2:	d3f3      	bcc.n	8004f9c <__mcmp+0x18>
 8004fb4:	e7fb      	b.n	8004fae <__mcmp+0x2a>
 8004fb6:	2001      	movs	r0, #1
 8004fb8:	e7f9      	b.n	8004fae <__mcmp+0x2a>
	...

08004fbc <__mdiff>:
 8004fbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fc0:	4689      	mov	r9, r1
 8004fc2:	4606      	mov	r6, r0
 8004fc4:	4611      	mov	r1, r2
 8004fc6:	4648      	mov	r0, r9
 8004fc8:	4614      	mov	r4, r2
 8004fca:	f7ff ffdb 	bl	8004f84 <__mcmp>
 8004fce:	1e05      	subs	r5, r0, #0
 8004fd0:	d112      	bne.n	8004ff8 <__mdiff+0x3c>
 8004fd2:	4629      	mov	r1, r5
 8004fd4:	4630      	mov	r0, r6
 8004fd6:	f7ff fd63 	bl	8004aa0 <_Balloc>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	b928      	cbnz	r0, 8004fea <__mdiff+0x2e>
 8004fde:	4b3f      	ldr	r3, [pc, #252]	@ (80050dc <__mdiff+0x120>)
 8004fe0:	f240 2137 	movw	r1, #567	@ 0x237
 8004fe4:	483e      	ldr	r0, [pc, #248]	@ (80050e0 <__mdiff+0x124>)
 8004fe6:	f000 fb65 	bl	80056b4 <__assert_func>
 8004fea:	2301      	movs	r3, #1
 8004fec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004ff0:	4610      	mov	r0, r2
 8004ff2:	b003      	add	sp, #12
 8004ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff8:	bfbc      	itt	lt
 8004ffa:	464b      	movlt	r3, r9
 8004ffc:	46a1      	movlt	r9, r4
 8004ffe:	4630      	mov	r0, r6
 8005000:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005004:	bfba      	itte	lt
 8005006:	461c      	movlt	r4, r3
 8005008:	2501      	movlt	r5, #1
 800500a:	2500      	movge	r5, #0
 800500c:	f7ff fd48 	bl	8004aa0 <_Balloc>
 8005010:	4602      	mov	r2, r0
 8005012:	b918      	cbnz	r0, 800501c <__mdiff+0x60>
 8005014:	4b31      	ldr	r3, [pc, #196]	@ (80050dc <__mdiff+0x120>)
 8005016:	f240 2145 	movw	r1, #581	@ 0x245
 800501a:	e7e3      	b.n	8004fe4 <__mdiff+0x28>
 800501c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005020:	6926      	ldr	r6, [r4, #16]
 8005022:	60c5      	str	r5, [r0, #12]
 8005024:	f109 0310 	add.w	r3, r9, #16
 8005028:	f109 0514 	add.w	r5, r9, #20
 800502c:	f104 0e14 	add.w	lr, r4, #20
 8005030:	f100 0b14 	add.w	fp, r0, #20
 8005034:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005038:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800503c:	9301      	str	r3, [sp, #4]
 800503e:	46d9      	mov	r9, fp
 8005040:	f04f 0c00 	mov.w	ip, #0
 8005044:	9b01      	ldr	r3, [sp, #4]
 8005046:	f85e 0b04 	ldr.w	r0, [lr], #4
 800504a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800504e:	9301      	str	r3, [sp, #4]
 8005050:	fa1f f38a 	uxth.w	r3, sl
 8005054:	4619      	mov	r1, r3
 8005056:	b283      	uxth	r3, r0
 8005058:	1acb      	subs	r3, r1, r3
 800505a:	0c00      	lsrs	r0, r0, #16
 800505c:	4463      	add	r3, ip
 800505e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005062:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005066:	b29b      	uxth	r3, r3
 8005068:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800506c:	4576      	cmp	r6, lr
 800506e:	f849 3b04 	str.w	r3, [r9], #4
 8005072:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005076:	d8e5      	bhi.n	8005044 <__mdiff+0x88>
 8005078:	1b33      	subs	r3, r6, r4
 800507a:	3b15      	subs	r3, #21
 800507c:	f023 0303 	bic.w	r3, r3, #3
 8005080:	3415      	adds	r4, #21
 8005082:	3304      	adds	r3, #4
 8005084:	42a6      	cmp	r6, r4
 8005086:	bf38      	it	cc
 8005088:	2304      	movcc	r3, #4
 800508a:	441d      	add	r5, r3
 800508c:	445b      	add	r3, fp
 800508e:	461e      	mov	r6, r3
 8005090:	462c      	mov	r4, r5
 8005092:	4544      	cmp	r4, r8
 8005094:	d30e      	bcc.n	80050b4 <__mdiff+0xf8>
 8005096:	f108 0103 	add.w	r1, r8, #3
 800509a:	1b49      	subs	r1, r1, r5
 800509c:	f021 0103 	bic.w	r1, r1, #3
 80050a0:	3d03      	subs	r5, #3
 80050a2:	45a8      	cmp	r8, r5
 80050a4:	bf38      	it	cc
 80050a6:	2100      	movcc	r1, #0
 80050a8:	440b      	add	r3, r1
 80050aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80050ae:	b191      	cbz	r1, 80050d6 <__mdiff+0x11a>
 80050b0:	6117      	str	r7, [r2, #16]
 80050b2:	e79d      	b.n	8004ff0 <__mdiff+0x34>
 80050b4:	f854 1b04 	ldr.w	r1, [r4], #4
 80050b8:	46e6      	mov	lr, ip
 80050ba:	0c08      	lsrs	r0, r1, #16
 80050bc:	fa1c fc81 	uxtah	ip, ip, r1
 80050c0:	4471      	add	r1, lr
 80050c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80050c6:	b289      	uxth	r1, r1
 80050c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80050cc:	f846 1b04 	str.w	r1, [r6], #4
 80050d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80050d4:	e7dd      	b.n	8005092 <__mdiff+0xd6>
 80050d6:	3f01      	subs	r7, #1
 80050d8:	e7e7      	b.n	80050aa <__mdiff+0xee>
 80050da:	bf00      	nop
 80050dc:	08005918 	.word	0x08005918
 80050e0:	08005929 	.word	0x08005929

080050e4 <__d2b>:
 80050e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80050e8:	460f      	mov	r7, r1
 80050ea:	2101      	movs	r1, #1
 80050ec:	ec59 8b10 	vmov	r8, r9, d0
 80050f0:	4616      	mov	r6, r2
 80050f2:	f7ff fcd5 	bl	8004aa0 <_Balloc>
 80050f6:	4604      	mov	r4, r0
 80050f8:	b930      	cbnz	r0, 8005108 <__d2b+0x24>
 80050fa:	4602      	mov	r2, r0
 80050fc:	4b23      	ldr	r3, [pc, #140]	@ (800518c <__d2b+0xa8>)
 80050fe:	4824      	ldr	r0, [pc, #144]	@ (8005190 <__d2b+0xac>)
 8005100:	f240 310f 	movw	r1, #783	@ 0x30f
 8005104:	f000 fad6 	bl	80056b4 <__assert_func>
 8005108:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800510c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005110:	b10d      	cbz	r5, 8005116 <__d2b+0x32>
 8005112:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005116:	9301      	str	r3, [sp, #4]
 8005118:	f1b8 0300 	subs.w	r3, r8, #0
 800511c:	d023      	beq.n	8005166 <__d2b+0x82>
 800511e:	4668      	mov	r0, sp
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	f7ff fd84 	bl	8004c2e <__lo0bits>
 8005126:	e9dd 1200 	ldrd	r1, r2, [sp]
 800512a:	b1d0      	cbz	r0, 8005162 <__d2b+0x7e>
 800512c:	f1c0 0320 	rsb	r3, r0, #32
 8005130:	fa02 f303 	lsl.w	r3, r2, r3
 8005134:	430b      	orrs	r3, r1
 8005136:	40c2      	lsrs	r2, r0
 8005138:	6163      	str	r3, [r4, #20]
 800513a:	9201      	str	r2, [sp, #4]
 800513c:	9b01      	ldr	r3, [sp, #4]
 800513e:	61a3      	str	r3, [r4, #24]
 8005140:	2b00      	cmp	r3, #0
 8005142:	bf0c      	ite	eq
 8005144:	2201      	moveq	r2, #1
 8005146:	2202      	movne	r2, #2
 8005148:	6122      	str	r2, [r4, #16]
 800514a:	b1a5      	cbz	r5, 8005176 <__d2b+0x92>
 800514c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005150:	4405      	add	r5, r0
 8005152:	603d      	str	r5, [r7, #0]
 8005154:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005158:	6030      	str	r0, [r6, #0]
 800515a:	4620      	mov	r0, r4
 800515c:	b003      	add	sp, #12
 800515e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005162:	6161      	str	r1, [r4, #20]
 8005164:	e7ea      	b.n	800513c <__d2b+0x58>
 8005166:	a801      	add	r0, sp, #4
 8005168:	f7ff fd61 	bl	8004c2e <__lo0bits>
 800516c:	9b01      	ldr	r3, [sp, #4]
 800516e:	6163      	str	r3, [r4, #20]
 8005170:	3020      	adds	r0, #32
 8005172:	2201      	movs	r2, #1
 8005174:	e7e8      	b.n	8005148 <__d2b+0x64>
 8005176:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800517a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800517e:	6038      	str	r0, [r7, #0]
 8005180:	6918      	ldr	r0, [r3, #16]
 8005182:	f7ff fd35 	bl	8004bf0 <__hi0bits>
 8005186:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800518a:	e7e5      	b.n	8005158 <__d2b+0x74>
 800518c:	08005918 	.word	0x08005918
 8005190:	08005929 	.word	0x08005929

08005194 <__sfputc_r>:
 8005194:	6893      	ldr	r3, [r2, #8]
 8005196:	3b01      	subs	r3, #1
 8005198:	2b00      	cmp	r3, #0
 800519a:	b410      	push	{r4}
 800519c:	6093      	str	r3, [r2, #8]
 800519e:	da08      	bge.n	80051b2 <__sfputc_r+0x1e>
 80051a0:	6994      	ldr	r4, [r2, #24]
 80051a2:	42a3      	cmp	r3, r4
 80051a4:	db01      	blt.n	80051aa <__sfputc_r+0x16>
 80051a6:	290a      	cmp	r1, #10
 80051a8:	d103      	bne.n	80051b2 <__sfputc_r+0x1e>
 80051aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051ae:	f7fe bc08 	b.w	80039c2 <__swbuf_r>
 80051b2:	6813      	ldr	r3, [r2, #0]
 80051b4:	1c58      	adds	r0, r3, #1
 80051b6:	6010      	str	r0, [r2, #0]
 80051b8:	7019      	strb	r1, [r3, #0]
 80051ba:	4608      	mov	r0, r1
 80051bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <__sfputs_r>:
 80051c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c4:	4606      	mov	r6, r0
 80051c6:	460f      	mov	r7, r1
 80051c8:	4614      	mov	r4, r2
 80051ca:	18d5      	adds	r5, r2, r3
 80051cc:	42ac      	cmp	r4, r5
 80051ce:	d101      	bne.n	80051d4 <__sfputs_r+0x12>
 80051d0:	2000      	movs	r0, #0
 80051d2:	e007      	b.n	80051e4 <__sfputs_r+0x22>
 80051d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051d8:	463a      	mov	r2, r7
 80051da:	4630      	mov	r0, r6
 80051dc:	f7ff ffda 	bl	8005194 <__sfputc_r>
 80051e0:	1c43      	adds	r3, r0, #1
 80051e2:	d1f3      	bne.n	80051cc <__sfputs_r+0xa>
 80051e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080051e8 <_vfiprintf_r>:
 80051e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ec:	460d      	mov	r5, r1
 80051ee:	b09d      	sub	sp, #116	@ 0x74
 80051f0:	4614      	mov	r4, r2
 80051f2:	4698      	mov	r8, r3
 80051f4:	4606      	mov	r6, r0
 80051f6:	b118      	cbz	r0, 8005200 <_vfiprintf_r+0x18>
 80051f8:	6a03      	ldr	r3, [r0, #32]
 80051fa:	b90b      	cbnz	r3, 8005200 <_vfiprintf_r+0x18>
 80051fc:	f7fe faf8 	bl	80037f0 <__sinit>
 8005200:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005202:	07d9      	lsls	r1, r3, #31
 8005204:	d405      	bmi.n	8005212 <_vfiprintf_r+0x2a>
 8005206:	89ab      	ldrh	r3, [r5, #12]
 8005208:	059a      	lsls	r2, r3, #22
 800520a:	d402      	bmi.n	8005212 <_vfiprintf_r+0x2a>
 800520c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800520e:	f7fe fcea 	bl	8003be6 <__retarget_lock_acquire_recursive>
 8005212:	89ab      	ldrh	r3, [r5, #12]
 8005214:	071b      	lsls	r3, r3, #28
 8005216:	d501      	bpl.n	800521c <_vfiprintf_r+0x34>
 8005218:	692b      	ldr	r3, [r5, #16]
 800521a:	b99b      	cbnz	r3, 8005244 <_vfiprintf_r+0x5c>
 800521c:	4629      	mov	r1, r5
 800521e:	4630      	mov	r0, r6
 8005220:	f7fe fc0e 	bl	8003a40 <__swsetup_r>
 8005224:	b170      	cbz	r0, 8005244 <_vfiprintf_r+0x5c>
 8005226:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005228:	07dc      	lsls	r4, r3, #31
 800522a:	d504      	bpl.n	8005236 <_vfiprintf_r+0x4e>
 800522c:	f04f 30ff 	mov.w	r0, #4294967295
 8005230:	b01d      	add	sp, #116	@ 0x74
 8005232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005236:	89ab      	ldrh	r3, [r5, #12]
 8005238:	0598      	lsls	r0, r3, #22
 800523a:	d4f7      	bmi.n	800522c <_vfiprintf_r+0x44>
 800523c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800523e:	f7fe fcd3 	bl	8003be8 <__retarget_lock_release_recursive>
 8005242:	e7f3      	b.n	800522c <_vfiprintf_r+0x44>
 8005244:	2300      	movs	r3, #0
 8005246:	9309      	str	r3, [sp, #36]	@ 0x24
 8005248:	2320      	movs	r3, #32
 800524a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800524e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005252:	2330      	movs	r3, #48	@ 0x30
 8005254:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005404 <_vfiprintf_r+0x21c>
 8005258:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800525c:	f04f 0901 	mov.w	r9, #1
 8005260:	4623      	mov	r3, r4
 8005262:	469a      	mov	sl, r3
 8005264:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005268:	b10a      	cbz	r2, 800526e <_vfiprintf_r+0x86>
 800526a:	2a25      	cmp	r2, #37	@ 0x25
 800526c:	d1f9      	bne.n	8005262 <_vfiprintf_r+0x7a>
 800526e:	ebba 0b04 	subs.w	fp, sl, r4
 8005272:	d00b      	beq.n	800528c <_vfiprintf_r+0xa4>
 8005274:	465b      	mov	r3, fp
 8005276:	4622      	mov	r2, r4
 8005278:	4629      	mov	r1, r5
 800527a:	4630      	mov	r0, r6
 800527c:	f7ff ffa1 	bl	80051c2 <__sfputs_r>
 8005280:	3001      	adds	r0, #1
 8005282:	f000 80a7 	beq.w	80053d4 <_vfiprintf_r+0x1ec>
 8005286:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005288:	445a      	add	r2, fp
 800528a:	9209      	str	r2, [sp, #36]	@ 0x24
 800528c:	f89a 3000 	ldrb.w	r3, [sl]
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 809f 	beq.w	80053d4 <_vfiprintf_r+0x1ec>
 8005296:	2300      	movs	r3, #0
 8005298:	f04f 32ff 	mov.w	r2, #4294967295
 800529c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052a0:	f10a 0a01 	add.w	sl, sl, #1
 80052a4:	9304      	str	r3, [sp, #16]
 80052a6:	9307      	str	r3, [sp, #28]
 80052a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80052ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80052ae:	4654      	mov	r4, sl
 80052b0:	2205      	movs	r2, #5
 80052b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052b6:	4853      	ldr	r0, [pc, #332]	@ (8005404 <_vfiprintf_r+0x21c>)
 80052b8:	f7fa ff92 	bl	80001e0 <memchr>
 80052bc:	9a04      	ldr	r2, [sp, #16]
 80052be:	b9d8      	cbnz	r0, 80052f8 <_vfiprintf_r+0x110>
 80052c0:	06d1      	lsls	r1, r2, #27
 80052c2:	bf44      	itt	mi
 80052c4:	2320      	movmi	r3, #32
 80052c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052ca:	0713      	lsls	r3, r2, #28
 80052cc:	bf44      	itt	mi
 80052ce:	232b      	movmi	r3, #43	@ 0x2b
 80052d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052d4:	f89a 3000 	ldrb.w	r3, [sl]
 80052d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80052da:	d015      	beq.n	8005308 <_vfiprintf_r+0x120>
 80052dc:	9a07      	ldr	r2, [sp, #28]
 80052de:	4654      	mov	r4, sl
 80052e0:	2000      	movs	r0, #0
 80052e2:	f04f 0c0a 	mov.w	ip, #10
 80052e6:	4621      	mov	r1, r4
 80052e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052ec:	3b30      	subs	r3, #48	@ 0x30
 80052ee:	2b09      	cmp	r3, #9
 80052f0:	d94b      	bls.n	800538a <_vfiprintf_r+0x1a2>
 80052f2:	b1b0      	cbz	r0, 8005322 <_vfiprintf_r+0x13a>
 80052f4:	9207      	str	r2, [sp, #28]
 80052f6:	e014      	b.n	8005322 <_vfiprintf_r+0x13a>
 80052f8:	eba0 0308 	sub.w	r3, r0, r8
 80052fc:	fa09 f303 	lsl.w	r3, r9, r3
 8005300:	4313      	orrs	r3, r2
 8005302:	9304      	str	r3, [sp, #16]
 8005304:	46a2      	mov	sl, r4
 8005306:	e7d2      	b.n	80052ae <_vfiprintf_r+0xc6>
 8005308:	9b03      	ldr	r3, [sp, #12]
 800530a:	1d19      	adds	r1, r3, #4
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	9103      	str	r1, [sp, #12]
 8005310:	2b00      	cmp	r3, #0
 8005312:	bfbb      	ittet	lt
 8005314:	425b      	neglt	r3, r3
 8005316:	f042 0202 	orrlt.w	r2, r2, #2
 800531a:	9307      	strge	r3, [sp, #28]
 800531c:	9307      	strlt	r3, [sp, #28]
 800531e:	bfb8      	it	lt
 8005320:	9204      	strlt	r2, [sp, #16]
 8005322:	7823      	ldrb	r3, [r4, #0]
 8005324:	2b2e      	cmp	r3, #46	@ 0x2e
 8005326:	d10a      	bne.n	800533e <_vfiprintf_r+0x156>
 8005328:	7863      	ldrb	r3, [r4, #1]
 800532a:	2b2a      	cmp	r3, #42	@ 0x2a
 800532c:	d132      	bne.n	8005394 <_vfiprintf_r+0x1ac>
 800532e:	9b03      	ldr	r3, [sp, #12]
 8005330:	1d1a      	adds	r2, r3, #4
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	9203      	str	r2, [sp, #12]
 8005336:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800533a:	3402      	adds	r4, #2
 800533c:	9305      	str	r3, [sp, #20]
 800533e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005414 <_vfiprintf_r+0x22c>
 8005342:	7821      	ldrb	r1, [r4, #0]
 8005344:	2203      	movs	r2, #3
 8005346:	4650      	mov	r0, sl
 8005348:	f7fa ff4a 	bl	80001e0 <memchr>
 800534c:	b138      	cbz	r0, 800535e <_vfiprintf_r+0x176>
 800534e:	9b04      	ldr	r3, [sp, #16]
 8005350:	eba0 000a 	sub.w	r0, r0, sl
 8005354:	2240      	movs	r2, #64	@ 0x40
 8005356:	4082      	lsls	r2, r0
 8005358:	4313      	orrs	r3, r2
 800535a:	3401      	adds	r4, #1
 800535c:	9304      	str	r3, [sp, #16]
 800535e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005362:	4829      	ldr	r0, [pc, #164]	@ (8005408 <_vfiprintf_r+0x220>)
 8005364:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005368:	2206      	movs	r2, #6
 800536a:	f7fa ff39 	bl	80001e0 <memchr>
 800536e:	2800      	cmp	r0, #0
 8005370:	d03f      	beq.n	80053f2 <_vfiprintf_r+0x20a>
 8005372:	4b26      	ldr	r3, [pc, #152]	@ (800540c <_vfiprintf_r+0x224>)
 8005374:	bb1b      	cbnz	r3, 80053be <_vfiprintf_r+0x1d6>
 8005376:	9b03      	ldr	r3, [sp, #12]
 8005378:	3307      	adds	r3, #7
 800537a:	f023 0307 	bic.w	r3, r3, #7
 800537e:	3308      	adds	r3, #8
 8005380:	9303      	str	r3, [sp, #12]
 8005382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005384:	443b      	add	r3, r7
 8005386:	9309      	str	r3, [sp, #36]	@ 0x24
 8005388:	e76a      	b.n	8005260 <_vfiprintf_r+0x78>
 800538a:	fb0c 3202 	mla	r2, ip, r2, r3
 800538e:	460c      	mov	r4, r1
 8005390:	2001      	movs	r0, #1
 8005392:	e7a8      	b.n	80052e6 <_vfiprintf_r+0xfe>
 8005394:	2300      	movs	r3, #0
 8005396:	3401      	adds	r4, #1
 8005398:	9305      	str	r3, [sp, #20]
 800539a:	4619      	mov	r1, r3
 800539c:	f04f 0c0a 	mov.w	ip, #10
 80053a0:	4620      	mov	r0, r4
 80053a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053a6:	3a30      	subs	r2, #48	@ 0x30
 80053a8:	2a09      	cmp	r2, #9
 80053aa:	d903      	bls.n	80053b4 <_vfiprintf_r+0x1cc>
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0c6      	beq.n	800533e <_vfiprintf_r+0x156>
 80053b0:	9105      	str	r1, [sp, #20]
 80053b2:	e7c4      	b.n	800533e <_vfiprintf_r+0x156>
 80053b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80053b8:	4604      	mov	r4, r0
 80053ba:	2301      	movs	r3, #1
 80053bc:	e7f0      	b.n	80053a0 <_vfiprintf_r+0x1b8>
 80053be:	ab03      	add	r3, sp, #12
 80053c0:	9300      	str	r3, [sp, #0]
 80053c2:	462a      	mov	r2, r5
 80053c4:	4b12      	ldr	r3, [pc, #72]	@ (8005410 <_vfiprintf_r+0x228>)
 80053c6:	a904      	add	r1, sp, #16
 80053c8:	4630      	mov	r0, r6
 80053ca:	f7fd fdcf 	bl	8002f6c <_printf_float>
 80053ce:	4607      	mov	r7, r0
 80053d0:	1c78      	adds	r0, r7, #1
 80053d2:	d1d6      	bne.n	8005382 <_vfiprintf_r+0x19a>
 80053d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80053d6:	07d9      	lsls	r1, r3, #31
 80053d8:	d405      	bmi.n	80053e6 <_vfiprintf_r+0x1fe>
 80053da:	89ab      	ldrh	r3, [r5, #12]
 80053dc:	059a      	lsls	r2, r3, #22
 80053de:	d402      	bmi.n	80053e6 <_vfiprintf_r+0x1fe>
 80053e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80053e2:	f7fe fc01 	bl	8003be8 <__retarget_lock_release_recursive>
 80053e6:	89ab      	ldrh	r3, [r5, #12]
 80053e8:	065b      	lsls	r3, r3, #25
 80053ea:	f53f af1f 	bmi.w	800522c <_vfiprintf_r+0x44>
 80053ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80053f0:	e71e      	b.n	8005230 <_vfiprintf_r+0x48>
 80053f2:	ab03      	add	r3, sp, #12
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	462a      	mov	r2, r5
 80053f8:	4b05      	ldr	r3, [pc, #20]	@ (8005410 <_vfiprintf_r+0x228>)
 80053fa:	a904      	add	r1, sp, #16
 80053fc:	4630      	mov	r0, r6
 80053fe:	f7fe f84d 	bl	800349c <_printf_i>
 8005402:	e7e4      	b.n	80053ce <_vfiprintf_r+0x1e6>
 8005404:	08005982 	.word	0x08005982
 8005408:	0800598c 	.word	0x0800598c
 800540c:	08002f6d 	.word	0x08002f6d
 8005410:	080051c3 	.word	0x080051c3
 8005414:	08005988 	.word	0x08005988

08005418 <__sflush_r>:
 8005418:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800541c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005420:	0716      	lsls	r6, r2, #28
 8005422:	4605      	mov	r5, r0
 8005424:	460c      	mov	r4, r1
 8005426:	d454      	bmi.n	80054d2 <__sflush_r+0xba>
 8005428:	684b      	ldr	r3, [r1, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	dc02      	bgt.n	8005434 <__sflush_r+0x1c>
 800542e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005430:	2b00      	cmp	r3, #0
 8005432:	dd48      	ble.n	80054c6 <__sflush_r+0xae>
 8005434:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005436:	2e00      	cmp	r6, #0
 8005438:	d045      	beq.n	80054c6 <__sflush_r+0xae>
 800543a:	2300      	movs	r3, #0
 800543c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005440:	682f      	ldr	r7, [r5, #0]
 8005442:	6a21      	ldr	r1, [r4, #32]
 8005444:	602b      	str	r3, [r5, #0]
 8005446:	d030      	beq.n	80054aa <__sflush_r+0x92>
 8005448:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800544a:	89a3      	ldrh	r3, [r4, #12]
 800544c:	0759      	lsls	r1, r3, #29
 800544e:	d505      	bpl.n	800545c <__sflush_r+0x44>
 8005450:	6863      	ldr	r3, [r4, #4]
 8005452:	1ad2      	subs	r2, r2, r3
 8005454:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005456:	b10b      	cbz	r3, 800545c <__sflush_r+0x44>
 8005458:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800545a:	1ad2      	subs	r2, r2, r3
 800545c:	2300      	movs	r3, #0
 800545e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005460:	6a21      	ldr	r1, [r4, #32]
 8005462:	4628      	mov	r0, r5
 8005464:	47b0      	blx	r6
 8005466:	1c43      	adds	r3, r0, #1
 8005468:	89a3      	ldrh	r3, [r4, #12]
 800546a:	d106      	bne.n	800547a <__sflush_r+0x62>
 800546c:	6829      	ldr	r1, [r5, #0]
 800546e:	291d      	cmp	r1, #29
 8005470:	d82b      	bhi.n	80054ca <__sflush_r+0xb2>
 8005472:	4a2a      	ldr	r2, [pc, #168]	@ (800551c <__sflush_r+0x104>)
 8005474:	40ca      	lsrs	r2, r1
 8005476:	07d6      	lsls	r6, r2, #31
 8005478:	d527      	bpl.n	80054ca <__sflush_r+0xb2>
 800547a:	2200      	movs	r2, #0
 800547c:	6062      	str	r2, [r4, #4]
 800547e:	04d9      	lsls	r1, r3, #19
 8005480:	6922      	ldr	r2, [r4, #16]
 8005482:	6022      	str	r2, [r4, #0]
 8005484:	d504      	bpl.n	8005490 <__sflush_r+0x78>
 8005486:	1c42      	adds	r2, r0, #1
 8005488:	d101      	bne.n	800548e <__sflush_r+0x76>
 800548a:	682b      	ldr	r3, [r5, #0]
 800548c:	b903      	cbnz	r3, 8005490 <__sflush_r+0x78>
 800548e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005490:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005492:	602f      	str	r7, [r5, #0]
 8005494:	b1b9      	cbz	r1, 80054c6 <__sflush_r+0xae>
 8005496:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800549a:	4299      	cmp	r1, r3
 800549c:	d002      	beq.n	80054a4 <__sflush_r+0x8c>
 800549e:	4628      	mov	r0, r5
 80054a0:	f7ff f9fe 	bl	80048a0 <_free_r>
 80054a4:	2300      	movs	r3, #0
 80054a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80054a8:	e00d      	b.n	80054c6 <__sflush_r+0xae>
 80054aa:	2301      	movs	r3, #1
 80054ac:	4628      	mov	r0, r5
 80054ae:	47b0      	blx	r6
 80054b0:	4602      	mov	r2, r0
 80054b2:	1c50      	adds	r0, r2, #1
 80054b4:	d1c9      	bne.n	800544a <__sflush_r+0x32>
 80054b6:	682b      	ldr	r3, [r5, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d0c6      	beq.n	800544a <__sflush_r+0x32>
 80054bc:	2b1d      	cmp	r3, #29
 80054be:	d001      	beq.n	80054c4 <__sflush_r+0xac>
 80054c0:	2b16      	cmp	r3, #22
 80054c2:	d11e      	bne.n	8005502 <__sflush_r+0xea>
 80054c4:	602f      	str	r7, [r5, #0]
 80054c6:	2000      	movs	r0, #0
 80054c8:	e022      	b.n	8005510 <__sflush_r+0xf8>
 80054ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054ce:	b21b      	sxth	r3, r3
 80054d0:	e01b      	b.n	800550a <__sflush_r+0xf2>
 80054d2:	690f      	ldr	r7, [r1, #16]
 80054d4:	2f00      	cmp	r7, #0
 80054d6:	d0f6      	beq.n	80054c6 <__sflush_r+0xae>
 80054d8:	0793      	lsls	r3, r2, #30
 80054da:	680e      	ldr	r6, [r1, #0]
 80054dc:	bf08      	it	eq
 80054de:	694b      	ldreq	r3, [r1, #20]
 80054e0:	600f      	str	r7, [r1, #0]
 80054e2:	bf18      	it	ne
 80054e4:	2300      	movne	r3, #0
 80054e6:	eba6 0807 	sub.w	r8, r6, r7
 80054ea:	608b      	str	r3, [r1, #8]
 80054ec:	f1b8 0f00 	cmp.w	r8, #0
 80054f0:	dde9      	ble.n	80054c6 <__sflush_r+0xae>
 80054f2:	6a21      	ldr	r1, [r4, #32]
 80054f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80054f6:	4643      	mov	r3, r8
 80054f8:	463a      	mov	r2, r7
 80054fa:	4628      	mov	r0, r5
 80054fc:	47b0      	blx	r6
 80054fe:	2800      	cmp	r0, #0
 8005500:	dc08      	bgt.n	8005514 <__sflush_r+0xfc>
 8005502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005506:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800550a:	81a3      	strh	r3, [r4, #12]
 800550c:	f04f 30ff 	mov.w	r0, #4294967295
 8005510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005514:	4407      	add	r7, r0
 8005516:	eba8 0800 	sub.w	r8, r8, r0
 800551a:	e7e7      	b.n	80054ec <__sflush_r+0xd4>
 800551c:	20400001 	.word	0x20400001

08005520 <_fflush_r>:
 8005520:	b538      	push	{r3, r4, r5, lr}
 8005522:	690b      	ldr	r3, [r1, #16]
 8005524:	4605      	mov	r5, r0
 8005526:	460c      	mov	r4, r1
 8005528:	b913      	cbnz	r3, 8005530 <_fflush_r+0x10>
 800552a:	2500      	movs	r5, #0
 800552c:	4628      	mov	r0, r5
 800552e:	bd38      	pop	{r3, r4, r5, pc}
 8005530:	b118      	cbz	r0, 800553a <_fflush_r+0x1a>
 8005532:	6a03      	ldr	r3, [r0, #32]
 8005534:	b90b      	cbnz	r3, 800553a <_fflush_r+0x1a>
 8005536:	f7fe f95b 	bl	80037f0 <__sinit>
 800553a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d0f3      	beq.n	800552a <_fflush_r+0xa>
 8005542:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005544:	07d0      	lsls	r0, r2, #31
 8005546:	d404      	bmi.n	8005552 <_fflush_r+0x32>
 8005548:	0599      	lsls	r1, r3, #22
 800554a:	d402      	bmi.n	8005552 <_fflush_r+0x32>
 800554c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800554e:	f7fe fb4a 	bl	8003be6 <__retarget_lock_acquire_recursive>
 8005552:	4628      	mov	r0, r5
 8005554:	4621      	mov	r1, r4
 8005556:	f7ff ff5f 	bl	8005418 <__sflush_r>
 800555a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800555c:	07da      	lsls	r2, r3, #31
 800555e:	4605      	mov	r5, r0
 8005560:	d4e4      	bmi.n	800552c <_fflush_r+0xc>
 8005562:	89a3      	ldrh	r3, [r4, #12]
 8005564:	059b      	lsls	r3, r3, #22
 8005566:	d4e1      	bmi.n	800552c <_fflush_r+0xc>
 8005568:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800556a:	f7fe fb3d 	bl	8003be8 <__retarget_lock_release_recursive>
 800556e:	e7dd      	b.n	800552c <_fflush_r+0xc>

08005570 <__swhatbuf_r>:
 8005570:	b570      	push	{r4, r5, r6, lr}
 8005572:	460c      	mov	r4, r1
 8005574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005578:	2900      	cmp	r1, #0
 800557a:	b096      	sub	sp, #88	@ 0x58
 800557c:	4615      	mov	r5, r2
 800557e:	461e      	mov	r6, r3
 8005580:	da0d      	bge.n	800559e <__swhatbuf_r+0x2e>
 8005582:	89a3      	ldrh	r3, [r4, #12]
 8005584:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005588:	f04f 0100 	mov.w	r1, #0
 800558c:	bf14      	ite	ne
 800558e:	2340      	movne	r3, #64	@ 0x40
 8005590:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005594:	2000      	movs	r0, #0
 8005596:	6031      	str	r1, [r6, #0]
 8005598:	602b      	str	r3, [r5, #0]
 800559a:	b016      	add	sp, #88	@ 0x58
 800559c:	bd70      	pop	{r4, r5, r6, pc}
 800559e:	466a      	mov	r2, sp
 80055a0:	f000 f848 	bl	8005634 <_fstat_r>
 80055a4:	2800      	cmp	r0, #0
 80055a6:	dbec      	blt.n	8005582 <__swhatbuf_r+0x12>
 80055a8:	9901      	ldr	r1, [sp, #4]
 80055aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80055ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80055b2:	4259      	negs	r1, r3
 80055b4:	4159      	adcs	r1, r3
 80055b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055ba:	e7eb      	b.n	8005594 <__swhatbuf_r+0x24>

080055bc <__smakebuf_r>:
 80055bc:	898b      	ldrh	r3, [r1, #12]
 80055be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055c0:	079d      	lsls	r5, r3, #30
 80055c2:	4606      	mov	r6, r0
 80055c4:	460c      	mov	r4, r1
 80055c6:	d507      	bpl.n	80055d8 <__smakebuf_r+0x1c>
 80055c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80055cc:	6023      	str	r3, [r4, #0]
 80055ce:	6123      	str	r3, [r4, #16]
 80055d0:	2301      	movs	r3, #1
 80055d2:	6163      	str	r3, [r4, #20]
 80055d4:	b003      	add	sp, #12
 80055d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055d8:	ab01      	add	r3, sp, #4
 80055da:	466a      	mov	r2, sp
 80055dc:	f7ff ffc8 	bl	8005570 <__swhatbuf_r>
 80055e0:	9f00      	ldr	r7, [sp, #0]
 80055e2:	4605      	mov	r5, r0
 80055e4:	4639      	mov	r1, r7
 80055e6:	4630      	mov	r0, r6
 80055e8:	f7ff f9ce 	bl	8004988 <_malloc_r>
 80055ec:	b948      	cbnz	r0, 8005602 <__smakebuf_r+0x46>
 80055ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055f2:	059a      	lsls	r2, r3, #22
 80055f4:	d4ee      	bmi.n	80055d4 <__smakebuf_r+0x18>
 80055f6:	f023 0303 	bic.w	r3, r3, #3
 80055fa:	f043 0302 	orr.w	r3, r3, #2
 80055fe:	81a3      	strh	r3, [r4, #12]
 8005600:	e7e2      	b.n	80055c8 <__smakebuf_r+0xc>
 8005602:	89a3      	ldrh	r3, [r4, #12]
 8005604:	6020      	str	r0, [r4, #0]
 8005606:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800560a:	81a3      	strh	r3, [r4, #12]
 800560c:	9b01      	ldr	r3, [sp, #4]
 800560e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005612:	b15b      	cbz	r3, 800562c <__smakebuf_r+0x70>
 8005614:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005618:	4630      	mov	r0, r6
 800561a:	f000 f81d 	bl	8005658 <_isatty_r>
 800561e:	b128      	cbz	r0, 800562c <__smakebuf_r+0x70>
 8005620:	89a3      	ldrh	r3, [r4, #12]
 8005622:	f023 0303 	bic.w	r3, r3, #3
 8005626:	f043 0301 	orr.w	r3, r3, #1
 800562a:	81a3      	strh	r3, [r4, #12]
 800562c:	89a3      	ldrh	r3, [r4, #12]
 800562e:	431d      	orrs	r5, r3
 8005630:	81a5      	strh	r5, [r4, #12]
 8005632:	e7cf      	b.n	80055d4 <__smakebuf_r+0x18>

08005634 <_fstat_r>:
 8005634:	b538      	push	{r3, r4, r5, lr}
 8005636:	4d07      	ldr	r5, [pc, #28]	@ (8005654 <_fstat_r+0x20>)
 8005638:	2300      	movs	r3, #0
 800563a:	4604      	mov	r4, r0
 800563c:	4608      	mov	r0, r1
 800563e:	4611      	mov	r1, r2
 8005640:	602b      	str	r3, [r5, #0]
 8005642:	f7fb fe97 	bl	8001374 <_fstat>
 8005646:	1c43      	adds	r3, r0, #1
 8005648:	d102      	bne.n	8005650 <_fstat_r+0x1c>
 800564a:	682b      	ldr	r3, [r5, #0]
 800564c:	b103      	cbz	r3, 8005650 <_fstat_r+0x1c>
 800564e:	6023      	str	r3, [r4, #0]
 8005650:	bd38      	pop	{r3, r4, r5, pc}
 8005652:	bf00      	nop
 8005654:	2000038c 	.word	0x2000038c

08005658 <_isatty_r>:
 8005658:	b538      	push	{r3, r4, r5, lr}
 800565a:	4d06      	ldr	r5, [pc, #24]	@ (8005674 <_isatty_r+0x1c>)
 800565c:	2300      	movs	r3, #0
 800565e:	4604      	mov	r4, r0
 8005660:	4608      	mov	r0, r1
 8005662:	602b      	str	r3, [r5, #0]
 8005664:	f7fb fe96 	bl	8001394 <_isatty>
 8005668:	1c43      	adds	r3, r0, #1
 800566a:	d102      	bne.n	8005672 <_isatty_r+0x1a>
 800566c:	682b      	ldr	r3, [r5, #0]
 800566e:	b103      	cbz	r3, 8005672 <_isatty_r+0x1a>
 8005670:	6023      	str	r3, [r4, #0]
 8005672:	bd38      	pop	{r3, r4, r5, pc}
 8005674:	2000038c 	.word	0x2000038c

08005678 <_sbrk_r>:
 8005678:	b538      	push	{r3, r4, r5, lr}
 800567a:	4d06      	ldr	r5, [pc, #24]	@ (8005694 <_sbrk_r+0x1c>)
 800567c:	2300      	movs	r3, #0
 800567e:	4604      	mov	r4, r0
 8005680:	4608      	mov	r0, r1
 8005682:	602b      	str	r3, [r5, #0]
 8005684:	f7fb fe9e 	bl	80013c4 <_sbrk>
 8005688:	1c43      	adds	r3, r0, #1
 800568a:	d102      	bne.n	8005692 <_sbrk_r+0x1a>
 800568c:	682b      	ldr	r3, [r5, #0]
 800568e:	b103      	cbz	r3, 8005692 <_sbrk_r+0x1a>
 8005690:	6023      	str	r3, [r4, #0]
 8005692:	bd38      	pop	{r3, r4, r5, pc}
 8005694:	2000038c 	.word	0x2000038c

08005698 <memcpy>:
 8005698:	440a      	add	r2, r1
 800569a:	4291      	cmp	r1, r2
 800569c:	f100 33ff 	add.w	r3, r0, #4294967295
 80056a0:	d100      	bne.n	80056a4 <memcpy+0xc>
 80056a2:	4770      	bx	lr
 80056a4:	b510      	push	{r4, lr}
 80056a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056ae:	4291      	cmp	r1, r2
 80056b0:	d1f9      	bne.n	80056a6 <memcpy+0xe>
 80056b2:	bd10      	pop	{r4, pc}

080056b4 <__assert_func>:
 80056b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80056b6:	4614      	mov	r4, r2
 80056b8:	461a      	mov	r2, r3
 80056ba:	4b09      	ldr	r3, [pc, #36]	@ (80056e0 <__assert_func+0x2c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4605      	mov	r5, r0
 80056c0:	68d8      	ldr	r0, [r3, #12]
 80056c2:	b14c      	cbz	r4, 80056d8 <__assert_func+0x24>
 80056c4:	4b07      	ldr	r3, [pc, #28]	@ (80056e4 <__assert_func+0x30>)
 80056c6:	9100      	str	r1, [sp, #0]
 80056c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80056cc:	4906      	ldr	r1, [pc, #24]	@ (80056e8 <__assert_func+0x34>)
 80056ce:	462b      	mov	r3, r5
 80056d0:	f000 f842 	bl	8005758 <fiprintf>
 80056d4:	f000 f852 	bl	800577c <abort>
 80056d8:	4b04      	ldr	r3, [pc, #16]	@ (80056ec <__assert_func+0x38>)
 80056da:	461c      	mov	r4, r3
 80056dc:	e7f3      	b.n	80056c6 <__assert_func+0x12>
 80056de:	bf00      	nop
 80056e0:	2000001c 	.word	0x2000001c
 80056e4:	0800599d 	.word	0x0800599d
 80056e8:	080059aa 	.word	0x080059aa
 80056ec:	080059d8 	.word	0x080059d8

080056f0 <_calloc_r>:
 80056f0:	b570      	push	{r4, r5, r6, lr}
 80056f2:	fba1 5402 	umull	r5, r4, r1, r2
 80056f6:	b934      	cbnz	r4, 8005706 <_calloc_r+0x16>
 80056f8:	4629      	mov	r1, r5
 80056fa:	f7ff f945 	bl	8004988 <_malloc_r>
 80056fe:	4606      	mov	r6, r0
 8005700:	b928      	cbnz	r0, 800570e <_calloc_r+0x1e>
 8005702:	4630      	mov	r0, r6
 8005704:	bd70      	pop	{r4, r5, r6, pc}
 8005706:	220c      	movs	r2, #12
 8005708:	6002      	str	r2, [r0, #0]
 800570a:	2600      	movs	r6, #0
 800570c:	e7f9      	b.n	8005702 <_calloc_r+0x12>
 800570e:	462a      	mov	r2, r5
 8005710:	4621      	mov	r1, r4
 8005712:	f7fe f9eb 	bl	8003aec <memset>
 8005716:	e7f4      	b.n	8005702 <_calloc_r+0x12>

08005718 <__ascii_mbtowc>:
 8005718:	b082      	sub	sp, #8
 800571a:	b901      	cbnz	r1, 800571e <__ascii_mbtowc+0x6>
 800571c:	a901      	add	r1, sp, #4
 800571e:	b142      	cbz	r2, 8005732 <__ascii_mbtowc+0x1a>
 8005720:	b14b      	cbz	r3, 8005736 <__ascii_mbtowc+0x1e>
 8005722:	7813      	ldrb	r3, [r2, #0]
 8005724:	600b      	str	r3, [r1, #0]
 8005726:	7812      	ldrb	r2, [r2, #0]
 8005728:	1e10      	subs	r0, r2, #0
 800572a:	bf18      	it	ne
 800572c:	2001      	movne	r0, #1
 800572e:	b002      	add	sp, #8
 8005730:	4770      	bx	lr
 8005732:	4610      	mov	r0, r2
 8005734:	e7fb      	b.n	800572e <__ascii_mbtowc+0x16>
 8005736:	f06f 0001 	mvn.w	r0, #1
 800573a:	e7f8      	b.n	800572e <__ascii_mbtowc+0x16>

0800573c <__ascii_wctomb>:
 800573c:	4603      	mov	r3, r0
 800573e:	4608      	mov	r0, r1
 8005740:	b141      	cbz	r1, 8005754 <__ascii_wctomb+0x18>
 8005742:	2aff      	cmp	r2, #255	@ 0xff
 8005744:	d904      	bls.n	8005750 <__ascii_wctomb+0x14>
 8005746:	228a      	movs	r2, #138	@ 0x8a
 8005748:	601a      	str	r2, [r3, #0]
 800574a:	f04f 30ff 	mov.w	r0, #4294967295
 800574e:	4770      	bx	lr
 8005750:	700a      	strb	r2, [r1, #0]
 8005752:	2001      	movs	r0, #1
 8005754:	4770      	bx	lr
	...

08005758 <fiprintf>:
 8005758:	b40e      	push	{r1, r2, r3}
 800575a:	b503      	push	{r0, r1, lr}
 800575c:	4601      	mov	r1, r0
 800575e:	ab03      	add	r3, sp, #12
 8005760:	4805      	ldr	r0, [pc, #20]	@ (8005778 <fiprintf+0x20>)
 8005762:	f853 2b04 	ldr.w	r2, [r3], #4
 8005766:	6800      	ldr	r0, [r0, #0]
 8005768:	9301      	str	r3, [sp, #4]
 800576a:	f7ff fd3d 	bl	80051e8 <_vfiprintf_r>
 800576e:	b002      	add	sp, #8
 8005770:	f85d eb04 	ldr.w	lr, [sp], #4
 8005774:	b003      	add	sp, #12
 8005776:	4770      	bx	lr
 8005778:	2000001c 	.word	0x2000001c

0800577c <abort>:
 800577c:	b508      	push	{r3, lr}
 800577e:	2006      	movs	r0, #6
 8005780:	f000 f82c 	bl	80057dc <raise>
 8005784:	2001      	movs	r0, #1
 8005786:	f7fb fda5 	bl	80012d4 <_exit>

0800578a <_raise_r>:
 800578a:	291f      	cmp	r1, #31
 800578c:	b538      	push	{r3, r4, r5, lr}
 800578e:	4605      	mov	r5, r0
 8005790:	460c      	mov	r4, r1
 8005792:	d904      	bls.n	800579e <_raise_r+0x14>
 8005794:	2316      	movs	r3, #22
 8005796:	6003      	str	r3, [r0, #0]
 8005798:	f04f 30ff 	mov.w	r0, #4294967295
 800579c:	bd38      	pop	{r3, r4, r5, pc}
 800579e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80057a0:	b112      	cbz	r2, 80057a8 <_raise_r+0x1e>
 80057a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80057a6:	b94b      	cbnz	r3, 80057bc <_raise_r+0x32>
 80057a8:	4628      	mov	r0, r5
 80057aa:	f000 f831 	bl	8005810 <_getpid_r>
 80057ae:	4622      	mov	r2, r4
 80057b0:	4601      	mov	r1, r0
 80057b2:	4628      	mov	r0, r5
 80057b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057b8:	f000 b818 	b.w	80057ec <_kill_r>
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d00a      	beq.n	80057d6 <_raise_r+0x4c>
 80057c0:	1c59      	adds	r1, r3, #1
 80057c2:	d103      	bne.n	80057cc <_raise_r+0x42>
 80057c4:	2316      	movs	r3, #22
 80057c6:	6003      	str	r3, [r0, #0]
 80057c8:	2001      	movs	r0, #1
 80057ca:	e7e7      	b.n	800579c <_raise_r+0x12>
 80057cc:	2100      	movs	r1, #0
 80057ce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80057d2:	4620      	mov	r0, r4
 80057d4:	4798      	blx	r3
 80057d6:	2000      	movs	r0, #0
 80057d8:	e7e0      	b.n	800579c <_raise_r+0x12>
	...

080057dc <raise>:
 80057dc:	4b02      	ldr	r3, [pc, #8]	@ (80057e8 <raise+0xc>)
 80057de:	4601      	mov	r1, r0
 80057e0:	6818      	ldr	r0, [r3, #0]
 80057e2:	f7ff bfd2 	b.w	800578a <_raise_r>
 80057e6:	bf00      	nop
 80057e8:	2000001c 	.word	0x2000001c

080057ec <_kill_r>:
 80057ec:	b538      	push	{r3, r4, r5, lr}
 80057ee:	4d07      	ldr	r5, [pc, #28]	@ (800580c <_kill_r+0x20>)
 80057f0:	2300      	movs	r3, #0
 80057f2:	4604      	mov	r4, r0
 80057f4:	4608      	mov	r0, r1
 80057f6:	4611      	mov	r1, r2
 80057f8:	602b      	str	r3, [r5, #0]
 80057fa:	f7fb fd5b 	bl	80012b4 <_kill>
 80057fe:	1c43      	adds	r3, r0, #1
 8005800:	d102      	bne.n	8005808 <_kill_r+0x1c>
 8005802:	682b      	ldr	r3, [r5, #0]
 8005804:	b103      	cbz	r3, 8005808 <_kill_r+0x1c>
 8005806:	6023      	str	r3, [r4, #0]
 8005808:	bd38      	pop	{r3, r4, r5, pc}
 800580a:	bf00      	nop
 800580c:	2000038c 	.word	0x2000038c

08005810 <_getpid_r>:
 8005810:	f7fb bd48 	b.w	80012a4 <_getpid>

08005814 <_init>:
 8005814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005816:	bf00      	nop
 8005818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800581a:	bc08      	pop	{r3}
 800581c:	469e      	mov	lr, r3
 800581e:	4770      	bx	lr

08005820 <_fini>:
 8005820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005822:	bf00      	nop
 8005824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005826:	bc08      	pop	{r3}
 8005828:	469e      	mov	lr, r3
 800582a:	4770      	bx	lr
