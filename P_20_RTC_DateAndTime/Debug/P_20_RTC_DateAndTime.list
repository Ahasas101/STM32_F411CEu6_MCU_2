
P_20_RTC_DateAndTime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024cc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800266c  0800266c  0000366c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002748  08002748  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002748  08002748  00003748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002750  08002750  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002750  08002750  00003750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002754  08002754  00003754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002758  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000068  080027c0  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  080027c0  000041f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000057e5  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000157e  00000000  00000000  0000987d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005f0  00000000  00000000  0000ae00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000044c  00000000  00000000  0000b3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016bfd  00000000  00000000  0000b83c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007b09  00000000  00000000  00022439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008acea  00000000  00000000  00029f42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4c2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001db4  00000000  00000000  000b4c70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000b6a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002654 	.word	0x08002654

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08002654 	.word	0x08002654

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <SysTick_Handler>:
#include "stm32f4xx_hal.h"

void SysTick_Handler(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000284:	f000 fa4a 	bl	800071c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000288:	f000 fb79 	bl	800097e <HAL_SYSTICK_IRQHandler>
}
 800028c:	bf00      	nop
 800028e:	bd80      	pop	{r7, pc}

08000290 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000294:	2001      	movs	r0, #1
 8000296:	f000 fd03 	bl	8000ca0 <HAL_GPIO_EXTI_IRQHandler>
}
 800029a:	bf00      	nop
 800029c:	bd80      	pop	{r7, pc}
	...

080002a0 <main>:
void RTC_CalenderConfig(void);
void button_init(void);
char* GetDayOfWeek(uint8_t day);

int main(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	HAL_Init();
 80002a4:	f000 f9e0 	bl	8000668 <HAL_Init>
	RTC_Init();
 80002a8:	f000 f80a 	bl	80002c0 <RTC_Init>
	button_init();
 80002ac:	f000 f828 	bl	8000300 <button_init>
	//RTC_CalenderConfig();
	printf("Hello...\n");
 80002b0:	4802      	ldr	r0, [pc, #8]	@ (80002bc <main+0x1c>)
 80002b2:	f001 fb6d 	bl	8001990 <puts>
	while(1);
 80002b6:	bf00      	nop
 80002b8:	e7fd      	b.n	80002b6 <main+0x16>
 80002ba:	bf00      	nop
 80002bc:	0800266c 	.word	0x0800266c

080002c0 <RTC_Init>:
}

void RTC_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	rtc.Instance = RTC;
 80002c4:	4b0c      	ldr	r3, [pc, #48]	@ (80002f8 <RTC_Init+0x38>)
 80002c6:	4a0d      	ldr	r2, [pc, #52]	@ (80002fc <RTC_Init+0x3c>)
 80002c8:	601a      	str	r2, [r3, #0]
	rtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80002ca:	4b0b      	ldr	r3, [pc, #44]	@ (80002f8 <RTC_Init+0x38>)
 80002cc:	2240      	movs	r2, #64	@ 0x40
 80002ce:	605a      	str	r2, [r3, #4]
	rtc.Init.AsynchPrediv = 0x7F;
 80002d0:	4b09      	ldr	r3, [pc, #36]	@ (80002f8 <RTC_Init+0x38>)
 80002d2:	227f      	movs	r2, #127	@ 0x7f
 80002d4:	609a      	str	r2, [r3, #8]
	rtc.Init.SynchPrediv = 0xFF; // for lse we are using this configuration
 80002d6:	4b08      	ldr	r3, [pc, #32]	@ (80002f8 <RTC_Init+0x38>)
 80002d8:	22ff      	movs	r2, #255	@ 0xff
 80002da:	60da      	str	r2, [r3, #12]
	rtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80002dc:	4b06      	ldr	r3, [pc, #24]	@ (80002f8 <RTC_Init+0x38>)
 80002de:	2200      	movs	r2, #0
 80002e0:	611a      	str	r2, [r3, #16]
	if(HAL_RTC_Init(&rtc) != HAL_OK) Error_Handler();
 80002e2:	4805      	ldr	r0, [pc, #20]	@ (80002f8 <RTC_Init+0x38>)
 80002e4:	f001 f85c 	bl	80013a0 <HAL_RTC_Init>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <RTC_Init+0x32>
 80002ee:	f000 f88d 	bl	800040c <Error_Handler>
}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	20000084 	.word	0x20000084
 80002fc:	40002800 	.word	0x40002800

08000300 <button_init>:

	if(HAL_RTC_SetDate(&rtc, &date, RTC_FORMAT_BIN) != HAL_OK) Error_Handler();
}

void button_init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b086      	sub	sp, #24
 8000304:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000306:	2300      	movs	r3, #0
 8000308:	603b      	str	r3, [r7, #0]
 800030a:	4b13      	ldr	r3, [pc, #76]	@ (8000358 <button_init+0x58>)
 800030c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800030e:	4a12      	ldr	r2, [pc, #72]	@ (8000358 <button_init+0x58>)
 8000310:	f043 0301 	orr.w	r3, r3, #1
 8000314:	6313      	str	r3, [r2, #48]	@ 0x30
 8000316:	4b10      	ldr	r3, [pc, #64]	@ (8000358 <button_init+0x58>)
 8000318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800031a:	f003 0301 	and.w	r3, r3, #1
 800031e:	603b      	str	r3, [r7, #0]
 8000320:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef button;
	button.Pin = GPIO_PIN_0;
 8000322:	2301      	movs	r3, #1
 8000324:	607b      	str	r3, [r7, #4]
	button.Mode = GPIO_MODE_IT_RISING;
 8000326:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800032a:	60bb      	str	r3, [r7, #8]
	button.Pull = GPIO_PULLUP;
 800032c:	2301      	movs	r3, #1
 800032e:	60fb      	str	r3, [r7, #12]
	button.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000330:	2301      	movs	r3, #1
 8000332:	613b      	str	r3, [r7, #16]

	HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 8000334:	2200      	movs	r2, #0
 8000336:	210f      	movs	r1, #15
 8000338:	2006      	movs	r0, #6
 800033a:	f000 faea 	bl	8000912 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800033e:	2006      	movs	r0, #6
 8000340:	f000 fb03 	bl	800094a <HAL_NVIC_EnableIRQ>

	HAL_GPIO_Init(GPIOA, &button);
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	4619      	mov	r1, r3
 8000348:	4804      	ldr	r0, [pc, #16]	@ (800035c <button_init+0x5c>)
 800034a:	f000 fb25 	bl	8000998 <HAL_GPIO_Init>
}
 800034e:	bf00      	nop
 8000350:	3718      	adds	r7, #24
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40023800 	.word	0x40023800
 800035c:	40020000 	.word	0x40020000

08000360 <GetDayOfWeek>:

char* GetDayOfWeek(uint8_t day)
{
 8000360:	b4b0      	push	{r4, r5, r7}
 8000362:	b08b      	sub	sp, #44	@ 0x2c
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	71fb      	strb	r3, [r7, #7]
	char* weekday[] = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};
 800036a:	4b0b      	ldr	r3, [pc, #44]	@ (8000398 <GetDayOfWeek+0x38>)
 800036c:	f107 040c 	add.w	r4, r7, #12
 8000370:	461d      	mov	r5, r3
 8000372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000374:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000376:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800037a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return weekday[day-1];
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	3b01      	subs	r3, #1
 8000382:	009b      	lsls	r3, r3, #2
 8000384:	3328      	adds	r3, #40	@ 0x28
 8000386:	443b      	add	r3, r7
 8000388:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 800038c:	4618      	mov	r0, r3
 800038e:	372c      	adds	r7, #44	@ 0x2c
 8000390:	46bd      	mov	sp, r7
 8000392:	bcb0      	pop	{r4, r5, r7}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	080026bc 	.word	0x080026bc

0800039c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800039c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800039e:	b08b      	sub	sp, #44	@ 0x2c
 80003a0:	af02      	add	r7, sp, #8
 80003a2:	4603      	mov	r3, r0
 80003a4:	80fb      	strh	r3, [r7, #6]
	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;

	HAL_RTC_GetTime(&rtc, &time, RTC_FORMAT_BIN);
 80003a6:	f107 030c 	add.w	r3, r7, #12
 80003aa:	2200      	movs	r2, #0
 80003ac:	4619      	mov	r1, r3
 80003ae:	4814      	ldr	r0, [pc, #80]	@ (8000400 <HAL_GPIO_EXTI_Callback+0x64>)
 80003b0:	f001 f877 	bl	80014a2 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&rtc, &date, RTC_FORMAT_BIN);
 80003b4:	f107 0308 	add.w	r3, r7, #8
 80003b8:	2200      	movs	r2, #0
 80003ba:	4619      	mov	r1, r3
 80003bc:	4810      	ldr	r0, [pc, #64]	@ (8000400 <HAL_GPIO_EXTI_Callback+0x64>)
 80003be:	f001 f8ce 	bl	800155e <HAL_RTC_GetDate>


	printf("Current Time : %d:%d:%d \n", time.Hours, time.Minutes, time.Seconds);
 80003c2:	7b3b      	ldrb	r3, [r7, #12]
 80003c4:	4619      	mov	r1, r3
 80003c6:	7b7b      	ldrb	r3, [r7, #13]
 80003c8:	461a      	mov	r2, r3
 80003ca:	7bbb      	ldrb	r3, [r7, #14]
 80003cc:	480d      	ldr	r0, [pc, #52]	@ (8000404 <HAL_GPIO_EXTI_Callback+0x68>)
 80003ce:	f001 fa77 	bl	80018c0 <iprintf>
	printf("Current Date: %d-%d-%d <%s> \n", date.Date, date.Month, date.Year, GetDayOfWeek(date.WeekDay) );
 80003d2:	7abb      	ldrb	r3, [r7, #10]
 80003d4:	461c      	mov	r4, r3
 80003d6:	7a7b      	ldrb	r3, [r7, #9]
 80003d8:	461d      	mov	r5, r3
 80003da:	7afb      	ldrb	r3, [r7, #11]
 80003dc:	461e      	mov	r6, r3
 80003de:	7a3b      	ldrb	r3, [r7, #8]
 80003e0:	4618      	mov	r0, r3
 80003e2:	f7ff ffbd 	bl	8000360 <GetDayOfWeek>
 80003e6:	4603      	mov	r3, r0
 80003e8:	9300      	str	r3, [sp, #0]
 80003ea:	4633      	mov	r3, r6
 80003ec:	462a      	mov	r2, r5
 80003ee:	4621      	mov	r1, r4
 80003f0:	4805      	ldr	r0, [pc, #20]	@ (8000408 <HAL_GPIO_EXTI_Callback+0x6c>)
 80003f2:	f001 fa65 	bl	80018c0 <iprintf>



}
 80003f6:	bf00      	nop
 80003f8:	3724      	adds	r7, #36	@ 0x24
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003fe:	bf00      	nop
 8000400:	20000084 	.word	0x20000084
 8000404:	080026d8 	.word	0x080026d8
 8000408:	080026f4 	.word	0x080026f4

0800040c <Error_Handler>:

void Error_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
	while(1);
 8000410:	bf00      	nop
 8000412:	e7fd      	b.n	8000410 <Error_Handler+0x4>

08000414 <HAL_RTC_MspInit>:
#include "stm32f4xx_hal.h"

void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b094      	sub	sp, #80	@ 0x50
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
	// 1. Turn on the LSE
  RCC_OscInitTypeDef osc;

  osc.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 800041c:	2304      	movs	r3, #4
 800041e:	623b      	str	r3, [r7, #32]
  osc.LSEState = RCC_LSE_ON;
 8000420:	2301      	movs	r3, #1
 8000422:	62bb      	str	r3, [r7, #40]	@ 0x28
  osc.PLL.PLLState = RCC_PLL_NONE;
 8000424:	2300      	movs	r3, #0
 8000426:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_RCC_OscConfig(&osc);
 8000428:	f107 0320 	add.w	r3, r7, #32
 800042c:	4618      	mov	r0, r3
 800042e:	f000 fc4f 	bl	8000cd0 <HAL_RCC_OscConfig>

  //2. Select the LSE as RTC clock source
  RCC_PeriphCLKInitTypeDef rcc_rtc;
  rcc_rtc.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000432:	2302      	movs	r3, #2
 8000434:	60bb      	str	r3, [r7, #8]
  rcc_rtc.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000436:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800043a:	61bb      	str	r3, [r7, #24]
  HAL_RCCEx_PeriphCLKConfig(&rcc_rtc);
 800043c:	f107 0308 	add.w	r3, r7, #8
 8000440:	4618      	mov	r0, r3
 8000442:	f000 febd 	bl	80011c0 <HAL_RCCEx_PeriphCLKConfig>

  //3. Enable the RTC clock in RCC_BDCR ( it is a backup domain register, it is not changed under reset)
  __HAL_RCC_RTC_ENABLE();
 8000446:	4b03      	ldr	r3, [pc, #12]	@ (8000454 <HAL_RTC_MspInit+0x40>)
 8000448:	2201      	movs	r2, #1
 800044a:	601a      	str	r2, [r3, #0]


}
 800044c:	bf00      	nop
 800044e:	3750      	adds	r7, #80	@ 0x50
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	42470e3c 	.word	0x42470e3c

08000458 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	4603      	mov	r3, r0
 8000460:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000462:	4b0f      	ldr	r3, [pc, #60]	@ (80004a0 <ITM_SendChar+0x48>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a0e      	ldr	r2, [pc, #56]	@ (80004a0 <ITM_SendChar+0x48>)
 8000468:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800046c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800046e:	4b0d      	ldr	r3, [pc, #52]	@ (80004a4 <ITM_SendChar+0x4c>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a0c      	ldr	r2, [pc, #48]	@ (80004a4 <ITM_SendChar+0x4c>)
 8000474:	f043 0301 	orr.w	r3, r3, #1
 8000478:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800047a:	bf00      	nop
 800047c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	2b00      	cmp	r3, #0
 8000488:	d0f8      	beq.n	800047c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800048a:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	6013      	str	r3, [r2, #0]
}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	e000edfc 	.word	0xe000edfc
 80004a4:	e0000e00 	.word	0xe0000e00

080004a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b086      	sub	sp, #24
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	60f8      	str	r0, [r7, #12]
 80004b0:	60b9      	str	r1, [r7, #8]
 80004b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004b4:	2300      	movs	r3, #0
 80004b6:	617b      	str	r3, [r7, #20]
 80004b8:	e00a      	b.n	80004d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004ba:	f3af 8000 	nop.w
 80004be:	4601      	mov	r1, r0
 80004c0:	68bb      	ldr	r3, [r7, #8]
 80004c2:	1c5a      	adds	r2, r3, #1
 80004c4:	60ba      	str	r2, [r7, #8]
 80004c6:	b2ca      	uxtb	r2, r1
 80004c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	3301      	adds	r3, #1
 80004ce:	617b      	str	r3, [r7, #20]
 80004d0:	697a      	ldr	r2, [r7, #20]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	dbf0      	blt.n	80004ba <_read+0x12>
  }

  return len;
 80004d8:	687b      	ldr	r3, [r7, #4]
}
 80004da:	4618      	mov	r0, r3
 80004dc:	3718      	adds	r7, #24
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b086      	sub	sp, #24
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	60f8      	str	r0, [r7, #12]
 80004ea:	60b9      	str	r1, [r7, #8]
 80004ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ee:	2300      	movs	r3, #0
 80004f0:	617b      	str	r3, [r7, #20]
 80004f2:	e009      	b.n	8000508 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 80004f4:	68bb      	ldr	r3, [r7, #8]
 80004f6:	1c5a      	adds	r2, r3, #1
 80004f8:	60ba      	str	r2, [r7, #8]
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff ffab 	bl	8000458 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	3301      	adds	r3, #1
 8000506:	617b      	str	r3, [r7, #20]
 8000508:	697a      	ldr	r2, [r7, #20]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	429a      	cmp	r2, r3
 800050e:	dbf1      	blt.n	80004f4 <_write+0x12>
  }
  return len;
 8000510:	687b      	ldr	r3, [r7, #4]
}
 8000512:	4618      	mov	r0, r3
 8000514:	3718      	adds	r7, #24
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <_close>:

int _close(int file)
{
 800051a:	b480      	push	{r7}
 800051c:	b083      	sub	sp, #12
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000522:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000526:	4618      	mov	r0, r3
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr

08000532 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000532:	b480      	push	{r7}
 8000534:	b083      	sub	sp, #12
 8000536:	af00      	add	r7, sp, #0
 8000538:	6078      	str	r0, [r7, #4]
 800053a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000542:	605a      	str	r2, [r3, #4]
  return 0;
 8000544:	2300      	movs	r3, #0
}
 8000546:	4618      	mov	r0, r3
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr

08000552 <_isatty>:

int _isatty(int file)
{
 8000552:	b480      	push	{r7}
 8000554:	b083      	sub	sp, #12
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800055a:	2301      	movs	r3, #1
}
 800055c:	4618      	mov	r0, r3
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr

08000568 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000574:	2300      	movs	r3, #0
}
 8000576:	4618      	mov	r0, r3
 8000578:	3714      	adds	r7, #20
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
	...

08000584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800058c:	4a14      	ldr	r2, [pc, #80]	@ (80005e0 <_sbrk+0x5c>)
 800058e:	4b15      	ldr	r3, [pc, #84]	@ (80005e4 <_sbrk+0x60>)
 8000590:	1ad3      	subs	r3, r2, r3
 8000592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000598:	4b13      	ldr	r3, [pc, #76]	@ (80005e8 <_sbrk+0x64>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d102      	bne.n	80005a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005a0:	4b11      	ldr	r3, [pc, #68]	@ (80005e8 <_sbrk+0x64>)
 80005a2:	4a12      	ldr	r2, [pc, #72]	@ (80005ec <_sbrk+0x68>)
 80005a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005a6:	4b10      	ldr	r3, [pc, #64]	@ (80005e8 <_sbrk+0x64>)
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4413      	add	r3, r2
 80005ae:	693a      	ldr	r2, [r7, #16]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d207      	bcs.n	80005c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005b4:	f001 fb1a 	bl	8001bec <__errno>
 80005b8:	4603      	mov	r3, r0
 80005ba:	220c      	movs	r2, #12
 80005bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005be:	f04f 33ff 	mov.w	r3, #4294967295
 80005c2:	e009      	b.n	80005d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005c4:	4b08      	ldr	r3, [pc, #32]	@ (80005e8 <_sbrk+0x64>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ca:	4b07      	ldr	r3, [pc, #28]	@ (80005e8 <_sbrk+0x64>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4413      	add	r3, r2
 80005d2:	4a05      	ldr	r2, [pc, #20]	@ (80005e8 <_sbrk+0x64>)
 80005d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005d6:	68fb      	ldr	r3, [r7, #12]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3718      	adds	r7, #24
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20020000 	.word	0x20020000
 80005e4:	00000400 	.word	0x00000400
 80005e8:	200000a4 	.word	0x200000a4
 80005ec:	200001f8 	.word	0x200001f8

080005f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005f4:	4b06      	ldr	r3, [pc, #24]	@ (8000610 <SystemInit+0x20>)
 80005f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005fa:	4a05      	ldr	r2, [pc, #20]	@ (8000610 <SystemInit+0x20>)
 80005fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000600:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000614:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800064c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000618:	f7ff ffea 	bl	80005f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800061c:	480c      	ldr	r0, [pc, #48]	@ (8000650 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800061e:	490d      	ldr	r1, [pc, #52]	@ (8000654 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000620:	4a0d      	ldr	r2, [pc, #52]	@ (8000658 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000624:	e002      	b.n	800062c <LoopCopyDataInit>

08000626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062a:	3304      	adds	r3, #4

0800062c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800062c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000630:	d3f9      	bcc.n	8000626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000632:	4a0a      	ldr	r2, [pc, #40]	@ (800065c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000634:	4c0a      	ldr	r4, [pc, #40]	@ (8000660 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000638:	e001      	b.n	800063e <LoopFillZerobss>

0800063a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800063c:	3204      	adds	r2, #4

0800063e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000640:	d3fb      	bcc.n	800063a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000642:	f001 fad9 	bl	8001bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000646:	f7ff fe2b 	bl	80002a0 <main>
  bx  lr    
 800064a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800064c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000654:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000658:	08002758 	.word	0x08002758
  ldr r2, =_sbss
 800065c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000660:	200001f8 	.word	0x200001f8

08000664 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000664:	e7fe      	b.n	8000664 <ADC_IRQHandler>
	...

08000668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800066c:	4b0e      	ldr	r3, [pc, #56]	@ (80006a8 <HAL_Init+0x40>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a0d      	ldr	r2, [pc, #52]	@ (80006a8 <HAL_Init+0x40>)
 8000672:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000676:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000678:	4b0b      	ldr	r3, [pc, #44]	@ (80006a8 <HAL_Init+0x40>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a0a      	ldr	r2, [pc, #40]	@ (80006a8 <HAL_Init+0x40>)
 800067e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000682:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000684:	4b08      	ldr	r3, [pc, #32]	@ (80006a8 <HAL_Init+0x40>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a07      	ldr	r2, [pc, #28]	@ (80006a8 <HAL_Init+0x40>)
 800068a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800068e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000690:	2003      	movs	r0, #3
 8000692:	f000 f933 	bl	80008fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000696:	200f      	movs	r0, #15
 8000698:	f000 f810 	bl	80006bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800069c:	f000 f806 	bl	80006ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006a0:	2300      	movs	r3, #0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023c00 	.word	0x40023c00

080006ac <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
	...

080006bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <HAL_InitTick+0x54>)
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <HAL_InitTick+0x58>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	4619      	mov	r1, r3
 80006ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 f943 	bl	8000966 <HAL_SYSTICK_Config>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006e6:	2301      	movs	r3, #1
 80006e8:	e00e      	b.n	8000708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2b0f      	cmp	r3, #15
 80006ee:	d80a      	bhi.n	8000706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006f0:	2200      	movs	r2, #0
 80006f2:	6879      	ldr	r1, [r7, #4]
 80006f4:	f04f 30ff 	mov.w	r0, #4294967295
 80006f8:	f000 f90b 	bl	8000912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006fc:	4a06      	ldr	r2, [pc, #24]	@ (8000718 <HAL_InitTick+0x5c>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000702:	2300      	movs	r3, #0
 8000704:	e000      	b.n	8000708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000706:	2301      	movs	r3, #1
}
 8000708:	4618      	mov	r0, r3
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000000 	.word	0x20000000
 8000714:	20000008 	.word	0x20000008
 8000718:	20000004 	.word	0x20000004

0800071c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000720:	4b06      	ldr	r3, [pc, #24]	@ (800073c <HAL_IncTick+0x20>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	461a      	mov	r2, r3
 8000726:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <HAL_IncTick+0x24>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4413      	add	r3, r2
 800072c:	4a04      	ldr	r2, [pc, #16]	@ (8000740 <HAL_IncTick+0x24>)
 800072e:	6013      	str	r3, [r2, #0]
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	20000008 	.word	0x20000008
 8000740:	200000a8 	.word	0x200000a8

08000744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  return uwTick;
 8000748:	4b03      	ldr	r3, [pc, #12]	@ (8000758 <HAL_GetTick+0x14>)
 800074a:	681b      	ldr	r3, [r3, #0]
}
 800074c:	4618      	mov	r0, r3
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	200000a8 	.word	0x200000a8

0800075c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f003 0307 	and.w	r3, r3, #7
 800076a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800076c:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <__NVIC_SetPriorityGrouping+0x44>)
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000772:	68ba      	ldr	r2, [r7, #8]
 8000774:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000778:	4013      	ands	r3, r2
 800077a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000784:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000788:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800078c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800078e:	4a04      	ldr	r2, [pc, #16]	@ (80007a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	60d3      	str	r3, [r2, #12]
}
 8000794:	bf00      	nop
 8000796:	3714      	adds	r7, #20
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a8:	4b04      	ldr	r3, [pc, #16]	@ (80007bc <__NVIC_GetPriorityGrouping+0x18>)
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	0a1b      	lsrs	r3, r3, #8
 80007ae:	f003 0307 	and.w	r3, r3, #7
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	db0b      	blt.n	80007ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	f003 021f 	and.w	r2, r3, #31
 80007d8:	4907      	ldr	r1, [pc, #28]	@ (80007f8 <__NVIC_EnableIRQ+0x38>)
 80007da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007de:	095b      	lsrs	r3, r3, #5
 80007e0:	2001      	movs	r0, #1
 80007e2:	fa00 f202 	lsl.w	r2, r0, r2
 80007e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	e000e100 	.word	0xe000e100

080007fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	6039      	str	r1, [r7, #0]
 8000806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080c:	2b00      	cmp	r3, #0
 800080e:	db0a      	blt.n	8000826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	b2da      	uxtb	r2, r3
 8000814:	490c      	ldr	r1, [pc, #48]	@ (8000848 <__NVIC_SetPriority+0x4c>)
 8000816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081a:	0112      	lsls	r2, r2, #4
 800081c:	b2d2      	uxtb	r2, r2
 800081e:	440b      	add	r3, r1
 8000820:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000824:	e00a      	b.n	800083c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4908      	ldr	r1, [pc, #32]	@ (800084c <__NVIC_SetPriority+0x50>)
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	f003 030f 	and.w	r3, r3, #15
 8000832:	3b04      	subs	r3, #4
 8000834:	0112      	lsls	r2, r2, #4
 8000836:	b2d2      	uxtb	r2, r2
 8000838:	440b      	add	r3, r1
 800083a:	761a      	strb	r2, [r3, #24]
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	e000e100 	.word	0xe000e100
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000850:	b480      	push	{r7}
 8000852:	b089      	sub	sp, #36	@ 0x24
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	f003 0307 	and.w	r3, r3, #7
 8000862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	f1c3 0307 	rsb	r3, r3, #7
 800086a:	2b04      	cmp	r3, #4
 800086c:	bf28      	it	cs
 800086e:	2304      	movcs	r3, #4
 8000870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	3304      	adds	r3, #4
 8000876:	2b06      	cmp	r3, #6
 8000878:	d902      	bls.n	8000880 <NVIC_EncodePriority+0x30>
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	3b03      	subs	r3, #3
 800087e:	e000      	b.n	8000882 <NVIC_EncodePriority+0x32>
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000884:	f04f 32ff 	mov.w	r2, #4294967295
 8000888:	69bb      	ldr	r3, [r7, #24]
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	43da      	mvns	r2, r3
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	401a      	ands	r2, r3
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000898:	f04f 31ff 	mov.w	r1, #4294967295
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	fa01 f303 	lsl.w	r3, r1, r3
 80008a2:	43d9      	mvns	r1, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a8:	4313      	orrs	r3, r2
         );
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3724      	adds	r7, #36	@ 0x24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
	...

080008b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008c8:	d301      	bcc.n	80008ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ca:	2301      	movs	r3, #1
 80008cc:	e00f      	b.n	80008ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ce:	4a0a      	ldr	r2, [pc, #40]	@ (80008f8 <SysTick_Config+0x40>)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008d6:	210f      	movs	r1, #15
 80008d8:	f04f 30ff 	mov.w	r0, #4294967295
 80008dc:	f7ff ff8e 	bl	80007fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e0:	4b05      	ldr	r3, [pc, #20]	@ (80008f8 <SysTick_Config+0x40>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008e6:	4b04      	ldr	r3, [pc, #16]	@ (80008f8 <SysTick_Config+0x40>)
 80008e8:	2207      	movs	r2, #7
 80008ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	e000e010 	.word	0xe000e010

080008fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f7ff ff29 	bl	800075c <__NVIC_SetPriorityGrouping>
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000912:	b580      	push	{r7, lr}
 8000914:	b086      	sub	sp, #24
 8000916:	af00      	add	r7, sp, #0
 8000918:	4603      	mov	r3, r0
 800091a:	60b9      	str	r1, [r7, #8]
 800091c:	607a      	str	r2, [r7, #4]
 800091e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000924:	f7ff ff3e 	bl	80007a4 <__NVIC_GetPriorityGrouping>
 8000928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	68b9      	ldr	r1, [r7, #8]
 800092e:	6978      	ldr	r0, [r7, #20]
 8000930:	f7ff ff8e 	bl	8000850 <NVIC_EncodePriority>
 8000934:	4602      	mov	r2, r0
 8000936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800093a:	4611      	mov	r1, r2
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff ff5d 	bl	80007fc <__NVIC_SetPriority>
}
 8000942:	bf00      	nop
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b082      	sub	sp, #8
 800094e:	af00      	add	r7, sp, #0
 8000950:	4603      	mov	r3, r0
 8000952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff31 	bl	80007c0 <__NVIC_EnableIRQ>
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff ffa2 	bl	80008b8 <SysTick_Config>
 8000974:	4603      	mov	r3, r0
}
 8000976:	4618      	mov	r0, r3
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000982:	f000 f802 	bl	800098a <HAL_SYSTICK_Callback>
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}

0800098a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000998:	b480      	push	{r7}
 800099a:	b089      	sub	sp, #36	@ 0x24
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80009a6:	2300      	movs	r3, #0
 80009a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
 80009b2:	e159      	b.n	8000c68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80009b4:	2201      	movs	r2, #1
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	697a      	ldr	r2, [r7, #20]
 80009c4:	4013      	ands	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	f040 8148 	bne.w	8000c62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	f003 0303 	and.w	r3, r3, #3
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d005      	beq.n	80009ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80009e6:	2b02      	cmp	r3, #2
 80009e8:	d130      	bne.n	8000a4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	2203      	movs	r2, #3
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	43db      	mvns	r3, r3
 80009fc:	69ba      	ldr	r2, [r7, #24]
 80009fe:	4013      	ands	r3, r2
 8000a00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	68da      	ldr	r2, [r3, #12]
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0e:	69ba      	ldr	r2, [r7, #24]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	69ba      	ldr	r2, [r7, #24]
 8000a18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a20:	2201      	movs	r2, #1
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	69ba      	ldr	r2, [r7, #24]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	091b      	lsrs	r3, r3, #4
 8000a36:	f003 0201 	and.w	r2, r3, #1
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	69ba      	ldr	r2, [r7, #24]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	69ba      	ldr	r2, [r7, #24]
 8000a4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f003 0303 	and.w	r3, r3, #3
 8000a54:	2b03      	cmp	r3, #3
 8000a56:	d017      	beq.n	8000a88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	2203      	movs	r2, #3
 8000a64:	fa02 f303 	lsl.w	r3, r2, r3
 8000a68:	43db      	mvns	r3, r3
 8000a6a:	69ba      	ldr	r2, [r7, #24]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	689a      	ldr	r2, [r3, #8]
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	69ba      	ldr	r2, [r7, #24]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f003 0303 	and.w	r3, r3, #3
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	d123      	bne.n	8000adc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	08da      	lsrs	r2, r3, #3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3208      	adds	r2, #8
 8000a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	f003 0307 	and.w	r3, r3, #7
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	220f      	movs	r2, #15
 8000aac:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	69ba      	ldr	r2, [r7, #24]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	691a      	ldr	r2, [r3, #16]
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	08da      	lsrs	r2, r3, #3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	3208      	adds	r2, #8
 8000ad6:	69b9      	ldr	r1, [r7, #24]
 8000ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	2203      	movs	r2, #3
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	43db      	mvns	r3, r3
 8000aee:	69ba      	ldr	r2, [r7, #24]
 8000af0:	4013      	ands	r3, r2
 8000af2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f003 0203 	and.w	r2, r3, #3
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	69ba      	ldr	r2, [r7, #24]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	69ba      	ldr	r2, [r7, #24]
 8000b0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	f000 80a2 	beq.w	8000c62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	4b57      	ldr	r3, [pc, #348]	@ (8000c80 <HAL_GPIO_Init+0x2e8>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b26:	4a56      	ldr	r2, [pc, #344]	@ (8000c80 <HAL_GPIO_Init+0x2e8>)
 8000b28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b2e:	4b54      	ldr	r3, [pc, #336]	@ (8000c80 <HAL_GPIO_Init+0x2e8>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b3a:	4a52      	ldr	r2, [pc, #328]	@ (8000c84 <HAL_GPIO_Init+0x2ec>)
 8000b3c:	69fb      	ldr	r3, [r7, #28]
 8000b3e:	089b      	lsrs	r3, r3, #2
 8000b40:	3302      	adds	r3, #2
 8000b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	f003 0303 	and.w	r3, r3, #3
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	220f      	movs	r2, #15
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43db      	mvns	r3, r3
 8000b58:	69ba      	ldr	r2, [r7, #24]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a49      	ldr	r2, [pc, #292]	@ (8000c88 <HAL_GPIO_Init+0x2f0>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d019      	beq.n	8000b9a <HAL_GPIO_Init+0x202>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a48      	ldr	r2, [pc, #288]	@ (8000c8c <HAL_GPIO_Init+0x2f4>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d013      	beq.n	8000b96 <HAL_GPIO_Init+0x1fe>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a47      	ldr	r2, [pc, #284]	@ (8000c90 <HAL_GPIO_Init+0x2f8>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d00d      	beq.n	8000b92 <HAL_GPIO_Init+0x1fa>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a46      	ldr	r2, [pc, #280]	@ (8000c94 <HAL_GPIO_Init+0x2fc>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d007      	beq.n	8000b8e <HAL_GPIO_Init+0x1f6>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4a45      	ldr	r2, [pc, #276]	@ (8000c98 <HAL_GPIO_Init+0x300>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d101      	bne.n	8000b8a <HAL_GPIO_Init+0x1f2>
 8000b86:	2304      	movs	r3, #4
 8000b88:	e008      	b.n	8000b9c <HAL_GPIO_Init+0x204>
 8000b8a:	2307      	movs	r3, #7
 8000b8c:	e006      	b.n	8000b9c <HAL_GPIO_Init+0x204>
 8000b8e:	2303      	movs	r3, #3
 8000b90:	e004      	b.n	8000b9c <HAL_GPIO_Init+0x204>
 8000b92:	2302      	movs	r3, #2
 8000b94:	e002      	b.n	8000b9c <HAL_GPIO_Init+0x204>
 8000b96:	2301      	movs	r3, #1
 8000b98:	e000      	b.n	8000b9c <HAL_GPIO_Init+0x204>
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	69fa      	ldr	r2, [r7, #28]
 8000b9e:	f002 0203 	and.w	r2, r2, #3
 8000ba2:	0092      	lsls	r2, r2, #2
 8000ba4:	4093      	lsls	r3, r2
 8000ba6:	69ba      	ldr	r2, [r7, #24]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000bac:	4935      	ldr	r1, [pc, #212]	@ (8000c84 <HAL_GPIO_Init+0x2ec>)
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	089b      	lsrs	r3, r3, #2
 8000bb2:	3302      	adds	r3, #2
 8000bb4:	69ba      	ldr	r2, [r7, #24]
 8000bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bba:	4b38      	ldr	r3, [pc, #224]	@ (8000c9c <HAL_GPIO_Init+0x304>)
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	43db      	mvns	r3, r3
 8000bc4:	69ba      	ldr	r2, [r7, #24]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d003      	beq.n	8000bde <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000bd6:	69ba      	ldr	r2, [r7, #24]
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000bde:	4a2f      	ldr	r2, [pc, #188]	@ (8000c9c <HAL_GPIO_Init+0x304>)
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000be4:	4b2d      	ldr	r3, [pc, #180]	@ (8000c9c <HAL_GPIO_Init+0x304>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	43db      	mvns	r3, r3
 8000bee:	69ba      	ldr	r2, [r7, #24]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d003      	beq.n	8000c08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c08:	4a24      	ldr	r2, [pc, #144]	@ (8000c9c <HAL_GPIO_Init+0x304>)
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c0e:	4b23      	ldr	r3, [pc, #140]	@ (8000c9c <HAL_GPIO_Init+0x304>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	43db      	mvns	r3, r3
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d003      	beq.n	8000c32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000c2a:	69ba      	ldr	r2, [r7, #24]
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000c32:	4a1a      	ldr	r2, [pc, #104]	@ (8000c9c <HAL_GPIO_Init+0x304>)
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c38:	4b18      	ldr	r3, [pc, #96]	@ (8000c9c <HAL_GPIO_Init+0x304>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	43db      	mvns	r3, r3
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	4013      	ands	r3, r2
 8000c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d003      	beq.n	8000c5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000c5c:	4a0f      	ldr	r2, [pc, #60]	@ (8000c9c <HAL_GPIO_Init+0x304>)
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3301      	adds	r3, #1
 8000c66:	61fb      	str	r3, [r7, #28]
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	2b0f      	cmp	r3, #15
 8000c6c:	f67f aea2 	bls.w	80009b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000c70:	bf00      	nop
 8000c72:	bf00      	nop
 8000c74:	3724      	adds	r7, #36	@ 0x24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40013800 	.word	0x40013800
 8000c88:	40020000 	.word	0x40020000
 8000c8c:	40020400 	.word	0x40020400
 8000c90:	40020800 	.word	0x40020800
 8000c94:	40020c00 	.word	0x40020c00
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	40013c00 	.word	0x40013c00

08000ca0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000caa:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cac:	695a      	ldr	r2, [r3, #20]
 8000cae:	88fb      	ldrh	r3, [r7, #6]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d006      	beq.n	8000cc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000cb6:	4a05      	ldr	r2, [pc, #20]	@ (8000ccc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cb8:	88fb      	ldrh	r3, [r7, #6]
 8000cba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000cbc:	88fb      	ldrh	r3, [r7, #6]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fb6c 	bl	800039c <HAL_GPIO_EXTI_Callback>
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40013c00 	.word	0x40013c00

08000cd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d101      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e267      	b.n	80011b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d075      	beq.n	8000dda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000cee:	4b88      	ldr	r3, [pc, #544]	@ (8000f10 <HAL_RCC_OscConfig+0x240>)
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	f003 030c 	and.w	r3, r3, #12
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	d00c      	beq.n	8000d14 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cfa:	4b85      	ldr	r3, [pc, #532]	@ (8000f10 <HAL_RCC_OscConfig+0x240>)
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000d02:	2b08      	cmp	r3, #8
 8000d04:	d112      	bne.n	8000d2c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d06:	4b82      	ldr	r3, [pc, #520]	@ (8000f10 <HAL_RCC_OscConfig+0x240>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000d12:	d10b      	bne.n	8000d2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d14:	4b7e      	ldr	r3, [pc, #504]	@ (8000f10 <HAL_RCC_OscConfig+0x240>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d05b      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x108>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d157      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	e242      	b.n	80011b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d34:	d106      	bne.n	8000d44 <HAL_RCC_OscConfig+0x74>
 8000d36:	4b76      	ldr	r3, [pc, #472]	@ (8000f10 <HAL_RCC_OscConfig+0x240>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a75      	ldr	r2, [pc, #468]	@ (8000f10 <HAL_RCC_OscConfig+0x240>)
 8000d3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d40:	6013      	str	r3, [r2, #0]
 8000d42:	e01d      	b.n	8000d80 <HAL_RCC_OscConfig+0xb0>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d4c:	d10c      	bne.n	8000d68 <HAL_RCC_OscConfig+0x98>
 8000d4e:	4b70      	ldr	r3, [pc, #448]	@ (8000f10 <HAL_RCC_OscConfig+0x240>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a6f      	ldr	r2, [pc, #444]	@ (8000f10 <HAL_RCC_OscConfig+0x240>)
 8000d54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d58:	6013      	str	r3, [r2, #0]
 8000d5a:	4b6d      	ldr	r3, [pc, #436]	@ (8000f10 <HAL_RCC_OscConfig+0x240>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a6c      	ldr	r2, [pc, #432]	@ (8000f10 <HAL_RCC_OscConfig+0x240>)
 8000d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d64:	6013      	str	r3, [r2, #0]
 8000d66:	e00b      	b.n	8000d80 <HAL_RCC_OscConfig+0xb0>
 8000d68:	4b69      	ldr	r3, [pc, #420]	@ (8000f10 <HAL_RCC_OscConfig+0x240>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a68      	ldr	r2, [pc, #416]	@ (8000f10 <HAL_RCC_OscConfig+0x240>)
 8000d6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d72:	6013      	str	r3, [r2, #0]
 8000d74:	4b66      	ldr	r3, [pc, #408]	@ (8000f10 <HAL_RCC_OscConfig+0x240>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a65      	ldr	r2, [pc, #404]	@ (8000f10 <HAL_RCC_OscConfig+0x240>)
 8000d7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d013      	beq.n	8000db0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d88:	f7ff fcdc 	bl	8000744 <HAL_GetTick>
 8000d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d8e:	e008      	b.n	8000da2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d90:	f7ff fcd8 	bl	8000744 <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	2b64      	cmp	r3, #100	@ 0x64
 8000d9c:	d901      	bls.n	8000da2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e207      	b.n	80011b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da2:	4b5b      	ldr	r3, [pc, #364]	@ (8000f10 <HAL_RCC_OscConfig+0x240>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d0f0      	beq.n	8000d90 <HAL_RCC_OscConfig+0xc0>
 8000dae:	e014      	b.n	8000dda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db0:	f7ff fcc8 	bl	8000744 <HAL_GetTick>
 8000db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000db6:	e008      	b.n	8000dca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000db8:	f7ff fcc4 	bl	8000744 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b64      	cmp	r3, #100	@ 0x64
 8000dc4:	d901      	bls.n	8000dca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e1f3      	b.n	80011b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dca:	4b51      	ldr	r3, [pc, #324]	@ (8000f10 <HAL_RCC_OscConfig+0x240>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d1f0      	bne.n	8000db8 <HAL_RCC_OscConfig+0xe8>
 8000dd6:	e000      	b.n	8000dda <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d063      	beq.n	8000eae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000de6:	4b4a      	ldr	r3, [pc, #296]	@ (8000f10 <HAL_RCC_OscConfig+0x240>)
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	f003 030c 	and.w	r3, r3, #12
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d00b      	beq.n	8000e0a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000df2:	4b47      	ldr	r3, [pc, #284]	@ (8000f10 <HAL_RCC_OscConfig+0x240>)
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000dfa:	2b08      	cmp	r3, #8
 8000dfc:	d11c      	bne.n	8000e38 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dfe:	4b44      	ldr	r3, [pc, #272]	@ (8000f10 <HAL_RCC_OscConfig+0x240>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d116      	bne.n	8000e38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e0a:	4b41      	ldr	r3, [pc, #260]	@ (8000f10 <HAL_RCC_OscConfig+0x240>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d005      	beq.n	8000e22 <HAL_RCC_OscConfig+0x152>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d001      	beq.n	8000e22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e1c7      	b.n	80011b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e22:	4b3b      	ldr	r3, [pc, #236]	@ (8000f10 <HAL_RCC_OscConfig+0x240>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	691b      	ldr	r3, [r3, #16]
 8000e2e:	00db      	lsls	r3, r3, #3
 8000e30:	4937      	ldr	r1, [pc, #220]	@ (8000f10 <HAL_RCC_OscConfig+0x240>)
 8000e32:	4313      	orrs	r3, r2
 8000e34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e36:	e03a      	b.n	8000eae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d020      	beq.n	8000e82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e40:	4b34      	ldr	r3, [pc, #208]	@ (8000f14 <HAL_RCC_OscConfig+0x244>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e46:	f7ff fc7d 	bl	8000744 <HAL_GetTick>
 8000e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e4c:	e008      	b.n	8000e60 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e4e:	f7ff fc79 	bl	8000744 <HAL_GetTick>
 8000e52:	4602      	mov	r2, r0
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d901      	bls.n	8000e60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	e1a8      	b.n	80011b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e60:	4b2b      	ldr	r3, [pc, #172]	@ (8000f10 <HAL_RCC_OscConfig+0x240>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 0302 	and.w	r3, r3, #2
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d0f0      	beq.n	8000e4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e6c:	4b28      	ldr	r3, [pc, #160]	@ (8000f10 <HAL_RCC_OscConfig+0x240>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	691b      	ldr	r3, [r3, #16]
 8000e78:	00db      	lsls	r3, r3, #3
 8000e7a:	4925      	ldr	r1, [pc, #148]	@ (8000f10 <HAL_RCC_OscConfig+0x240>)
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	600b      	str	r3, [r1, #0]
 8000e80:	e015      	b.n	8000eae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e82:	4b24      	ldr	r3, [pc, #144]	@ (8000f14 <HAL_RCC_OscConfig+0x244>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e88:	f7ff fc5c 	bl	8000744 <HAL_GetTick>
 8000e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e8e:	e008      	b.n	8000ea2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e90:	f7ff fc58 	bl	8000744 <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d901      	bls.n	8000ea2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e187      	b.n	80011b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f10 <HAL_RCC_OscConfig+0x240>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d1f0      	bne.n	8000e90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 0308 	and.w	r3, r3, #8
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d036      	beq.n	8000f28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d016      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ec2:	4b15      	ldr	r3, [pc, #84]	@ (8000f18 <HAL_RCC_OscConfig+0x248>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ec8:	f7ff fc3c 	bl	8000744 <HAL_GetTick>
 8000ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ece:	e008      	b.n	8000ee2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ed0:	f7ff fc38 	bl	8000744 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d901      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e167      	b.n	80011b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8000f10 <HAL_RCC_OscConfig+0x240>)
 8000ee4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d0f0      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x200>
 8000eee:	e01b      	b.n	8000f28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ef0:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <HAL_RCC_OscConfig+0x248>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef6:	f7ff fc25 	bl	8000744 <HAL_GetTick>
 8000efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000efc:	e00e      	b.n	8000f1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000efe:	f7ff fc21 	bl	8000744 <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d907      	bls.n	8000f1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	e150      	b.n	80011b2 <HAL_RCC_OscConfig+0x4e2>
 8000f10:	40023800 	.word	0x40023800
 8000f14:	42470000 	.word	0x42470000
 8000f18:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f1c:	4b88      	ldr	r3, [pc, #544]	@ (8001140 <HAL_RCC_OscConfig+0x470>)
 8000f1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1ea      	bne.n	8000efe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 0304 	and.w	r3, r3, #4
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	f000 8097 	beq.w	8001064 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f36:	2300      	movs	r3, #0
 8000f38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f3a:	4b81      	ldr	r3, [pc, #516]	@ (8001140 <HAL_RCC_OscConfig+0x470>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d10f      	bne.n	8000f66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	4b7d      	ldr	r3, [pc, #500]	@ (8001140 <HAL_RCC_OscConfig+0x470>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4e:	4a7c      	ldr	r2, [pc, #496]	@ (8001140 <HAL_RCC_OscConfig+0x470>)
 8000f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f56:	4b7a      	ldr	r3, [pc, #488]	@ (8001140 <HAL_RCC_OscConfig+0x470>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f62:	2301      	movs	r3, #1
 8000f64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f66:	4b77      	ldr	r3, [pc, #476]	@ (8001144 <HAL_RCC_OscConfig+0x474>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d118      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f72:	4b74      	ldr	r3, [pc, #464]	@ (8001144 <HAL_RCC_OscConfig+0x474>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a73      	ldr	r2, [pc, #460]	@ (8001144 <HAL_RCC_OscConfig+0x474>)
 8000f78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f7e:	f7ff fbe1 	bl	8000744 <HAL_GetTick>
 8000f82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f84:	e008      	b.n	8000f98 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f86:	f7ff fbdd 	bl	8000744 <HAL_GetTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d901      	bls.n	8000f98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000f94:	2303      	movs	r3, #3
 8000f96:	e10c      	b.n	80011b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f98:	4b6a      	ldr	r3, [pc, #424]	@ (8001144 <HAL_RCC_OscConfig+0x474>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d0f0      	beq.n	8000f86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d106      	bne.n	8000fba <HAL_RCC_OscConfig+0x2ea>
 8000fac:	4b64      	ldr	r3, [pc, #400]	@ (8001140 <HAL_RCC_OscConfig+0x470>)
 8000fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fb0:	4a63      	ldr	r2, [pc, #396]	@ (8001140 <HAL_RCC_OscConfig+0x470>)
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8000fb8:	e01c      	b.n	8000ff4 <HAL_RCC_OscConfig+0x324>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	2b05      	cmp	r3, #5
 8000fc0:	d10c      	bne.n	8000fdc <HAL_RCC_OscConfig+0x30c>
 8000fc2:	4b5f      	ldr	r3, [pc, #380]	@ (8001140 <HAL_RCC_OscConfig+0x470>)
 8000fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fc6:	4a5e      	ldr	r2, [pc, #376]	@ (8001140 <HAL_RCC_OscConfig+0x470>)
 8000fc8:	f043 0304 	orr.w	r3, r3, #4
 8000fcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8000fce:	4b5c      	ldr	r3, [pc, #368]	@ (8001140 <HAL_RCC_OscConfig+0x470>)
 8000fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fd2:	4a5b      	ldr	r2, [pc, #364]	@ (8001140 <HAL_RCC_OscConfig+0x470>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8000fda:	e00b      	b.n	8000ff4 <HAL_RCC_OscConfig+0x324>
 8000fdc:	4b58      	ldr	r3, [pc, #352]	@ (8001140 <HAL_RCC_OscConfig+0x470>)
 8000fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fe0:	4a57      	ldr	r2, [pc, #348]	@ (8001140 <HAL_RCC_OscConfig+0x470>)
 8000fe2:	f023 0301 	bic.w	r3, r3, #1
 8000fe6:	6713      	str	r3, [r2, #112]	@ 0x70
 8000fe8:	4b55      	ldr	r3, [pc, #340]	@ (8001140 <HAL_RCC_OscConfig+0x470>)
 8000fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fec:	4a54      	ldr	r2, [pc, #336]	@ (8001140 <HAL_RCC_OscConfig+0x470>)
 8000fee:	f023 0304 	bic.w	r3, r3, #4
 8000ff2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d015      	beq.n	8001028 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ffc:	f7ff fba2 	bl	8000744 <HAL_GetTick>
 8001000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001002:	e00a      	b.n	800101a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001004:	f7ff fb9e 	bl	8000744 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001012:	4293      	cmp	r3, r2
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e0cb      	b.n	80011b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800101a:	4b49      	ldr	r3, [pc, #292]	@ (8001140 <HAL_RCC_OscConfig+0x470>)
 800101c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0ee      	beq.n	8001004 <HAL_RCC_OscConfig+0x334>
 8001026:	e014      	b.n	8001052 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001028:	f7ff fb8c 	bl	8000744 <HAL_GetTick>
 800102c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800102e:	e00a      	b.n	8001046 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001030:	f7ff fb88 	bl	8000744 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800103e:	4293      	cmp	r3, r2
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e0b5      	b.n	80011b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001046:	4b3e      	ldr	r3, [pc, #248]	@ (8001140 <HAL_RCC_OscConfig+0x470>)
 8001048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1ee      	bne.n	8001030 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001052:	7dfb      	ldrb	r3, [r7, #23]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d105      	bne.n	8001064 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001058:	4b39      	ldr	r3, [pc, #228]	@ (8001140 <HAL_RCC_OscConfig+0x470>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105c:	4a38      	ldr	r2, [pc, #224]	@ (8001140 <HAL_RCC_OscConfig+0x470>)
 800105e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001062:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 80a1 	beq.w	80011b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800106e:	4b34      	ldr	r3, [pc, #208]	@ (8001140 <HAL_RCC_OscConfig+0x470>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f003 030c 	and.w	r3, r3, #12
 8001076:	2b08      	cmp	r3, #8
 8001078:	d05c      	beq.n	8001134 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	2b02      	cmp	r3, #2
 8001080:	d141      	bne.n	8001106 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001082:	4b31      	ldr	r3, [pc, #196]	@ (8001148 <HAL_RCC_OscConfig+0x478>)
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001088:	f7ff fb5c 	bl	8000744 <HAL_GetTick>
 800108c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800108e:	e008      	b.n	80010a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001090:	f7ff fb58 	bl	8000744 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b02      	cmp	r3, #2
 800109c:	d901      	bls.n	80010a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e087      	b.n	80011b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010a2:	4b27      	ldr	r3, [pc, #156]	@ (8001140 <HAL_RCC_OscConfig+0x470>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1f0      	bne.n	8001090 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69da      	ldr	r2, [r3, #28]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a1b      	ldr	r3, [r3, #32]
 80010b6:	431a      	orrs	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010bc:	019b      	lsls	r3, r3, #6
 80010be:	431a      	orrs	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010c4:	085b      	lsrs	r3, r3, #1
 80010c6:	3b01      	subs	r3, #1
 80010c8:	041b      	lsls	r3, r3, #16
 80010ca:	431a      	orrs	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010d0:	061b      	lsls	r3, r3, #24
 80010d2:	491b      	ldr	r1, [pc, #108]	@ (8001140 <HAL_RCC_OscConfig+0x470>)
 80010d4:	4313      	orrs	r3, r2
 80010d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001148 <HAL_RCC_OscConfig+0x478>)
 80010da:	2201      	movs	r2, #1
 80010dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010de:	f7ff fb31 	bl	8000744 <HAL_GetTick>
 80010e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010e4:	e008      	b.n	80010f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010e6:	f7ff fb2d 	bl	8000744 <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e05c      	b.n	80011b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010f8:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <HAL_RCC_OscConfig+0x470>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0f0      	beq.n	80010e6 <HAL_RCC_OscConfig+0x416>
 8001104:	e054      	b.n	80011b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001106:	4b10      	ldr	r3, [pc, #64]	@ (8001148 <HAL_RCC_OscConfig+0x478>)
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110c:	f7ff fb1a 	bl	8000744 <HAL_GetTick>
 8001110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001112:	e008      	b.n	8001126 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001114:	f7ff fb16 	bl	8000744 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b02      	cmp	r3, #2
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e045      	b.n	80011b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001126:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <HAL_RCC_OscConfig+0x470>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1f0      	bne.n	8001114 <HAL_RCC_OscConfig+0x444>
 8001132:	e03d      	b.n	80011b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d107      	bne.n	800114c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e038      	b.n	80011b2 <HAL_RCC_OscConfig+0x4e2>
 8001140:	40023800 	.word	0x40023800
 8001144:	40007000 	.word	0x40007000
 8001148:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800114c:	4b1b      	ldr	r3, [pc, #108]	@ (80011bc <HAL_RCC_OscConfig+0x4ec>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d028      	beq.n	80011ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001164:	429a      	cmp	r2, r3
 8001166:	d121      	bne.n	80011ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001172:	429a      	cmp	r2, r3
 8001174:	d11a      	bne.n	80011ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800117c:	4013      	ands	r3, r2
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001182:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001184:	4293      	cmp	r3, r2
 8001186:	d111      	bne.n	80011ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001192:	085b      	lsrs	r3, r3, #1
 8001194:	3b01      	subs	r3, #1
 8001196:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001198:	429a      	cmp	r2, r3
 800119a:	d107      	bne.n	80011ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d001      	beq.n	80011b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e000      	b.n	80011b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40023800 	.word	0x40023800

080011c0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d105      	bne.n	80011e8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d038      	beq.n	800125a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80011e8:	4b68      	ldr	r3, [pc, #416]	@ (800138c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80011ee:	f7ff faa9 	bl	8000744 <HAL_GetTick>
 80011f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80011f4:	e008      	b.n	8001208 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80011f6:	f7ff faa5 	bl	8000744 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d901      	bls.n	8001208 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e0bd      	b.n	8001384 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001208:	4b61      	ldr	r3, [pc, #388]	@ (8001390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1f0      	bne.n	80011f6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	019b      	lsls	r3, r3, #6
 800121e:	431a      	orrs	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	071b      	lsls	r3, r3, #28
 8001226:	495a      	ldr	r1, [pc, #360]	@ (8001390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001228:	4313      	orrs	r3, r2
 800122a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800122e:	4b57      	ldr	r3, [pc, #348]	@ (800138c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001230:	2201      	movs	r2, #1
 8001232:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001234:	f7ff fa86 	bl	8000744 <HAL_GetTick>
 8001238:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800123a:	e008      	b.n	800124e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800123c:	f7ff fa82 	bl	8000744 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d901      	bls.n	800124e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e09a      	b.n	8001384 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800124e:	4b50      	ldr	r3, [pc, #320]	@ (8001390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d0f0      	beq.n	800123c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	f000 8083 	beq.w	800136e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	4b48      	ldr	r3, [pc, #288]	@ (8001390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001270:	4a47      	ldr	r2, [pc, #284]	@ (8001390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001272:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001276:	6413      	str	r3, [r2, #64]	@ 0x40
 8001278:	4b45      	ldr	r3, [pc, #276]	@ (8001390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001284:	4b43      	ldr	r3, [pc, #268]	@ (8001394 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a42      	ldr	r2, [pc, #264]	@ (8001394 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800128a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800128e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001290:	f7ff fa58 	bl	8000744 <HAL_GetTick>
 8001294:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001298:	f7ff fa54 	bl	8000744 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d901      	bls.n	80012aa <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e06c      	b.n	8001384 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80012aa:	4b3a      	ldr	r3, [pc, #232]	@ (8001394 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0f0      	beq.n	8001298 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80012b6:	4b36      	ldr	r3, [pc, #216]	@ (8001390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80012b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80012be:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d02f      	beq.n	8001326 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d028      	beq.n	8001326 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80012d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80012d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80012dc:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80012de:	4b2e      	ldr	r3, [pc, #184]	@ (8001398 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80012e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001398 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80012ea:	4a29      	ldr	r2, [pc, #164]	@ (8001390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80012f0:	4b27      	ldr	r3, [pc, #156]	@ (8001390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80012f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d114      	bne.n	8001326 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fa22 	bl	8000744 <HAL_GetTick>
 8001300:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001302:	e00a      	b.n	800131a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001304:	f7ff fa1e 	bl	8000744 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001312:	4293      	cmp	r3, r2
 8001314:	d901      	bls.n	800131a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e034      	b.n	8001384 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800131a:	4b1d      	ldr	r3, [pc, #116]	@ (8001390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800131c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0ee      	beq.n	8001304 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800132e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001332:	d10d      	bne.n	8001350 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8001334:	4b16      	ldr	r3, [pc, #88]	@ (8001390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001344:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001348:	4911      	ldr	r1, [pc, #68]	@ (8001390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800134a:	4313      	orrs	r3, r2
 800134c:	608b      	str	r3, [r1, #8]
 800134e:	e005      	b.n	800135c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8001350:	4b0f      	ldr	r3, [pc, #60]	@ (8001390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	4a0e      	ldr	r2, [pc, #56]	@ (8001390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001356:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800135a:	6093      	str	r3, [r2, #8]
 800135c:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800135e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001368:	4909      	ldr	r1, [pc, #36]	@ (8001390 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800136a:	4313      	orrs	r3, r2
 800136c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	7d1a      	ldrb	r2, [r3, #20]
 800137e:	4b07      	ldr	r3, [pc, #28]	@ (800139c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001380:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	42470068 	.word	0x42470068
 8001390:	40023800 	.word	0x40023800
 8001394:	40007000 	.word	0x40007000
 8001398:	42470e40 	.word	0x42470e40
 800139c:	424711e0 	.word	0x424711e0

080013a0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e073      	b.n	800149a <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	7f5b      	ldrb	r3, [r3, #29]
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d105      	bne.n	80013c8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff f826 	bl	8000414 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2202      	movs	r2, #2
 80013cc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	f003 0310 	and.w	r3, r3, #16
 80013d8:	2b10      	cmp	r3, #16
 80013da:	d055      	beq.n	8001488 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	22ca      	movs	r2, #202	@ 0xca
 80013e2:	625a      	str	r2, [r3, #36]	@ 0x24
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2253      	movs	r2, #83	@ 0x53
 80013ea:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 f92b 	bl	8001648 <RTC_EnterInitMode>
 80013f2:	4603      	mov	r3, r0
 80013f4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d12c      	bne.n	8001456 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6812      	ldr	r2, [r2, #0]
 8001406:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800140a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800140e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6899      	ldr	r1, [r3, #8]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	431a      	orrs	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	695b      	ldr	r3, [r3, #20]
 8001424:	431a      	orrs	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	68d2      	ldr	r2, [r2, #12]
 8001436:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6919      	ldr	r1, [r3, #16]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	041a      	lsls	r2, r3, #16
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	430a      	orrs	r2, r1
 800144a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 f932 	bl	80016b6 <RTC_ExitInitMode>
 8001452:	4603      	mov	r3, r0
 8001454:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d110      	bne.n	800147e <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800146a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	699a      	ldr	r2, [r3, #24]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	430a      	orrs	r2, r1
 800147c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	22ff      	movs	r2, #255	@ 0xff
 8001484:	625a      	str	r2, [r3, #36]	@ 0x24
 8001486:	e001      	b.n	800148c <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8001488:	2300      	movs	r3, #0
 800148a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d102      	bne.n	8001498 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2201      	movs	r2, #1
 8001496:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8001498:	7bfb      	ldrb	r3, [r7, #15]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b086      	sub	sp, #24
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	60f8      	str	r0, [r7, #12]
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80014d4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80014d8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	0c1b      	lsrs	r3, r3, #16
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001502:	b2da      	uxtb	r2, r3
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	0d9b      	lsrs	r3, r3, #22
 800150c:	b2db      	uxtb	r3, r3
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	b2da      	uxtb	r2, r3
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d11a      	bne.n	8001554 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f000 f8ec 	bl	8001700 <RTC_Bcd2ToByte>
 8001528:	4603      	mov	r3, r0
 800152a:	461a      	mov	r2, r3
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	785b      	ldrb	r3, [r3, #1]
 8001534:	4618      	mov	r0, r3
 8001536:	f000 f8e3 	bl	8001700 <RTC_Bcd2ToByte>
 800153a:	4603      	mov	r3, r0
 800153c:	461a      	mov	r2, r3
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	789b      	ldrb	r3, [r3, #2]
 8001546:	4618      	mov	r0, r3
 8001548:	f000 f8da 	bl	8001700 <RTC_Bcd2ToByte>
 800154c:	4603      	mov	r3, r0
 800154e:	461a      	mov	r2, r3
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b086      	sub	sp, #24
 8001562:	af00      	add	r7, sp, #0
 8001564:	60f8      	str	r0, [r7, #12]
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001578:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800157c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	0c1b      	lsrs	r3, r3, #16
 8001582:	b2da      	uxtb	r2, r3
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	0a1b      	lsrs	r3, r3, #8
 800158c:	b2db      	uxtb	r3, r3
 800158e:	f003 031f 	and.w	r3, r3, #31
 8001592:	b2da      	uxtb	r2, r3
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	b2db      	uxtb	r3, r3
 800159c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	0b5b      	lsrs	r3, r3, #13
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d11a      	bne.n	80015f2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	78db      	ldrb	r3, [r3, #3]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 f89d 	bl	8001700 <RTC_Bcd2ToByte>
 80015c6:	4603      	mov	r3, r0
 80015c8:	461a      	mov	r2, r3
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	785b      	ldrb	r3, [r3, #1]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 f894 	bl	8001700 <RTC_Bcd2ToByte>
 80015d8:	4603      	mov	r3, r0
 80015da:	461a      	mov	r2, r3
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	789b      	ldrb	r3, [r3, #2]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f000 f88b 	bl	8001700 <RTC_Bcd2ToByte>
 80015ea:	4603      	mov	r3, r0
 80015ec:	461a      	mov	r2, r3
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001604:	2300      	movs	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a0d      	ldr	r2, [pc, #52]	@ (8001644 <HAL_RTC_WaitForSynchro+0x48>)
 800160e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001610:	f7ff f898 	bl	8000744 <HAL_GetTick>
 8001614:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001616:	e009      	b.n	800162c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001618:	f7ff f894 	bl	8000744 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001626:	d901      	bls.n	800162c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e007      	b.n	800163c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	f003 0320 	and.w	r3, r3, #32
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0ee      	beq.n	8001618 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	00013f5f 	.word	0x00013f5f

08001648 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001650:	2300      	movs	r3, #0
 8001652:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001654:	2300      	movs	r3, #0
 8001656:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001662:	2b00      	cmp	r3, #0
 8001664:	d122      	bne.n	80016ac <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68da      	ldr	r2, [r3, #12]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001674:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001676:	f7ff f865 	bl	8000744 <HAL_GetTick>
 800167a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800167c:	e00c      	b.n	8001698 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800167e:	f7ff f861 	bl	8000744 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800168c:	d904      	bls.n	8001698 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2204      	movs	r2, #4
 8001692:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d102      	bne.n	80016ac <RTC_EnterInitMode+0x64>
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d1e8      	bne.n	800167e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b084      	sub	sp, #16
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68da      	ldr	r2, [r3, #12]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016d0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 0320 	and.w	r3, r3, #32
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10a      	bne.n	80016f6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff ff8b 	bl	80015fc <HAL_RTC_WaitForSynchro>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d004      	beq.n	80016f6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2204      	movs	r2, #4
 80016f0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	091b      	lsrs	r3, r3, #4
 8001712:	b2db      	uxtb	r3, r3
 8001714:	461a      	mov	r2, r3
 8001716:	4613      	mov	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	b2da      	uxtb	r2, r3
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	b2db      	uxtb	r3, r3
 800172c:	4413      	add	r3, r2
 800172e:	b2db      	uxtb	r3, r3
}
 8001730:	4618      	mov	r0, r3
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <std>:
 800173c:	2300      	movs	r3, #0
 800173e:	b510      	push	{r4, lr}
 8001740:	4604      	mov	r4, r0
 8001742:	e9c0 3300 	strd	r3, r3, [r0]
 8001746:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800174a:	6083      	str	r3, [r0, #8]
 800174c:	8181      	strh	r1, [r0, #12]
 800174e:	6643      	str	r3, [r0, #100]	@ 0x64
 8001750:	81c2      	strh	r2, [r0, #14]
 8001752:	6183      	str	r3, [r0, #24]
 8001754:	4619      	mov	r1, r3
 8001756:	2208      	movs	r2, #8
 8001758:	305c      	adds	r0, #92	@ 0x5c
 800175a:	f000 f9f9 	bl	8001b50 <memset>
 800175e:	4b0d      	ldr	r3, [pc, #52]	@ (8001794 <std+0x58>)
 8001760:	6263      	str	r3, [r4, #36]	@ 0x24
 8001762:	4b0d      	ldr	r3, [pc, #52]	@ (8001798 <std+0x5c>)
 8001764:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001766:	4b0d      	ldr	r3, [pc, #52]	@ (800179c <std+0x60>)
 8001768:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800176a:	4b0d      	ldr	r3, [pc, #52]	@ (80017a0 <std+0x64>)
 800176c:	6323      	str	r3, [r4, #48]	@ 0x30
 800176e:	4b0d      	ldr	r3, [pc, #52]	@ (80017a4 <std+0x68>)
 8001770:	6224      	str	r4, [r4, #32]
 8001772:	429c      	cmp	r4, r3
 8001774:	d006      	beq.n	8001784 <std+0x48>
 8001776:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800177a:	4294      	cmp	r4, r2
 800177c:	d002      	beq.n	8001784 <std+0x48>
 800177e:	33d0      	adds	r3, #208	@ 0xd0
 8001780:	429c      	cmp	r4, r3
 8001782:	d105      	bne.n	8001790 <std+0x54>
 8001784:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800178c:	f000 ba58 	b.w	8001c40 <__retarget_lock_init_recursive>
 8001790:	bd10      	pop	{r4, pc}
 8001792:	bf00      	nop
 8001794:	080019a1 	.word	0x080019a1
 8001798:	080019c3 	.word	0x080019c3
 800179c:	080019fb 	.word	0x080019fb
 80017a0:	08001a1f 	.word	0x08001a1f
 80017a4:	200000ac 	.word	0x200000ac

080017a8 <stdio_exit_handler>:
 80017a8:	4a02      	ldr	r2, [pc, #8]	@ (80017b4 <stdio_exit_handler+0xc>)
 80017aa:	4903      	ldr	r1, [pc, #12]	@ (80017b8 <stdio_exit_handler+0x10>)
 80017ac:	4803      	ldr	r0, [pc, #12]	@ (80017bc <stdio_exit_handler+0x14>)
 80017ae:	f000 b869 	b.w	8001884 <_fwalk_sglue>
 80017b2:	bf00      	nop
 80017b4:	2000000c 	.word	0x2000000c
 80017b8:	080024dd 	.word	0x080024dd
 80017bc:	2000001c 	.word	0x2000001c

080017c0 <cleanup_stdio>:
 80017c0:	6841      	ldr	r1, [r0, #4]
 80017c2:	4b0c      	ldr	r3, [pc, #48]	@ (80017f4 <cleanup_stdio+0x34>)
 80017c4:	4299      	cmp	r1, r3
 80017c6:	b510      	push	{r4, lr}
 80017c8:	4604      	mov	r4, r0
 80017ca:	d001      	beq.n	80017d0 <cleanup_stdio+0x10>
 80017cc:	f000 fe86 	bl	80024dc <_fflush_r>
 80017d0:	68a1      	ldr	r1, [r4, #8]
 80017d2:	4b09      	ldr	r3, [pc, #36]	@ (80017f8 <cleanup_stdio+0x38>)
 80017d4:	4299      	cmp	r1, r3
 80017d6:	d002      	beq.n	80017de <cleanup_stdio+0x1e>
 80017d8:	4620      	mov	r0, r4
 80017da:	f000 fe7f 	bl	80024dc <_fflush_r>
 80017de:	68e1      	ldr	r1, [r4, #12]
 80017e0:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <cleanup_stdio+0x3c>)
 80017e2:	4299      	cmp	r1, r3
 80017e4:	d004      	beq.n	80017f0 <cleanup_stdio+0x30>
 80017e6:	4620      	mov	r0, r4
 80017e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017ec:	f000 be76 	b.w	80024dc <_fflush_r>
 80017f0:	bd10      	pop	{r4, pc}
 80017f2:	bf00      	nop
 80017f4:	200000ac 	.word	0x200000ac
 80017f8:	20000114 	.word	0x20000114
 80017fc:	2000017c 	.word	0x2000017c

08001800 <global_stdio_init.part.0>:
 8001800:	b510      	push	{r4, lr}
 8001802:	4b0b      	ldr	r3, [pc, #44]	@ (8001830 <global_stdio_init.part.0+0x30>)
 8001804:	4c0b      	ldr	r4, [pc, #44]	@ (8001834 <global_stdio_init.part.0+0x34>)
 8001806:	4a0c      	ldr	r2, [pc, #48]	@ (8001838 <global_stdio_init.part.0+0x38>)
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	4620      	mov	r0, r4
 800180c:	2200      	movs	r2, #0
 800180e:	2104      	movs	r1, #4
 8001810:	f7ff ff94 	bl	800173c <std>
 8001814:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001818:	2201      	movs	r2, #1
 800181a:	2109      	movs	r1, #9
 800181c:	f7ff ff8e 	bl	800173c <std>
 8001820:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001824:	2202      	movs	r2, #2
 8001826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800182a:	2112      	movs	r1, #18
 800182c:	f7ff bf86 	b.w	800173c <std>
 8001830:	200001e4 	.word	0x200001e4
 8001834:	200000ac 	.word	0x200000ac
 8001838:	080017a9 	.word	0x080017a9

0800183c <__sfp_lock_acquire>:
 800183c:	4801      	ldr	r0, [pc, #4]	@ (8001844 <__sfp_lock_acquire+0x8>)
 800183e:	f000 ba00 	b.w	8001c42 <__retarget_lock_acquire_recursive>
 8001842:	bf00      	nop
 8001844:	200001ed 	.word	0x200001ed

08001848 <__sfp_lock_release>:
 8001848:	4801      	ldr	r0, [pc, #4]	@ (8001850 <__sfp_lock_release+0x8>)
 800184a:	f000 b9fb 	b.w	8001c44 <__retarget_lock_release_recursive>
 800184e:	bf00      	nop
 8001850:	200001ed 	.word	0x200001ed

08001854 <__sinit>:
 8001854:	b510      	push	{r4, lr}
 8001856:	4604      	mov	r4, r0
 8001858:	f7ff fff0 	bl	800183c <__sfp_lock_acquire>
 800185c:	6a23      	ldr	r3, [r4, #32]
 800185e:	b11b      	cbz	r3, 8001868 <__sinit+0x14>
 8001860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001864:	f7ff bff0 	b.w	8001848 <__sfp_lock_release>
 8001868:	4b04      	ldr	r3, [pc, #16]	@ (800187c <__sinit+0x28>)
 800186a:	6223      	str	r3, [r4, #32]
 800186c:	4b04      	ldr	r3, [pc, #16]	@ (8001880 <__sinit+0x2c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1f5      	bne.n	8001860 <__sinit+0xc>
 8001874:	f7ff ffc4 	bl	8001800 <global_stdio_init.part.0>
 8001878:	e7f2      	b.n	8001860 <__sinit+0xc>
 800187a:	bf00      	nop
 800187c:	080017c1 	.word	0x080017c1
 8001880:	200001e4 	.word	0x200001e4

08001884 <_fwalk_sglue>:
 8001884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001888:	4607      	mov	r7, r0
 800188a:	4688      	mov	r8, r1
 800188c:	4614      	mov	r4, r2
 800188e:	2600      	movs	r6, #0
 8001890:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001894:	f1b9 0901 	subs.w	r9, r9, #1
 8001898:	d505      	bpl.n	80018a6 <_fwalk_sglue+0x22>
 800189a:	6824      	ldr	r4, [r4, #0]
 800189c:	2c00      	cmp	r4, #0
 800189e:	d1f7      	bne.n	8001890 <_fwalk_sglue+0xc>
 80018a0:	4630      	mov	r0, r6
 80018a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80018a6:	89ab      	ldrh	r3, [r5, #12]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d907      	bls.n	80018bc <_fwalk_sglue+0x38>
 80018ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80018b0:	3301      	adds	r3, #1
 80018b2:	d003      	beq.n	80018bc <_fwalk_sglue+0x38>
 80018b4:	4629      	mov	r1, r5
 80018b6:	4638      	mov	r0, r7
 80018b8:	47c0      	blx	r8
 80018ba:	4306      	orrs	r6, r0
 80018bc:	3568      	adds	r5, #104	@ 0x68
 80018be:	e7e9      	b.n	8001894 <_fwalk_sglue+0x10>

080018c0 <iprintf>:
 80018c0:	b40f      	push	{r0, r1, r2, r3}
 80018c2:	b507      	push	{r0, r1, r2, lr}
 80018c4:	4906      	ldr	r1, [pc, #24]	@ (80018e0 <iprintf+0x20>)
 80018c6:	ab04      	add	r3, sp, #16
 80018c8:	6808      	ldr	r0, [r1, #0]
 80018ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80018ce:	6881      	ldr	r1, [r0, #8]
 80018d0:	9301      	str	r3, [sp, #4]
 80018d2:	f000 fadb 	bl	8001e8c <_vfiprintf_r>
 80018d6:	b003      	add	sp, #12
 80018d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80018dc:	b004      	add	sp, #16
 80018de:	4770      	bx	lr
 80018e0:	20000018 	.word	0x20000018

080018e4 <_puts_r>:
 80018e4:	6a03      	ldr	r3, [r0, #32]
 80018e6:	b570      	push	{r4, r5, r6, lr}
 80018e8:	6884      	ldr	r4, [r0, #8]
 80018ea:	4605      	mov	r5, r0
 80018ec:	460e      	mov	r6, r1
 80018ee:	b90b      	cbnz	r3, 80018f4 <_puts_r+0x10>
 80018f0:	f7ff ffb0 	bl	8001854 <__sinit>
 80018f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80018f6:	07db      	lsls	r3, r3, #31
 80018f8:	d405      	bmi.n	8001906 <_puts_r+0x22>
 80018fa:	89a3      	ldrh	r3, [r4, #12]
 80018fc:	0598      	lsls	r0, r3, #22
 80018fe:	d402      	bmi.n	8001906 <_puts_r+0x22>
 8001900:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001902:	f000 f99e 	bl	8001c42 <__retarget_lock_acquire_recursive>
 8001906:	89a3      	ldrh	r3, [r4, #12]
 8001908:	0719      	lsls	r1, r3, #28
 800190a:	d502      	bpl.n	8001912 <_puts_r+0x2e>
 800190c:	6923      	ldr	r3, [r4, #16]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d135      	bne.n	800197e <_puts_r+0x9a>
 8001912:	4621      	mov	r1, r4
 8001914:	4628      	mov	r0, r5
 8001916:	f000 f8c5 	bl	8001aa4 <__swsetup_r>
 800191a:	b380      	cbz	r0, 800197e <_puts_r+0x9a>
 800191c:	f04f 35ff 	mov.w	r5, #4294967295
 8001920:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001922:	07da      	lsls	r2, r3, #31
 8001924:	d405      	bmi.n	8001932 <_puts_r+0x4e>
 8001926:	89a3      	ldrh	r3, [r4, #12]
 8001928:	059b      	lsls	r3, r3, #22
 800192a:	d402      	bmi.n	8001932 <_puts_r+0x4e>
 800192c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800192e:	f000 f989 	bl	8001c44 <__retarget_lock_release_recursive>
 8001932:	4628      	mov	r0, r5
 8001934:	bd70      	pop	{r4, r5, r6, pc}
 8001936:	2b00      	cmp	r3, #0
 8001938:	da04      	bge.n	8001944 <_puts_r+0x60>
 800193a:	69a2      	ldr	r2, [r4, #24]
 800193c:	429a      	cmp	r2, r3
 800193e:	dc17      	bgt.n	8001970 <_puts_r+0x8c>
 8001940:	290a      	cmp	r1, #10
 8001942:	d015      	beq.n	8001970 <_puts_r+0x8c>
 8001944:	6823      	ldr	r3, [r4, #0]
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	6022      	str	r2, [r4, #0]
 800194a:	7019      	strb	r1, [r3, #0]
 800194c:	68a3      	ldr	r3, [r4, #8]
 800194e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001952:	3b01      	subs	r3, #1
 8001954:	60a3      	str	r3, [r4, #8]
 8001956:	2900      	cmp	r1, #0
 8001958:	d1ed      	bne.n	8001936 <_puts_r+0x52>
 800195a:	2b00      	cmp	r3, #0
 800195c:	da11      	bge.n	8001982 <_puts_r+0x9e>
 800195e:	4622      	mov	r2, r4
 8001960:	210a      	movs	r1, #10
 8001962:	4628      	mov	r0, r5
 8001964:	f000 f85f 	bl	8001a26 <__swbuf_r>
 8001968:	3001      	adds	r0, #1
 800196a:	d0d7      	beq.n	800191c <_puts_r+0x38>
 800196c:	250a      	movs	r5, #10
 800196e:	e7d7      	b.n	8001920 <_puts_r+0x3c>
 8001970:	4622      	mov	r2, r4
 8001972:	4628      	mov	r0, r5
 8001974:	f000 f857 	bl	8001a26 <__swbuf_r>
 8001978:	3001      	adds	r0, #1
 800197a:	d1e7      	bne.n	800194c <_puts_r+0x68>
 800197c:	e7ce      	b.n	800191c <_puts_r+0x38>
 800197e:	3e01      	subs	r6, #1
 8001980:	e7e4      	b.n	800194c <_puts_r+0x68>
 8001982:	6823      	ldr	r3, [r4, #0]
 8001984:	1c5a      	adds	r2, r3, #1
 8001986:	6022      	str	r2, [r4, #0]
 8001988:	220a      	movs	r2, #10
 800198a:	701a      	strb	r2, [r3, #0]
 800198c:	e7ee      	b.n	800196c <_puts_r+0x88>
	...

08001990 <puts>:
 8001990:	4b02      	ldr	r3, [pc, #8]	@ (800199c <puts+0xc>)
 8001992:	4601      	mov	r1, r0
 8001994:	6818      	ldr	r0, [r3, #0]
 8001996:	f7ff bfa5 	b.w	80018e4 <_puts_r>
 800199a:	bf00      	nop
 800199c:	20000018 	.word	0x20000018

080019a0 <__sread>:
 80019a0:	b510      	push	{r4, lr}
 80019a2:	460c      	mov	r4, r1
 80019a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019a8:	f000 f8fc 	bl	8001ba4 <_read_r>
 80019ac:	2800      	cmp	r0, #0
 80019ae:	bfab      	itete	ge
 80019b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80019b2:	89a3      	ldrhlt	r3, [r4, #12]
 80019b4:	181b      	addge	r3, r3, r0
 80019b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80019ba:	bfac      	ite	ge
 80019bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80019be:	81a3      	strhlt	r3, [r4, #12]
 80019c0:	bd10      	pop	{r4, pc}

080019c2 <__swrite>:
 80019c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019c6:	461f      	mov	r7, r3
 80019c8:	898b      	ldrh	r3, [r1, #12]
 80019ca:	05db      	lsls	r3, r3, #23
 80019cc:	4605      	mov	r5, r0
 80019ce:	460c      	mov	r4, r1
 80019d0:	4616      	mov	r6, r2
 80019d2:	d505      	bpl.n	80019e0 <__swrite+0x1e>
 80019d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019d8:	2302      	movs	r3, #2
 80019da:	2200      	movs	r2, #0
 80019dc:	f000 f8d0 	bl	8001b80 <_lseek_r>
 80019e0:	89a3      	ldrh	r3, [r4, #12]
 80019e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80019e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80019ea:	81a3      	strh	r3, [r4, #12]
 80019ec:	4632      	mov	r2, r6
 80019ee:	463b      	mov	r3, r7
 80019f0:	4628      	mov	r0, r5
 80019f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80019f6:	f000 b8e7 	b.w	8001bc8 <_write_r>

080019fa <__sseek>:
 80019fa:	b510      	push	{r4, lr}
 80019fc:	460c      	mov	r4, r1
 80019fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a02:	f000 f8bd 	bl	8001b80 <_lseek_r>
 8001a06:	1c43      	adds	r3, r0, #1
 8001a08:	89a3      	ldrh	r3, [r4, #12]
 8001a0a:	bf15      	itete	ne
 8001a0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001a0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001a12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001a16:	81a3      	strheq	r3, [r4, #12]
 8001a18:	bf18      	it	ne
 8001a1a:	81a3      	strhne	r3, [r4, #12]
 8001a1c:	bd10      	pop	{r4, pc}

08001a1e <__sclose>:
 8001a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a22:	f000 b89d 	b.w	8001b60 <_close_r>

08001a26 <__swbuf_r>:
 8001a26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a28:	460e      	mov	r6, r1
 8001a2a:	4614      	mov	r4, r2
 8001a2c:	4605      	mov	r5, r0
 8001a2e:	b118      	cbz	r0, 8001a38 <__swbuf_r+0x12>
 8001a30:	6a03      	ldr	r3, [r0, #32]
 8001a32:	b90b      	cbnz	r3, 8001a38 <__swbuf_r+0x12>
 8001a34:	f7ff ff0e 	bl	8001854 <__sinit>
 8001a38:	69a3      	ldr	r3, [r4, #24]
 8001a3a:	60a3      	str	r3, [r4, #8]
 8001a3c:	89a3      	ldrh	r3, [r4, #12]
 8001a3e:	071a      	lsls	r2, r3, #28
 8001a40:	d501      	bpl.n	8001a46 <__swbuf_r+0x20>
 8001a42:	6923      	ldr	r3, [r4, #16]
 8001a44:	b943      	cbnz	r3, 8001a58 <__swbuf_r+0x32>
 8001a46:	4621      	mov	r1, r4
 8001a48:	4628      	mov	r0, r5
 8001a4a:	f000 f82b 	bl	8001aa4 <__swsetup_r>
 8001a4e:	b118      	cbz	r0, 8001a58 <__swbuf_r+0x32>
 8001a50:	f04f 37ff 	mov.w	r7, #4294967295
 8001a54:	4638      	mov	r0, r7
 8001a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a58:	6823      	ldr	r3, [r4, #0]
 8001a5a:	6922      	ldr	r2, [r4, #16]
 8001a5c:	1a98      	subs	r0, r3, r2
 8001a5e:	6963      	ldr	r3, [r4, #20]
 8001a60:	b2f6      	uxtb	r6, r6
 8001a62:	4283      	cmp	r3, r0
 8001a64:	4637      	mov	r7, r6
 8001a66:	dc05      	bgt.n	8001a74 <__swbuf_r+0x4e>
 8001a68:	4621      	mov	r1, r4
 8001a6a:	4628      	mov	r0, r5
 8001a6c:	f000 fd36 	bl	80024dc <_fflush_r>
 8001a70:	2800      	cmp	r0, #0
 8001a72:	d1ed      	bne.n	8001a50 <__swbuf_r+0x2a>
 8001a74:	68a3      	ldr	r3, [r4, #8]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	60a3      	str	r3, [r4, #8]
 8001a7a:	6823      	ldr	r3, [r4, #0]
 8001a7c:	1c5a      	adds	r2, r3, #1
 8001a7e:	6022      	str	r2, [r4, #0]
 8001a80:	701e      	strb	r6, [r3, #0]
 8001a82:	6962      	ldr	r2, [r4, #20]
 8001a84:	1c43      	adds	r3, r0, #1
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d004      	beq.n	8001a94 <__swbuf_r+0x6e>
 8001a8a:	89a3      	ldrh	r3, [r4, #12]
 8001a8c:	07db      	lsls	r3, r3, #31
 8001a8e:	d5e1      	bpl.n	8001a54 <__swbuf_r+0x2e>
 8001a90:	2e0a      	cmp	r6, #10
 8001a92:	d1df      	bne.n	8001a54 <__swbuf_r+0x2e>
 8001a94:	4621      	mov	r1, r4
 8001a96:	4628      	mov	r0, r5
 8001a98:	f000 fd20 	bl	80024dc <_fflush_r>
 8001a9c:	2800      	cmp	r0, #0
 8001a9e:	d0d9      	beq.n	8001a54 <__swbuf_r+0x2e>
 8001aa0:	e7d6      	b.n	8001a50 <__swbuf_r+0x2a>
	...

08001aa4 <__swsetup_r>:
 8001aa4:	b538      	push	{r3, r4, r5, lr}
 8001aa6:	4b29      	ldr	r3, [pc, #164]	@ (8001b4c <__swsetup_r+0xa8>)
 8001aa8:	4605      	mov	r5, r0
 8001aaa:	6818      	ldr	r0, [r3, #0]
 8001aac:	460c      	mov	r4, r1
 8001aae:	b118      	cbz	r0, 8001ab8 <__swsetup_r+0x14>
 8001ab0:	6a03      	ldr	r3, [r0, #32]
 8001ab2:	b90b      	cbnz	r3, 8001ab8 <__swsetup_r+0x14>
 8001ab4:	f7ff fece 	bl	8001854 <__sinit>
 8001ab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001abc:	0719      	lsls	r1, r3, #28
 8001abe:	d422      	bmi.n	8001b06 <__swsetup_r+0x62>
 8001ac0:	06da      	lsls	r2, r3, #27
 8001ac2:	d407      	bmi.n	8001ad4 <__swsetup_r+0x30>
 8001ac4:	2209      	movs	r2, #9
 8001ac6:	602a      	str	r2, [r5, #0]
 8001ac8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001acc:	81a3      	strh	r3, [r4, #12]
 8001ace:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad2:	e033      	b.n	8001b3c <__swsetup_r+0x98>
 8001ad4:	0758      	lsls	r0, r3, #29
 8001ad6:	d512      	bpl.n	8001afe <__swsetup_r+0x5a>
 8001ad8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001ada:	b141      	cbz	r1, 8001aee <__swsetup_r+0x4a>
 8001adc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001ae0:	4299      	cmp	r1, r3
 8001ae2:	d002      	beq.n	8001aea <__swsetup_r+0x46>
 8001ae4:	4628      	mov	r0, r5
 8001ae6:	f000 f8af 	bl	8001c48 <_free_r>
 8001aea:	2300      	movs	r3, #0
 8001aec:	6363      	str	r3, [r4, #52]	@ 0x34
 8001aee:	89a3      	ldrh	r3, [r4, #12]
 8001af0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001af4:	81a3      	strh	r3, [r4, #12]
 8001af6:	2300      	movs	r3, #0
 8001af8:	6063      	str	r3, [r4, #4]
 8001afa:	6923      	ldr	r3, [r4, #16]
 8001afc:	6023      	str	r3, [r4, #0]
 8001afe:	89a3      	ldrh	r3, [r4, #12]
 8001b00:	f043 0308 	orr.w	r3, r3, #8
 8001b04:	81a3      	strh	r3, [r4, #12]
 8001b06:	6923      	ldr	r3, [r4, #16]
 8001b08:	b94b      	cbnz	r3, 8001b1e <__swsetup_r+0x7a>
 8001b0a:	89a3      	ldrh	r3, [r4, #12]
 8001b0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001b10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b14:	d003      	beq.n	8001b1e <__swsetup_r+0x7a>
 8001b16:	4621      	mov	r1, r4
 8001b18:	4628      	mov	r0, r5
 8001b1a:	f000 fd2d 	bl	8002578 <__smakebuf_r>
 8001b1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b22:	f013 0201 	ands.w	r2, r3, #1
 8001b26:	d00a      	beq.n	8001b3e <__swsetup_r+0x9a>
 8001b28:	2200      	movs	r2, #0
 8001b2a:	60a2      	str	r2, [r4, #8]
 8001b2c:	6962      	ldr	r2, [r4, #20]
 8001b2e:	4252      	negs	r2, r2
 8001b30:	61a2      	str	r2, [r4, #24]
 8001b32:	6922      	ldr	r2, [r4, #16]
 8001b34:	b942      	cbnz	r2, 8001b48 <__swsetup_r+0xa4>
 8001b36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001b3a:	d1c5      	bne.n	8001ac8 <__swsetup_r+0x24>
 8001b3c:	bd38      	pop	{r3, r4, r5, pc}
 8001b3e:	0799      	lsls	r1, r3, #30
 8001b40:	bf58      	it	pl
 8001b42:	6962      	ldrpl	r2, [r4, #20]
 8001b44:	60a2      	str	r2, [r4, #8]
 8001b46:	e7f4      	b.n	8001b32 <__swsetup_r+0x8e>
 8001b48:	2000      	movs	r0, #0
 8001b4a:	e7f7      	b.n	8001b3c <__swsetup_r+0x98>
 8001b4c:	20000018 	.word	0x20000018

08001b50 <memset>:
 8001b50:	4402      	add	r2, r0
 8001b52:	4603      	mov	r3, r0
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d100      	bne.n	8001b5a <memset+0xa>
 8001b58:	4770      	bx	lr
 8001b5a:	f803 1b01 	strb.w	r1, [r3], #1
 8001b5e:	e7f9      	b.n	8001b54 <memset+0x4>

08001b60 <_close_r>:
 8001b60:	b538      	push	{r3, r4, r5, lr}
 8001b62:	4d06      	ldr	r5, [pc, #24]	@ (8001b7c <_close_r+0x1c>)
 8001b64:	2300      	movs	r3, #0
 8001b66:	4604      	mov	r4, r0
 8001b68:	4608      	mov	r0, r1
 8001b6a:	602b      	str	r3, [r5, #0]
 8001b6c:	f7fe fcd5 	bl	800051a <_close>
 8001b70:	1c43      	adds	r3, r0, #1
 8001b72:	d102      	bne.n	8001b7a <_close_r+0x1a>
 8001b74:	682b      	ldr	r3, [r5, #0]
 8001b76:	b103      	cbz	r3, 8001b7a <_close_r+0x1a>
 8001b78:	6023      	str	r3, [r4, #0]
 8001b7a:	bd38      	pop	{r3, r4, r5, pc}
 8001b7c:	200001e8 	.word	0x200001e8

08001b80 <_lseek_r>:
 8001b80:	b538      	push	{r3, r4, r5, lr}
 8001b82:	4d07      	ldr	r5, [pc, #28]	@ (8001ba0 <_lseek_r+0x20>)
 8001b84:	4604      	mov	r4, r0
 8001b86:	4608      	mov	r0, r1
 8001b88:	4611      	mov	r1, r2
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	602a      	str	r2, [r5, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	f7fe fcea 	bl	8000568 <_lseek>
 8001b94:	1c43      	adds	r3, r0, #1
 8001b96:	d102      	bne.n	8001b9e <_lseek_r+0x1e>
 8001b98:	682b      	ldr	r3, [r5, #0]
 8001b9a:	b103      	cbz	r3, 8001b9e <_lseek_r+0x1e>
 8001b9c:	6023      	str	r3, [r4, #0]
 8001b9e:	bd38      	pop	{r3, r4, r5, pc}
 8001ba0:	200001e8 	.word	0x200001e8

08001ba4 <_read_r>:
 8001ba4:	b538      	push	{r3, r4, r5, lr}
 8001ba6:	4d07      	ldr	r5, [pc, #28]	@ (8001bc4 <_read_r+0x20>)
 8001ba8:	4604      	mov	r4, r0
 8001baa:	4608      	mov	r0, r1
 8001bac:	4611      	mov	r1, r2
 8001bae:	2200      	movs	r2, #0
 8001bb0:	602a      	str	r2, [r5, #0]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	f7fe fc78 	bl	80004a8 <_read>
 8001bb8:	1c43      	adds	r3, r0, #1
 8001bba:	d102      	bne.n	8001bc2 <_read_r+0x1e>
 8001bbc:	682b      	ldr	r3, [r5, #0]
 8001bbe:	b103      	cbz	r3, 8001bc2 <_read_r+0x1e>
 8001bc0:	6023      	str	r3, [r4, #0]
 8001bc2:	bd38      	pop	{r3, r4, r5, pc}
 8001bc4:	200001e8 	.word	0x200001e8

08001bc8 <_write_r>:
 8001bc8:	b538      	push	{r3, r4, r5, lr}
 8001bca:	4d07      	ldr	r5, [pc, #28]	@ (8001be8 <_write_r+0x20>)
 8001bcc:	4604      	mov	r4, r0
 8001bce:	4608      	mov	r0, r1
 8001bd0:	4611      	mov	r1, r2
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	602a      	str	r2, [r5, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	f7fe fc83 	bl	80004e2 <_write>
 8001bdc:	1c43      	adds	r3, r0, #1
 8001bde:	d102      	bne.n	8001be6 <_write_r+0x1e>
 8001be0:	682b      	ldr	r3, [r5, #0]
 8001be2:	b103      	cbz	r3, 8001be6 <_write_r+0x1e>
 8001be4:	6023      	str	r3, [r4, #0]
 8001be6:	bd38      	pop	{r3, r4, r5, pc}
 8001be8:	200001e8 	.word	0x200001e8

08001bec <__errno>:
 8001bec:	4b01      	ldr	r3, [pc, #4]	@ (8001bf4 <__errno+0x8>)
 8001bee:	6818      	ldr	r0, [r3, #0]
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000018 	.word	0x20000018

08001bf8 <__libc_init_array>:
 8001bf8:	b570      	push	{r4, r5, r6, lr}
 8001bfa:	4d0d      	ldr	r5, [pc, #52]	@ (8001c30 <__libc_init_array+0x38>)
 8001bfc:	4c0d      	ldr	r4, [pc, #52]	@ (8001c34 <__libc_init_array+0x3c>)
 8001bfe:	1b64      	subs	r4, r4, r5
 8001c00:	10a4      	asrs	r4, r4, #2
 8001c02:	2600      	movs	r6, #0
 8001c04:	42a6      	cmp	r6, r4
 8001c06:	d109      	bne.n	8001c1c <__libc_init_array+0x24>
 8001c08:	4d0b      	ldr	r5, [pc, #44]	@ (8001c38 <__libc_init_array+0x40>)
 8001c0a:	4c0c      	ldr	r4, [pc, #48]	@ (8001c3c <__libc_init_array+0x44>)
 8001c0c:	f000 fd22 	bl	8002654 <_init>
 8001c10:	1b64      	subs	r4, r4, r5
 8001c12:	10a4      	asrs	r4, r4, #2
 8001c14:	2600      	movs	r6, #0
 8001c16:	42a6      	cmp	r6, r4
 8001c18:	d105      	bne.n	8001c26 <__libc_init_array+0x2e>
 8001c1a:	bd70      	pop	{r4, r5, r6, pc}
 8001c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c20:	4798      	blx	r3
 8001c22:	3601      	adds	r6, #1
 8001c24:	e7ee      	b.n	8001c04 <__libc_init_array+0xc>
 8001c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c2a:	4798      	blx	r3
 8001c2c:	3601      	adds	r6, #1
 8001c2e:	e7f2      	b.n	8001c16 <__libc_init_array+0x1e>
 8001c30:	08002750 	.word	0x08002750
 8001c34:	08002750 	.word	0x08002750
 8001c38:	08002750 	.word	0x08002750
 8001c3c:	08002754 	.word	0x08002754

08001c40 <__retarget_lock_init_recursive>:
 8001c40:	4770      	bx	lr

08001c42 <__retarget_lock_acquire_recursive>:
 8001c42:	4770      	bx	lr

08001c44 <__retarget_lock_release_recursive>:
 8001c44:	4770      	bx	lr
	...

08001c48 <_free_r>:
 8001c48:	b538      	push	{r3, r4, r5, lr}
 8001c4a:	4605      	mov	r5, r0
 8001c4c:	2900      	cmp	r1, #0
 8001c4e:	d041      	beq.n	8001cd4 <_free_r+0x8c>
 8001c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c54:	1f0c      	subs	r4, r1, #4
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	bfb8      	it	lt
 8001c5a:	18e4      	addlt	r4, r4, r3
 8001c5c:	f000 f8e0 	bl	8001e20 <__malloc_lock>
 8001c60:	4a1d      	ldr	r2, [pc, #116]	@ (8001cd8 <_free_r+0x90>)
 8001c62:	6813      	ldr	r3, [r2, #0]
 8001c64:	b933      	cbnz	r3, 8001c74 <_free_r+0x2c>
 8001c66:	6063      	str	r3, [r4, #4]
 8001c68:	6014      	str	r4, [r2, #0]
 8001c6a:	4628      	mov	r0, r5
 8001c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c70:	f000 b8dc 	b.w	8001e2c <__malloc_unlock>
 8001c74:	42a3      	cmp	r3, r4
 8001c76:	d908      	bls.n	8001c8a <_free_r+0x42>
 8001c78:	6820      	ldr	r0, [r4, #0]
 8001c7a:	1821      	adds	r1, r4, r0
 8001c7c:	428b      	cmp	r3, r1
 8001c7e:	bf01      	itttt	eq
 8001c80:	6819      	ldreq	r1, [r3, #0]
 8001c82:	685b      	ldreq	r3, [r3, #4]
 8001c84:	1809      	addeq	r1, r1, r0
 8001c86:	6021      	streq	r1, [r4, #0]
 8001c88:	e7ed      	b.n	8001c66 <_free_r+0x1e>
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	b10b      	cbz	r3, 8001c94 <_free_r+0x4c>
 8001c90:	42a3      	cmp	r3, r4
 8001c92:	d9fa      	bls.n	8001c8a <_free_r+0x42>
 8001c94:	6811      	ldr	r1, [r2, #0]
 8001c96:	1850      	adds	r0, r2, r1
 8001c98:	42a0      	cmp	r0, r4
 8001c9a:	d10b      	bne.n	8001cb4 <_free_r+0x6c>
 8001c9c:	6820      	ldr	r0, [r4, #0]
 8001c9e:	4401      	add	r1, r0
 8001ca0:	1850      	adds	r0, r2, r1
 8001ca2:	4283      	cmp	r3, r0
 8001ca4:	6011      	str	r1, [r2, #0]
 8001ca6:	d1e0      	bne.n	8001c6a <_free_r+0x22>
 8001ca8:	6818      	ldr	r0, [r3, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	6053      	str	r3, [r2, #4]
 8001cae:	4408      	add	r0, r1
 8001cb0:	6010      	str	r0, [r2, #0]
 8001cb2:	e7da      	b.n	8001c6a <_free_r+0x22>
 8001cb4:	d902      	bls.n	8001cbc <_free_r+0x74>
 8001cb6:	230c      	movs	r3, #12
 8001cb8:	602b      	str	r3, [r5, #0]
 8001cba:	e7d6      	b.n	8001c6a <_free_r+0x22>
 8001cbc:	6820      	ldr	r0, [r4, #0]
 8001cbe:	1821      	adds	r1, r4, r0
 8001cc0:	428b      	cmp	r3, r1
 8001cc2:	bf04      	itt	eq
 8001cc4:	6819      	ldreq	r1, [r3, #0]
 8001cc6:	685b      	ldreq	r3, [r3, #4]
 8001cc8:	6063      	str	r3, [r4, #4]
 8001cca:	bf04      	itt	eq
 8001ccc:	1809      	addeq	r1, r1, r0
 8001cce:	6021      	streq	r1, [r4, #0]
 8001cd0:	6054      	str	r4, [r2, #4]
 8001cd2:	e7ca      	b.n	8001c6a <_free_r+0x22>
 8001cd4:	bd38      	pop	{r3, r4, r5, pc}
 8001cd6:	bf00      	nop
 8001cd8:	200001f4 	.word	0x200001f4

08001cdc <sbrk_aligned>:
 8001cdc:	b570      	push	{r4, r5, r6, lr}
 8001cde:	4e0f      	ldr	r6, [pc, #60]	@ (8001d1c <sbrk_aligned+0x40>)
 8001ce0:	460c      	mov	r4, r1
 8001ce2:	6831      	ldr	r1, [r6, #0]
 8001ce4:	4605      	mov	r5, r0
 8001ce6:	b911      	cbnz	r1, 8001cee <sbrk_aligned+0x12>
 8001ce8:	f000 fca4 	bl	8002634 <_sbrk_r>
 8001cec:	6030      	str	r0, [r6, #0]
 8001cee:	4621      	mov	r1, r4
 8001cf0:	4628      	mov	r0, r5
 8001cf2:	f000 fc9f 	bl	8002634 <_sbrk_r>
 8001cf6:	1c43      	adds	r3, r0, #1
 8001cf8:	d103      	bne.n	8001d02 <sbrk_aligned+0x26>
 8001cfa:	f04f 34ff 	mov.w	r4, #4294967295
 8001cfe:	4620      	mov	r0, r4
 8001d00:	bd70      	pop	{r4, r5, r6, pc}
 8001d02:	1cc4      	adds	r4, r0, #3
 8001d04:	f024 0403 	bic.w	r4, r4, #3
 8001d08:	42a0      	cmp	r0, r4
 8001d0a:	d0f8      	beq.n	8001cfe <sbrk_aligned+0x22>
 8001d0c:	1a21      	subs	r1, r4, r0
 8001d0e:	4628      	mov	r0, r5
 8001d10:	f000 fc90 	bl	8002634 <_sbrk_r>
 8001d14:	3001      	adds	r0, #1
 8001d16:	d1f2      	bne.n	8001cfe <sbrk_aligned+0x22>
 8001d18:	e7ef      	b.n	8001cfa <sbrk_aligned+0x1e>
 8001d1a:	bf00      	nop
 8001d1c:	200001f0 	.word	0x200001f0

08001d20 <_malloc_r>:
 8001d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d24:	1ccd      	adds	r5, r1, #3
 8001d26:	f025 0503 	bic.w	r5, r5, #3
 8001d2a:	3508      	adds	r5, #8
 8001d2c:	2d0c      	cmp	r5, #12
 8001d2e:	bf38      	it	cc
 8001d30:	250c      	movcc	r5, #12
 8001d32:	2d00      	cmp	r5, #0
 8001d34:	4606      	mov	r6, r0
 8001d36:	db01      	blt.n	8001d3c <_malloc_r+0x1c>
 8001d38:	42a9      	cmp	r1, r5
 8001d3a:	d904      	bls.n	8001d46 <_malloc_r+0x26>
 8001d3c:	230c      	movs	r3, #12
 8001d3e:	6033      	str	r3, [r6, #0]
 8001d40:	2000      	movs	r0, #0
 8001d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001e1c <_malloc_r+0xfc>
 8001d4a:	f000 f869 	bl	8001e20 <__malloc_lock>
 8001d4e:	f8d8 3000 	ldr.w	r3, [r8]
 8001d52:	461c      	mov	r4, r3
 8001d54:	bb44      	cbnz	r4, 8001da8 <_malloc_r+0x88>
 8001d56:	4629      	mov	r1, r5
 8001d58:	4630      	mov	r0, r6
 8001d5a:	f7ff ffbf 	bl	8001cdc <sbrk_aligned>
 8001d5e:	1c43      	adds	r3, r0, #1
 8001d60:	4604      	mov	r4, r0
 8001d62:	d158      	bne.n	8001e16 <_malloc_r+0xf6>
 8001d64:	f8d8 4000 	ldr.w	r4, [r8]
 8001d68:	4627      	mov	r7, r4
 8001d6a:	2f00      	cmp	r7, #0
 8001d6c:	d143      	bne.n	8001df6 <_malloc_r+0xd6>
 8001d6e:	2c00      	cmp	r4, #0
 8001d70:	d04b      	beq.n	8001e0a <_malloc_r+0xea>
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	4639      	mov	r1, r7
 8001d76:	4630      	mov	r0, r6
 8001d78:	eb04 0903 	add.w	r9, r4, r3
 8001d7c:	f000 fc5a 	bl	8002634 <_sbrk_r>
 8001d80:	4581      	cmp	r9, r0
 8001d82:	d142      	bne.n	8001e0a <_malloc_r+0xea>
 8001d84:	6821      	ldr	r1, [r4, #0]
 8001d86:	1a6d      	subs	r5, r5, r1
 8001d88:	4629      	mov	r1, r5
 8001d8a:	4630      	mov	r0, r6
 8001d8c:	f7ff ffa6 	bl	8001cdc <sbrk_aligned>
 8001d90:	3001      	adds	r0, #1
 8001d92:	d03a      	beq.n	8001e0a <_malloc_r+0xea>
 8001d94:	6823      	ldr	r3, [r4, #0]
 8001d96:	442b      	add	r3, r5
 8001d98:	6023      	str	r3, [r4, #0]
 8001d9a:	f8d8 3000 	ldr.w	r3, [r8]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	bb62      	cbnz	r2, 8001dfc <_malloc_r+0xdc>
 8001da2:	f8c8 7000 	str.w	r7, [r8]
 8001da6:	e00f      	b.n	8001dc8 <_malloc_r+0xa8>
 8001da8:	6822      	ldr	r2, [r4, #0]
 8001daa:	1b52      	subs	r2, r2, r5
 8001dac:	d420      	bmi.n	8001df0 <_malloc_r+0xd0>
 8001dae:	2a0b      	cmp	r2, #11
 8001db0:	d917      	bls.n	8001de2 <_malloc_r+0xc2>
 8001db2:	1961      	adds	r1, r4, r5
 8001db4:	42a3      	cmp	r3, r4
 8001db6:	6025      	str	r5, [r4, #0]
 8001db8:	bf18      	it	ne
 8001dba:	6059      	strne	r1, [r3, #4]
 8001dbc:	6863      	ldr	r3, [r4, #4]
 8001dbe:	bf08      	it	eq
 8001dc0:	f8c8 1000 	streq.w	r1, [r8]
 8001dc4:	5162      	str	r2, [r4, r5]
 8001dc6:	604b      	str	r3, [r1, #4]
 8001dc8:	4630      	mov	r0, r6
 8001dca:	f000 f82f 	bl	8001e2c <__malloc_unlock>
 8001dce:	f104 000b 	add.w	r0, r4, #11
 8001dd2:	1d23      	adds	r3, r4, #4
 8001dd4:	f020 0007 	bic.w	r0, r0, #7
 8001dd8:	1ac2      	subs	r2, r0, r3
 8001dda:	bf1c      	itt	ne
 8001ddc:	1a1b      	subne	r3, r3, r0
 8001dde:	50a3      	strne	r3, [r4, r2]
 8001de0:	e7af      	b.n	8001d42 <_malloc_r+0x22>
 8001de2:	6862      	ldr	r2, [r4, #4]
 8001de4:	42a3      	cmp	r3, r4
 8001de6:	bf0c      	ite	eq
 8001de8:	f8c8 2000 	streq.w	r2, [r8]
 8001dec:	605a      	strne	r2, [r3, #4]
 8001dee:	e7eb      	b.n	8001dc8 <_malloc_r+0xa8>
 8001df0:	4623      	mov	r3, r4
 8001df2:	6864      	ldr	r4, [r4, #4]
 8001df4:	e7ae      	b.n	8001d54 <_malloc_r+0x34>
 8001df6:	463c      	mov	r4, r7
 8001df8:	687f      	ldr	r7, [r7, #4]
 8001dfa:	e7b6      	b.n	8001d6a <_malloc_r+0x4a>
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	42a3      	cmp	r3, r4
 8001e02:	d1fb      	bne.n	8001dfc <_malloc_r+0xdc>
 8001e04:	2300      	movs	r3, #0
 8001e06:	6053      	str	r3, [r2, #4]
 8001e08:	e7de      	b.n	8001dc8 <_malloc_r+0xa8>
 8001e0a:	230c      	movs	r3, #12
 8001e0c:	6033      	str	r3, [r6, #0]
 8001e0e:	4630      	mov	r0, r6
 8001e10:	f000 f80c 	bl	8001e2c <__malloc_unlock>
 8001e14:	e794      	b.n	8001d40 <_malloc_r+0x20>
 8001e16:	6005      	str	r5, [r0, #0]
 8001e18:	e7d6      	b.n	8001dc8 <_malloc_r+0xa8>
 8001e1a:	bf00      	nop
 8001e1c:	200001f4 	.word	0x200001f4

08001e20 <__malloc_lock>:
 8001e20:	4801      	ldr	r0, [pc, #4]	@ (8001e28 <__malloc_lock+0x8>)
 8001e22:	f7ff bf0e 	b.w	8001c42 <__retarget_lock_acquire_recursive>
 8001e26:	bf00      	nop
 8001e28:	200001ec 	.word	0x200001ec

08001e2c <__malloc_unlock>:
 8001e2c:	4801      	ldr	r0, [pc, #4]	@ (8001e34 <__malloc_unlock+0x8>)
 8001e2e:	f7ff bf09 	b.w	8001c44 <__retarget_lock_release_recursive>
 8001e32:	bf00      	nop
 8001e34:	200001ec 	.word	0x200001ec

08001e38 <__sfputc_r>:
 8001e38:	6893      	ldr	r3, [r2, #8]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	b410      	push	{r4}
 8001e40:	6093      	str	r3, [r2, #8]
 8001e42:	da08      	bge.n	8001e56 <__sfputc_r+0x1e>
 8001e44:	6994      	ldr	r4, [r2, #24]
 8001e46:	42a3      	cmp	r3, r4
 8001e48:	db01      	blt.n	8001e4e <__sfputc_r+0x16>
 8001e4a:	290a      	cmp	r1, #10
 8001e4c:	d103      	bne.n	8001e56 <__sfputc_r+0x1e>
 8001e4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e52:	f7ff bde8 	b.w	8001a26 <__swbuf_r>
 8001e56:	6813      	ldr	r3, [r2, #0]
 8001e58:	1c58      	adds	r0, r3, #1
 8001e5a:	6010      	str	r0, [r2, #0]
 8001e5c:	7019      	strb	r1, [r3, #0]
 8001e5e:	4608      	mov	r0, r1
 8001e60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <__sfputs_r>:
 8001e66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e68:	4606      	mov	r6, r0
 8001e6a:	460f      	mov	r7, r1
 8001e6c:	4614      	mov	r4, r2
 8001e6e:	18d5      	adds	r5, r2, r3
 8001e70:	42ac      	cmp	r4, r5
 8001e72:	d101      	bne.n	8001e78 <__sfputs_r+0x12>
 8001e74:	2000      	movs	r0, #0
 8001e76:	e007      	b.n	8001e88 <__sfputs_r+0x22>
 8001e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e7c:	463a      	mov	r2, r7
 8001e7e:	4630      	mov	r0, r6
 8001e80:	f7ff ffda 	bl	8001e38 <__sfputc_r>
 8001e84:	1c43      	adds	r3, r0, #1
 8001e86:	d1f3      	bne.n	8001e70 <__sfputs_r+0xa>
 8001e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001e8c <_vfiprintf_r>:
 8001e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e90:	460d      	mov	r5, r1
 8001e92:	b09d      	sub	sp, #116	@ 0x74
 8001e94:	4614      	mov	r4, r2
 8001e96:	4698      	mov	r8, r3
 8001e98:	4606      	mov	r6, r0
 8001e9a:	b118      	cbz	r0, 8001ea4 <_vfiprintf_r+0x18>
 8001e9c:	6a03      	ldr	r3, [r0, #32]
 8001e9e:	b90b      	cbnz	r3, 8001ea4 <_vfiprintf_r+0x18>
 8001ea0:	f7ff fcd8 	bl	8001854 <__sinit>
 8001ea4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001ea6:	07d9      	lsls	r1, r3, #31
 8001ea8:	d405      	bmi.n	8001eb6 <_vfiprintf_r+0x2a>
 8001eaa:	89ab      	ldrh	r3, [r5, #12]
 8001eac:	059a      	lsls	r2, r3, #22
 8001eae:	d402      	bmi.n	8001eb6 <_vfiprintf_r+0x2a>
 8001eb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001eb2:	f7ff fec6 	bl	8001c42 <__retarget_lock_acquire_recursive>
 8001eb6:	89ab      	ldrh	r3, [r5, #12]
 8001eb8:	071b      	lsls	r3, r3, #28
 8001eba:	d501      	bpl.n	8001ec0 <_vfiprintf_r+0x34>
 8001ebc:	692b      	ldr	r3, [r5, #16]
 8001ebe:	b99b      	cbnz	r3, 8001ee8 <_vfiprintf_r+0x5c>
 8001ec0:	4629      	mov	r1, r5
 8001ec2:	4630      	mov	r0, r6
 8001ec4:	f7ff fdee 	bl	8001aa4 <__swsetup_r>
 8001ec8:	b170      	cbz	r0, 8001ee8 <_vfiprintf_r+0x5c>
 8001eca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001ecc:	07dc      	lsls	r4, r3, #31
 8001ece:	d504      	bpl.n	8001eda <_vfiprintf_r+0x4e>
 8001ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed4:	b01d      	add	sp, #116	@ 0x74
 8001ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001eda:	89ab      	ldrh	r3, [r5, #12]
 8001edc:	0598      	lsls	r0, r3, #22
 8001ede:	d4f7      	bmi.n	8001ed0 <_vfiprintf_r+0x44>
 8001ee0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001ee2:	f7ff feaf 	bl	8001c44 <__retarget_lock_release_recursive>
 8001ee6:	e7f3      	b.n	8001ed0 <_vfiprintf_r+0x44>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	9309      	str	r3, [sp, #36]	@ 0x24
 8001eec:	2320      	movs	r3, #32
 8001eee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001ef2:	f8cd 800c 	str.w	r8, [sp, #12]
 8001ef6:	2330      	movs	r3, #48	@ 0x30
 8001ef8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80020a8 <_vfiprintf_r+0x21c>
 8001efc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001f00:	f04f 0901 	mov.w	r9, #1
 8001f04:	4623      	mov	r3, r4
 8001f06:	469a      	mov	sl, r3
 8001f08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f0c:	b10a      	cbz	r2, 8001f12 <_vfiprintf_r+0x86>
 8001f0e:	2a25      	cmp	r2, #37	@ 0x25
 8001f10:	d1f9      	bne.n	8001f06 <_vfiprintf_r+0x7a>
 8001f12:	ebba 0b04 	subs.w	fp, sl, r4
 8001f16:	d00b      	beq.n	8001f30 <_vfiprintf_r+0xa4>
 8001f18:	465b      	mov	r3, fp
 8001f1a:	4622      	mov	r2, r4
 8001f1c:	4629      	mov	r1, r5
 8001f1e:	4630      	mov	r0, r6
 8001f20:	f7ff ffa1 	bl	8001e66 <__sfputs_r>
 8001f24:	3001      	adds	r0, #1
 8001f26:	f000 80a7 	beq.w	8002078 <_vfiprintf_r+0x1ec>
 8001f2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001f2c:	445a      	add	r2, fp
 8001f2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8001f30:	f89a 3000 	ldrb.w	r3, [sl]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 809f 	beq.w	8002078 <_vfiprintf_r+0x1ec>
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f44:	f10a 0a01 	add.w	sl, sl, #1
 8001f48:	9304      	str	r3, [sp, #16]
 8001f4a:	9307      	str	r3, [sp, #28]
 8001f4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001f50:	931a      	str	r3, [sp, #104]	@ 0x68
 8001f52:	4654      	mov	r4, sl
 8001f54:	2205      	movs	r2, #5
 8001f56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f5a:	4853      	ldr	r0, [pc, #332]	@ (80020a8 <_vfiprintf_r+0x21c>)
 8001f5c:	f7fe f940 	bl	80001e0 <memchr>
 8001f60:	9a04      	ldr	r2, [sp, #16]
 8001f62:	b9d8      	cbnz	r0, 8001f9c <_vfiprintf_r+0x110>
 8001f64:	06d1      	lsls	r1, r2, #27
 8001f66:	bf44      	itt	mi
 8001f68:	2320      	movmi	r3, #32
 8001f6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001f6e:	0713      	lsls	r3, r2, #28
 8001f70:	bf44      	itt	mi
 8001f72:	232b      	movmi	r3, #43	@ 0x2b
 8001f74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001f78:	f89a 3000 	ldrb.w	r3, [sl]
 8001f7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f7e:	d015      	beq.n	8001fac <_vfiprintf_r+0x120>
 8001f80:	9a07      	ldr	r2, [sp, #28]
 8001f82:	4654      	mov	r4, sl
 8001f84:	2000      	movs	r0, #0
 8001f86:	f04f 0c0a 	mov.w	ip, #10
 8001f8a:	4621      	mov	r1, r4
 8001f8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001f90:	3b30      	subs	r3, #48	@ 0x30
 8001f92:	2b09      	cmp	r3, #9
 8001f94:	d94b      	bls.n	800202e <_vfiprintf_r+0x1a2>
 8001f96:	b1b0      	cbz	r0, 8001fc6 <_vfiprintf_r+0x13a>
 8001f98:	9207      	str	r2, [sp, #28]
 8001f9a:	e014      	b.n	8001fc6 <_vfiprintf_r+0x13a>
 8001f9c:	eba0 0308 	sub.w	r3, r0, r8
 8001fa0:	fa09 f303 	lsl.w	r3, r9, r3
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	9304      	str	r3, [sp, #16]
 8001fa8:	46a2      	mov	sl, r4
 8001faa:	e7d2      	b.n	8001f52 <_vfiprintf_r+0xc6>
 8001fac:	9b03      	ldr	r3, [sp, #12]
 8001fae:	1d19      	adds	r1, r3, #4
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	9103      	str	r1, [sp, #12]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	bfbb      	ittet	lt
 8001fb8:	425b      	neglt	r3, r3
 8001fba:	f042 0202 	orrlt.w	r2, r2, #2
 8001fbe:	9307      	strge	r3, [sp, #28]
 8001fc0:	9307      	strlt	r3, [sp, #28]
 8001fc2:	bfb8      	it	lt
 8001fc4:	9204      	strlt	r2, [sp, #16]
 8001fc6:	7823      	ldrb	r3, [r4, #0]
 8001fc8:	2b2e      	cmp	r3, #46	@ 0x2e
 8001fca:	d10a      	bne.n	8001fe2 <_vfiprintf_r+0x156>
 8001fcc:	7863      	ldrb	r3, [r4, #1]
 8001fce:	2b2a      	cmp	r3, #42	@ 0x2a
 8001fd0:	d132      	bne.n	8002038 <_vfiprintf_r+0x1ac>
 8001fd2:	9b03      	ldr	r3, [sp, #12]
 8001fd4:	1d1a      	adds	r2, r3, #4
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	9203      	str	r2, [sp, #12]
 8001fda:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001fde:	3402      	adds	r4, #2
 8001fe0:	9305      	str	r3, [sp, #20]
 8001fe2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80020b8 <_vfiprintf_r+0x22c>
 8001fe6:	7821      	ldrb	r1, [r4, #0]
 8001fe8:	2203      	movs	r2, #3
 8001fea:	4650      	mov	r0, sl
 8001fec:	f7fe f8f8 	bl	80001e0 <memchr>
 8001ff0:	b138      	cbz	r0, 8002002 <_vfiprintf_r+0x176>
 8001ff2:	9b04      	ldr	r3, [sp, #16]
 8001ff4:	eba0 000a 	sub.w	r0, r0, sl
 8001ff8:	2240      	movs	r2, #64	@ 0x40
 8001ffa:	4082      	lsls	r2, r0
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	3401      	adds	r4, #1
 8002000:	9304      	str	r3, [sp, #16]
 8002002:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002006:	4829      	ldr	r0, [pc, #164]	@ (80020ac <_vfiprintf_r+0x220>)
 8002008:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800200c:	2206      	movs	r2, #6
 800200e:	f7fe f8e7 	bl	80001e0 <memchr>
 8002012:	2800      	cmp	r0, #0
 8002014:	d03f      	beq.n	8002096 <_vfiprintf_r+0x20a>
 8002016:	4b26      	ldr	r3, [pc, #152]	@ (80020b0 <_vfiprintf_r+0x224>)
 8002018:	bb1b      	cbnz	r3, 8002062 <_vfiprintf_r+0x1d6>
 800201a:	9b03      	ldr	r3, [sp, #12]
 800201c:	3307      	adds	r3, #7
 800201e:	f023 0307 	bic.w	r3, r3, #7
 8002022:	3308      	adds	r3, #8
 8002024:	9303      	str	r3, [sp, #12]
 8002026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002028:	443b      	add	r3, r7
 800202a:	9309      	str	r3, [sp, #36]	@ 0x24
 800202c:	e76a      	b.n	8001f04 <_vfiprintf_r+0x78>
 800202e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002032:	460c      	mov	r4, r1
 8002034:	2001      	movs	r0, #1
 8002036:	e7a8      	b.n	8001f8a <_vfiprintf_r+0xfe>
 8002038:	2300      	movs	r3, #0
 800203a:	3401      	adds	r4, #1
 800203c:	9305      	str	r3, [sp, #20]
 800203e:	4619      	mov	r1, r3
 8002040:	f04f 0c0a 	mov.w	ip, #10
 8002044:	4620      	mov	r0, r4
 8002046:	f810 2b01 	ldrb.w	r2, [r0], #1
 800204a:	3a30      	subs	r2, #48	@ 0x30
 800204c:	2a09      	cmp	r2, #9
 800204e:	d903      	bls.n	8002058 <_vfiprintf_r+0x1cc>
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0c6      	beq.n	8001fe2 <_vfiprintf_r+0x156>
 8002054:	9105      	str	r1, [sp, #20]
 8002056:	e7c4      	b.n	8001fe2 <_vfiprintf_r+0x156>
 8002058:	fb0c 2101 	mla	r1, ip, r1, r2
 800205c:	4604      	mov	r4, r0
 800205e:	2301      	movs	r3, #1
 8002060:	e7f0      	b.n	8002044 <_vfiprintf_r+0x1b8>
 8002062:	ab03      	add	r3, sp, #12
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	462a      	mov	r2, r5
 8002068:	4b12      	ldr	r3, [pc, #72]	@ (80020b4 <_vfiprintf_r+0x228>)
 800206a:	a904      	add	r1, sp, #16
 800206c:	4630      	mov	r0, r6
 800206e:	f3af 8000 	nop.w
 8002072:	4607      	mov	r7, r0
 8002074:	1c78      	adds	r0, r7, #1
 8002076:	d1d6      	bne.n	8002026 <_vfiprintf_r+0x19a>
 8002078:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800207a:	07d9      	lsls	r1, r3, #31
 800207c:	d405      	bmi.n	800208a <_vfiprintf_r+0x1fe>
 800207e:	89ab      	ldrh	r3, [r5, #12]
 8002080:	059a      	lsls	r2, r3, #22
 8002082:	d402      	bmi.n	800208a <_vfiprintf_r+0x1fe>
 8002084:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002086:	f7ff fddd 	bl	8001c44 <__retarget_lock_release_recursive>
 800208a:	89ab      	ldrh	r3, [r5, #12]
 800208c:	065b      	lsls	r3, r3, #25
 800208e:	f53f af1f 	bmi.w	8001ed0 <_vfiprintf_r+0x44>
 8002092:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002094:	e71e      	b.n	8001ed4 <_vfiprintf_r+0x48>
 8002096:	ab03      	add	r3, sp, #12
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	462a      	mov	r2, r5
 800209c:	4b05      	ldr	r3, [pc, #20]	@ (80020b4 <_vfiprintf_r+0x228>)
 800209e:	a904      	add	r1, sp, #16
 80020a0:	4630      	mov	r0, r6
 80020a2:	f000 f879 	bl	8002198 <_printf_i>
 80020a6:	e7e4      	b.n	8002072 <_vfiprintf_r+0x1e6>
 80020a8:	08002712 	.word	0x08002712
 80020ac:	0800271c 	.word	0x0800271c
 80020b0:	00000000 	.word	0x00000000
 80020b4:	08001e67 	.word	0x08001e67
 80020b8:	08002718 	.word	0x08002718

080020bc <_printf_common>:
 80020bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020c0:	4616      	mov	r6, r2
 80020c2:	4698      	mov	r8, r3
 80020c4:	688a      	ldr	r2, [r1, #8]
 80020c6:	690b      	ldr	r3, [r1, #16]
 80020c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80020cc:	4293      	cmp	r3, r2
 80020ce:	bfb8      	it	lt
 80020d0:	4613      	movlt	r3, r2
 80020d2:	6033      	str	r3, [r6, #0]
 80020d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80020d8:	4607      	mov	r7, r0
 80020da:	460c      	mov	r4, r1
 80020dc:	b10a      	cbz	r2, 80020e2 <_printf_common+0x26>
 80020de:	3301      	adds	r3, #1
 80020e0:	6033      	str	r3, [r6, #0]
 80020e2:	6823      	ldr	r3, [r4, #0]
 80020e4:	0699      	lsls	r1, r3, #26
 80020e6:	bf42      	ittt	mi
 80020e8:	6833      	ldrmi	r3, [r6, #0]
 80020ea:	3302      	addmi	r3, #2
 80020ec:	6033      	strmi	r3, [r6, #0]
 80020ee:	6825      	ldr	r5, [r4, #0]
 80020f0:	f015 0506 	ands.w	r5, r5, #6
 80020f4:	d106      	bne.n	8002104 <_printf_common+0x48>
 80020f6:	f104 0a19 	add.w	sl, r4, #25
 80020fa:	68e3      	ldr	r3, [r4, #12]
 80020fc:	6832      	ldr	r2, [r6, #0]
 80020fe:	1a9b      	subs	r3, r3, r2
 8002100:	42ab      	cmp	r3, r5
 8002102:	dc26      	bgt.n	8002152 <_printf_common+0x96>
 8002104:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002108:	6822      	ldr	r2, [r4, #0]
 800210a:	3b00      	subs	r3, #0
 800210c:	bf18      	it	ne
 800210e:	2301      	movne	r3, #1
 8002110:	0692      	lsls	r2, r2, #26
 8002112:	d42b      	bmi.n	800216c <_printf_common+0xb0>
 8002114:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002118:	4641      	mov	r1, r8
 800211a:	4638      	mov	r0, r7
 800211c:	47c8      	blx	r9
 800211e:	3001      	adds	r0, #1
 8002120:	d01e      	beq.n	8002160 <_printf_common+0xa4>
 8002122:	6823      	ldr	r3, [r4, #0]
 8002124:	6922      	ldr	r2, [r4, #16]
 8002126:	f003 0306 	and.w	r3, r3, #6
 800212a:	2b04      	cmp	r3, #4
 800212c:	bf02      	ittt	eq
 800212e:	68e5      	ldreq	r5, [r4, #12]
 8002130:	6833      	ldreq	r3, [r6, #0]
 8002132:	1aed      	subeq	r5, r5, r3
 8002134:	68a3      	ldr	r3, [r4, #8]
 8002136:	bf0c      	ite	eq
 8002138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800213c:	2500      	movne	r5, #0
 800213e:	4293      	cmp	r3, r2
 8002140:	bfc4      	itt	gt
 8002142:	1a9b      	subgt	r3, r3, r2
 8002144:	18ed      	addgt	r5, r5, r3
 8002146:	2600      	movs	r6, #0
 8002148:	341a      	adds	r4, #26
 800214a:	42b5      	cmp	r5, r6
 800214c:	d11a      	bne.n	8002184 <_printf_common+0xc8>
 800214e:	2000      	movs	r0, #0
 8002150:	e008      	b.n	8002164 <_printf_common+0xa8>
 8002152:	2301      	movs	r3, #1
 8002154:	4652      	mov	r2, sl
 8002156:	4641      	mov	r1, r8
 8002158:	4638      	mov	r0, r7
 800215a:	47c8      	blx	r9
 800215c:	3001      	adds	r0, #1
 800215e:	d103      	bne.n	8002168 <_printf_common+0xac>
 8002160:	f04f 30ff 	mov.w	r0, #4294967295
 8002164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002168:	3501      	adds	r5, #1
 800216a:	e7c6      	b.n	80020fa <_printf_common+0x3e>
 800216c:	18e1      	adds	r1, r4, r3
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	2030      	movs	r0, #48	@ 0x30
 8002172:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002176:	4422      	add	r2, r4
 8002178:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800217c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002180:	3302      	adds	r3, #2
 8002182:	e7c7      	b.n	8002114 <_printf_common+0x58>
 8002184:	2301      	movs	r3, #1
 8002186:	4622      	mov	r2, r4
 8002188:	4641      	mov	r1, r8
 800218a:	4638      	mov	r0, r7
 800218c:	47c8      	blx	r9
 800218e:	3001      	adds	r0, #1
 8002190:	d0e6      	beq.n	8002160 <_printf_common+0xa4>
 8002192:	3601      	adds	r6, #1
 8002194:	e7d9      	b.n	800214a <_printf_common+0x8e>
	...

08002198 <_printf_i>:
 8002198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800219c:	7e0f      	ldrb	r7, [r1, #24]
 800219e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80021a0:	2f78      	cmp	r7, #120	@ 0x78
 80021a2:	4691      	mov	r9, r2
 80021a4:	4680      	mov	r8, r0
 80021a6:	460c      	mov	r4, r1
 80021a8:	469a      	mov	sl, r3
 80021aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80021ae:	d807      	bhi.n	80021c0 <_printf_i+0x28>
 80021b0:	2f62      	cmp	r7, #98	@ 0x62
 80021b2:	d80a      	bhi.n	80021ca <_printf_i+0x32>
 80021b4:	2f00      	cmp	r7, #0
 80021b6:	f000 80d1 	beq.w	800235c <_printf_i+0x1c4>
 80021ba:	2f58      	cmp	r7, #88	@ 0x58
 80021bc:	f000 80b8 	beq.w	8002330 <_printf_i+0x198>
 80021c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80021c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80021c8:	e03a      	b.n	8002240 <_printf_i+0xa8>
 80021ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80021ce:	2b15      	cmp	r3, #21
 80021d0:	d8f6      	bhi.n	80021c0 <_printf_i+0x28>
 80021d2:	a101      	add	r1, pc, #4	@ (adr r1, 80021d8 <_printf_i+0x40>)
 80021d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80021d8:	08002231 	.word	0x08002231
 80021dc:	08002245 	.word	0x08002245
 80021e0:	080021c1 	.word	0x080021c1
 80021e4:	080021c1 	.word	0x080021c1
 80021e8:	080021c1 	.word	0x080021c1
 80021ec:	080021c1 	.word	0x080021c1
 80021f0:	08002245 	.word	0x08002245
 80021f4:	080021c1 	.word	0x080021c1
 80021f8:	080021c1 	.word	0x080021c1
 80021fc:	080021c1 	.word	0x080021c1
 8002200:	080021c1 	.word	0x080021c1
 8002204:	08002343 	.word	0x08002343
 8002208:	0800226f 	.word	0x0800226f
 800220c:	080022fd 	.word	0x080022fd
 8002210:	080021c1 	.word	0x080021c1
 8002214:	080021c1 	.word	0x080021c1
 8002218:	08002365 	.word	0x08002365
 800221c:	080021c1 	.word	0x080021c1
 8002220:	0800226f 	.word	0x0800226f
 8002224:	080021c1 	.word	0x080021c1
 8002228:	080021c1 	.word	0x080021c1
 800222c:	08002305 	.word	0x08002305
 8002230:	6833      	ldr	r3, [r6, #0]
 8002232:	1d1a      	adds	r2, r3, #4
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6032      	str	r2, [r6, #0]
 8002238:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800223c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002240:	2301      	movs	r3, #1
 8002242:	e09c      	b.n	800237e <_printf_i+0x1e6>
 8002244:	6833      	ldr	r3, [r6, #0]
 8002246:	6820      	ldr	r0, [r4, #0]
 8002248:	1d19      	adds	r1, r3, #4
 800224a:	6031      	str	r1, [r6, #0]
 800224c:	0606      	lsls	r6, r0, #24
 800224e:	d501      	bpl.n	8002254 <_printf_i+0xbc>
 8002250:	681d      	ldr	r5, [r3, #0]
 8002252:	e003      	b.n	800225c <_printf_i+0xc4>
 8002254:	0645      	lsls	r5, r0, #25
 8002256:	d5fb      	bpl.n	8002250 <_printf_i+0xb8>
 8002258:	f9b3 5000 	ldrsh.w	r5, [r3]
 800225c:	2d00      	cmp	r5, #0
 800225e:	da03      	bge.n	8002268 <_printf_i+0xd0>
 8002260:	232d      	movs	r3, #45	@ 0x2d
 8002262:	426d      	negs	r5, r5
 8002264:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002268:	4858      	ldr	r0, [pc, #352]	@ (80023cc <_printf_i+0x234>)
 800226a:	230a      	movs	r3, #10
 800226c:	e011      	b.n	8002292 <_printf_i+0xfa>
 800226e:	6821      	ldr	r1, [r4, #0]
 8002270:	6833      	ldr	r3, [r6, #0]
 8002272:	0608      	lsls	r0, r1, #24
 8002274:	f853 5b04 	ldr.w	r5, [r3], #4
 8002278:	d402      	bmi.n	8002280 <_printf_i+0xe8>
 800227a:	0649      	lsls	r1, r1, #25
 800227c:	bf48      	it	mi
 800227e:	b2ad      	uxthmi	r5, r5
 8002280:	2f6f      	cmp	r7, #111	@ 0x6f
 8002282:	4852      	ldr	r0, [pc, #328]	@ (80023cc <_printf_i+0x234>)
 8002284:	6033      	str	r3, [r6, #0]
 8002286:	bf14      	ite	ne
 8002288:	230a      	movne	r3, #10
 800228a:	2308      	moveq	r3, #8
 800228c:	2100      	movs	r1, #0
 800228e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002292:	6866      	ldr	r6, [r4, #4]
 8002294:	60a6      	str	r6, [r4, #8]
 8002296:	2e00      	cmp	r6, #0
 8002298:	db05      	blt.n	80022a6 <_printf_i+0x10e>
 800229a:	6821      	ldr	r1, [r4, #0]
 800229c:	432e      	orrs	r6, r5
 800229e:	f021 0104 	bic.w	r1, r1, #4
 80022a2:	6021      	str	r1, [r4, #0]
 80022a4:	d04b      	beq.n	800233e <_printf_i+0x1a6>
 80022a6:	4616      	mov	r6, r2
 80022a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80022ac:	fb03 5711 	mls	r7, r3, r1, r5
 80022b0:	5dc7      	ldrb	r7, [r0, r7]
 80022b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80022b6:	462f      	mov	r7, r5
 80022b8:	42bb      	cmp	r3, r7
 80022ba:	460d      	mov	r5, r1
 80022bc:	d9f4      	bls.n	80022a8 <_printf_i+0x110>
 80022be:	2b08      	cmp	r3, #8
 80022c0:	d10b      	bne.n	80022da <_printf_i+0x142>
 80022c2:	6823      	ldr	r3, [r4, #0]
 80022c4:	07df      	lsls	r7, r3, #31
 80022c6:	d508      	bpl.n	80022da <_printf_i+0x142>
 80022c8:	6923      	ldr	r3, [r4, #16]
 80022ca:	6861      	ldr	r1, [r4, #4]
 80022cc:	4299      	cmp	r1, r3
 80022ce:	bfde      	ittt	le
 80022d0:	2330      	movle	r3, #48	@ 0x30
 80022d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80022d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80022da:	1b92      	subs	r2, r2, r6
 80022dc:	6122      	str	r2, [r4, #16]
 80022de:	f8cd a000 	str.w	sl, [sp]
 80022e2:	464b      	mov	r3, r9
 80022e4:	aa03      	add	r2, sp, #12
 80022e6:	4621      	mov	r1, r4
 80022e8:	4640      	mov	r0, r8
 80022ea:	f7ff fee7 	bl	80020bc <_printf_common>
 80022ee:	3001      	adds	r0, #1
 80022f0:	d14a      	bne.n	8002388 <_printf_i+0x1f0>
 80022f2:	f04f 30ff 	mov.w	r0, #4294967295
 80022f6:	b004      	add	sp, #16
 80022f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022fc:	6823      	ldr	r3, [r4, #0]
 80022fe:	f043 0320 	orr.w	r3, r3, #32
 8002302:	6023      	str	r3, [r4, #0]
 8002304:	4832      	ldr	r0, [pc, #200]	@ (80023d0 <_printf_i+0x238>)
 8002306:	2778      	movs	r7, #120	@ 0x78
 8002308:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800230c:	6823      	ldr	r3, [r4, #0]
 800230e:	6831      	ldr	r1, [r6, #0]
 8002310:	061f      	lsls	r7, r3, #24
 8002312:	f851 5b04 	ldr.w	r5, [r1], #4
 8002316:	d402      	bmi.n	800231e <_printf_i+0x186>
 8002318:	065f      	lsls	r7, r3, #25
 800231a:	bf48      	it	mi
 800231c:	b2ad      	uxthmi	r5, r5
 800231e:	6031      	str	r1, [r6, #0]
 8002320:	07d9      	lsls	r1, r3, #31
 8002322:	bf44      	itt	mi
 8002324:	f043 0320 	orrmi.w	r3, r3, #32
 8002328:	6023      	strmi	r3, [r4, #0]
 800232a:	b11d      	cbz	r5, 8002334 <_printf_i+0x19c>
 800232c:	2310      	movs	r3, #16
 800232e:	e7ad      	b.n	800228c <_printf_i+0xf4>
 8002330:	4826      	ldr	r0, [pc, #152]	@ (80023cc <_printf_i+0x234>)
 8002332:	e7e9      	b.n	8002308 <_printf_i+0x170>
 8002334:	6823      	ldr	r3, [r4, #0]
 8002336:	f023 0320 	bic.w	r3, r3, #32
 800233a:	6023      	str	r3, [r4, #0]
 800233c:	e7f6      	b.n	800232c <_printf_i+0x194>
 800233e:	4616      	mov	r6, r2
 8002340:	e7bd      	b.n	80022be <_printf_i+0x126>
 8002342:	6833      	ldr	r3, [r6, #0]
 8002344:	6825      	ldr	r5, [r4, #0]
 8002346:	6961      	ldr	r1, [r4, #20]
 8002348:	1d18      	adds	r0, r3, #4
 800234a:	6030      	str	r0, [r6, #0]
 800234c:	062e      	lsls	r6, r5, #24
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	d501      	bpl.n	8002356 <_printf_i+0x1be>
 8002352:	6019      	str	r1, [r3, #0]
 8002354:	e002      	b.n	800235c <_printf_i+0x1c4>
 8002356:	0668      	lsls	r0, r5, #25
 8002358:	d5fb      	bpl.n	8002352 <_printf_i+0x1ba>
 800235a:	8019      	strh	r1, [r3, #0]
 800235c:	2300      	movs	r3, #0
 800235e:	6123      	str	r3, [r4, #16]
 8002360:	4616      	mov	r6, r2
 8002362:	e7bc      	b.n	80022de <_printf_i+0x146>
 8002364:	6833      	ldr	r3, [r6, #0]
 8002366:	1d1a      	adds	r2, r3, #4
 8002368:	6032      	str	r2, [r6, #0]
 800236a:	681e      	ldr	r6, [r3, #0]
 800236c:	6862      	ldr	r2, [r4, #4]
 800236e:	2100      	movs	r1, #0
 8002370:	4630      	mov	r0, r6
 8002372:	f7fd ff35 	bl	80001e0 <memchr>
 8002376:	b108      	cbz	r0, 800237c <_printf_i+0x1e4>
 8002378:	1b80      	subs	r0, r0, r6
 800237a:	6060      	str	r0, [r4, #4]
 800237c:	6863      	ldr	r3, [r4, #4]
 800237e:	6123      	str	r3, [r4, #16]
 8002380:	2300      	movs	r3, #0
 8002382:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002386:	e7aa      	b.n	80022de <_printf_i+0x146>
 8002388:	6923      	ldr	r3, [r4, #16]
 800238a:	4632      	mov	r2, r6
 800238c:	4649      	mov	r1, r9
 800238e:	4640      	mov	r0, r8
 8002390:	47d0      	blx	sl
 8002392:	3001      	adds	r0, #1
 8002394:	d0ad      	beq.n	80022f2 <_printf_i+0x15a>
 8002396:	6823      	ldr	r3, [r4, #0]
 8002398:	079b      	lsls	r3, r3, #30
 800239a:	d413      	bmi.n	80023c4 <_printf_i+0x22c>
 800239c:	68e0      	ldr	r0, [r4, #12]
 800239e:	9b03      	ldr	r3, [sp, #12]
 80023a0:	4298      	cmp	r0, r3
 80023a2:	bfb8      	it	lt
 80023a4:	4618      	movlt	r0, r3
 80023a6:	e7a6      	b.n	80022f6 <_printf_i+0x15e>
 80023a8:	2301      	movs	r3, #1
 80023aa:	4632      	mov	r2, r6
 80023ac:	4649      	mov	r1, r9
 80023ae:	4640      	mov	r0, r8
 80023b0:	47d0      	blx	sl
 80023b2:	3001      	adds	r0, #1
 80023b4:	d09d      	beq.n	80022f2 <_printf_i+0x15a>
 80023b6:	3501      	adds	r5, #1
 80023b8:	68e3      	ldr	r3, [r4, #12]
 80023ba:	9903      	ldr	r1, [sp, #12]
 80023bc:	1a5b      	subs	r3, r3, r1
 80023be:	42ab      	cmp	r3, r5
 80023c0:	dcf2      	bgt.n	80023a8 <_printf_i+0x210>
 80023c2:	e7eb      	b.n	800239c <_printf_i+0x204>
 80023c4:	2500      	movs	r5, #0
 80023c6:	f104 0619 	add.w	r6, r4, #25
 80023ca:	e7f5      	b.n	80023b8 <_printf_i+0x220>
 80023cc:	08002723 	.word	0x08002723
 80023d0:	08002734 	.word	0x08002734

080023d4 <__sflush_r>:
 80023d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80023d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023dc:	0716      	lsls	r6, r2, #28
 80023de:	4605      	mov	r5, r0
 80023e0:	460c      	mov	r4, r1
 80023e2:	d454      	bmi.n	800248e <__sflush_r+0xba>
 80023e4:	684b      	ldr	r3, [r1, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	dc02      	bgt.n	80023f0 <__sflush_r+0x1c>
 80023ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	dd48      	ble.n	8002482 <__sflush_r+0xae>
 80023f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80023f2:	2e00      	cmp	r6, #0
 80023f4:	d045      	beq.n	8002482 <__sflush_r+0xae>
 80023f6:	2300      	movs	r3, #0
 80023f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80023fc:	682f      	ldr	r7, [r5, #0]
 80023fe:	6a21      	ldr	r1, [r4, #32]
 8002400:	602b      	str	r3, [r5, #0]
 8002402:	d030      	beq.n	8002466 <__sflush_r+0x92>
 8002404:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002406:	89a3      	ldrh	r3, [r4, #12]
 8002408:	0759      	lsls	r1, r3, #29
 800240a:	d505      	bpl.n	8002418 <__sflush_r+0x44>
 800240c:	6863      	ldr	r3, [r4, #4]
 800240e:	1ad2      	subs	r2, r2, r3
 8002410:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002412:	b10b      	cbz	r3, 8002418 <__sflush_r+0x44>
 8002414:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002416:	1ad2      	subs	r2, r2, r3
 8002418:	2300      	movs	r3, #0
 800241a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800241c:	6a21      	ldr	r1, [r4, #32]
 800241e:	4628      	mov	r0, r5
 8002420:	47b0      	blx	r6
 8002422:	1c43      	adds	r3, r0, #1
 8002424:	89a3      	ldrh	r3, [r4, #12]
 8002426:	d106      	bne.n	8002436 <__sflush_r+0x62>
 8002428:	6829      	ldr	r1, [r5, #0]
 800242a:	291d      	cmp	r1, #29
 800242c:	d82b      	bhi.n	8002486 <__sflush_r+0xb2>
 800242e:	4a2a      	ldr	r2, [pc, #168]	@ (80024d8 <__sflush_r+0x104>)
 8002430:	40ca      	lsrs	r2, r1
 8002432:	07d6      	lsls	r6, r2, #31
 8002434:	d527      	bpl.n	8002486 <__sflush_r+0xb2>
 8002436:	2200      	movs	r2, #0
 8002438:	6062      	str	r2, [r4, #4]
 800243a:	04d9      	lsls	r1, r3, #19
 800243c:	6922      	ldr	r2, [r4, #16]
 800243e:	6022      	str	r2, [r4, #0]
 8002440:	d504      	bpl.n	800244c <__sflush_r+0x78>
 8002442:	1c42      	adds	r2, r0, #1
 8002444:	d101      	bne.n	800244a <__sflush_r+0x76>
 8002446:	682b      	ldr	r3, [r5, #0]
 8002448:	b903      	cbnz	r3, 800244c <__sflush_r+0x78>
 800244a:	6560      	str	r0, [r4, #84]	@ 0x54
 800244c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800244e:	602f      	str	r7, [r5, #0]
 8002450:	b1b9      	cbz	r1, 8002482 <__sflush_r+0xae>
 8002452:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002456:	4299      	cmp	r1, r3
 8002458:	d002      	beq.n	8002460 <__sflush_r+0x8c>
 800245a:	4628      	mov	r0, r5
 800245c:	f7ff fbf4 	bl	8001c48 <_free_r>
 8002460:	2300      	movs	r3, #0
 8002462:	6363      	str	r3, [r4, #52]	@ 0x34
 8002464:	e00d      	b.n	8002482 <__sflush_r+0xae>
 8002466:	2301      	movs	r3, #1
 8002468:	4628      	mov	r0, r5
 800246a:	47b0      	blx	r6
 800246c:	4602      	mov	r2, r0
 800246e:	1c50      	adds	r0, r2, #1
 8002470:	d1c9      	bne.n	8002406 <__sflush_r+0x32>
 8002472:	682b      	ldr	r3, [r5, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0c6      	beq.n	8002406 <__sflush_r+0x32>
 8002478:	2b1d      	cmp	r3, #29
 800247a:	d001      	beq.n	8002480 <__sflush_r+0xac>
 800247c:	2b16      	cmp	r3, #22
 800247e:	d11e      	bne.n	80024be <__sflush_r+0xea>
 8002480:	602f      	str	r7, [r5, #0]
 8002482:	2000      	movs	r0, #0
 8002484:	e022      	b.n	80024cc <__sflush_r+0xf8>
 8002486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800248a:	b21b      	sxth	r3, r3
 800248c:	e01b      	b.n	80024c6 <__sflush_r+0xf2>
 800248e:	690f      	ldr	r7, [r1, #16]
 8002490:	2f00      	cmp	r7, #0
 8002492:	d0f6      	beq.n	8002482 <__sflush_r+0xae>
 8002494:	0793      	lsls	r3, r2, #30
 8002496:	680e      	ldr	r6, [r1, #0]
 8002498:	bf08      	it	eq
 800249a:	694b      	ldreq	r3, [r1, #20]
 800249c:	600f      	str	r7, [r1, #0]
 800249e:	bf18      	it	ne
 80024a0:	2300      	movne	r3, #0
 80024a2:	eba6 0807 	sub.w	r8, r6, r7
 80024a6:	608b      	str	r3, [r1, #8]
 80024a8:	f1b8 0f00 	cmp.w	r8, #0
 80024ac:	dde9      	ble.n	8002482 <__sflush_r+0xae>
 80024ae:	6a21      	ldr	r1, [r4, #32]
 80024b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80024b2:	4643      	mov	r3, r8
 80024b4:	463a      	mov	r2, r7
 80024b6:	4628      	mov	r0, r5
 80024b8:	47b0      	blx	r6
 80024ba:	2800      	cmp	r0, #0
 80024bc:	dc08      	bgt.n	80024d0 <__sflush_r+0xfc>
 80024be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024c6:	81a3      	strh	r3, [r4, #12]
 80024c8:	f04f 30ff 	mov.w	r0, #4294967295
 80024cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024d0:	4407      	add	r7, r0
 80024d2:	eba8 0800 	sub.w	r8, r8, r0
 80024d6:	e7e7      	b.n	80024a8 <__sflush_r+0xd4>
 80024d8:	20400001 	.word	0x20400001

080024dc <_fflush_r>:
 80024dc:	b538      	push	{r3, r4, r5, lr}
 80024de:	690b      	ldr	r3, [r1, #16]
 80024e0:	4605      	mov	r5, r0
 80024e2:	460c      	mov	r4, r1
 80024e4:	b913      	cbnz	r3, 80024ec <_fflush_r+0x10>
 80024e6:	2500      	movs	r5, #0
 80024e8:	4628      	mov	r0, r5
 80024ea:	bd38      	pop	{r3, r4, r5, pc}
 80024ec:	b118      	cbz	r0, 80024f6 <_fflush_r+0x1a>
 80024ee:	6a03      	ldr	r3, [r0, #32]
 80024f0:	b90b      	cbnz	r3, 80024f6 <_fflush_r+0x1a>
 80024f2:	f7ff f9af 	bl	8001854 <__sinit>
 80024f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f3      	beq.n	80024e6 <_fflush_r+0xa>
 80024fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002500:	07d0      	lsls	r0, r2, #31
 8002502:	d404      	bmi.n	800250e <_fflush_r+0x32>
 8002504:	0599      	lsls	r1, r3, #22
 8002506:	d402      	bmi.n	800250e <_fflush_r+0x32>
 8002508:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800250a:	f7ff fb9a 	bl	8001c42 <__retarget_lock_acquire_recursive>
 800250e:	4628      	mov	r0, r5
 8002510:	4621      	mov	r1, r4
 8002512:	f7ff ff5f 	bl	80023d4 <__sflush_r>
 8002516:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002518:	07da      	lsls	r2, r3, #31
 800251a:	4605      	mov	r5, r0
 800251c:	d4e4      	bmi.n	80024e8 <_fflush_r+0xc>
 800251e:	89a3      	ldrh	r3, [r4, #12]
 8002520:	059b      	lsls	r3, r3, #22
 8002522:	d4e1      	bmi.n	80024e8 <_fflush_r+0xc>
 8002524:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002526:	f7ff fb8d 	bl	8001c44 <__retarget_lock_release_recursive>
 800252a:	e7dd      	b.n	80024e8 <_fflush_r+0xc>

0800252c <__swhatbuf_r>:
 800252c:	b570      	push	{r4, r5, r6, lr}
 800252e:	460c      	mov	r4, r1
 8002530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002534:	2900      	cmp	r1, #0
 8002536:	b096      	sub	sp, #88	@ 0x58
 8002538:	4615      	mov	r5, r2
 800253a:	461e      	mov	r6, r3
 800253c:	da0d      	bge.n	800255a <__swhatbuf_r+0x2e>
 800253e:	89a3      	ldrh	r3, [r4, #12]
 8002540:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002544:	f04f 0100 	mov.w	r1, #0
 8002548:	bf14      	ite	ne
 800254a:	2340      	movne	r3, #64	@ 0x40
 800254c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002550:	2000      	movs	r0, #0
 8002552:	6031      	str	r1, [r6, #0]
 8002554:	602b      	str	r3, [r5, #0]
 8002556:	b016      	add	sp, #88	@ 0x58
 8002558:	bd70      	pop	{r4, r5, r6, pc}
 800255a:	466a      	mov	r2, sp
 800255c:	f000 f848 	bl	80025f0 <_fstat_r>
 8002560:	2800      	cmp	r0, #0
 8002562:	dbec      	blt.n	800253e <__swhatbuf_r+0x12>
 8002564:	9901      	ldr	r1, [sp, #4]
 8002566:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800256a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800256e:	4259      	negs	r1, r3
 8002570:	4159      	adcs	r1, r3
 8002572:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002576:	e7eb      	b.n	8002550 <__swhatbuf_r+0x24>

08002578 <__smakebuf_r>:
 8002578:	898b      	ldrh	r3, [r1, #12]
 800257a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800257c:	079d      	lsls	r5, r3, #30
 800257e:	4606      	mov	r6, r0
 8002580:	460c      	mov	r4, r1
 8002582:	d507      	bpl.n	8002594 <__smakebuf_r+0x1c>
 8002584:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002588:	6023      	str	r3, [r4, #0]
 800258a:	6123      	str	r3, [r4, #16]
 800258c:	2301      	movs	r3, #1
 800258e:	6163      	str	r3, [r4, #20]
 8002590:	b003      	add	sp, #12
 8002592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002594:	ab01      	add	r3, sp, #4
 8002596:	466a      	mov	r2, sp
 8002598:	f7ff ffc8 	bl	800252c <__swhatbuf_r>
 800259c:	9f00      	ldr	r7, [sp, #0]
 800259e:	4605      	mov	r5, r0
 80025a0:	4639      	mov	r1, r7
 80025a2:	4630      	mov	r0, r6
 80025a4:	f7ff fbbc 	bl	8001d20 <_malloc_r>
 80025a8:	b948      	cbnz	r0, 80025be <__smakebuf_r+0x46>
 80025aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025ae:	059a      	lsls	r2, r3, #22
 80025b0:	d4ee      	bmi.n	8002590 <__smakebuf_r+0x18>
 80025b2:	f023 0303 	bic.w	r3, r3, #3
 80025b6:	f043 0302 	orr.w	r3, r3, #2
 80025ba:	81a3      	strh	r3, [r4, #12]
 80025bc:	e7e2      	b.n	8002584 <__smakebuf_r+0xc>
 80025be:	89a3      	ldrh	r3, [r4, #12]
 80025c0:	6020      	str	r0, [r4, #0]
 80025c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025c6:	81a3      	strh	r3, [r4, #12]
 80025c8:	9b01      	ldr	r3, [sp, #4]
 80025ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80025ce:	b15b      	cbz	r3, 80025e8 <__smakebuf_r+0x70>
 80025d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80025d4:	4630      	mov	r0, r6
 80025d6:	f000 f81d 	bl	8002614 <_isatty_r>
 80025da:	b128      	cbz	r0, 80025e8 <__smakebuf_r+0x70>
 80025dc:	89a3      	ldrh	r3, [r4, #12]
 80025de:	f023 0303 	bic.w	r3, r3, #3
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	81a3      	strh	r3, [r4, #12]
 80025e8:	89a3      	ldrh	r3, [r4, #12]
 80025ea:	431d      	orrs	r5, r3
 80025ec:	81a5      	strh	r5, [r4, #12]
 80025ee:	e7cf      	b.n	8002590 <__smakebuf_r+0x18>

080025f0 <_fstat_r>:
 80025f0:	b538      	push	{r3, r4, r5, lr}
 80025f2:	4d07      	ldr	r5, [pc, #28]	@ (8002610 <_fstat_r+0x20>)
 80025f4:	2300      	movs	r3, #0
 80025f6:	4604      	mov	r4, r0
 80025f8:	4608      	mov	r0, r1
 80025fa:	4611      	mov	r1, r2
 80025fc:	602b      	str	r3, [r5, #0]
 80025fe:	f7fd ff98 	bl	8000532 <_fstat>
 8002602:	1c43      	adds	r3, r0, #1
 8002604:	d102      	bne.n	800260c <_fstat_r+0x1c>
 8002606:	682b      	ldr	r3, [r5, #0]
 8002608:	b103      	cbz	r3, 800260c <_fstat_r+0x1c>
 800260a:	6023      	str	r3, [r4, #0]
 800260c:	bd38      	pop	{r3, r4, r5, pc}
 800260e:	bf00      	nop
 8002610:	200001e8 	.word	0x200001e8

08002614 <_isatty_r>:
 8002614:	b538      	push	{r3, r4, r5, lr}
 8002616:	4d06      	ldr	r5, [pc, #24]	@ (8002630 <_isatty_r+0x1c>)
 8002618:	2300      	movs	r3, #0
 800261a:	4604      	mov	r4, r0
 800261c:	4608      	mov	r0, r1
 800261e:	602b      	str	r3, [r5, #0]
 8002620:	f7fd ff97 	bl	8000552 <_isatty>
 8002624:	1c43      	adds	r3, r0, #1
 8002626:	d102      	bne.n	800262e <_isatty_r+0x1a>
 8002628:	682b      	ldr	r3, [r5, #0]
 800262a:	b103      	cbz	r3, 800262e <_isatty_r+0x1a>
 800262c:	6023      	str	r3, [r4, #0]
 800262e:	bd38      	pop	{r3, r4, r5, pc}
 8002630:	200001e8 	.word	0x200001e8

08002634 <_sbrk_r>:
 8002634:	b538      	push	{r3, r4, r5, lr}
 8002636:	4d06      	ldr	r5, [pc, #24]	@ (8002650 <_sbrk_r+0x1c>)
 8002638:	2300      	movs	r3, #0
 800263a:	4604      	mov	r4, r0
 800263c:	4608      	mov	r0, r1
 800263e:	602b      	str	r3, [r5, #0]
 8002640:	f7fd ffa0 	bl	8000584 <_sbrk>
 8002644:	1c43      	adds	r3, r0, #1
 8002646:	d102      	bne.n	800264e <_sbrk_r+0x1a>
 8002648:	682b      	ldr	r3, [r5, #0]
 800264a:	b103      	cbz	r3, 800264e <_sbrk_r+0x1a>
 800264c:	6023      	str	r3, [r4, #0]
 800264e:	bd38      	pop	{r3, r4, r5, pc}
 8002650:	200001e8 	.word	0x200001e8

08002654 <_init>:
 8002654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002656:	bf00      	nop
 8002658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800265a:	bc08      	pop	{r3}
 800265c:	469e      	mov	lr, r3
 800265e:	4770      	bx	lr

08002660 <_fini>:
 8002660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002662:	bf00      	nop
 8002664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002666:	bc08      	pop	{r3}
 8002668:	469e      	mov	lr, r3
 800266a:	4770      	bx	lr
