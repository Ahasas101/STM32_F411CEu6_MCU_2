#include "stm32f4xx.h"
#include "stm32f4xx_hal.h"
#include <stdio.h>
#include <string.h>



void Error_Handler(void);
void GPIO_SWO(void);
void TIMER_Init(void);
void LSE_Init(void);

TIM_HandleTypeDef timer2;

int main(void)
{

	HAL_Init();
	GPIO_SWO();
	LSE_Init();

	TIMER_Init();
	// starting timer


}

void GPIO_SWO(void)
{
	__HAL_RCC_GPIOB_CLK_ENABLE();
	GPIO_InitTypeDef gpio_swo;
	gpio_swo.Mode = GPIO_MODE_AF_PP;
	gpio_swo.Pin = GPIO_PIN_3;
	gpio_swo.Alternate = GPIO_AF0_SWJ;
	gpio_swo.Pull = GPIO_NOPULL;
	gpio_swo.Speed = GPIO_SPEED_FREQ_LOW;

	HAL_GPIO_Init(GPIOB, &gpio_swo);
}



void Error_Handler(void)
{
	while(1);
}


void TIMER_Init(void)
{
	timer2.Instance = TIM2;
	timer2.Init.CounterMode = TIM_COUNTERMODE_UP;
	timer2.Init.AutoReloadPreload = 0xFFFFFFFF;
	timer2.Init.Prescaler = 1;
	if(HAL_TIM_IC_Init(&timer2) != HAL_OK) Error_Handler();

	TIM_IC_InitTypeDef timer2IC;

	timer2IC.ICFilter = 0;
	timer2IC.ICPolarity = TIM_ICPOLARITY_RISING;
	timer2IC.ICPrescaler = TIM_ICPSC_DIV1;
	timer2IC.ICSelection = TIM_ICSELECTION_DIRECTTI;
	if(HAL_TIM_IC_ConfigChannel(&timer2, &timer2IC, TIM_CHANNEL_1) != HAL_OK) Error_Handler();

}

void LSE_Init(void)
{
	RCC_OscInitTypeDef lse;
	lse.OscillatorType = RCC_OSCILLATORTYPE_LSE;
	lse.LSEState = RCC_LSE_ON;
	if(HAL_RCC_OscConfig(&lse) != HAL_OK) Error_Handler();

	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_LSE, RCC_MCODIV_1);

}




void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{

}

