/*
 * stm32f411xx_i2c_driver.c
 *
 *  Created on: Jun 30, 2025
 *      Author: user
 */
#include "stm32f411xx_i2c_driver.h"


static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx);


static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr);

static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr);

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle);




static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
}

void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
}
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
	SlaveAddr = SlaveAddr << 1;
	SlaveAddr &= ~(1);
	pI2Cx->DR = SlaveAddr;
}

static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
	SlaveAddr = SlaveAddr << 1;
	SlaveAddr |= 1;
	pI2Cx->DR = SlaveAddr;
}

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
	uint32_t dummy_read;
// check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
	{
		// device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
		{
			if(pI2CHandle->RxSize == 1)
			{
				//first disable the ack
				pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);

				//clear the addr flag( read sr1 and sr2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
				dummy_read = pI2CHandle->pI2Cx->SR2;
				(void)dummy_read;
			}
			else
			{
				//clear the addr flag( read sr1 and sr2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
				dummy_read = pI2CHandle->pI2Cx->SR2;
				(void)dummy_read;
			}
		}
		else
		{
			// device is in slave mode
			//clear the addr flag( read sr1 and sr2)
			dummy_read = pI2CHandle->pI2Cx->SR1;
			dummy_read = pI2CHandle->pI2Cx->SR2;
			(void)dummy_read;
		}
	}
}

void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
	if(EnorDi == ENABLE)
	{
		if( pI2Cx == I2C1 )
		{
			I2C1_PCLK_EN();
		}
		else if( pI2Cx == I2C2 )
		{
			I2C2_PCLK_EN();
		}
		else if( pI2Cx == I2C3 )
		{
			I2C3_PCLK_EN();
		}
	}
	else
	{
		if( pI2Cx == I2C1 )
		{
			I2C1_PCLK_DI();
		}
		else if( pI2Cx == I2C2 )
		{
			I2C2_PCLK_DI();
		}
		else if( pI2Cx == I2C3 )
		{
			I2C3_PCLK_DI();
		}
	}
}


void I2C_Init(I2C_Handle_t *pI2CHandle)
{
	// enable the clock
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);

	uint32_t tempreg = 0;
	// ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl << I2C_CR1_ACK;
	pI2CHandle->pI2Cx->CR1 = tempreg;

	// configure the freq field of cr2
	tempreg = 0;
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);

	// program the device own address
	tempreg = 0;
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
	tempreg |= (1 << 14);
	pI2CHandle->pI2Cx->OAR1 = (tempreg);

	//CRC calculations
	uint16_t ccr_value = 0;
	tempreg = 0;
	// formula to calculate the ccr value
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
	{
		ccr_value = (RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
		tempreg |= (ccr_value & 0xFFF);
	}
	else
	{
		// mode is fast mode
		tempreg |= (1 << 15);
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
		{
			ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
		}
		else
		{
			ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
		}
		tempreg |= (ccr_value & 0xFFFF);
	}
	pI2CHandle->pI2Cx->CCR = tempreg;

	//TRISE calculations
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
	{
		// mode is standard mode
		// for standard mode maxm allowed tris is 1000 ns

	  tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;

	}
	else
	{
		// for fast mode maxm allowed trise is 300 ns
		// mode is fast mode
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
	}
	pI2CHandle->pI2Cx->TRIISE = (tempreg & 0x3F);



}



void _DeInit(I2C_RegDef_t *pI2Cx)
{
	if( pI2Cx == I2C1 )
	{
		RCC->APB1RSTR |= (1 << 21);
	}
	else if( pI2Cx == I2C2 )
	{
		RCC->APB1RSTR |= (1 << 22);
	}
	else if( pI2Cx == I2C3 )
	{
		RCC->APB1RSTR |= (1 << 23);
	}

}

/*
 * DATA SEND AND RECEIVE
 */

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
	//1. Generate the start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);

	//2. Confirm that start generation is completed by checking the SB flag in the SR1
	// NOTE: Unitl SB is clceared SCL will be stretced
	while( !I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));

	//3. Send the address of the slave with r/nw bit set to w(0) ( total 8 bits)
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, SlaveAddr);

	//4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	while( !I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));

	//5. clear the addr flag
	I2C_ClearADDRFlag(pI2CHandle);

	//6. Send data until len becomes 0
	while(Len > 0)
	{
		while( !I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));// wait till txe is set
		pI2CHandle->pI2Cx->DR = *pTxBuffer;
		pTxBuffer++;
		Len--;
	}
	//7. when len becomes zero wait for txe =1 and BTF = 1 before generating the stop condition
	// note: TXE = 1 , BTF =1, means that both sr(shift register)  and dr(data register) are empty
	// when BTF = 1 SCL will be stretched ( pulled to low)
	while( !I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
	while( !I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));

	//8. Generate STOP condition
	if(Sr == 0)
	{
	I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
	}




}

void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr, uint8_t Sr)
{
	//1. Generate teh start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);

	//2. confirm that start generation is completed by checking the SB flag in the Sr1
	//NOTE: Unitl SB is cleared SCL will be stretches(pulled to low)
	while( !I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits)
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, SlaveAddr);

	//4. Wait unitl address phase is completed by checking the addr flag in the sr1
	while( ! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));

	//5. procedure to read only 1 byte from slave
	if(Len == 1)
	{
		// Disable acking
		pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);

		// clear the addr flag
		I2C_ClearADDRFlag(pI2CHandle);

		// wait until rxne becomes 1
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE));

		//generate the stop condition
		if(Sr == I2C_DISABLE_SR	)
		{
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
		}
		// read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;

	}
	// procedure to read from slave when len > 1
	if(Len > 1)
	{
		// clear the addr flag
		I2C_ClearADDRFlag(pI2CHandle);

		// read the data until Len becomes zero
		for(uint32_t i = Len ; i>0 ; i--)
		{
			// wait until RXNE becomes 1
			while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE));

			if( i == 2)
			{
				// clear the ack bit
				pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);

				// generate the stop condition
				I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
			}

			// read data in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;

			//increment the buffer address
			pRxBuffer++;

		}
	}
	// renable acking
	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE)
	{
	pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
	}
}

uint8_t I2C_MasterSendDataIT(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Sr)
{
	uint8_t busystate = pI2CHandle->TxRxState;

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
	{
		pI2CHandle->pTxBuffer = pTxBuffer;
		pI2CHandle->TxLen = Len;
		pI2CHandle->TxRxState = I2C_BUSY_IN_TX;
		pI2CHandle->DevAddr = SlaveAddr;
		pI2CHandle->Sr = Sr;

		// In normal api's the processor was stuck in while loop waiting for SB flag but now it's not like that
		// you have started the communication and not waiting for sb flag to set similarly also you don't have to wait
		// for txe and rxne flags

		//Implement the code to generate the start condition
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);

		//Implement the code to enable ITBUFFN Control bit ( buffer interrupt enable)
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITBUFEN);

		//Implement the code to enable ITEVTEN Control Bit( event interrupt enable)
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITEVTEN);


		//Impllement the cde to enable ITERREN control bit ( error interrupt enable)
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITERREN);
	}
	return busystate;

}
uint8_t I2C_MasterReceiveDataIT(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr, uint8_t Sr)
{
	uint8_t busystate = pI2CHandle->TxRxState;

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
	{
		pI2CHandle->pTxBuffer = pRxBuffer;
		pI2CHandle->RxLen = Len;
		pI2CHandle->TxRxState = I2C_BUSY_IN_RX;
		pI2CHandle->RxSize = Len; // Rxsize is used in the ISR code to manage the data reception
		pI2CHandle->DevAddr = SlaveAddr;
		pI2CHandle->Sr = Sr;

		//Implement the code to generate the start condition
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);

		//Implement the code to enable ITBUFFN Control bit ( buffer interrupt enable)
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITBUFEN);

		//Implement the code to enable ITEVTEN Control Bit( event interrupt enable)
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITEVTEN);

		//Impllement the cde to enable ITERREN control bit ( error interrupt enable)
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITERREN);
	}
	return busystate;

}

void I2C_SlaveSendData(I2C_RegDef_t *pI2C, uint8_t data)
{
	pI2C->DR = data;

}
uint8_t I2C_SlaveReceiveData(I2C_RegDef_t *pI2C)
{
	return (uint8_t) pI2C->DR;
}

/*
 * iR1 CONFIGURATION AND ISR HANDLING
 */
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
	if(EnorDi == ENABLE)
	{
		if(IRQNumber <= 31)
		{
			// program ISER0
			*NVIC_ISER0 |= (1<<IRQNumber);
		}
		else if (IRQNumber > 31 && IRQNumber <64)
		{
			//program ISER1 register
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
		}
		else if (IRQNumber >= 64  && IRQNumber < 96)
		{
			//program ISER2 register
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
		}
	}
	else
	{
		if(IRQNumber <= 31)
			{
				// program ICER0  register
			*NVIC_ICER0 |= (1 << IRQNumber);
			}
			else if (IRQNumber > 31 && IRQNumber <64)
			{
				//program ICER1 register
				*NVIC_ICER1 |= (1 << (IRQNumber % 32));
			}
			else if (IRQNumber >= 64  && IRQNumber < 96)
			{
				//program ICER2 register
				*NVIC_ICER2 |= (1 << (IRQNumber % 64));
			}
		}


}
void I2C_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
	// 1. FIRST THE IPR REGISTER
		uint8_t iprx = IRQNumber / 4;
		uint8_t iprx_section = IRQNumber % 4;

		uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
		*(NVIC_PR_BASE_ADDR + (iprx)) |= (IRQPriority << shift_amount);
}

void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle)
{
	// interrupt handling for both master and slave mode of a device

	uint32_t temp1, temp2, temp3;

	temp1 =  pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);
	temp2 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);


	//1. Handle for interrupt generate by SB event
	//note: SB flag is only applicable in master mode
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_SB);
	if(temp1 && temp3)
	{
		// SB flag is set
		// This block will not be executed in slave mode because for slave sb is always 0
		// In this block lets execute address
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
		{
			I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, pI2CHandle->I2C_Config.I2C_DeviceAddress);
		}
		else if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
		{
			I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, pI2CHandle->I2C_Config.I2C_DeviceAddress);
		}
	}

	//2. Handle for interrupt generate by addr event
	//note: when master mode : address is sent
	// when slave mode : address matched with own address
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR);
	if(temp1 && temp3)
		{
			// ADDR flag is set
			I2C_ClearADDRFlag(pI2CHandle);
		}



	//3. Handle for interrupt generate by BTF( Byte transfer finished) event
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BTF);
	if(temp1 && temp3)
		{
			// BTF flag is set
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
		{
			// make sure that txe is also set
			if(pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE))
			{
				if(pI2CHandle->TxLen == 0)
				{
					// btf, txe =1
					// 1. generate the stop condition
					if(pI2CHandle->Sr == I2C_DISABLE_SR)
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);

					//2. reset all the member elements of the handle structure
					I2C_CloseSendData(pI2CHandle);


					//3.  notify the application about transmission complete
					I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_TX_CMPLT);
				}
			}
		}
		else if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
		{
			; // nothing to do
		}

		}

	//4.Handle for interrupt generated by STOPF event
	// note : stop detection flag is applicable only in slave mode
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_STOPF);
	if(temp1 && temp3)
		{
			// STOPF flag is set
			// clear the stopf ( i.e 1) read sr1 2) write to cr1)
			pI2CHandle->pI2Cx->CR1 |= 0x0000;
			// notify the application that stop is detected
			I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_STOP);


		}

	//5. Handle for interrupt generate by TXE event
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE);
	if(temp1 && temp2 && temp3)
		{
		// Implement only if device is master

		 if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
		 {
			// txe flag is set
			// we have to do the data transmission
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
			{
				if(pI2CHandle->TxLen > 0)
				{
					//1. load the data in to dr
					pI2CHandle->pI2Cx->DR = *pI2CHandle->pTxBuffer;

					//2. decrement the txlen
					pI2CHandle->TxLen--;

					//3.increment the buffer address
					pI2CHandle->pTxBuffer++;
				}
			}
		 }
		}
	else
	{
		// slave

		//make sure that the slave is really in transmitter mode
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA))
		{

			I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_REQ);
		}




	}

	//5. Handle for interrupt generate by RXE event
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_RXNE);
	if(temp1 && temp2 && temp3)
		{
		if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
			{
				// the device is master

					// rxne flag is set
				if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
				{
					// we have to do the data reception
					if(pI2CHandle->RxSize == 1)
					{
						*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
						pI2CHandle->RxLen--;

					}
					if(pI2CHandle->RxSize > 1)
					{
						if(pI2CHandle->RxSize == 2)
						{
							// clear the ack bit
							pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);

						}
						//read DR
						*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
						pI2CHandle->pRxBuffer++;
						pI2CHandle->RxLen--;

					}
					if(pI2CHandle->RxLen == 0)
					{
						// close the i2c data reception and notify the application
						//1. generate the stop condition
						if(pI2CHandle->Sr == I2C_DISABLE_SR)
						{
							I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
						}

						//2. close the i2c rx
						I2C_CloseReceiveData(pI2CHandle);

						//3.Notify the application
						I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_RX_CMPLT);
					}
				}
		}
		}
	else
	{
		// slave
		// make sure that the slave is really in receiver mode
		if ( !(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA)))
		{
			// slave mode
			I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
		}
	}

}
void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle)
{
	uint32_t temp1,temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (pI2CHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN);


/***********************Check for Bus error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1<< I2C_SR1_BERR);
	if(temp1  && temp2 )
	{
		//This is Bus error

		//Implement the code to clear the buss error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);

		//Implement the code to notify the application about the error
	   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_BERR);
	}

/***********************Check for arbitration lost error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_ARLO );
	if(temp1  && temp2)
	{
		//This is arbitration lost error

		//Implement the code to clear the arbitration lost error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_ARLO);


		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_ARLO);

	}

/***********************Check for ACK failure  error************************************/

	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_AF);
	if(temp1  && temp2)
	{
		//This is ACK failure error

	    //Implement the code to clear the ACK failure error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_AF);

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_AF);
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_OVR);
	if(temp1  && temp2)
	{
		//This is Overrun/underrun

	    //Implement the code to clear the Overrun/underrun error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_OVR);

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_OVR);
	}

/***********************Check for Time out error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_TIMEOUT);
	if(temp1  && temp2)
	{
		//This is Time out error

	    //Implement the code to clear the Time out error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_TIMEOUT);

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_TIMEOUT);
	}

}
/*
 * OTHER PERIPHERALS API'S
 */

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
	if(pI2Cx->SR1 & FlagName)
	{
		return FLAG_SET;
	}
	return FLAG_RESET;
}

void I2C_PerirpheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
	if( EnorDi == ENABLE)
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
	}
	else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}

void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle)
{
	//implement the code to disable itbuffn control bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);

	//implement the code to disable itevfen control bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);

	pI2CHandle->TxRxState = I2C_READY;
	pI2CHandle->pRxBuffer = NULL;
	pI2CHandle->RxLen = 0;
	pI2CHandle->RxSize = 0;
	//enable acking
	pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_ACK);

}
void I2C_CloseSendData(I2C_Handle_t *pI2CHandle)
{
	//implement the code to disable itbuffn control bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);

	//implement the code to disable itevfen control bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);

	pI2CHandle->TxRxState = I2C_READY;
	pI2CHandle->pTxBuffer = NULL;
	pI2CHandle->TxLen = 0;


}

void I2C_SlaveEnableDisableCallbackEvents(I2C_RegDef_t *pI2Cx ,uint8_t EnorDi)
{
	if(EnorDi == ENABLE)
	{
		pI2Cx->CR2 |= (1 << I2C_CR2_ITEVTEN);
		pI2Cx->CR2 |= (1 << I2C_CR2_ITBUFEN);
		pI2Cx->CR2 |= (1 << I2C_CR2_ITERREN);
	}
	else
	{

		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN);
	}

}


void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle, uint8_t AppEv);
