/*
 * In this exercise we are going to generate teh PWM signals using ouptu compare mode of the timer
 *
 */

#include "stm32f4xx_hal.h"
#include "string.h"
void SysClk_config(void);
void Timer2_init(void);
void Error_handler(void);

TIM_HandleTypeDef tim2;

int main(void)
{
	HAL_Init();
	SysClk_config();
	Timer2_init();

	if(HAL_TIM_PWM_Start(&tim2, TIM_CHANNEL_1) != HAL_OK ) Error_handler();
	if(HAL_TIM_PWM_Start(&tim2, TIM_CHANNEL_2) != HAL_OK ) Error_handler();
	if(HAL_TIM_PWM_Start(&tim2, TIM_CHANNEL_3) != HAL_OK ) Error_handler();
	if(HAL_TIM_PWM_Start(&tim2, TIM_CHANNEL_4) != HAL_OK ) Error_handler();

}

void SysClk_config(void)
{
	RCC_OscInitTypeDef hse;
	memset(&hse, 0, sizeof(hse));
	hse.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	hse.HSEState = RCC_HSE_ON;
	hse.PLL.PLLState = RCC_PLL_NONE;
	if(HAL_RCC_OscConfig(&hse) != HAL_OK) Error_handler();
	RCC_ClkInitTypeDef clk;
	clk.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
	clk.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
			RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	clk.AHBCLKDivider = RCC_SYSCLK_DIV1;
	clk.APB1CLKDivider = RCC_HCLK_DIV1;
	clk.APB2CLKDivider = RCC_HCLK_DIV1;
	if(HAL_RCC_ClockConfig(&clk, FLASH_ACR_LATENCY_0WS) != HAL_OK) Error_handler();
	__HAL_RCC_HSI_DISABLE();// always disable hsi after making hse as clock source not before that

}

void Timer2_init(void)
{

	memset(&tim2, 0, sizeof(tim2));
	tim2.Instance = TIM2;
	tim2.Init.CounterMode = TIM_COUNTERMODE_UP;
	tim2.Init.Period = 10000 - 1;
	tim2.Init.Prescaler = 4999;
	if(HAL_TIM_PWM_Init(&tim2) != HAL_OK) Error_handler();

	TIM_OC_InitTypeDef tim2oc_init;
	tim2oc_init.OCMode = TIM_OCMODE_PWM1;
	tim2oc_init.OCPolarity = TIM_OCPOLARITY_HIGH;
	tim2oc_init.Pulse = (tim2.Init.Period * 25) / 100; // for 25% duty cycle
	if(HAL_TIM_PWM_ConfigChannel(&tim2, &tim2oc_init, TIM_CHANNEL_1) != HAL_OK) Error_handler();

	tim2oc_init.Pulse = (tim2.Init.Period * 45) / 100; // for 45% duty cycle
	if(HAL_TIM_PWM_ConfigChannel(&tim2, &tim2oc_init, TIM_CHANNEL_2) != HAL_OK) Error_handler();

	tim2oc_init.Pulse = (tim2.Init.Period * 75) / 100; // for 75% duty cycle
	if(HAL_TIM_PWM_ConfigChannel(&tim2, &tim2oc_init, TIM_CHANNEL_3) != HAL_OK) Error_handler();

	tim2oc_init.Pulse = (tim2.Init.Period * 90) / 100; // for 90% duty cycle
	if(HAL_TIM_PWM_ConfigChannel(&tim2, &tim2oc_init, TIM_CHANNEL_4) != HAL_OK) Error_handler();


}

void Error_handler(void)
{
	while(1);
}
