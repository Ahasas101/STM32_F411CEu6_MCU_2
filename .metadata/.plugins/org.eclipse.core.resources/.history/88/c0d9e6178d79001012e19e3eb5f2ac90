/*
 * In this project we are using normal mode of CAN peripheral
 * steps:-->
 * 1. first initilize the can as shown in CAN1_init
 * 2. For transmitting the message refer the CAN1_TX
 * 3. Configure the gpio in msp.c for CAN and also you have to enable the clock there
 * 4. You have to configure the interrupt priority and enable them in msp.c
 * 5. call the HAL_CAN_IRQ_hanlder from the corresporinding irq handlers of the interrupts
 * 6. implement the callbacks from main.c
 */


#include "stm32f1xx_hal.h"
#include <string.h>
#include <stdio.h>

void timer6_init(void);
void CAN1_init(void);
void Error_Hanlder(void);
void SysClk_config(void);
void GpioSwoInit(void);
void CAN1_Tx(void);
void CAN1_Filter_init(void);

CAN_HandleTypeDef can1;

int main(void)
{
	HAL_Init();
	SysClk_config(); // we are using HSE here which is 8Mhz
	printf("Swo working!!!\n");
	CAN1_init();
	CAN1_Filter_init();

	// here the interrupts are enabled for can
	if(HAL_CAN_ActivateNotification(&can1, CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF) != HAL_OK)  Error_Hanlder();

	if(HAL_CAN_Start(&can1) != HAL_OK) Error_Hanlder();
	CAN1_Tx();



}

void SysClk_config(void)
{
	RCC_OscInitTypeDef hse;
	memset(&hse, 0, sizeof(hse));
	hse.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	hse.HSEState = RCC_HSE_ON;
	hse.PLL.PLLState = RCC_PLL_NONE;
	if(HAL_RCC_OscConfig(&hse) != HAL_OK) Error_Hanlder();
	RCC_ClkInitTypeDef clk;
	clk.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
	clk.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
			RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	clk.AHBCLKDivider = RCC_SYSCLK_DIV1;
	clk.APB1CLKDivider = RCC_HCLK_DIV1;
	clk.APB2CLKDivider = RCC_HCLK_DIV1;
	if(HAL_RCC_ClockConfig(&clk, FLASH_ACR_LATENCY_0) != HAL_OK) Error_Hanlder();
	__HAL_RCC_HSI_DISABLE();// always disable hsi after making hse as clock source not before that

}

void timer6_init(void)
{

}


void CAN1_init(void)
{
	can1.Instance = CAN1;
	can1.Init.Mode = CAN_MODE_NORMAL;
	can1.Init.AutoBusOff = DISABLE;
	can1.Init.AutoRetransmission = ENABLE;
	can1.Init.AutoWakeUp = DISABLE;
	can1.Init.ReceiveFifoLocked = DISABLE;
	can1.Init.TimeTriggeredMode = DISABLE;
	can1.Init.TransmitFifoPriority = DISABLE;

	// for the frame ( 500kbps)
	can1.Init.Prescaler = 1;
	can1.Init.TimeSeg1 = CAN_BS1_13TQ;
	can1.Init.TimeSeg2 = CAN_BS2_2TQ;
	can1.Init.SyncJumpWidth = CAN_SJW_1TQ;

	if(HAL_CAN_Init(&can1) != HAL_OK) Error_Hanlder();


}



void CAN1_Tx(void)
{
	CAN_TxHeaderTypeDef Txheader;

	uint32_t TxMailbox;
	uint8_t messg[5] = {'H','E','L','L','O'};

	Txheader.IDE = CAN_ID_STD;
	Txheader.DLC = 5;
	Txheader.RTR = CAN_RTR_DATA;
	Txheader.StdId = 0x65D;

	// here txmailbox is automatically filled by the below api, indicating which mailbox is being used
	if(HAL_CAN_AddTxMessage(&can1, &Txheader, messg, &TxMailbox) != HAL_OK) Error_Hanlder();





}



void CAN1_Filter_init(void)
{


	// here we accepting every message (no filter)
	CAN_FilterTypeDef filter;

	filter.FilterActivation = ENABLE;
	filter.FilterBank = 0;
	filter.FilterFIFOAssignment = CAN_RX_FIFO0;
	filter.FilterIdHigh = 0x0000;
	filter.FilterIdLow = 0x0000;
	filter.FilterMaskIdHigh = 0x0000;
	filter.FilterMaskIdLow = 0x0000;
	filter.FilterScale = CAN_FILTERSCALE_32BIT;

	if(HAL_CAN_ConfigFilter(&can1,&filter) != HAL_OK) Error_Hanlder();
}





void Error_Hanlder(void)
{
	while(1);
}
