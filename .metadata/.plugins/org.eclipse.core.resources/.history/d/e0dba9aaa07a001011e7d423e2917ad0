/*
 * In this project we are using Normal mode of CAN peripheral
 * steps:-->
 * 1. first initilize the can as shown in CAN1_init
 * 2. For transmitting the message refer the CAN1_TX
 * 3. Configure the gpio in msp.c for CAN and also you have to enable the clock there
 * 4. You have to configure the interrupt priority and enable them in msp.c
 * 5. call the HAL_CAN_IRQ_hanlder from the corresporinding irq handlers of the interrupts
 * 6. implement the callbacks from main.c
 */


#include "stm32f1xx_hal.h"
#include <string.h>
#include <stdio.h>

void gpio_init(void);
void tim2_init(void);
void CAN1_init(void);
void Error_Handler(void);
void SysClk_config(void);
void GpioSwoInit(void);
void CAN1_Tx(void);
void CAN1_Filter_init(void);

void Led_Manage_output(uint8_t led_no);
void Send_Response(uint32_t stdId);

CAN_HandleTypeDef can1;
TIM_HandleTypeDef tim2;
CAN_RxHeaderTypeDef RxHeader;


int main(void)
{
	HAL_Init();
	SysClk_config(); // we are using HSE here which is 8Mhz

	tim2_init();
	gpio_init();
	CAN1_init();
	CAN1_Filter_init();



	// here the interrupts are enabled for can
	if(HAL_CAN_ActivateNotification(&can1, CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF) != HAL_OK)  Error_Handler();

	if(HAL_CAN_Start(&can1) != HAL_OK) Error_Handler();



	HAL_TIM_Base_Start_IT(&tim2);


	while(1);

}

void SysClk_config(void)
{
	RCC_OscInitTypeDef hse;
	memset(&hse, 0, sizeof(hse));
	hse.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	hse.HSEState = RCC_HSE_ON;
	hse.PLL.PLLState = RCC_PLL_NONE;
	if(HAL_RCC_OscConfig(&hse) != HAL_OK) Error_Handler();
	RCC_ClkInitTypeDef clk;
	clk.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
	clk.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
			RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	clk.AHBCLKDivider = RCC_SYSCLK_DIV1;
	clk.APB1CLKDivider = RCC_HCLK_DIV1;
	clk.APB2CLKDivider = RCC_HCLK_DIV1;
	if(HAL_RCC_ClockConfig(&clk, FLASH_ACR_LATENCY_0) != HAL_OK) Error_Handler();
	__HAL_RCC_HSI_DISABLE();// always disable hsi after making hse as clock source not before that

}

void gpio_init(void)
{
	GPIO_InitTypeDef gpio;

	// for led init
	__HAL_RCC_GPIOC_CLK_ENABLE();

	gpio.Mode = GPIO_MODE_OUTPUT_PP;
	gpio.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	gpio.Pull = GPIO_NOPULL;
	gpio.Speed = GPIO_SPEED_FREQ_MEDIUM;
	HAL_GPIO_Init(GPIOC, &gpio);

	gpio.Pin = GPIO_PIN_10;
	HAL_GPIO_Init(GPIOA, &gpio);

	// for button init
	gpio.Pin = GPIO_PIN_8;
	gpio.Mode = GPIO_MODE_IT_FALLING;
	gpio.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOA, &gpio);
}

void CAN1_init(void)
{
	can1.Instance = CAN1;
	can1.Init.Mode = CAN_MODE_NORMAL; // with one device normal mode will not work
	can1.Init.AutoBusOff = ENABLE;
	can1.Init.AutoRetransmission = ENABLE;
	can1.Init.AutoWakeUp = DISABLE;
	can1.Init.ReceiveFifoLocked = DISABLE;
	can1.Init.TimeTriggeredMode = DISABLE;
	can1.Init.TransmitFifoPriority = DISABLE;

	// for the frame
	can1.Init.Prescaler = 1;
	can1.Init.TimeSeg1 = CAN_BS1_13TQ;
	can1.Init.TimeSeg2 = CAN_BS2_2TQ;
	can1.Init.SyncJumpWidth = CAN_SJW_1TQ;

	if(HAL_CAN_Init(&can1) != HAL_OK) Error_Handler();




}


uint8_t led_no = 0;
void CAN1_Tx(void)
{
	CAN_TxHeaderTypeDef Txheader;

	uint32_t TxMailbox;
	uint8_t messg ;

	Txheader.IDE = CAN_ID_STD;
	Txheader.DLC = 1;
	Txheader.RTR = CAN_RTR_DATA;
	Txheader.StdId = 0x65D;

	messg = ++led_no;
	if(led_no == 4)
	{
		led_no = 0;
	}
	// here txmailbox is automatically filled by the below api, indicating which mailbox is being used
	if(HAL_CAN_AddTxMessage(&can1, &Txheader, &messg, &TxMailbox) != HAL_OK) Error_Handler();





}



void CAN1_Filter_init(void)
{


	// here we accepting every message (no filter)
	CAN_FilterTypeDef filter;

	filter.FilterActivation = ENABLE;
	filter.FilterBank = 0;
	filter.FilterFIFOAssignment = CAN_RX_FIFO0;
	filter.FilterIdHigh = 0x0000;
	filter.FilterIdLow = 0x0000;
	filter.FilterMaskIdHigh = 0x0000;
	filter.FilterMaskIdLow = 0x0000;
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
	filter.FilterMode = CAN_FILTERMODE_IDMASK;


	if(HAL_CAN_ConfigFilter(&can1,&filter) != HAL_OK) Error_Handler();
}

void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{


	uint8_t rcvd_mssg[8];

	if(HAL_CAN_GetRxMessage(&can1, CAN_RX_FIFO0, &RxHeader, rcvd_mssg) != HAL_OK) Error_Handler();

	if(RxHeader.StdId == 0x65D && RxHeader.RTR == 0)
	{
		// led command from n1 to n2
		Led_Manage_output(rcvd_mssg[0]);
	}
	else if(RxHeader.StdId == 0x651 && RxHeader.RTR == 1)
	{
		// remote frame requested by n1
		Send_Response(0x651);
		return;

	}
	else if(RxHeader.StdId == 0x651 && RxHeader.RTR == 0)
	{
		// data frame reply by n2 to n1
		printf("Reply received = %d\n", rcvd_mssg[0]);

	}
}


void tim2_init(void)
{

	tim2.Instance = TIM2;
	tim2.Init.CounterMode = TIM_COUNTERMODE_UP;
	tim2.Init.Prescaler = 7999; // as clock is 8Mhz we downsclaed it to 100hz
	tim2.Init.Period = 1000 - 1; // to generate the delay after 1 sec
	if(HAL_TIM_Base_Init(&tim2) != HAL_OK) Error_Handler();

}

uint8_t counter = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	CAN_TxHeaderTypeDef TxHeader;
	uint8_t dummy[1] = 0; // no meaning of message here
	uint32_t TxMailbox;
	if(counter == 4)
	{
		TxHeader.DLC = 2;
		TxHeader.StdId = 0x651;
		TxHeader.IDE = CAN_ID_STD;
		TxHeader.RTR = CAN_RTR_REMOTE;

		if(HAL_CAN_AddTxMessage(&can1, &TxHeader, dummy, &TxMailbox) != HAL_OK) Error_Handler();

		counter = 0;

	}
	else{
		CAN1_Tx();
		counter++;
	}
}

void Led_Manage_output(uint8_t led_no)
{
	switch(led_no)
	{
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
		break;
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);

		break;
	case 3:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);

		break;
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);

		break;

	}
}

void Send_Response(uint32_t stdId)
{
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;
	uint8_t response[2] = {0xAB , 0xCD};

	TxHeader.StdId = stdId;
	TxHeader.DLC = 2;
	TxHeader.RTR = CAN_RTR_DATA;
	TxHeader.IDE = CAN_ID_STD;

	if(HAL_CAN_AddTxMessage(&can1, &TxHeader, response, &TxMailbox) != HAL_OK) Error_Handler();

}

void Error_Handler(void)
{
	while(1);
}
