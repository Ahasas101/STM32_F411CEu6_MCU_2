
P_16_WFI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018b4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08001a4c  08001a4c  00002a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a60  08001a60  00003068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001a60  08001a60  00003068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001a60  08001a60  00003068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a60  08001a60  00002a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001a64  08001a64  00002a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08001a68  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  08001ad0  00003068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08001ad0  00003220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c05  00000000  00000000  00003098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001742  00000000  00000000  0000bc9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0000d3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007a3  00000000  00000000  0000dde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b3b  00000000  00000000  0000e583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a7f4  00000000  00000000  000250be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d5ca  00000000  00000000  0002f8b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bce7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f60  00000000  00000000  000bcec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000bfe20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000068 	.word	0x20000068
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001a34 	.word	0x08001a34

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000006c 	.word	0x2000006c
 80001d4:	08001a34 	.word	0x08001a34

080001d8 <SysTick_Handler>:
#include "stm32f4xx_hal.h"



void SysTick_Handler(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80001dc:	f000 fa3a 	bl	8000654 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80001e0:	f000 fb5d 	bl	800089e <HAL_SYSTICK_IRQHandler>
}
 80001e4:	bf00      	nop
 80001e6:	bd80      	pop	{r7, pc}

080001e8 <TIM2_IRQHandler>:

void EXTI0_IRQHandler (void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80001ec:	2201      	movs	r2, #1
 80001ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001f2:	4807      	ldr	r0, [pc, #28]	@ (8000210 <TIM2_IRQHandler+0x28>)
 80001f4:	f000 fce4 	bl	8000bc0 <HAL_GPIO_WritePin>
}
 80001f8:	4806      	ldr	r0, [pc, #24]	@ (8000214 <TIM2_IRQHandler+0x2c>)
 80001fa:	f000 fdbd 	bl	8000d78 <HAL_TIM_IRQHandler>
 80001fe:	2200      	movs	r2, #0
 8000200:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000204:	4802      	ldr	r0, [pc, #8]	@ (8000210 <TIM2_IRQHandler+0x28>)
 8000206:	f000 fcdb 	bl	8000bc0 <HAL_GPIO_WritePin>
 800020a:	bf00      	nop
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	40020800 	.word	0x40020800
 8000214:	20000084 	.word	0x20000084

08000218 <main>:

TIM_HandleTypeDef tim;

int main(void)
{
  HAL_Init();
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
   GpioSwoInit();
 800021c:	f000 f9c0 	bl	80005a0 <HAL_Init>
   printf("Hello\n");
 8000220:	f000 f834 	bl	800028c <GpioSwoInit>
   button_init();
 8000224:	4809      	ldr	r0, [pc, #36]	@ (800024c <main+0x34>)
 8000226:	f001 f871 	bl	800130c <puts>

 800022a:	f000 f865 	bl	80002f8 <led_init>

 800022e:	f000 f811 	bl	8000254 <Tim_init>
  	 // SCB->SCR |=(1 << 1); // you can do this manaully or use the below api
  HAL_PWR_EnableSleepOnExit();

 8000232:	f000 fcdf 	bl	8000bf4 <HAL_PWR_EnableSleepOnExit>
  while(1);
  return 0;
 8000236:	4806      	ldr	r0, [pc, #24]	@ (8000250 <main+0x38>)
 8000238:	f000 fd3c 	bl	8000cb4 <HAL_TIM_Base_Start_IT>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d002      	beq.n	8000248 <main+0x30>
 8000242:	f000 f881 	bl	8000348 <Error_Handler>

 8000246:	bf00      	nop
 8000248:	bf00      	nop
 800024a:	e7fd      	b.n	8000248 <main+0x30>
 800024c:	08001a4c 	.word	0x08001a4c
 8000250:	20000084 	.word	0x20000084

08000254 <Tim_init>:
}


void GpioSwoInit(void)
{
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio_swo;
	gpio_swo.Mode = GPIO_MODE_AF_PP;
 8000258:	4b0b      	ldr	r3, [pc, #44]	@ (8000288 <Tim_init+0x34>)
 800025a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800025e:	601a      	str	r2, [r3, #0]
	gpio_swo.Pin = GPIO_PIN_3;
 8000260:	4b09      	ldr	r3, [pc, #36]	@ (8000288 <Tim_init+0x34>)
 8000262:	2200      	movs	r2, #0
 8000264:	609a      	str	r2, [r3, #8]
	gpio_swo.Alternate = GPIO_AF0_SWJ;
 8000266:	4b08      	ldr	r3, [pc, #32]	@ (8000288 <Tim_init+0x34>)
 8000268:	220f      	movs	r2, #15
 800026a:	605a      	str	r2, [r3, #4]
	gpio_swo.Pull = GPIO_NOPULL;
 800026c:	4b06      	ldr	r3, [pc, #24]	@ (8000288 <Tim_init+0x34>)
 800026e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000272:	60da      	str	r2, [r3, #12]
	gpio_swo.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &gpio_swo);
 8000274:	4804      	ldr	r0, [pc, #16]	@ (8000288 <Tim_init+0x34>)
 8000276:	f000 fccd 	bl	8000c14 <HAL_TIM_Base_Init>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <Tim_init+0x30>
 8000280:	f000 f862 	bl	8000348 <Error_Handler>

 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}
 8000288:	20000084 	.word	0x20000084

0800028c <GpioSwoInit>:
	// In order to save the power you must keep the other pins of the gpio's in analog mode
	gpio_swo.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | \
				GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | \
				GPIO_PIN_0 | GPIO_PIN_14 | GPIO_PIN_15;
 800028c:	b580      	push	{r7, lr}
 800028e:	b086      	sub	sp, #24
 8000290:	af00      	add	r7, sp, #0
	gpio_swo.Mode = GPIO_MODE_ANALOG;
 8000292:	2300      	movs	r3, #0
 8000294:	603b      	str	r3, [r7, #0]
 8000296:	4b0f      	ldr	r3, [pc, #60]	@ (80002d4 <GpioSwoInit+0x48>)
 8000298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800029a:	4a0e      	ldr	r2, [pc, #56]	@ (80002d4 <GpioSwoInit+0x48>)
 800029c:	f043 0302 	orr.w	r3, r3, #2
 80002a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80002a2:	4b0c      	ldr	r3, [pc, #48]	@ (80002d4 <GpioSwoInit+0x48>)
 80002a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002a6:	f003 0302 	and.w	r3, r3, #2
 80002aa:	603b      	str	r3, [r7, #0]
 80002ac:	683b      	ldr	r3, [r7, #0]

	HAL_GPIO_Init(GPIOB, &gpio_swo);
 80002ae:	2302      	movs	r3, #2
 80002b0:	60bb      	str	r3, [r7, #8]
}
 80002b2:	2308      	movs	r3, #8
 80002b4:	607b      	str	r3, [r7, #4]

 80002b6:	2300      	movs	r3, #0
 80002b8:	617b      	str	r3, [r7, #20]

 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]

 80002be:	2300      	movs	r3, #0
 80002c0:	613b      	str	r3, [r7, #16]
void button_init(void)
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	4619      	mov	r1, r3
 80002c6:	4804      	ldr	r0, [pc, #16]	@ (80002d8 <GpioSwoInit+0x4c>)
 80002c8:	f000 faf6 	bl	80008b8 <HAL_GPIO_Init>
{
 80002cc:	bf00      	nop
 80002ce:	3718      	adds	r7, #24
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	40023800 	.word	0x40023800
 80002d8:	40020400 	.word	0x40020400

080002dc <HAL_TIM_PeriodElapsedCallback>:
	__HAL_RCC_GPIOA_CLK_ENABLE();

	GPIO_InitTypeDef button;
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
	button.Pin = GPIO_PIN_0;
 80002e4:	4803      	ldr	r0, [pc, #12]	@ (80002f4 <HAL_TIM_PeriodElapsedCallback+0x18>)
 80002e6:	f001 f811 	bl	800130c <puts>
	button.Mode = GPIO_MODE_IT_FALLING;
	button.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	08001a54 	.word	0x08001a54

080002f8 <led_init>:
	button.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOA, &button);

 80002f8:	b580      	push	{r7, lr}
 80002fa:	b086      	sub	sp, #24
 80002fc:	af00      	add	r7, sp, #0
	// In order to save the power you must keep the other pins of the gpio's in analog mode
 80002fe:	2300      	movs	r3, #0
 8000300:	603b      	str	r3, [r7, #0]
 8000302:	4b0f      	ldr	r3, [pc, #60]	@ (8000340 <led_init+0x48>)
 8000304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000306:	4a0e      	ldr	r2, [pc, #56]	@ (8000340 <led_init+0x48>)
 8000308:	f043 0304 	orr.w	r3, r3, #4
 800030c:	6313      	str	r3, [r2, #48]	@ 0x30
 800030e:	4b0c      	ldr	r3, [pc, #48]	@ (8000340 <led_init+0x48>)
 8000310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000312:	f003 0304 	and.w	r3, r3, #4
 8000316:	603b      	str	r3, [r7, #0]
 8000318:	683b      	ldr	r3, [r7, #0]

	// you cannpt change the state of pin 13 and pin 14 because they are used as swdio and swclk
	button.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | \
 800031a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800031e:	607b      	str	r3, [r7, #4]
				GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | \
 8000320:	2301      	movs	r3, #1
 8000322:	60bb      	str	r3, [r7, #8]
				 GPIO_PIN_15;
 8000324:	2301      	movs	r3, #1
 8000326:	613b      	str	r3, [r7, #16]

 8000328:	2300      	movs	r3, #0
 800032a:	60fb      	str	r3, [r7, #12]
	button.Mode = GPIO_MODE_ANALOG;

 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	4619      	mov	r1, r3
 8000330:	4804      	ldr	r0, [pc, #16]	@ (8000344 <led_init+0x4c>)
 8000332:	f000 fac1 	bl	80008b8 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOA, &button);
 8000336:	bf00      	nop
 8000338:	3718      	adds	r7, #24
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40023800 	.word	0x40023800
 8000344:	40020800 	.word	0x40020800

08000348 <Error_Handler>:
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
	printf("Hello from callback\n");
 800034c:	bf00      	nop
 800034e:	e7fd      	b.n	800034c <Error_Handler+0x4>

08000350 <HAL_TIM_Base_MspInit>:
#include "stm32f4xx_hal.h"


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b084      	sub	sp, #16
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM2_CLK_ENABLE();
 8000358:	2300      	movs	r3, #0
 800035a:	60fb      	str	r3, [r7, #12]
 800035c:	4b0b      	ldr	r3, [pc, #44]	@ (800038c <HAL_TIM_Base_MspInit+0x3c>)
 800035e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000360:	4a0a      	ldr	r2, [pc, #40]	@ (800038c <HAL_TIM_Base_MspInit+0x3c>)
 8000362:	f043 0301 	orr.w	r3, r3, #1
 8000366:	6413      	str	r3, [r2, #64]	@ 0x40
 8000368:	4b08      	ldr	r3, [pc, #32]	@ (800038c <HAL_TIM_Base_MspInit+0x3c>)
 800036a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800036c:	f003 0301 	and.w	r3, r3, #1
 8000370:	60fb      	str	r3, [r7, #12]
 8000372:	68fb      	ldr	r3, [r7, #12]

	HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 8000374:	2200      	movs	r2, #0
 8000376:	210f      	movs	r1, #15
 8000378:	201c      	movs	r0, #28
 800037a:	f000 fa5a 	bl	8000832 <HAL_NVIC_SetPriority>

	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800037e:	201c      	movs	r0, #28
 8000380:	f000 fa73 	bl	800086a <HAL_NVIC_EnableIRQ>
}
 8000384:	bf00      	nop
 8000386:	3710      	adds	r7, #16
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	40023800 	.word	0x40023800

08000390 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800039a:	4b0f      	ldr	r3, [pc, #60]	@ (80003d8 <ITM_SendChar+0x48>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a0e      	ldr	r2, [pc, #56]	@ (80003d8 <ITM_SendChar+0x48>)
 80003a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80003a4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80003a6:	4b0d      	ldr	r3, [pc, #52]	@ (80003dc <ITM_SendChar+0x4c>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a0c      	ldr	r2, [pc, #48]	@ (80003dc <ITM_SendChar+0x4c>)
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80003b2:	bf00      	nop
 80003b4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f003 0301 	and.w	r3, r3, #1
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d0f8      	beq.n	80003b4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80003c2:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	6013      	str	r3, [r2, #0]
}
 80003ca:	bf00      	nop
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	e000edfc 	.word	0xe000edfc
 80003dc:	e0000e00 	.word	0xe0000e00

080003e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b086      	sub	sp, #24
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	60f8      	str	r0, [r7, #12]
 80003e8:	60b9      	str	r1, [r7, #8]
 80003ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ec:	2300      	movs	r3, #0
 80003ee:	617b      	str	r3, [r7, #20]
 80003f0:	e00a      	b.n	8000408 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003f2:	f3af 8000 	nop.w
 80003f6:	4601      	mov	r1, r0
 80003f8:	68bb      	ldr	r3, [r7, #8]
 80003fa:	1c5a      	adds	r2, r3, #1
 80003fc:	60ba      	str	r2, [r7, #8]
 80003fe:	b2ca      	uxtb	r2, r1
 8000400:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000402:	697b      	ldr	r3, [r7, #20]
 8000404:	3301      	adds	r3, #1
 8000406:	617b      	str	r3, [r7, #20]
 8000408:	697a      	ldr	r2, [r7, #20]
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	429a      	cmp	r2, r3
 800040e:	dbf0      	blt.n	80003f2 <_read+0x12>
  }

  return len;
 8000410:	687b      	ldr	r3, [r7, #4]
}
 8000412:	4618      	mov	r0, r3
 8000414:	3718      	adds	r7, #24
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}

0800041a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800041a:	b580      	push	{r7, lr}
 800041c:	b086      	sub	sp, #24
 800041e:	af00      	add	r7, sp, #0
 8000420:	60f8      	str	r0, [r7, #12]
 8000422:	60b9      	str	r1, [r7, #8]
 8000424:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000426:	2300      	movs	r3, #0
 8000428:	617b      	str	r3, [r7, #20]
 800042a:	e009      	b.n	8000440 <_write+0x26>
  {
   //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	1c5a      	adds	r2, r3, #1
 8000430:	60ba      	str	r2, [r7, #8]
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	4618      	mov	r0, r3
 8000436:	f7ff ffab 	bl	8000390 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800043a:	697b      	ldr	r3, [r7, #20]
 800043c:	3301      	adds	r3, #1
 800043e:	617b      	str	r3, [r7, #20]
 8000440:	697a      	ldr	r2, [r7, #20]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	429a      	cmp	r2, r3
 8000446:	dbf1      	blt.n	800042c <_write+0x12>
  }
  return len;
 8000448:	687b      	ldr	r3, [r7, #4]
}
 800044a:	4618      	mov	r0, r3
 800044c:	3718      	adds	r7, #24
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}

08000452 <_close>:

int _close(int file)
{
 8000452:	b480      	push	{r7}
 8000454:	b083      	sub	sp, #12
 8000456:	af00      	add	r7, sp, #0
 8000458:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800045a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800045e:	4618      	mov	r0, r3
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr

0800046a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800046a:	b480      	push	{r7}
 800046c:	b083      	sub	sp, #12
 800046e:	af00      	add	r7, sp, #0
 8000470:	6078      	str	r0, [r7, #4]
 8000472:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800047a:	605a      	str	r2, [r3, #4]
  return 0;
 800047c:	2300      	movs	r3, #0
}
 800047e:	4618      	mov	r0, r3
 8000480:	370c      	adds	r7, #12
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr

0800048a <_isatty>:

int _isatty(int file)
{
 800048a:	b480      	push	{r7}
 800048c:	b083      	sub	sp, #12
 800048e:	af00      	add	r7, sp, #0
 8000490:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000492:	2301      	movs	r3, #1
}
 8000494:	4618      	mov	r0, r3
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr

080004a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	60f8      	str	r0, [r7, #12]
 80004a8:	60b9      	str	r1, [r7, #8]
 80004aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004ac:	2300      	movs	r3, #0
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	3714      	adds	r7, #20
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
	...

080004bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004c4:	4a14      	ldr	r2, [pc, #80]	@ (8000518 <_sbrk+0x5c>)
 80004c6:	4b15      	ldr	r3, [pc, #84]	@ (800051c <_sbrk+0x60>)
 80004c8:	1ad3      	subs	r3, r2, r3
 80004ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004d0:	4b13      	ldr	r3, [pc, #76]	@ (8000520 <_sbrk+0x64>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d102      	bne.n	80004de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004d8:	4b11      	ldr	r3, [pc, #68]	@ (8000520 <_sbrk+0x64>)
 80004da:	4a12      	ldr	r2, [pc, #72]	@ (8000524 <_sbrk+0x68>)
 80004dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004de:	4b10      	ldr	r3, [pc, #64]	@ (8000520 <_sbrk+0x64>)
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4413      	add	r3, r2
 80004e6:	693a      	ldr	r2, [r7, #16]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d207      	bcs.n	80004fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004ec:	f001 f83c 	bl	8001568 <__errno>
 80004f0:	4603      	mov	r3, r0
 80004f2:	220c      	movs	r2, #12
 80004f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004f6:	f04f 33ff 	mov.w	r3, #4294967295
 80004fa:	e009      	b.n	8000510 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004fc:	4b08      	ldr	r3, [pc, #32]	@ (8000520 <_sbrk+0x64>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000502:	4b07      	ldr	r3, [pc, #28]	@ (8000520 <_sbrk+0x64>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4413      	add	r3, r2
 800050a:	4a05      	ldr	r2, [pc, #20]	@ (8000520 <_sbrk+0x64>)
 800050c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800050e:	68fb      	ldr	r3, [r7, #12]
}
 8000510:	4618      	mov	r0, r3
 8000512:	3718      	adds	r7, #24
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20020000 	.word	0x20020000
 800051c:	00000400 	.word	0x00000400
 8000520:	200000cc 	.word	0x200000cc
 8000524:	20000220 	.word	0x20000220

08000528 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800052c:	4b06      	ldr	r3, [pc, #24]	@ (8000548 <SystemInit+0x20>)
 800052e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000532:	4a05      	ldr	r2, [pc, #20]	@ (8000548 <SystemInit+0x20>)
 8000534:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000538:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	e000ed00 	.word	0xe000ed00

0800054c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800054c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000584 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000550:	f7ff ffea 	bl	8000528 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000554:	480c      	ldr	r0, [pc, #48]	@ (8000588 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000556:	490d      	ldr	r1, [pc, #52]	@ (800058c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000558:	4a0d      	ldr	r2, [pc, #52]	@ (8000590 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800055a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800055c:	e002      	b.n	8000564 <LoopCopyDataInit>

0800055e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800055e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000562:	3304      	adds	r3, #4

08000564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000568:	d3f9      	bcc.n	800055e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800056a:	4a0a      	ldr	r2, [pc, #40]	@ (8000594 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800056c:	4c0a      	ldr	r4, [pc, #40]	@ (8000598 <LoopFillZerobss+0x22>)
  movs r3, #0
 800056e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000570:	e001      	b.n	8000576 <LoopFillZerobss>

08000572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000574:	3204      	adds	r2, #4

08000576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000578:	d3fb      	bcc.n	8000572 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800057a:	f000 fffb 	bl	8001574 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800057e:	f7ff fe4b 	bl	8000218 <main>
  bx  lr    
 8000582:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000584:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800058c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000590:	08001a68 	.word	0x08001a68
  ldr r2, =_sbss
 8000594:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000598:	20000220 	.word	0x20000220

0800059c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800059c:	e7fe      	b.n	800059c <ADC_IRQHandler>
	...

080005a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005a4:	4b0e      	ldr	r3, [pc, #56]	@ (80005e0 <HAL_Init+0x40>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a0d      	ldr	r2, [pc, #52]	@ (80005e0 <HAL_Init+0x40>)
 80005aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005b0:	4b0b      	ldr	r3, [pc, #44]	@ (80005e0 <HAL_Init+0x40>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a0a      	ldr	r2, [pc, #40]	@ (80005e0 <HAL_Init+0x40>)
 80005b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005bc:	4b08      	ldr	r3, [pc, #32]	@ (80005e0 <HAL_Init+0x40>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a07      	ldr	r2, [pc, #28]	@ (80005e0 <HAL_Init+0x40>)
 80005c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c8:	2003      	movs	r0, #3
 80005ca:	f000 f927 	bl	800081c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ce:	200f      	movs	r0, #15
 80005d0:	f000 f810 	bl	80005f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d4:	f000 f806 	bl	80005e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005d8:	2300      	movs	r3, #0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40023c00 	.word	0x40023c00

080005e4 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
	...

080005f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005fc:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <HAL_InitTick+0x54>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	4b12      	ldr	r3, [pc, #72]	@ (800064c <HAL_InitTick+0x58>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	4619      	mov	r1, r3
 8000606:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800060a:	fbb3 f3f1 	udiv	r3, r3, r1
 800060e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000612:	4618      	mov	r0, r3
 8000614:	f000 f937 	bl	8000886 <HAL_SYSTICK_Config>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800061e:	2301      	movs	r3, #1
 8000620:	e00e      	b.n	8000640 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2b0f      	cmp	r3, #15
 8000626:	d80a      	bhi.n	800063e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000628:	2200      	movs	r2, #0
 800062a:	6879      	ldr	r1, [r7, #4]
 800062c:	f04f 30ff 	mov.w	r0, #4294967295
 8000630:	f000 f8ff 	bl	8000832 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000634:	4a06      	ldr	r2, [pc, #24]	@ (8000650 <HAL_InitTick+0x5c>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800063a:	2300      	movs	r3, #0
 800063c:	e000      	b.n	8000640 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800063e:	2301      	movs	r3, #1
}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000000 	.word	0x20000000
 800064c:	20000008 	.word	0x20000008
 8000650:	20000004 	.word	0x20000004

08000654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000658:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <HAL_IncTick+0x20>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	461a      	mov	r2, r3
 800065e:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <HAL_IncTick+0x24>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4413      	add	r3, r2
 8000664:	4a04      	ldr	r2, [pc, #16]	@ (8000678 <HAL_IncTick+0x24>)
 8000666:	6013      	str	r3, [r2, #0]
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000008 	.word	0x20000008
 8000678:	200000d0 	.word	0x200000d0

0800067c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f003 0307 	and.w	r3, r3, #7
 800068a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800068c:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <__NVIC_SetPriorityGrouping+0x44>)
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000692:	68ba      	ldr	r2, [r7, #8]
 8000694:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000698:	4013      	ands	r3, r2
 800069a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ae:	4a04      	ldr	r2, [pc, #16]	@ (80006c0 <__NVIC_SetPriorityGrouping+0x44>)
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	60d3      	str	r3, [r2, #12]
}
 80006b4:	bf00      	nop
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c8:	4b04      	ldr	r3, [pc, #16]	@ (80006dc <__NVIC_GetPriorityGrouping+0x18>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	0a1b      	lsrs	r3, r3, #8
 80006ce:	f003 0307 	and.w	r3, r3, #7
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	db0b      	blt.n	800070a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	f003 021f 	and.w	r2, r3, #31
 80006f8:	4907      	ldr	r1, [pc, #28]	@ (8000718 <__NVIC_EnableIRQ+0x38>)
 80006fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fe:	095b      	lsrs	r3, r3, #5
 8000700:	2001      	movs	r0, #1
 8000702:	fa00 f202 	lsl.w	r2, r0, r2
 8000706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	e000e100 	.word	0xe000e100

0800071c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	6039      	str	r1, [r7, #0]
 8000726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072c:	2b00      	cmp	r3, #0
 800072e:	db0a      	blt.n	8000746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	b2da      	uxtb	r2, r3
 8000734:	490c      	ldr	r1, [pc, #48]	@ (8000768 <__NVIC_SetPriority+0x4c>)
 8000736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073a:	0112      	lsls	r2, r2, #4
 800073c:	b2d2      	uxtb	r2, r2
 800073e:	440b      	add	r3, r1
 8000740:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000744:	e00a      	b.n	800075c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	b2da      	uxtb	r2, r3
 800074a:	4908      	ldr	r1, [pc, #32]	@ (800076c <__NVIC_SetPriority+0x50>)
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	f003 030f 	and.w	r3, r3, #15
 8000752:	3b04      	subs	r3, #4
 8000754:	0112      	lsls	r2, r2, #4
 8000756:	b2d2      	uxtb	r2, r2
 8000758:	440b      	add	r3, r1
 800075a:	761a      	strb	r2, [r3, #24]
}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	e000e100 	.word	0xe000e100
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000770:	b480      	push	{r7}
 8000772:	b089      	sub	sp, #36	@ 0x24
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f003 0307 	and.w	r3, r3, #7
 8000782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	f1c3 0307 	rsb	r3, r3, #7
 800078a:	2b04      	cmp	r3, #4
 800078c:	bf28      	it	cs
 800078e:	2304      	movcs	r3, #4
 8000790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	3304      	adds	r3, #4
 8000796:	2b06      	cmp	r3, #6
 8000798:	d902      	bls.n	80007a0 <NVIC_EncodePriority+0x30>
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	3b03      	subs	r3, #3
 800079e:	e000      	b.n	80007a2 <NVIC_EncodePriority+0x32>
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a4:	f04f 32ff 	mov.w	r2, #4294967295
 80007a8:	69bb      	ldr	r3, [r7, #24]
 80007aa:	fa02 f303 	lsl.w	r3, r2, r3
 80007ae:	43da      	mvns	r2, r3
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	401a      	ands	r2, r3
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b8:	f04f 31ff 	mov.w	r1, #4294967295
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	fa01 f303 	lsl.w	r3, r1, r3
 80007c2:	43d9      	mvns	r1, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c8:	4313      	orrs	r3, r2
         );
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3724      	adds	r7, #36	@ 0x24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
	...

080007d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3b01      	subs	r3, #1
 80007e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007e8:	d301      	bcc.n	80007ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ea:	2301      	movs	r3, #1
 80007ec:	e00f      	b.n	800080e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000818 <SysTick_Config+0x40>)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3b01      	subs	r3, #1
 80007f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007f6:	210f      	movs	r1, #15
 80007f8:	f04f 30ff 	mov.w	r0, #4294967295
 80007fc:	f7ff ff8e 	bl	800071c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000800:	4b05      	ldr	r3, [pc, #20]	@ (8000818 <SysTick_Config+0x40>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000806:	4b04      	ldr	r3, [pc, #16]	@ (8000818 <SysTick_Config+0x40>)
 8000808:	2207      	movs	r2, #7
 800080a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	e000e010 	.word	0xe000e010

0800081c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f7ff ff29 	bl	800067c <__NVIC_SetPriorityGrouping>
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000832:	b580      	push	{r7, lr}
 8000834:	b086      	sub	sp, #24
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	60b9      	str	r1, [r7, #8]
 800083c:	607a      	str	r2, [r7, #4]
 800083e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000844:	f7ff ff3e 	bl	80006c4 <__NVIC_GetPriorityGrouping>
 8000848:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	68b9      	ldr	r1, [r7, #8]
 800084e:	6978      	ldr	r0, [r7, #20]
 8000850:	f7ff ff8e 	bl	8000770 <NVIC_EncodePriority>
 8000854:	4602      	mov	r2, r0
 8000856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800085a:	4611      	mov	r1, r2
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff ff5d 	bl	800071c <__NVIC_SetPriority>
}
 8000862:	bf00      	nop
 8000864:	3718      	adds	r7, #24
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
 8000870:	4603      	mov	r3, r0
 8000872:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ff31 	bl	80006e0 <__NVIC_EnableIRQ>
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f7ff ffa2 	bl	80007d8 <SysTick_Config>
 8000894:	4603      	mov	r3, r0
}
 8000896:	4618      	mov	r0, r3
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80008a2:	f000 f802 	bl	80008aa <HAL_SYSTICK_Callback>
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}

080008aa <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b089      	sub	sp, #36	@ 0x24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
 80008d2:	e159      	b.n	8000b88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80008d4:	2201      	movs	r2, #1
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	697a      	ldr	r2, [r7, #20]
 80008e4:	4013      	ands	r3, r2
 80008e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	f040 8148 	bne.w	8000b82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	f003 0303 	and.w	r3, r3, #3
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d005      	beq.n	800090a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000906:	2b02      	cmp	r3, #2
 8000908:	d130      	bne.n	800096c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	2203      	movs	r2, #3
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	43db      	mvns	r3, r3
 800091c:	69ba      	ldr	r2, [r7, #24]
 800091e:	4013      	ands	r3, r2
 8000920:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	68da      	ldr	r2, [r3, #12]
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	4313      	orrs	r3, r2
 8000932:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	69ba      	ldr	r2, [r7, #24]
 8000938:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000940:	2201      	movs	r2, #1
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	43db      	mvns	r3, r3
 800094a:	69ba      	ldr	r2, [r7, #24]
 800094c:	4013      	ands	r3, r2
 800094e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	091b      	lsrs	r3, r3, #4
 8000956:	f003 0201 	and.w	r2, r3, #1
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	4313      	orrs	r3, r2
 8000964:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	69ba      	ldr	r2, [r7, #24]
 800096a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	f003 0303 	and.w	r3, r3, #3
 8000974:	2b03      	cmp	r3, #3
 8000976:	d017      	beq.n	80009a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	2203      	movs	r2, #3
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	43db      	mvns	r3, r3
 800098a:	69ba      	ldr	r2, [r7, #24]
 800098c:	4013      	ands	r3, r2
 800098e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	689a      	ldr	r2, [r3, #8]
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	4313      	orrs	r3, r2
 80009a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	69ba      	ldr	r2, [r7, #24]
 80009a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	f003 0303 	and.w	r3, r3, #3
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	d123      	bne.n	80009fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	08da      	lsrs	r2, r3, #3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3208      	adds	r2, #8
 80009bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	f003 0307 	and.w	r3, r3, #7
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	220f      	movs	r2, #15
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	43db      	mvns	r3, r3
 80009d2:	69ba      	ldr	r2, [r7, #24]
 80009d4:	4013      	ands	r3, r2
 80009d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	691a      	ldr	r2, [r3, #16]
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	69ba      	ldr	r2, [r7, #24]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	08da      	lsrs	r2, r3, #3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3208      	adds	r2, #8
 80009f6:	69b9      	ldr	r1, [r7, #24]
 80009f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	2203      	movs	r2, #3
 8000a08:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	69ba      	ldr	r2, [r7, #24]
 8000a10:	4013      	ands	r3, r2
 8000a12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f003 0203 	and.w	r2, r3, #3
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	69ba      	ldr	r2, [r7, #24]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	69ba      	ldr	r2, [r7, #24]
 8000a2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	f000 80a2 	beq.w	8000b82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	4b57      	ldr	r3, [pc, #348]	@ (8000ba0 <HAL_GPIO_Init+0x2e8>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a46:	4a56      	ldr	r2, [pc, #344]	@ (8000ba0 <HAL_GPIO_Init+0x2e8>)
 8000a48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a4e:	4b54      	ldr	r3, [pc, #336]	@ (8000ba0 <HAL_GPIO_Init+0x2e8>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a5a:	4a52      	ldr	r2, [pc, #328]	@ (8000ba4 <HAL_GPIO_Init+0x2ec>)
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	089b      	lsrs	r3, r3, #2
 8000a60:	3302      	adds	r3, #2
 8000a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	f003 0303 	and.w	r3, r3, #3
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	220f      	movs	r2, #15
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	43db      	mvns	r3, r3
 8000a78:	69ba      	ldr	r2, [r7, #24]
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4a49      	ldr	r2, [pc, #292]	@ (8000ba8 <HAL_GPIO_Init+0x2f0>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d019      	beq.n	8000aba <HAL_GPIO_Init+0x202>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4a48      	ldr	r2, [pc, #288]	@ (8000bac <HAL_GPIO_Init+0x2f4>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d013      	beq.n	8000ab6 <HAL_GPIO_Init+0x1fe>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4a47      	ldr	r2, [pc, #284]	@ (8000bb0 <HAL_GPIO_Init+0x2f8>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d00d      	beq.n	8000ab2 <HAL_GPIO_Init+0x1fa>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a46      	ldr	r2, [pc, #280]	@ (8000bb4 <HAL_GPIO_Init+0x2fc>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d007      	beq.n	8000aae <HAL_GPIO_Init+0x1f6>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a45      	ldr	r2, [pc, #276]	@ (8000bb8 <HAL_GPIO_Init+0x300>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d101      	bne.n	8000aaa <HAL_GPIO_Init+0x1f2>
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	e008      	b.n	8000abc <HAL_GPIO_Init+0x204>
 8000aaa:	2307      	movs	r3, #7
 8000aac:	e006      	b.n	8000abc <HAL_GPIO_Init+0x204>
 8000aae:	2303      	movs	r3, #3
 8000ab0:	e004      	b.n	8000abc <HAL_GPIO_Init+0x204>
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	e002      	b.n	8000abc <HAL_GPIO_Init+0x204>
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e000      	b.n	8000abc <HAL_GPIO_Init+0x204>
 8000aba:	2300      	movs	r3, #0
 8000abc:	69fa      	ldr	r2, [r7, #28]
 8000abe:	f002 0203 	and.w	r2, r2, #3
 8000ac2:	0092      	lsls	r2, r2, #2
 8000ac4:	4093      	lsls	r3, r2
 8000ac6:	69ba      	ldr	r2, [r7, #24]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000acc:	4935      	ldr	r1, [pc, #212]	@ (8000ba4 <HAL_GPIO_Init+0x2ec>)
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	089b      	lsrs	r3, r3, #2
 8000ad2:	3302      	adds	r3, #2
 8000ad4:	69ba      	ldr	r2, [r7, #24]
 8000ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ada:	4b38      	ldr	r3, [pc, #224]	@ (8000bbc <HAL_GPIO_Init+0x304>)
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d003      	beq.n	8000afe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000af6:	69ba      	ldr	r2, [r7, #24]
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000afe:	4a2f      	ldr	r2, [pc, #188]	@ (8000bbc <HAL_GPIO_Init+0x304>)
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b04:	4b2d      	ldr	r3, [pc, #180]	@ (8000bbc <HAL_GPIO_Init+0x304>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	69ba      	ldr	r2, [r7, #24]
 8000b10:	4013      	ands	r3, r2
 8000b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d003      	beq.n	8000b28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000b20:	69ba      	ldr	r2, [r7, #24]
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b28:	4a24      	ldr	r2, [pc, #144]	@ (8000bbc <HAL_GPIO_Init+0x304>)
 8000b2a:	69bb      	ldr	r3, [r7, #24]
 8000b2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000b2e:	4b23      	ldr	r3, [pc, #140]	@ (8000bbc <HAL_GPIO_Init+0x304>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	43db      	mvns	r3, r3
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d003      	beq.n	8000b52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000b4a:	69ba      	ldr	r2, [r7, #24]
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b52:	4a1a      	ldr	r2, [pc, #104]	@ (8000bbc <HAL_GPIO_Init+0x304>)
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b58:	4b18      	ldr	r3, [pc, #96]	@ (8000bbc <HAL_GPIO_Init+0x304>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	43db      	mvns	r3, r3
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	4013      	ands	r3, r2
 8000b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d003      	beq.n	8000b7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000b74:	69ba      	ldr	r2, [r7, #24]
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b7c:	4a0f      	ldr	r2, [pc, #60]	@ (8000bbc <HAL_GPIO_Init+0x304>)
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3301      	adds	r3, #1
 8000b86:	61fb      	str	r3, [r7, #28]
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	2b0f      	cmp	r3, #15
 8000b8c:	f67f aea2 	bls.w	80008d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b90:	bf00      	nop
 8000b92:	bf00      	nop
 8000b94:	3724      	adds	r7, #36	@ 0x24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40013800 	.word	0x40013800
 8000ba8:	40020000 	.word	0x40020000
 8000bac:	40020400 	.word	0x40020400
 8000bb0:	40020800 	.word	0x40020800
 8000bb4:	40020c00 	.word	0x40020c00
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	40013c00 	.word	0x40013c00

08000bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	807b      	strh	r3, [r7, #2]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bd0:	787b      	ldrb	r3, [r7, #1]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d003      	beq.n	8000bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bd6:	887a      	ldrh	r2, [r7, #2]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000bdc:	e003      	b.n	8000be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bde:	887b      	ldrh	r3, [r7, #2]
 8000be0:	041a      	lsls	r2, r3, #16
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	619a      	str	r2, [r3, #24]
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8000bf8:	4b05      	ldr	r3, [pc, #20]	@ (8000c10 <HAL_PWR_EnableSleepOnExit+0x1c>)
 8000bfa:	691b      	ldr	r3, [r3, #16]
 8000bfc:	4a04      	ldr	r2, [pc, #16]	@ (8000c10 <HAL_PWR_EnableSleepOnExit+0x1c>)
 8000bfe:	f043 0302 	orr.w	r3, r3, #2
 8000c02:	6113      	str	r3, [r2, #16]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d101      	bne.n	8000c26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e041      	b.n	8000caa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d106      	bne.n	8000c40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2200      	movs	r2, #0
 8000c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff fb88 	bl	8000350 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2202      	movs	r2, #2
 8000c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3304      	adds	r3, #4
 8000c50:	4619      	mov	r1, r3
 8000c52:	4610      	mov	r0, r2
 8000c54:	f000 f9a8 	bl	8000fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2201      	movs	r2, #1
 8000c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2201      	movs	r2, #1
 8000c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2201      	movs	r2, #1
 8000c84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2201      	movs	r2, #1
 8000c94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d001      	beq.n	8000ccc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e044      	b.n	8000d56 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2202      	movs	r2, #2
 8000cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	68da      	ldr	r2, [r3, #12]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f042 0201 	orr.w	r2, r2, #1
 8000ce2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a1e      	ldr	r2, [pc, #120]	@ (8000d64 <HAL_TIM_Base_Start_IT+0xb0>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d018      	beq.n	8000d20 <HAL_TIM_Base_Start_IT+0x6c>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cf6:	d013      	beq.n	8000d20 <HAL_TIM_Base_Start_IT+0x6c>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a1a      	ldr	r2, [pc, #104]	@ (8000d68 <HAL_TIM_Base_Start_IT+0xb4>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d00e      	beq.n	8000d20 <HAL_TIM_Base_Start_IT+0x6c>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a19      	ldr	r2, [pc, #100]	@ (8000d6c <HAL_TIM_Base_Start_IT+0xb8>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d009      	beq.n	8000d20 <HAL_TIM_Base_Start_IT+0x6c>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a17      	ldr	r2, [pc, #92]	@ (8000d70 <HAL_TIM_Base_Start_IT+0xbc>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d004      	beq.n	8000d20 <HAL_TIM_Base_Start_IT+0x6c>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a16      	ldr	r2, [pc, #88]	@ (8000d74 <HAL_TIM_Base_Start_IT+0xc0>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d111      	bne.n	8000d44 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2b06      	cmp	r3, #6
 8000d30:	d010      	beq.n	8000d54 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f042 0201 	orr.w	r2, r2, #1
 8000d40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000d42:	e007      	b.n	8000d54 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f042 0201 	orr.w	r2, r2, #1
 8000d52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40010000 	.word	0x40010000
 8000d68:	40000400 	.word	0x40000400
 8000d6c:	40000800 	.word	0x40000800
 8000d70:	40000c00 	.word	0x40000c00
 8000d74:	40014000 	.word	0x40014000

08000d78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	691b      	ldr	r3, [r3, #16]
 8000d8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d020      	beq.n	8000ddc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f003 0302 	and.w	r3, r3, #2
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d01b      	beq.n	8000ddc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f06f 0202 	mvn.w	r2, #2
 8000dac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2201      	movs	r2, #1
 8000db2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	f003 0303 	and.w	r3, r3, #3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f000 f8d2 	bl	8000f6c <HAL_TIM_IC_CaptureCallback>
 8000dc8:	e005      	b.n	8000dd6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f000 f8c4 	bl	8000f58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f000 f8d5 	bl	8000f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	f003 0304 	and.w	r3, r3, #4
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d020      	beq.n	8000e28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	f003 0304 	and.w	r3, r3, #4
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d01b      	beq.n	8000e28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f06f 0204 	mvn.w	r2, #4
 8000df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d003      	beq.n	8000e16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f000 f8ac 	bl	8000f6c <HAL_TIM_IC_CaptureCallback>
 8000e14:	e005      	b.n	8000e22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f000 f89e 	bl	8000f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f000 f8af 	bl	8000f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2200      	movs	r2, #0
 8000e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	f003 0308 	and.w	r3, r3, #8
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d020      	beq.n	8000e74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	f003 0308 	and.w	r3, r3, #8
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d01b      	beq.n	8000e74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f06f 0208 	mvn.w	r2, #8
 8000e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2204      	movs	r2, #4
 8000e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	f003 0303 	and.w	r3, r3, #3
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f000 f886 	bl	8000f6c <HAL_TIM_IC_CaptureCallback>
 8000e60:	e005      	b.n	8000e6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f000 f878 	bl	8000f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f000 f889 	bl	8000f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	f003 0310 	and.w	r3, r3, #16
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d020      	beq.n	8000ec0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	f003 0310 	and.w	r3, r3, #16
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d01b      	beq.n	8000ec0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f06f 0210 	mvn.w	r2, #16
 8000e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2208      	movs	r2, #8
 8000e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f000 f860 	bl	8000f6c <HAL_TIM_IC_CaptureCallback>
 8000eac:	e005      	b.n	8000eba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f000 f852 	bl	8000f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f000 f863 	bl	8000f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d00c      	beq.n	8000ee4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d007      	beq.n	8000ee4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f06f 0201 	mvn.w	r2, #1
 8000edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff f9fc 	bl	80002dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d00c      	beq.n	8000f08 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d007      	beq.n	8000f08 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8000f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f000 f8e0 	bl	80010c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d00c      	beq.n	8000f2c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d007      	beq.n	8000f2c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8000f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f000 f834 	bl	8000f94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	f003 0320 	and.w	r3, r3, #32
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d00c      	beq.n	8000f50 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f003 0320 	and.w	r3, r3, #32
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d007      	beq.n	8000f50 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f06f 0220 	mvn.w	r2, #32
 8000f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f000 f8b2 	bl	80010b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000f50:	bf00      	nop
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a37      	ldr	r2, [pc, #220]	@ (8001098 <TIM_Base_SetConfig+0xf0>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d00f      	beq.n	8000fe0 <TIM_Base_SetConfig+0x38>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fc6:	d00b      	beq.n	8000fe0 <TIM_Base_SetConfig+0x38>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a34      	ldr	r2, [pc, #208]	@ (800109c <TIM_Base_SetConfig+0xf4>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d007      	beq.n	8000fe0 <TIM_Base_SetConfig+0x38>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a33      	ldr	r2, [pc, #204]	@ (80010a0 <TIM_Base_SetConfig+0xf8>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d003      	beq.n	8000fe0 <TIM_Base_SetConfig+0x38>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a32      	ldr	r2, [pc, #200]	@ (80010a4 <TIM_Base_SetConfig+0xfc>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d108      	bne.n	8000ff2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	68fa      	ldr	r2, [r7, #12]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a28      	ldr	r2, [pc, #160]	@ (8001098 <TIM_Base_SetConfig+0xf0>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d01b      	beq.n	8001032 <TIM_Base_SetConfig+0x8a>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001000:	d017      	beq.n	8001032 <TIM_Base_SetConfig+0x8a>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a25      	ldr	r2, [pc, #148]	@ (800109c <TIM_Base_SetConfig+0xf4>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d013      	beq.n	8001032 <TIM_Base_SetConfig+0x8a>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a24      	ldr	r2, [pc, #144]	@ (80010a0 <TIM_Base_SetConfig+0xf8>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d00f      	beq.n	8001032 <TIM_Base_SetConfig+0x8a>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a23      	ldr	r2, [pc, #140]	@ (80010a4 <TIM_Base_SetConfig+0xfc>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d00b      	beq.n	8001032 <TIM_Base_SetConfig+0x8a>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a22      	ldr	r2, [pc, #136]	@ (80010a8 <TIM_Base_SetConfig+0x100>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d007      	beq.n	8001032 <TIM_Base_SetConfig+0x8a>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a21      	ldr	r2, [pc, #132]	@ (80010ac <TIM_Base_SetConfig+0x104>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d003      	beq.n	8001032 <TIM_Base_SetConfig+0x8a>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a20      	ldr	r2, [pc, #128]	@ (80010b0 <TIM_Base_SetConfig+0x108>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d108      	bne.n	8001044 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	4313      	orrs	r3, r2
 8001042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	4313      	orrs	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	689a      	ldr	r2, [r3, #8]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a0c      	ldr	r2, [pc, #48]	@ (8001098 <TIM_Base_SetConfig+0xf0>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d103      	bne.n	8001072 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	691a      	ldr	r2, [r3, #16]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f043 0204 	orr.w	r2, r3, #4
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2201      	movs	r2, #1
 8001082:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	601a      	str	r2, [r3, #0]
}
 800108a:	bf00      	nop
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40010000 	.word	0x40010000
 800109c:	40000400 	.word	0x40000400
 80010a0:	40000800 	.word	0x40000800
 80010a4:	40000c00 	.word	0x40000c00
 80010a8:	40014000 	.word	0x40014000
 80010ac:	40014400 	.word	0x40014400
 80010b0:	40014800 	.word	0x40014800

080010b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <std>:
 80010dc:	2300      	movs	r3, #0
 80010de:	b510      	push	{r4, lr}
 80010e0:	4604      	mov	r4, r0
 80010e2:	e9c0 3300 	strd	r3, r3, [r0]
 80010e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80010ea:	6083      	str	r3, [r0, #8]
 80010ec:	8181      	strh	r1, [r0, #12]
 80010ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80010f0:	81c2      	strh	r2, [r0, #14]
 80010f2:	6183      	str	r3, [r0, #24]
 80010f4:	4619      	mov	r1, r3
 80010f6:	2208      	movs	r2, #8
 80010f8:	305c      	adds	r0, #92	@ 0x5c
 80010fa:	f000 f9e7 	bl	80014cc <memset>
 80010fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001134 <std+0x58>)
 8001100:	6263      	str	r3, [r4, #36]	@ 0x24
 8001102:	4b0d      	ldr	r3, [pc, #52]	@ (8001138 <std+0x5c>)
 8001104:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001106:	4b0d      	ldr	r3, [pc, #52]	@ (800113c <std+0x60>)
 8001108:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800110a:	4b0d      	ldr	r3, [pc, #52]	@ (8001140 <std+0x64>)
 800110c:	6323      	str	r3, [r4, #48]	@ 0x30
 800110e:	4b0d      	ldr	r3, [pc, #52]	@ (8001144 <std+0x68>)
 8001110:	6224      	str	r4, [r4, #32]
 8001112:	429c      	cmp	r4, r3
 8001114:	d006      	beq.n	8001124 <std+0x48>
 8001116:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800111a:	4294      	cmp	r4, r2
 800111c:	d002      	beq.n	8001124 <std+0x48>
 800111e:	33d0      	adds	r3, #208	@ 0xd0
 8001120:	429c      	cmp	r4, r3
 8001122:	d105      	bne.n	8001130 <std+0x54>
 8001124:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800112c:	f000 ba46 	b.w	80015bc <__retarget_lock_init_recursive>
 8001130:	bd10      	pop	{r4, pc}
 8001132:	bf00      	nop
 8001134:	0800131d 	.word	0x0800131d
 8001138:	0800133f 	.word	0x0800133f
 800113c:	08001377 	.word	0x08001377
 8001140:	0800139b 	.word	0x0800139b
 8001144:	200000d4 	.word	0x200000d4

08001148 <stdio_exit_handler>:
 8001148:	4a02      	ldr	r2, [pc, #8]	@ (8001154 <stdio_exit_handler+0xc>)
 800114a:	4903      	ldr	r1, [pc, #12]	@ (8001158 <stdio_exit_handler+0x10>)
 800114c:	4803      	ldr	r0, [pc, #12]	@ (800115c <stdio_exit_handler+0x14>)
 800114e:	f000 b869 	b.w	8001224 <_fwalk_sglue>
 8001152:	bf00      	nop
 8001154:	2000000c 	.word	0x2000000c
 8001158:	080018bd 	.word	0x080018bd
 800115c:	2000001c 	.word	0x2000001c

08001160 <cleanup_stdio>:
 8001160:	6841      	ldr	r1, [r0, #4]
 8001162:	4b0c      	ldr	r3, [pc, #48]	@ (8001194 <cleanup_stdio+0x34>)
 8001164:	4299      	cmp	r1, r3
 8001166:	b510      	push	{r4, lr}
 8001168:	4604      	mov	r4, r0
 800116a:	d001      	beq.n	8001170 <cleanup_stdio+0x10>
 800116c:	f000 fba6 	bl	80018bc <_fflush_r>
 8001170:	68a1      	ldr	r1, [r4, #8]
 8001172:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <cleanup_stdio+0x38>)
 8001174:	4299      	cmp	r1, r3
 8001176:	d002      	beq.n	800117e <cleanup_stdio+0x1e>
 8001178:	4620      	mov	r0, r4
 800117a:	f000 fb9f 	bl	80018bc <_fflush_r>
 800117e:	68e1      	ldr	r1, [r4, #12]
 8001180:	4b06      	ldr	r3, [pc, #24]	@ (800119c <cleanup_stdio+0x3c>)
 8001182:	4299      	cmp	r1, r3
 8001184:	d004      	beq.n	8001190 <cleanup_stdio+0x30>
 8001186:	4620      	mov	r0, r4
 8001188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800118c:	f000 bb96 	b.w	80018bc <_fflush_r>
 8001190:	bd10      	pop	{r4, pc}
 8001192:	bf00      	nop
 8001194:	200000d4 	.word	0x200000d4
 8001198:	2000013c 	.word	0x2000013c
 800119c:	200001a4 	.word	0x200001a4

080011a0 <global_stdio_init.part.0>:
 80011a0:	b510      	push	{r4, lr}
 80011a2:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <global_stdio_init.part.0+0x30>)
 80011a4:	4c0b      	ldr	r4, [pc, #44]	@ (80011d4 <global_stdio_init.part.0+0x34>)
 80011a6:	4a0c      	ldr	r2, [pc, #48]	@ (80011d8 <global_stdio_init.part.0+0x38>)
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	4620      	mov	r0, r4
 80011ac:	2200      	movs	r2, #0
 80011ae:	2104      	movs	r1, #4
 80011b0:	f7ff ff94 	bl	80010dc <std>
 80011b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80011b8:	2201      	movs	r2, #1
 80011ba:	2109      	movs	r1, #9
 80011bc:	f7ff ff8e 	bl	80010dc <std>
 80011c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80011c4:	2202      	movs	r2, #2
 80011c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011ca:	2112      	movs	r1, #18
 80011cc:	f7ff bf86 	b.w	80010dc <std>
 80011d0:	2000020c 	.word	0x2000020c
 80011d4:	200000d4 	.word	0x200000d4
 80011d8:	08001149 	.word	0x08001149

080011dc <__sfp_lock_acquire>:
 80011dc:	4801      	ldr	r0, [pc, #4]	@ (80011e4 <__sfp_lock_acquire+0x8>)
 80011de:	f000 b9ee 	b.w	80015be <__retarget_lock_acquire_recursive>
 80011e2:	bf00      	nop
 80011e4:	20000215 	.word	0x20000215

080011e8 <__sfp_lock_release>:
 80011e8:	4801      	ldr	r0, [pc, #4]	@ (80011f0 <__sfp_lock_release+0x8>)
 80011ea:	f000 b9e9 	b.w	80015c0 <__retarget_lock_release_recursive>
 80011ee:	bf00      	nop
 80011f0:	20000215 	.word	0x20000215

080011f4 <__sinit>:
 80011f4:	b510      	push	{r4, lr}
 80011f6:	4604      	mov	r4, r0
 80011f8:	f7ff fff0 	bl	80011dc <__sfp_lock_acquire>
 80011fc:	6a23      	ldr	r3, [r4, #32]
 80011fe:	b11b      	cbz	r3, 8001208 <__sinit+0x14>
 8001200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001204:	f7ff bff0 	b.w	80011e8 <__sfp_lock_release>
 8001208:	4b04      	ldr	r3, [pc, #16]	@ (800121c <__sinit+0x28>)
 800120a:	6223      	str	r3, [r4, #32]
 800120c:	4b04      	ldr	r3, [pc, #16]	@ (8001220 <__sinit+0x2c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1f5      	bne.n	8001200 <__sinit+0xc>
 8001214:	f7ff ffc4 	bl	80011a0 <global_stdio_init.part.0>
 8001218:	e7f2      	b.n	8001200 <__sinit+0xc>
 800121a:	bf00      	nop
 800121c:	08001161 	.word	0x08001161
 8001220:	2000020c 	.word	0x2000020c

08001224 <_fwalk_sglue>:
 8001224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001228:	4607      	mov	r7, r0
 800122a:	4688      	mov	r8, r1
 800122c:	4614      	mov	r4, r2
 800122e:	2600      	movs	r6, #0
 8001230:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001234:	f1b9 0901 	subs.w	r9, r9, #1
 8001238:	d505      	bpl.n	8001246 <_fwalk_sglue+0x22>
 800123a:	6824      	ldr	r4, [r4, #0]
 800123c:	2c00      	cmp	r4, #0
 800123e:	d1f7      	bne.n	8001230 <_fwalk_sglue+0xc>
 8001240:	4630      	mov	r0, r6
 8001242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001246:	89ab      	ldrh	r3, [r5, #12]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d907      	bls.n	800125c <_fwalk_sglue+0x38>
 800124c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001250:	3301      	adds	r3, #1
 8001252:	d003      	beq.n	800125c <_fwalk_sglue+0x38>
 8001254:	4629      	mov	r1, r5
 8001256:	4638      	mov	r0, r7
 8001258:	47c0      	blx	r8
 800125a:	4306      	orrs	r6, r0
 800125c:	3568      	adds	r5, #104	@ 0x68
 800125e:	e7e9      	b.n	8001234 <_fwalk_sglue+0x10>

08001260 <_puts_r>:
 8001260:	6a03      	ldr	r3, [r0, #32]
 8001262:	b570      	push	{r4, r5, r6, lr}
 8001264:	6884      	ldr	r4, [r0, #8]
 8001266:	4605      	mov	r5, r0
 8001268:	460e      	mov	r6, r1
 800126a:	b90b      	cbnz	r3, 8001270 <_puts_r+0x10>
 800126c:	f7ff ffc2 	bl	80011f4 <__sinit>
 8001270:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001272:	07db      	lsls	r3, r3, #31
 8001274:	d405      	bmi.n	8001282 <_puts_r+0x22>
 8001276:	89a3      	ldrh	r3, [r4, #12]
 8001278:	0598      	lsls	r0, r3, #22
 800127a:	d402      	bmi.n	8001282 <_puts_r+0x22>
 800127c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800127e:	f000 f99e 	bl	80015be <__retarget_lock_acquire_recursive>
 8001282:	89a3      	ldrh	r3, [r4, #12]
 8001284:	0719      	lsls	r1, r3, #28
 8001286:	d502      	bpl.n	800128e <_puts_r+0x2e>
 8001288:	6923      	ldr	r3, [r4, #16]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d135      	bne.n	80012fa <_puts_r+0x9a>
 800128e:	4621      	mov	r1, r4
 8001290:	4628      	mov	r0, r5
 8001292:	f000 f8c5 	bl	8001420 <__swsetup_r>
 8001296:	b380      	cbz	r0, 80012fa <_puts_r+0x9a>
 8001298:	f04f 35ff 	mov.w	r5, #4294967295
 800129c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800129e:	07da      	lsls	r2, r3, #31
 80012a0:	d405      	bmi.n	80012ae <_puts_r+0x4e>
 80012a2:	89a3      	ldrh	r3, [r4, #12]
 80012a4:	059b      	lsls	r3, r3, #22
 80012a6:	d402      	bmi.n	80012ae <_puts_r+0x4e>
 80012a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012aa:	f000 f989 	bl	80015c0 <__retarget_lock_release_recursive>
 80012ae:	4628      	mov	r0, r5
 80012b0:	bd70      	pop	{r4, r5, r6, pc}
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	da04      	bge.n	80012c0 <_puts_r+0x60>
 80012b6:	69a2      	ldr	r2, [r4, #24]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	dc17      	bgt.n	80012ec <_puts_r+0x8c>
 80012bc:	290a      	cmp	r1, #10
 80012be:	d015      	beq.n	80012ec <_puts_r+0x8c>
 80012c0:	6823      	ldr	r3, [r4, #0]
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	6022      	str	r2, [r4, #0]
 80012c6:	7019      	strb	r1, [r3, #0]
 80012c8:	68a3      	ldr	r3, [r4, #8]
 80012ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80012ce:	3b01      	subs	r3, #1
 80012d0:	60a3      	str	r3, [r4, #8]
 80012d2:	2900      	cmp	r1, #0
 80012d4:	d1ed      	bne.n	80012b2 <_puts_r+0x52>
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	da11      	bge.n	80012fe <_puts_r+0x9e>
 80012da:	4622      	mov	r2, r4
 80012dc:	210a      	movs	r1, #10
 80012de:	4628      	mov	r0, r5
 80012e0:	f000 f85f 	bl	80013a2 <__swbuf_r>
 80012e4:	3001      	adds	r0, #1
 80012e6:	d0d7      	beq.n	8001298 <_puts_r+0x38>
 80012e8:	250a      	movs	r5, #10
 80012ea:	e7d7      	b.n	800129c <_puts_r+0x3c>
 80012ec:	4622      	mov	r2, r4
 80012ee:	4628      	mov	r0, r5
 80012f0:	f000 f857 	bl	80013a2 <__swbuf_r>
 80012f4:	3001      	adds	r0, #1
 80012f6:	d1e7      	bne.n	80012c8 <_puts_r+0x68>
 80012f8:	e7ce      	b.n	8001298 <_puts_r+0x38>
 80012fa:	3e01      	subs	r6, #1
 80012fc:	e7e4      	b.n	80012c8 <_puts_r+0x68>
 80012fe:	6823      	ldr	r3, [r4, #0]
 8001300:	1c5a      	adds	r2, r3, #1
 8001302:	6022      	str	r2, [r4, #0]
 8001304:	220a      	movs	r2, #10
 8001306:	701a      	strb	r2, [r3, #0]
 8001308:	e7ee      	b.n	80012e8 <_puts_r+0x88>
	...

0800130c <puts>:
 800130c:	4b02      	ldr	r3, [pc, #8]	@ (8001318 <puts+0xc>)
 800130e:	4601      	mov	r1, r0
 8001310:	6818      	ldr	r0, [r3, #0]
 8001312:	f7ff bfa5 	b.w	8001260 <_puts_r>
 8001316:	bf00      	nop
 8001318:	20000018 	.word	0x20000018

0800131c <__sread>:
 800131c:	b510      	push	{r4, lr}
 800131e:	460c      	mov	r4, r1
 8001320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001324:	f000 f8fc 	bl	8001520 <_read_r>
 8001328:	2800      	cmp	r0, #0
 800132a:	bfab      	itete	ge
 800132c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800132e:	89a3      	ldrhlt	r3, [r4, #12]
 8001330:	181b      	addge	r3, r3, r0
 8001332:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001336:	bfac      	ite	ge
 8001338:	6563      	strge	r3, [r4, #84]	@ 0x54
 800133a:	81a3      	strhlt	r3, [r4, #12]
 800133c:	bd10      	pop	{r4, pc}

0800133e <__swrite>:
 800133e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001342:	461f      	mov	r7, r3
 8001344:	898b      	ldrh	r3, [r1, #12]
 8001346:	05db      	lsls	r3, r3, #23
 8001348:	4605      	mov	r5, r0
 800134a:	460c      	mov	r4, r1
 800134c:	4616      	mov	r6, r2
 800134e:	d505      	bpl.n	800135c <__swrite+0x1e>
 8001350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001354:	2302      	movs	r3, #2
 8001356:	2200      	movs	r2, #0
 8001358:	f000 f8d0 	bl	80014fc <_lseek_r>
 800135c:	89a3      	ldrh	r3, [r4, #12]
 800135e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001362:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001366:	81a3      	strh	r3, [r4, #12]
 8001368:	4632      	mov	r2, r6
 800136a:	463b      	mov	r3, r7
 800136c:	4628      	mov	r0, r5
 800136e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001372:	f000 b8e7 	b.w	8001544 <_write_r>

08001376 <__sseek>:
 8001376:	b510      	push	{r4, lr}
 8001378:	460c      	mov	r4, r1
 800137a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800137e:	f000 f8bd 	bl	80014fc <_lseek_r>
 8001382:	1c43      	adds	r3, r0, #1
 8001384:	89a3      	ldrh	r3, [r4, #12]
 8001386:	bf15      	itete	ne
 8001388:	6560      	strne	r0, [r4, #84]	@ 0x54
 800138a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800138e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001392:	81a3      	strheq	r3, [r4, #12]
 8001394:	bf18      	it	ne
 8001396:	81a3      	strhne	r3, [r4, #12]
 8001398:	bd10      	pop	{r4, pc}

0800139a <__sclose>:
 800139a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800139e:	f000 b89d 	b.w	80014dc <_close_r>

080013a2 <__swbuf_r>:
 80013a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013a4:	460e      	mov	r6, r1
 80013a6:	4614      	mov	r4, r2
 80013a8:	4605      	mov	r5, r0
 80013aa:	b118      	cbz	r0, 80013b4 <__swbuf_r+0x12>
 80013ac:	6a03      	ldr	r3, [r0, #32]
 80013ae:	b90b      	cbnz	r3, 80013b4 <__swbuf_r+0x12>
 80013b0:	f7ff ff20 	bl	80011f4 <__sinit>
 80013b4:	69a3      	ldr	r3, [r4, #24]
 80013b6:	60a3      	str	r3, [r4, #8]
 80013b8:	89a3      	ldrh	r3, [r4, #12]
 80013ba:	071a      	lsls	r2, r3, #28
 80013bc:	d501      	bpl.n	80013c2 <__swbuf_r+0x20>
 80013be:	6923      	ldr	r3, [r4, #16]
 80013c0:	b943      	cbnz	r3, 80013d4 <__swbuf_r+0x32>
 80013c2:	4621      	mov	r1, r4
 80013c4:	4628      	mov	r0, r5
 80013c6:	f000 f82b 	bl	8001420 <__swsetup_r>
 80013ca:	b118      	cbz	r0, 80013d4 <__swbuf_r+0x32>
 80013cc:	f04f 37ff 	mov.w	r7, #4294967295
 80013d0:	4638      	mov	r0, r7
 80013d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013d4:	6823      	ldr	r3, [r4, #0]
 80013d6:	6922      	ldr	r2, [r4, #16]
 80013d8:	1a98      	subs	r0, r3, r2
 80013da:	6963      	ldr	r3, [r4, #20]
 80013dc:	b2f6      	uxtb	r6, r6
 80013de:	4283      	cmp	r3, r0
 80013e0:	4637      	mov	r7, r6
 80013e2:	dc05      	bgt.n	80013f0 <__swbuf_r+0x4e>
 80013e4:	4621      	mov	r1, r4
 80013e6:	4628      	mov	r0, r5
 80013e8:	f000 fa68 	bl	80018bc <_fflush_r>
 80013ec:	2800      	cmp	r0, #0
 80013ee:	d1ed      	bne.n	80013cc <__swbuf_r+0x2a>
 80013f0:	68a3      	ldr	r3, [r4, #8]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	60a3      	str	r3, [r4, #8]
 80013f6:	6823      	ldr	r3, [r4, #0]
 80013f8:	1c5a      	adds	r2, r3, #1
 80013fa:	6022      	str	r2, [r4, #0]
 80013fc:	701e      	strb	r6, [r3, #0]
 80013fe:	6962      	ldr	r2, [r4, #20]
 8001400:	1c43      	adds	r3, r0, #1
 8001402:	429a      	cmp	r2, r3
 8001404:	d004      	beq.n	8001410 <__swbuf_r+0x6e>
 8001406:	89a3      	ldrh	r3, [r4, #12]
 8001408:	07db      	lsls	r3, r3, #31
 800140a:	d5e1      	bpl.n	80013d0 <__swbuf_r+0x2e>
 800140c:	2e0a      	cmp	r6, #10
 800140e:	d1df      	bne.n	80013d0 <__swbuf_r+0x2e>
 8001410:	4621      	mov	r1, r4
 8001412:	4628      	mov	r0, r5
 8001414:	f000 fa52 	bl	80018bc <_fflush_r>
 8001418:	2800      	cmp	r0, #0
 800141a:	d0d9      	beq.n	80013d0 <__swbuf_r+0x2e>
 800141c:	e7d6      	b.n	80013cc <__swbuf_r+0x2a>
	...

08001420 <__swsetup_r>:
 8001420:	b538      	push	{r3, r4, r5, lr}
 8001422:	4b29      	ldr	r3, [pc, #164]	@ (80014c8 <__swsetup_r+0xa8>)
 8001424:	4605      	mov	r5, r0
 8001426:	6818      	ldr	r0, [r3, #0]
 8001428:	460c      	mov	r4, r1
 800142a:	b118      	cbz	r0, 8001434 <__swsetup_r+0x14>
 800142c:	6a03      	ldr	r3, [r0, #32]
 800142e:	b90b      	cbnz	r3, 8001434 <__swsetup_r+0x14>
 8001430:	f7ff fee0 	bl	80011f4 <__sinit>
 8001434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001438:	0719      	lsls	r1, r3, #28
 800143a:	d422      	bmi.n	8001482 <__swsetup_r+0x62>
 800143c:	06da      	lsls	r2, r3, #27
 800143e:	d407      	bmi.n	8001450 <__swsetup_r+0x30>
 8001440:	2209      	movs	r2, #9
 8001442:	602a      	str	r2, [r5, #0]
 8001444:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001448:	81a3      	strh	r3, [r4, #12]
 800144a:	f04f 30ff 	mov.w	r0, #4294967295
 800144e:	e033      	b.n	80014b8 <__swsetup_r+0x98>
 8001450:	0758      	lsls	r0, r3, #29
 8001452:	d512      	bpl.n	800147a <__swsetup_r+0x5a>
 8001454:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001456:	b141      	cbz	r1, 800146a <__swsetup_r+0x4a>
 8001458:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800145c:	4299      	cmp	r1, r3
 800145e:	d002      	beq.n	8001466 <__swsetup_r+0x46>
 8001460:	4628      	mov	r0, r5
 8001462:	f000 f8af 	bl	80015c4 <_free_r>
 8001466:	2300      	movs	r3, #0
 8001468:	6363      	str	r3, [r4, #52]	@ 0x34
 800146a:	89a3      	ldrh	r3, [r4, #12]
 800146c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001470:	81a3      	strh	r3, [r4, #12]
 8001472:	2300      	movs	r3, #0
 8001474:	6063      	str	r3, [r4, #4]
 8001476:	6923      	ldr	r3, [r4, #16]
 8001478:	6023      	str	r3, [r4, #0]
 800147a:	89a3      	ldrh	r3, [r4, #12]
 800147c:	f043 0308 	orr.w	r3, r3, #8
 8001480:	81a3      	strh	r3, [r4, #12]
 8001482:	6923      	ldr	r3, [r4, #16]
 8001484:	b94b      	cbnz	r3, 800149a <__swsetup_r+0x7a>
 8001486:	89a3      	ldrh	r3, [r4, #12]
 8001488:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800148c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001490:	d003      	beq.n	800149a <__swsetup_r+0x7a>
 8001492:	4621      	mov	r1, r4
 8001494:	4628      	mov	r0, r5
 8001496:	f000 fa5f 	bl	8001958 <__smakebuf_r>
 800149a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800149e:	f013 0201 	ands.w	r2, r3, #1
 80014a2:	d00a      	beq.n	80014ba <__swsetup_r+0x9a>
 80014a4:	2200      	movs	r2, #0
 80014a6:	60a2      	str	r2, [r4, #8]
 80014a8:	6962      	ldr	r2, [r4, #20]
 80014aa:	4252      	negs	r2, r2
 80014ac:	61a2      	str	r2, [r4, #24]
 80014ae:	6922      	ldr	r2, [r4, #16]
 80014b0:	b942      	cbnz	r2, 80014c4 <__swsetup_r+0xa4>
 80014b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80014b6:	d1c5      	bne.n	8001444 <__swsetup_r+0x24>
 80014b8:	bd38      	pop	{r3, r4, r5, pc}
 80014ba:	0799      	lsls	r1, r3, #30
 80014bc:	bf58      	it	pl
 80014be:	6962      	ldrpl	r2, [r4, #20]
 80014c0:	60a2      	str	r2, [r4, #8]
 80014c2:	e7f4      	b.n	80014ae <__swsetup_r+0x8e>
 80014c4:	2000      	movs	r0, #0
 80014c6:	e7f7      	b.n	80014b8 <__swsetup_r+0x98>
 80014c8:	20000018 	.word	0x20000018

080014cc <memset>:
 80014cc:	4402      	add	r2, r0
 80014ce:	4603      	mov	r3, r0
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d100      	bne.n	80014d6 <memset+0xa>
 80014d4:	4770      	bx	lr
 80014d6:	f803 1b01 	strb.w	r1, [r3], #1
 80014da:	e7f9      	b.n	80014d0 <memset+0x4>

080014dc <_close_r>:
 80014dc:	b538      	push	{r3, r4, r5, lr}
 80014de:	4d06      	ldr	r5, [pc, #24]	@ (80014f8 <_close_r+0x1c>)
 80014e0:	2300      	movs	r3, #0
 80014e2:	4604      	mov	r4, r0
 80014e4:	4608      	mov	r0, r1
 80014e6:	602b      	str	r3, [r5, #0]
 80014e8:	f7fe ffb3 	bl	8000452 <_close>
 80014ec:	1c43      	adds	r3, r0, #1
 80014ee:	d102      	bne.n	80014f6 <_close_r+0x1a>
 80014f0:	682b      	ldr	r3, [r5, #0]
 80014f2:	b103      	cbz	r3, 80014f6 <_close_r+0x1a>
 80014f4:	6023      	str	r3, [r4, #0]
 80014f6:	bd38      	pop	{r3, r4, r5, pc}
 80014f8:	20000210 	.word	0x20000210

080014fc <_lseek_r>:
 80014fc:	b538      	push	{r3, r4, r5, lr}
 80014fe:	4d07      	ldr	r5, [pc, #28]	@ (800151c <_lseek_r+0x20>)
 8001500:	4604      	mov	r4, r0
 8001502:	4608      	mov	r0, r1
 8001504:	4611      	mov	r1, r2
 8001506:	2200      	movs	r2, #0
 8001508:	602a      	str	r2, [r5, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	f7fe ffc8 	bl	80004a0 <_lseek>
 8001510:	1c43      	adds	r3, r0, #1
 8001512:	d102      	bne.n	800151a <_lseek_r+0x1e>
 8001514:	682b      	ldr	r3, [r5, #0]
 8001516:	b103      	cbz	r3, 800151a <_lseek_r+0x1e>
 8001518:	6023      	str	r3, [r4, #0]
 800151a:	bd38      	pop	{r3, r4, r5, pc}
 800151c:	20000210 	.word	0x20000210

08001520 <_read_r>:
 8001520:	b538      	push	{r3, r4, r5, lr}
 8001522:	4d07      	ldr	r5, [pc, #28]	@ (8001540 <_read_r+0x20>)
 8001524:	4604      	mov	r4, r0
 8001526:	4608      	mov	r0, r1
 8001528:	4611      	mov	r1, r2
 800152a:	2200      	movs	r2, #0
 800152c:	602a      	str	r2, [r5, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	f7fe ff56 	bl	80003e0 <_read>
 8001534:	1c43      	adds	r3, r0, #1
 8001536:	d102      	bne.n	800153e <_read_r+0x1e>
 8001538:	682b      	ldr	r3, [r5, #0]
 800153a:	b103      	cbz	r3, 800153e <_read_r+0x1e>
 800153c:	6023      	str	r3, [r4, #0]
 800153e:	bd38      	pop	{r3, r4, r5, pc}
 8001540:	20000210 	.word	0x20000210

08001544 <_write_r>:
 8001544:	b538      	push	{r3, r4, r5, lr}
 8001546:	4d07      	ldr	r5, [pc, #28]	@ (8001564 <_write_r+0x20>)
 8001548:	4604      	mov	r4, r0
 800154a:	4608      	mov	r0, r1
 800154c:	4611      	mov	r1, r2
 800154e:	2200      	movs	r2, #0
 8001550:	602a      	str	r2, [r5, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	f7fe ff61 	bl	800041a <_write>
 8001558:	1c43      	adds	r3, r0, #1
 800155a:	d102      	bne.n	8001562 <_write_r+0x1e>
 800155c:	682b      	ldr	r3, [r5, #0]
 800155e:	b103      	cbz	r3, 8001562 <_write_r+0x1e>
 8001560:	6023      	str	r3, [r4, #0]
 8001562:	bd38      	pop	{r3, r4, r5, pc}
 8001564:	20000210 	.word	0x20000210

08001568 <__errno>:
 8001568:	4b01      	ldr	r3, [pc, #4]	@ (8001570 <__errno+0x8>)
 800156a:	6818      	ldr	r0, [r3, #0]
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	20000018 	.word	0x20000018

08001574 <__libc_init_array>:
 8001574:	b570      	push	{r4, r5, r6, lr}
 8001576:	4d0d      	ldr	r5, [pc, #52]	@ (80015ac <__libc_init_array+0x38>)
 8001578:	4c0d      	ldr	r4, [pc, #52]	@ (80015b0 <__libc_init_array+0x3c>)
 800157a:	1b64      	subs	r4, r4, r5
 800157c:	10a4      	asrs	r4, r4, #2
 800157e:	2600      	movs	r6, #0
 8001580:	42a6      	cmp	r6, r4
 8001582:	d109      	bne.n	8001598 <__libc_init_array+0x24>
 8001584:	4d0b      	ldr	r5, [pc, #44]	@ (80015b4 <__libc_init_array+0x40>)
 8001586:	4c0c      	ldr	r4, [pc, #48]	@ (80015b8 <__libc_init_array+0x44>)
 8001588:	f000 fa54 	bl	8001a34 <_init>
 800158c:	1b64      	subs	r4, r4, r5
 800158e:	10a4      	asrs	r4, r4, #2
 8001590:	2600      	movs	r6, #0
 8001592:	42a6      	cmp	r6, r4
 8001594:	d105      	bne.n	80015a2 <__libc_init_array+0x2e>
 8001596:	bd70      	pop	{r4, r5, r6, pc}
 8001598:	f855 3b04 	ldr.w	r3, [r5], #4
 800159c:	4798      	blx	r3
 800159e:	3601      	adds	r6, #1
 80015a0:	e7ee      	b.n	8001580 <__libc_init_array+0xc>
 80015a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80015a6:	4798      	blx	r3
 80015a8:	3601      	adds	r6, #1
 80015aa:	e7f2      	b.n	8001592 <__libc_init_array+0x1e>
 80015ac:	08001a60 	.word	0x08001a60
 80015b0:	08001a60 	.word	0x08001a60
 80015b4:	08001a60 	.word	0x08001a60
 80015b8:	08001a64 	.word	0x08001a64

080015bc <__retarget_lock_init_recursive>:
 80015bc:	4770      	bx	lr

080015be <__retarget_lock_acquire_recursive>:
 80015be:	4770      	bx	lr

080015c0 <__retarget_lock_release_recursive>:
 80015c0:	4770      	bx	lr
	...

080015c4 <_free_r>:
 80015c4:	b538      	push	{r3, r4, r5, lr}
 80015c6:	4605      	mov	r5, r0
 80015c8:	2900      	cmp	r1, #0
 80015ca:	d041      	beq.n	8001650 <_free_r+0x8c>
 80015cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80015d0:	1f0c      	subs	r4, r1, #4
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	bfb8      	it	lt
 80015d6:	18e4      	addlt	r4, r4, r3
 80015d8:	f000 f8e0 	bl	800179c <__malloc_lock>
 80015dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001654 <_free_r+0x90>)
 80015de:	6813      	ldr	r3, [r2, #0]
 80015e0:	b933      	cbnz	r3, 80015f0 <_free_r+0x2c>
 80015e2:	6063      	str	r3, [r4, #4]
 80015e4:	6014      	str	r4, [r2, #0]
 80015e6:	4628      	mov	r0, r5
 80015e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80015ec:	f000 b8dc 	b.w	80017a8 <__malloc_unlock>
 80015f0:	42a3      	cmp	r3, r4
 80015f2:	d908      	bls.n	8001606 <_free_r+0x42>
 80015f4:	6820      	ldr	r0, [r4, #0]
 80015f6:	1821      	adds	r1, r4, r0
 80015f8:	428b      	cmp	r3, r1
 80015fa:	bf01      	itttt	eq
 80015fc:	6819      	ldreq	r1, [r3, #0]
 80015fe:	685b      	ldreq	r3, [r3, #4]
 8001600:	1809      	addeq	r1, r1, r0
 8001602:	6021      	streq	r1, [r4, #0]
 8001604:	e7ed      	b.n	80015e2 <_free_r+0x1e>
 8001606:	461a      	mov	r2, r3
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	b10b      	cbz	r3, 8001610 <_free_r+0x4c>
 800160c:	42a3      	cmp	r3, r4
 800160e:	d9fa      	bls.n	8001606 <_free_r+0x42>
 8001610:	6811      	ldr	r1, [r2, #0]
 8001612:	1850      	adds	r0, r2, r1
 8001614:	42a0      	cmp	r0, r4
 8001616:	d10b      	bne.n	8001630 <_free_r+0x6c>
 8001618:	6820      	ldr	r0, [r4, #0]
 800161a:	4401      	add	r1, r0
 800161c:	1850      	adds	r0, r2, r1
 800161e:	4283      	cmp	r3, r0
 8001620:	6011      	str	r1, [r2, #0]
 8001622:	d1e0      	bne.n	80015e6 <_free_r+0x22>
 8001624:	6818      	ldr	r0, [r3, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	6053      	str	r3, [r2, #4]
 800162a:	4408      	add	r0, r1
 800162c:	6010      	str	r0, [r2, #0]
 800162e:	e7da      	b.n	80015e6 <_free_r+0x22>
 8001630:	d902      	bls.n	8001638 <_free_r+0x74>
 8001632:	230c      	movs	r3, #12
 8001634:	602b      	str	r3, [r5, #0]
 8001636:	e7d6      	b.n	80015e6 <_free_r+0x22>
 8001638:	6820      	ldr	r0, [r4, #0]
 800163a:	1821      	adds	r1, r4, r0
 800163c:	428b      	cmp	r3, r1
 800163e:	bf04      	itt	eq
 8001640:	6819      	ldreq	r1, [r3, #0]
 8001642:	685b      	ldreq	r3, [r3, #4]
 8001644:	6063      	str	r3, [r4, #4]
 8001646:	bf04      	itt	eq
 8001648:	1809      	addeq	r1, r1, r0
 800164a:	6021      	streq	r1, [r4, #0]
 800164c:	6054      	str	r4, [r2, #4]
 800164e:	e7ca      	b.n	80015e6 <_free_r+0x22>
 8001650:	bd38      	pop	{r3, r4, r5, pc}
 8001652:	bf00      	nop
 8001654:	2000021c 	.word	0x2000021c

08001658 <sbrk_aligned>:
 8001658:	b570      	push	{r4, r5, r6, lr}
 800165a:	4e0f      	ldr	r6, [pc, #60]	@ (8001698 <sbrk_aligned+0x40>)
 800165c:	460c      	mov	r4, r1
 800165e:	6831      	ldr	r1, [r6, #0]
 8001660:	4605      	mov	r5, r0
 8001662:	b911      	cbnz	r1, 800166a <sbrk_aligned+0x12>
 8001664:	f000 f9d6 	bl	8001a14 <_sbrk_r>
 8001668:	6030      	str	r0, [r6, #0]
 800166a:	4621      	mov	r1, r4
 800166c:	4628      	mov	r0, r5
 800166e:	f000 f9d1 	bl	8001a14 <_sbrk_r>
 8001672:	1c43      	adds	r3, r0, #1
 8001674:	d103      	bne.n	800167e <sbrk_aligned+0x26>
 8001676:	f04f 34ff 	mov.w	r4, #4294967295
 800167a:	4620      	mov	r0, r4
 800167c:	bd70      	pop	{r4, r5, r6, pc}
 800167e:	1cc4      	adds	r4, r0, #3
 8001680:	f024 0403 	bic.w	r4, r4, #3
 8001684:	42a0      	cmp	r0, r4
 8001686:	d0f8      	beq.n	800167a <sbrk_aligned+0x22>
 8001688:	1a21      	subs	r1, r4, r0
 800168a:	4628      	mov	r0, r5
 800168c:	f000 f9c2 	bl	8001a14 <_sbrk_r>
 8001690:	3001      	adds	r0, #1
 8001692:	d1f2      	bne.n	800167a <sbrk_aligned+0x22>
 8001694:	e7ef      	b.n	8001676 <sbrk_aligned+0x1e>
 8001696:	bf00      	nop
 8001698:	20000218 	.word	0x20000218

0800169c <_malloc_r>:
 800169c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016a0:	1ccd      	adds	r5, r1, #3
 80016a2:	f025 0503 	bic.w	r5, r5, #3
 80016a6:	3508      	adds	r5, #8
 80016a8:	2d0c      	cmp	r5, #12
 80016aa:	bf38      	it	cc
 80016ac:	250c      	movcc	r5, #12
 80016ae:	2d00      	cmp	r5, #0
 80016b0:	4606      	mov	r6, r0
 80016b2:	db01      	blt.n	80016b8 <_malloc_r+0x1c>
 80016b4:	42a9      	cmp	r1, r5
 80016b6:	d904      	bls.n	80016c2 <_malloc_r+0x26>
 80016b8:	230c      	movs	r3, #12
 80016ba:	6033      	str	r3, [r6, #0]
 80016bc:	2000      	movs	r0, #0
 80016be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001798 <_malloc_r+0xfc>
 80016c6:	f000 f869 	bl	800179c <__malloc_lock>
 80016ca:	f8d8 3000 	ldr.w	r3, [r8]
 80016ce:	461c      	mov	r4, r3
 80016d0:	bb44      	cbnz	r4, 8001724 <_malloc_r+0x88>
 80016d2:	4629      	mov	r1, r5
 80016d4:	4630      	mov	r0, r6
 80016d6:	f7ff ffbf 	bl	8001658 <sbrk_aligned>
 80016da:	1c43      	adds	r3, r0, #1
 80016dc:	4604      	mov	r4, r0
 80016de:	d158      	bne.n	8001792 <_malloc_r+0xf6>
 80016e0:	f8d8 4000 	ldr.w	r4, [r8]
 80016e4:	4627      	mov	r7, r4
 80016e6:	2f00      	cmp	r7, #0
 80016e8:	d143      	bne.n	8001772 <_malloc_r+0xd6>
 80016ea:	2c00      	cmp	r4, #0
 80016ec:	d04b      	beq.n	8001786 <_malloc_r+0xea>
 80016ee:	6823      	ldr	r3, [r4, #0]
 80016f0:	4639      	mov	r1, r7
 80016f2:	4630      	mov	r0, r6
 80016f4:	eb04 0903 	add.w	r9, r4, r3
 80016f8:	f000 f98c 	bl	8001a14 <_sbrk_r>
 80016fc:	4581      	cmp	r9, r0
 80016fe:	d142      	bne.n	8001786 <_malloc_r+0xea>
 8001700:	6821      	ldr	r1, [r4, #0]
 8001702:	1a6d      	subs	r5, r5, r1
 8001704:	4629      	mov	r1, r5
 8001706:	4630      	mov	r0, r6
 8001708:	f7ff ffa6 	bl	8001658 <sbrk_aligned>
 800170c:	3001      	adds	r0, #1
 800170e:	d03a      	beq.n	8001786 <_malloc_r+0xea>
 8001710:	6823      	ldr	r3, [r4, #0]
 8001712:	442b      	add	r3, r5
 8001714:	6023      	str	r3, [r4, #0]
 8001716:	f8d8 3000 	ldr.w	r3, [r8]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	bb62      	cbnz	r2, 8001778 <_malloc_r+0xdc>
 800171e:	f8c8 7000 	str.w	r7, [r8]
 8001722:	e00f      	b.n	8001744 <_malloc_r+0xa8>
 8001724:	6822      	ldr	r2, [r4, #0]
 8001726:	1b52      	subs	r2, r2, r5
 8001728:	d420      	bmi.n	800176c <_malloc_r+0xd0>
 800172a:	2a0b      	cmp	r2, #11
 800172c:	d917      	bls.n	800175e <_malloc_r+0xc2>
 800172e:	1961      	adds	r1, r4, r5
 8001730:	42a3      	cmp	r3, r4
 8001732:	6025      	str	r5, [r4, #0]
 8001734:	bf18      	it	ne
 8001736:	6059      	strne	r1, [r3, #4]
 8001738:	6863      	ldr	r3, [r4, #4]
 800173a:	bf08      	it	eq
 800173c:	f8c8 1000 	streq.w	r1, [r8]
 8001740:	5162      	str	r2, [r4, r5]
 8001742:	604b      	str	r3, [r1, #4]
 8001744:	4630      	mov	r0, r6
 8001746:	f000 f82f 	bl	80017a8 <__malloc_unlock>
 800174a:	f104 000b 	add.w	r0, r4, #11
 800174e:	1d23      	adds	r3, r4, #4
 8001750:	f020 0007 	bic.w	r0, r0, #7
 8001754:	1ac2      	subs	r2, r0, r3
 8001756:	bf1c      	itt	ne
 8001758:	1a1b      	subne	r3, r3, r0
 800175a:	50a3      	strne	r3, [r4, r2]
 800175c:	e7af      	b.n	80016be <_malloc_r+0x22>
 800175e:	6862      	ldr	r2, [r4, #4]
 8001760:	42a3      	cmp	r3, r4
 8001762:	bf0c      	ite	eq
 8001764:	f8c8 2000 	streq.w	r2, [r8]
 8001768:	605a      	strne	r2, [r3, #4]
 800176a:	e7eb      	b.n	8001744 <_malloc_r+0xa8>
 800176c:	4623      	mov	r3, r4
 800176e:	6864      	ldr	r4, [r4, #4]
 8001770:	e7ae      	b.n	80016d0 <_malloc_r+0x34>
 8001772:	463c      	mov	r4, r7
 8001774:	687f      	ldr	r7, [r7, #4]
 8001776:	e7b6      	b.n	80016e6 <_malloc_r+0x4a>
 8001778:	461a      	mov	r2, r3
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	42a3      	cmp	r3, r4
 800177e:	d1fb      	bne.n	8001778 <_malloc_r+0xdc>
 8001780:	2300      	movs	r3, #0
 8001782:	6053      	str	r3, [r2, #4]
 8001784:	e7de      	b.n	8001744 <_malloc_r+0xa8>
 8001786:	230c      	movs	r3, #12
 8001788:	6033      	str	r3, [r6, #0]
 800178a:	4630      	mov	r0, r6
 800178c:	f000 f80c 	bl	80017a8 <__malloc_unlock>
 8001790:	e794      	b.n	80016bc <_malloc_r+0x20>
 8001792:	6005      	str	r5, [r0, #0]
 8001794:	e7d6      	b.n	8001744 <_malloc_r+0xa8>
 8001796:	bf00      	nop
 8001798:	2000021c 	.word	0x2000021c

0800179c <__malloc_lock>:
 800179c:	4801      	ldr	r0, [pc, #4]	@ (80017a4 <__malloc_lock+0x8>)
 800179e:	f7ff bf0e 	b.w	80015be <__retarget_lock_acquire_recursive>
 80017a2:	bf00      	nop
 80017a4:	20000214 	.word	0x20000214

080017a8 <__malloc_unlock>:
 80017a8:	4801      	ldr	r0, [pc, #4]	@ (80017b0 <__malloc_unlock+0x8>)
 80017aa:	f7ff bf09 	b.w	80015c0 <__retarget_lock_release_recursive>
 80017ae:	bf00      	nop
 80017b0:	20000214 	.word	0x20000214

080017b4 <__sflush_r>:
 80017b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80017b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017bc:	0716      	lsls	r6, r2, #28
 80017be:	4605      	mov	r5, r0
 80017c0:	460c      	mov	r4, r1
 80017c2:	d454      	bmi.n	800186e <__sflush_r+0xba>
 80017c4:	684b      	ldr	r3, [r1, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	dc02      	bgt.n	80017d0 <__sflush_r+0x1c>
 80017ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	dd48      	ble.n	8001862 <__sflush_r+0xae>
 80017d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80017d2:	2e00      	cmp	r6, #0
 80017d4:	d045      	beq.n	8001862 <__sflush_r+0xae>
 80017d6:	2300      	movs	r3, #0
 80017d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80017dc:	682f      	ldr	r7, [r5, #0]
 80017de:	6a21      	ldr	r1, [r4, #32]
 80017e0:	602b      	str	r3, [r5, #0]
 80017e2:	d030      	beq.n	8001846 <__sflush_r+0x92>
 80017e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80017e6:	89a3      	ldrh	r3, [r4, #12]
 80017e8:	0759      	lsls	r1, r3, #29
 80017ea:	d505      	bpl.n	80017f8 <__sflush_r+0x44>
 80017ec:	6863      	ldr	r3, [r4, #4]
 80017ee:	1ad2      	subs	r2, r2, r3
 80017f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80017f2:	b10b      	cbz	r3, 80017f8 <__sflush_r+0x44>
 80017f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80017f6:	1ad2      	subs	r2, r2, r3
 80017f8:	2300      	movs	r3, #0
 80017fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80017fc:	6a21      	ldr	r1, [r4, #32]
 80017fe:	4628      	mov	r0, r5
 8001800:	47b0      	blx	r6
 8001802:	1c43      	adds	r3, r0, #1
 8001804:	89a3      	ldrh	r3, [r4, #12]
 8001806:	d106      	bne.n	8001816 <__sflush_r+0x62>
 8001808:	6829      	ldr	r1, [r5, #0]
 800180a:	291d      	cmp	r1, #29
 800180c:	d82b      	bhi.n	8001866 <__sflush_r+0xb2>
 800180e:	4a2a      	ldr	r2, [pc, #168]	@ (80018b8 <__sflush_r+0x104>)
 8001810:	40ca      	lsrs	r2, r1
 8001812:	07d6      	lsls	r6, r2, #31
 8001814:	d527      	bpl.n	8001866 <__sflush_r+0xb2>
 8001816:	2200      	movs	r2, #0
 8001818:	6062      	str	r2, [r4, #4]
 800181a:	04d9      	lsls	r1, r3, #19
 800181c:	6922      	ldr	r2, [r4, #16]
 800181e:	6022      	str	r2, [r4, #0]
 8001820:	d504      	bpl.n	800182c <__sflush_r+0x78>
 8001822:	1c42      	adds	r2, r0, #1
 8001824:	d101      	bne.n	800182a <__sflush_r+0x76>
 8001826:	682b      	ldr	r3, [r5, #0]
 8001828:	b903      	cbnz	r3, 800182c <__sflush_r+0x78>
 800182a:	6560      	str	r0, [r4, #84]	@ 0x54
 800182c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800182e:	602f      	str	r7, [r5, #0]
 8001830:	b1b9      	cbz	r1, 8001862 <__sflush_r+0xae>
 8001832:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001836:	4299      	cmp	r1, r3
 8001838:	d002      	beq.n	8001840 <__sflush_r+0x8c>
 800183a:	4628      	mov	r0, r5
 800183c:	f7ff fec2 	bl	80015c4 <_free_r>
 8001840:	2300      	movs	r3, #0
 8001842:	6363      	str	r3, [r4, #52]	@ 0x34
 8001844:	e00d      	b.n	8001862 <__sflush_r+0xae>
 8001846:	2301      	movs	r3, #1
 8001848:	4628      	mov	r0, r5
 800184a:	47b0      	blx	r6
 800184c:	4602      	mov	r2, r0
 800184e:	1c50      	adds	r0, r2, #1
 8001850:	d1c9      	bne.n	80017e6 <__sflush_r+0x32>
 8001852:	682b      	ldr	r3, [r5, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0c6      	beq.n	80017e6 <__sflush_r+0x32>
 8001858:	2b1d      	cmp	r3, #29
 800185a:	d001      	beq.n	8001860 <__sflush_r+0xac>
 800185c:	2b16      	cmp	r3, #22
 800185e:	d11e      	bne.n	800189e <__sflush_r+0xea>
 8001860:	602f      	str	r7, [r5, #0]
 8001862:	2000      	movs	r0, #0
 8001864:	e022      	b.n	80018ac <__sflush_r+0xf8>
 8001866:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800186a:	b21b      	sxth	r3, r3
 800186c:	e01b      	b.n	80018a6 <__sflush_r+0xf2>
 800186e:	690f      	ldr	r7, [r1, #16]
 8001870:	2f00      	cmp	r7, #0
 8001872:	d0f6      	beq.n	8001862 <__sflush_r+0xae>
 8001874:	0793      	lsls	r3, r2, #30
 8001876:	680e      	ldr	r6, [r1, #0]
 8001878:	bf08      	it	eq
 800187a:	694b      	ldreq	r3, [r1, #20]
 800187c:	600f      	str	r7, [r1, #0]
 800187e:	bf18      	it	ne
 8001880:	2300      	movne	r3, #0
 8001882:	eba6 0807 	sub.w	r8, r6, r7
 8001886:	608b      	str	r3, [r1, #8]
 8001888:	f1b8 0f00 	cmp.w	r8, #0
 800188c:	dde9      	ble.n	8001862 <__sflush_r+0xae>
 800188e:	6a21      	ldr	r1, [r4, #32]
 8001890:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001892:	4643      	mov	r3, r8
 8001894:	463a      	mov	r2, r7
 8001896:	4628      	mov	r0, r5
 8001898:	47b0      	blx	r6
 800189a:	2800      	cmp	r0, #0
 800189c:	dc08      	bgt.n	80018b0 <__sflush_r+0xfc>
 800189e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018a6:	81a3      	strh	r3, [r4, #12]
 80018a8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018b0:	4407      	add	r7, r0
 80018b2:	eba8 0800 	sub.w	r8, r8, r0
 80018b6:	e7e7      	b.n	8001888 <__sflush_r+0xd4>
 80018b8:	20400001 	.word	0x20400001

080018bc <_fflush_r>:
 80018bc:	b538      	push	{r3, r4, r5, lr}
 80018be:	690b      	ldr	r3, [r1, #16]
 80018c0:	4605      	mov	r5, r0
 80018c2:	460c      	mov	r4, r1
 80018c4:	b913      	cbnz	r3, 80018cc <_fflush_r+0x10>
 80018c6:	2500      	movs	r5, #0
 80018c8:	4628      	mov	r0, r5
 80018ca:	bd38      	pop	{r3, r4, r5, pc}
 80018cc:	b118      	cbz	r0, 80018d6 <_fflush_r+0x1a>
 80018ce:	6a03      	ldr	r3, [r0, #32]
 80018d0:	b90b      	cbnz	r3, 80018d6 <_fflush_r+0x1a>
 80018d2:	f7ff fc8f 	bl	80011f4 <__sinit>
 80018d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f3      	beq.n	80018c6 <_fflush_r+0xa>
 80018de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80018e0:	07d0      	lsls	r0, r2, #31
 80018e2:	d404      	bmi.n	80018ee <_fflush_r+0x32>
 80018e4:	0599      	lsls	r1, r3, #22
 80018e6:	d402      	bmi.n	80018ee <_fflush_r+0x32>
 80018e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80018ea:	f7ff fe68 	bl	80015be <__retarget_lock_acquire_recursive>
 80018ee:	4628      	mov	r0, r5
 80018f0:	4621      	mov	r1, r4
 80018f2:	f7ff ff5f 	bl	80017b4 <__sflush_r>
 80018f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80018f8:	07da      	lsls	r2, r3, #31
 80018fa:	4605      	mov	r5, r0
 80018fc:	d4e4      	bmi.n	80018c8 <_fflush_r+0xc>
 80018fe:	89a3      	ldrh	r3, [r4, #12]
 8001900:	059b      	lsls	r3, r3, #22
 8001902:	d4e1      	bmi.n	80018c8 <_fflush_r+0xc>
 8001904:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001906:	f7ff fe5b 	bl	80015c0 <__retarget_lock_release_recursive>
 800190a:	e7dd      	b.n	80018c8 <_fflush_r+0xc>

0800190c <__swhatbuf_r>:
 800190c:	b570      	push	{r4, r5, r6, lr}
 800190e:	460c      	mov	r4, r1
 8001910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001914:	2900      	cmp	r1, #0
 8001916:	b096      	sub	sp, #88	@ 0x58
 8001918:	4615      	mov	r5, r2
 800191a:	461e      	mov	r6, r3
 800191c:	da0d      	bge.n	800193a <__swhatbuf_r+0x2e>
 800191e:	89a3      	ldrh	r3, [r4, #12]
 8001920:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001924:	f04f 0100 	mov.w	r1, #0
 8001928:	bf14      	ite	ne
 800192a:	2340      	movne	r3, #64	@ 0x40
 800192c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001930:	2000      	movs	r0, #0
 8001932:	6031      	str	r1, [r6, #0]
 8001934:	602b      	str	r3, [r5, #0]
 8001936:	b016      	add	sp, #88	@ 0x58
 8001938:	bd70      	pop	{r4, r5, r6, pc}
 800193a:	466a      	mov	r2, sp
 800193c:	f000 f848 	bl	80019d0 <_fstat_r>
 8001940:	2800      	cmp	r0, #0
 8001942:	dbec      	blt.n	800191e <__swhatbuf_r+0x12>
 8001944:	9901      	ldr	r1, [sp, #4]
 8001946:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800194a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800194e:	4259      	negs	r1, r3
 8001950:	4159      	adcs	r1, r3
 8001952:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001956:	e7eb      	b.n	8001930 <__swhatbuf_r+0x24>

08001958 <__smakebuf_r>:
 8001958:	898b      	ldrh	r3, [r1, #12]
 800195a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800195c:	079d      	lsls	r5, r3, #30
 800195e:	4606      	mov	r6, r0
 8001960:	460c      	mov	r4, r1
 8001962:	d507      	bpl.n	8001974 <__smakebuf_r+0x1c>
 8001964:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001968:	6023      	str	r3, [r4, #0]
 800196a:	6123      	str	r3, [r4, #16]
 800196c:	2301      	movs	r3, #1
 800196e:	6163      	str	r3, [r4, #20]
 8001970:	b003      	add	sp, #12
 8001972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001974:	ab01      	add	r3, sp, #4
 8001976:	466a      	mov	r2, sp
 8001978:	f7ff ffc8 	bl	800190c <__swhatbuf_r>
 800197c:	9f00      	ldr	r7, [sp, #0]
 800197e:	4605      	mov	r5, r0
 8001980:	4639      	mov	r1, r7
 8001982:	4630      	mov	r0, r6
 8001984:	f7ff fe8a 	bl	800169c <_malloc_r>
 8001988:	b948      	cbnz	r0, 800199e <__smakebuf_r+0x46>
 800198a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800198e:	059a      	lsls	r2, r3, #22
 8001990:	d4ee      	bmi.n	8001970 <__smakebuf_r+0x18>
 8001992:	f023 0303 	bic.w	r3, r3, #3
 8001996:	f043 0302 	orr.w	r3, r3, #2
 800199a:	81a3      	strh	r3, [r4, #12]
 800199c:	e7e2      	b.n	8001964 <__smakebuf_r+0xc>
 800199e:	89a3      	ldrh	r3, [r4, #12]
 80019a0:	6020      	str	r0, [r4, #0]
 80019a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019a6:	81a3      	strh	r3, [r4, #12]
 80019a8:	9b01      	ldr	r3, [sp, #4]
 80019aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80019ae:	b15b      	cbz	r3, 80019c8 <__smakebuf_r+0x70>
 80019b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80019b4:	4630      	mov	r0, r6
 80019b6:	f000 f81d 	bl	80019f4 <_isatty_r>
 80019ba:	b128      	cbz	r0, 80019c8 <__smakebuf_r+0x70>
 80019bc:	89a3      	ldrh	r3, [r4, #12]
 80019be:	f023 0303 	bic.w	r3, r3, #3
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	81a3      	strh	r3, [r4, #12]
 80019c8:	89a3      	ldrh	r3, [r4, #12]
 80019ca:	431d      	orrs	r5, r3
 80019cc:	81a5      	strh	r5, [r4, #12]
 80019ce:	e7cf      	b.n	8001970 <__smakebuf_r+0x18>

080019d0 <_fstat_r>:
 80019d0:	b538      	push	{r3, r4, r5, lr}
 80019d2:	4d07      	ldr	r5, [pc, #28]	@ (80019f0 <_fstat_r+0x20>)
 80019d4:	2300      	movs	r3, #0
 80019d6:	4604      	mov	r4, r0
 80019d8:	4608      	mov	r0, r1
 80019da:	4611      	mov	r1, r2
 80019dc:	602b      	str	r3, [r5, #0]
 80019de:	f7fe fd44 	bl	800046a <_fstat>
 80019e2:	1c43      	adds	r3, r0, #1
 80019e4:	d102      	bne.n	80019ec <_fstat_r+0x1c>
 80019e6:	682b      	ldr	r3, [r5, #0]
 80019e8:	b103      	cbz	r3, 80019ec <_fstat_r+0x1c>
 80019ea:	6023      	str	r3, [r4, #0]
 80019ec:	bd38      	pop	{r3, r4, r5, pc}
 80019ee:	bf00      	nop
 80019f0:	20000210 	.word	0x20000210

080019f4 <_isatty_r>:
 80019f4:	b538      	push	{r3, r4, r5, lr}
 80019f6:	4d06      	ldr	r5, [pc, #24]	@ (8001a10 <_isatty_r+0x1c>)
 80019f8:	2300      	movs	r3, #0
 80019fa:	4604      	mov	r4, r0
 80019fc:	4608      	mov	r0, r1
 80019fe:	602b      	str	r3, [r5, #0]
 8001a00:	f7fe fd43 	bl	800048a <_isatty>
 8001a04:	1c43      	adds	r3, r0, #1
 8001a06:	d102      	bne.n	8001a0e <_isatty_r+0x1a>
 8001a08:	682b      	ldr	r3, [r5, #0]
 8001a0a:	b103      	cbz	r3, 8001a0e <_isatty_r+0x1a>
 8001a0c:	6023      	str	r3, [r4, #0]
 8001a0e:	bd38      	pop	{r3, r4, r5, pc}
 8001a10:	20000210 	.word	0x20000210

08001a14 <_sbrk_r>:
 8001a14:	b538      	push	{r3, r4, r5, lr}
 8001a16:	4d06      	ldr	r5, [pc, #24]	@ (8001a30 <_sbrk_r+0x1c>)
 8001a18:	2300      	movs	r3, #0
 8001a1a:	4604      	mov	r4, r0
 8001a1c:	4608      	mov	r0, r1
 8001a1e:	602b      	str	r3, [r5, #0]
 8001a20:	f7fe fd4c 	bl	80004bc <_sbrk>
 8001a24:	1c43      	adds	r3, r0, #1
 8001a26:	d102      	bne.n	8001a2e <_sbrk_r+0x1a>
 8001a28:	682b      	ldr	r3, [r5, #0]
 8001a2a:	b103      	cbz	r3, 8001a2e <_sbrk_r+0x1a>
 8001a2c:	6023      	str	r3, [r4, #0]
 8001a2e:	bd38      	pop	{r3, r4, r5, pc}
 8001a30:	20000210 	.word	0x20000210

08001a34 <_init>:
 8001a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a36:	bf00      	nop
 8001a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a3a:	bc08      	pop	{r3}
 8001a3c:	469e      	mov	lr, r3
 8001a3e:	4770      	bx	lr

08001a40 <_fini>:
 8001a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a42:	bf00      	nop
 8001a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a46:	bc08      	pop	{r3}
 8001a48:	469e      	mov	lr, r3
 8001a4a:	4770      	bx	lr
