
P_21_Rtc_Alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028b0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08002a50  08002a50  00003a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bb0  08002bb0  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002bb0  08002bb0  00003bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002bb8  08002bb8  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bb8  08002bb8  00003bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002bbc  08002bbc  00003bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002bc0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000068  08002c28  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  08002c28  000041f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005fa1  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001747  00000000  00000000  0000a039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000690  00000000  00000000  0000b780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004c1  00000000  00000000  0000be10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016dde  00000000  00000000  0000c2d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008468  00000000  00000000  000230af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008af52  00000000  00000000  0002b517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6469  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002018  00000000  00000000  000b64ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000b84c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002a38 	.word	0x08002a38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08002a38 	.word	0x08002a38

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <SysTick_Handler>:
#include "stm32f4xx_hal.h"

extern
void SysTick_Handler(void)
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
{
 8000284:	f000 fabe 	bl	8000804 <HAL_IncTick>
	HAL_IncTick();
 8000288:	f000 fbed 	bl	8000a66 <HAL_SYSTICK_IRQHandler>
	HAL_SYSTICK_IRQHandler();
 800028c:	bf00      	nop
 800028e:	bd80      	pop	{r7, pc}

08000290 <EXTI2_IRQHandler>:
}

void EXTI2_IRQHandler(void)
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
{
 8000294:	2004      	movs	r0, #4
 8000296:	f000 fd8f 	bl	8000db8 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800029a:	bf00      	nop
 800029c:	bd80      	pop	{r7, pc}
	...

080002a0 <main>:
	printf("Hello...\n");
	// To check how the processor got into reset mode
		if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
		{
			// You have to clear flags manually
			__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
			__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80002a4:	f000 fa54 	bl	8000750 <HAL_Init>
			printf("Woke up from StandBy Mode\n");
 80002a8:	f000 f844 	bl	8000334 <RTC_Init>

 80002ac:	f000 f892 	bl	80003d4 <button_init>

 80002b0:	f000 f860 	bl	8000374 <RTC_CalenderConfig>
		}
 80002b4:	4818      	ldr	r0, [pc, #96]	@ (8000318 <main+0x78>)
 80002b6:	f001 fd5d 	bl	8001d74 <puts>
		HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);

 80002ba:	4b18      	ldr	r3, [pc, #96]	@ (800031c <main+0x7c>)
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	f003 0302 	and.w	r3, r3, #2
 80002c2:	2b02      	cmp	r3, #2
 80002c4:	d10e      	bne.n	80002e4 <main+0x44>

		printf("Press button 1 to enter the StandBy Mode\n");
		printf("Press button 2 to print the RTC\n");
 80002c6:	4b15      	ldr	r3, [pc, #84]	@ (800031c <main+0x7c>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	4a14      	ldr	r2, [pc, #80]	@ (800031c <main+0x7c>)
 80002cc:	f043 0308 	orr.w	r3, r3, #8
 80002d0:	6013      	str	r3, [r2, #0]
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) != GPIO_PIN_RESET);
 80002d2:	4b12      	ldr	r3, [pc, #72]	@ (800031c <main+0x7c>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4a11      	ldr	r2, [pc, #68]	@ (800031c <main+0x7c>)
 80002d8:	f043 0304 	orr.w	r3, r3, #4
 80002dc:	6013      	str	r3, [r2, #0]
		//HAL_Delay(100);
 80002de:	4810      	ldr	r0, [pc, #64]	@ (8000320 <main+0x80>)
 80002e0:	f001 fd48 	bl	8001d74 <puts>
		printf("Entering StandBy Mode...\n");
		HAL_PWR_EnterSTANDBYMode();
	while(1);
}
 80002e4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80002e8:	f000 fd7e 	bl	8000de8 <HAL_PWR_EnableWakeUpPin>

void RTC_Init(void)
{
 80002ec:	480d      	ldr	r0, [pc, #52]	@ (8000324 <main+0x84>)
 80002ee:	f001 fd41 	bl	8001d74 <puts>
	rtc.Instance = RTC;
 80002f2:	480d      	ldr	r0, [pc, #52]	@ (8000328 <main+0x88>)
 80002f4:	f001 fd3e 	bl	8001d74 <puts>
	rtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80002f8:	bf00      	nop
 80002fa:	2102      	movs	r1, #2
 80002fc:	480b      	ldr	r0, [pc, #44]	@ (800032c <main+0x8c>)
 80002fe:	f000 fd43 	bl	8000d88 <HAL_GPIO_ReadPin>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d1f8      	bne.n	80002fa <main+0x5a>
	rtc.Init.AsynchPrediv = 0x7F;
	rtc.Init.SynchPrediv = 0xFF; // for lse we are using this configuration
 8000308:	4809      	ldr	r0, [pc, #36]	@ (8000330 <main+0x90>)
 800030a:	f001 fd33 	bl	8001d74 <puts>
	rtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800030e:	f000 fd7d 	bl	8000e0c <HAL_PWR_EnterSTANDBYMode>
	if(HAL_RTC_Init(&rtc) != HAL_OK) Error_Handler();
 8000312:	bf00      	nop
 8000314:	e7fd      	b.n	8000312 <main+0x72>
 8000316:	bf00      	nop
 8000318:	08002a50 	.word	0x08002a50
 800031c:	40007000 	.word	0x40007000
 8000320:	08002a5c 	.word	0x08002a5c
 8000324:	08002a78 	.word	0x08002a78
 8000328:	08002aa4 	.word	0x08002aa4
 800032c:	40020000 	.word	0x40020000
 8000330:	08002ac4 	.word	0x08002ac4

08000334 <RTC_Init>:
}

void RTC_CalenderConfig(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	// we are using binary format, and in binary format you can pass the values directly in decimal as they are stored in binary
 8000338:	4b0c      	ldr	r3, [pc, #48]	@ (800036c <RTC_Init+0x38>)
 800033a:	4a0d      	ldr	r2, [pc, #52]	@ (8000370 <RTC_Init+0x3c>)
 800033c:	601a      	str	r2, [r3, #0]

 800033e:	4b0b      	ldr	r3, [pc, #44]	@ (800036c <RTC_Init+0x38>)
 8000340:	2240      	movs	r2, #64	@ 0x40
 8000342:	605a      	str	r2, [r3, #4]
	RTC_TimeTypeDef time;
 8000344:	4b09      	ldr	r3, [pc, #36]	@ (800036c <RTC_Init+0x38>)
 8000346:	227f      	movs	r2, #127	@ 0x7f
 8000348:	609a      	str	r2, [r3, #8]
	RTC_DateTypeDef date;
 800034a:	4b08      	ldr	r3, [pc, #32]	@ (800036c <RTC_Init+0x38>)
 800034c:	22ff      	movs	r2, #255	@ 0xff
 800034e:	60da      	str	r2, [r3, #12]

 8000350:	4b06      	ldr	r3, [pc, #24]	@ (800036c <RTC_Init+0x38>)
 8000352:	2200      	movs	r2, #0
 8000354:	611a      	str	r2, [r3, #16]
	time.Hours = 6;
 8000356:	4805      	ldr	r0, [pc, #20]	@ (800036c <RTC_Init+0x38>)
 8000358:	f001 f8d8 	bl	800150c <HAL_RTC_Init>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <RTC_Init+0x32>
 8000362:	f000 f8c7 	bl	80004f4 <Error_Handler>
	time.Minutes = 15;
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	20000084 	.word	0x20000084
 8000370:	40002800 	.word	0x40002800

08000374 <RTC_CalenderConfig>:
	time.Seconds = 30;
	time.TimeFormat = RTC_HOURFORMAT12_PM;
	if(HAL_RTC_SetTime(&rtc, &time, RTC_FORMAT_BIN) != HAL_OK) Error_Handler();
 8000374:	b580      	push	{r7, lr}
 8000376:	b086      	sub	sp, #24
 8000378:	af00      	add	r7, sp, #0

	date.Date = 22;
	date.Month = RTC_MONTH_AUGUST;
	date.Year = 25;
	date.WeekDay = RTC_WEEKDAY_FRIDAY;

 800037a:	2306      	movs	r3, #6
 800037c:	713b      	strb	r3, [r7, #4]
	if(HAL_RTC_SetDate(&rtc, &date, RTC_FORMAT_BIN) != HAL_OK) Error_Handler();
 800037e:	230f      	movs	r3, #15
 8000380:	717b      	strb	r3, [r7, #5]
}
 8000382:	231e      	movs	r3, #30
 8000384:	71bb      	strb	r3, [r7, #6]

 8000386:	2301      	movs	r3, #1
 8000388:	71fb      	strb	r3, [r7, #7]
void button_init(void)
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2200      	movs	r2, #0
 800038e:	4619      	mov	r1, r3
 8000390:	480f      	ldr	r0, [pc, #60]	@ (80003d0 <RTC_CalenderConfig+0x5c>)
 8000392:	f001 f93c 	bl	800160e <HAL_RTC_SetTime>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <RTC_CalenderConfig+0x2c>
 800039c:	f000 f8aa 	bl	80004f4 <Error_Handler>
{
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80003a0:	2316      	movs	r3, #22
 80003a2:	70bb      	strb	r3, [r7, #2]

 80003a4:	2308      	movs	r3, #8
 80003a6:	707b      	strb	r3, [r7, #1]
	GPIO_InitTypeDef button;
 80003a8:	2319      	movs	r3, #25
 80003aa:	70fb      	strb	r3, [r7, #3]
	// This button is to print the data on screen
 80003ac:	2305      	movs	r3, #5
 80003ae:	703b      	strb	r3, [r7, #0]
	button.Pin = GPIO_PIN_2;
	button.Mode = GPIO_MODE_IT_RISING;
 80003b0:	463b      	mov	r3, r7
 80003b2:	2200      	movs	r2, #0
 80003b4:	4619      	mov	r1, r3
 80003b6:	4806      	ldr	r0, [pc, #24]	@ (80003d0 <RTC_CalenderConfig+0x5c>)
 80003b8:	f001 fa21 	bl	80017fe <HAL_RTC_SetDate>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <RTC_CalenderConfig+0x52>
 80003c2:	f000 f897 	bl	80004f4 <Error_Handler>
	button.Pull = GPIO_PULLDOWN;
 80003c6:	bf00      	nop
 80003c8:	3718      	adds	r7, #24
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	20000084 	.word	0x20000084

080003d4 <button_init>:
	button.Speed = GPIO_SPEED_FREQ_MEDIUM;

	HAL_NVIC_SetPriority(EXTI2_IRQn, 15, 0);
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b086      	sub	sp, #24
 80003d8:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80003da:	2300      	movs	r3, #0
 80003dc:	603b      	str	r3, [r7, #0]
 80003de:	4b18      	ldr	r3, [pc, #96]	@ (8000440 <button_init+0x6c>)
 80003e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e2:	4a17      	ldr	r2, [pc, #92]	@ (8000440 <button_init+0x6c>)
 80003e4:	f043 0301 	orr.w	r3, r3, #1
 80003e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80003ea:	4b15      	ldr	r3, [pc, #84]	@ (8000440 <button_init+0x6c>)
 80003ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ee:	f003 0301 	and.w	r3, r3, #1
 80003f2:	603b      	str	r3, [r7, #0]
 80003f4:	683b      	ldr	r3, [r7, #0]

	HAL_GPIO_Init(GPIOA, &button);

	// This button is user button to get into  standby mode
 80003f6:	2304      	movs	r3, #4
 80003f8:	607b      	str	r3, [r7, #4]
	button.Pin = GPIO_PIN_1;
 80003fa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80003fe:	60bb      	str	r3, [r7, #8]
	button.Mode = GPIO_MODE_INPUT;
 8000400:	2302      	movs	r3, #2
 8000402:	60fb      	str	r3, [r7, #12]
	button.Pull = GPIO_PULLUP;
 8000404:	2301      	movs	r3, #1
 8000406:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &button);
}
 8000408:	2200      	movs	r2, #0
 800040a:	210f      	movs	r1, #15
 800040c:	2008      	movs	r0, #8
 800040e:	f000 faf4 	bl	80009fa <HAL_NVIC_SetPriority>

 8000412:	2008      	movs	r0, #8
 8000414:	f000 fb0d 	bl	8000a32 <HAL_NVIC_EnableIRQ>
char* GetDayOfWeek(uint8_t day)
{
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	4619      	mov	r1, r3
 800041c:	4809      	ldr	r0, [pc, #36]	@ (8000444 <button_init+0x70>)
 800041e:	f000 fb2f 	bl	8000a80 <HAL_GPIO_Init>
	char* weekday[] = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};
	return weekday[day-1];
}
 8000422:	2302      	movs	r3, #2
 8000424:	607b      	str	r3, [r7, #4]

 8000426:	2300      	movs	r3, #0
 8000428:	60bb      	str	r3, [r7, #8]
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 800042a:	2301      	movs	r3, #1
 800042c:	60fb      	str	r3, [r7, #12]
{
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	4619      	mov	r1, r3
 8000432:	4804      	ldr	r0, [pc, #16]	@ (8000444 <button_init+0x70>)
 8000434:	f000 fb24 	bl	8000a80 <HAL_GPIO_Init>
	RTC_TimeTypeDef time;
 8000438:	bf00      	nop
 800043a:	3718      	adds	r7, #24
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40023800 	.word	0x40023800
 8000444:	40020000 	.word	0x40020000

08000448 <GetDayOfWeek>:
	RTC_DateTypeDef date;

	HAL_RTC_GetTime(&rtc, &time, RTC_FORMAT_BIN);
 8000448:	b4b0      	push	{r4, r5, r7}
 800044a:	b08b      	sub	sp, #44	@ 0x2c
 800044c:	af00      	add	r7, sp, #0
 800044e:	4603      	mov	r3, r0
 8000450:	71fb      	strb	r3, [r7, #7]
	HAL_RTC_GetDate(&rtc, &date, RTC_FORMAT_BIN);
 8000452:	4b0b      	ldr	r3, [pc, #44]	@ (8000480 <GetDayOfWeek+0x38>)
 8000454:	f107 040c 	add.w	r4, r7, #12
 8000458:	461d      	mov	r5, r3
 800045a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800045c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800045e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000462:	e884 0007 	stmia.w	r4, {r0, r1, r2}

 8000466:	79fb      	ldrb	r3, [r7, #7]
 8000468:	3b01      	subs	r3, #1
 800046a:	009b      	lsls	r3, r3, #2
 800046c:	3328      	adds	r3, #40	@ 0x28
 800046e:	443b      	add	r3, r7
 8000470:	f853 3c1c 	ldr.w	r3, [r3, #-28]

 8000474:	4618      	mov	r0, r3
 8000476:	372c      	adds	r7, #44	@ 0x2c
 8000478:	46bd      	mov	sp, r7
 800047a:	bcb0      	pop	{r4, r5, r7}
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	08002b24 	.word	0x08002b24

08000484 <HAL_GPIO_EXTI_Callback>:
	printf("Current Time : %d:%d:%d \n", time.Hours, time.Minutes, time.Seconds);
	printf("Current Date: %d-%d-%d <%s> \n", date.Date, date.Month, date.Year, GetDayOfWeek(date.WeekDay) );

 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	b08b      	sub	sp, #44	@ 0x2c
 8000488:	af02      	add	r7, sp, #8
 800048a:	4603      	mov	r3, r0
 800048c:	80fb      	strh	r3, [r7, #6]


}

 800048e:	f107 030c 	add.w	r3, r7, #12
 8000492:	2200      	movs	r2, #0
 8000494:	4619      	mov	r1, r3
 8000496:	4814      	ldr	r0, [pc, #80]	@ (80004e8 <HAL_GPIO_EXTI_Callback+0x64>)
 8000498:	f001 f953 	bl	8001742 <HAL_RTC_GetTime>
void Alarm_init(void)
 800049c:	f107 0308 	add.w	r3, r7, #8
 80004a0:	2200      	movs	r2, #0
 80004a2:	4619      	mov	r1, r3
 80004a4:	4810      	ldr	r0, [pc, #64]	@ (80004e8 <HAL_GPIO_EXTI_Callback+0x64>)
 80004a6:	f001 fa2e 	bl	8001906 <HAL_RTC_GetDate>
{


 80004aa:	7b3b      	ldrb	r3, [r7, #12]
 80004ac:	4619      	mov	r1, r3
 80004ae:	7b7b      	ldrb	r3, [r7, #13]
 80004b0:	461a      	mov	r2, r3
 80004b2:	7bbb      	ldrb	r3, [r7, #14]
 80004b4:	480d      	ldr	r0, [pc, #52]	@ (80004ec <HAL_GPIO_EXTI_Callback+0x68>)
 80004b6:	f001 fbf5 	bl	8001ca4 <iprintf>
	alarm.Alarm = RTC_ALARM_A;
 80004ba:	7abb      	ldrb	r3, [r7, #10]
 80004bc:	461c      	mov	r4, r3
 80004be:	7a7b      	ldrb	r3, [r7, #9]
 80004c0:	461d      	mov	r5, r3
 80004c2:	7afb      	ldrb	r3, [r7, #11]
 80004c4:	461e      	mov	r6, r3
 80004c6:	7a3b      	ldrb	r3, [r7, #8]
 80004c8:	4618      	mov	r0, r3
 80004ca:	f7ff ffbd 	bl	8000448 <GetDayOfWeek>
 80004ce:	4603      	mov	r3, r0
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	4633      	mov	r3, r6
 80004d4:	462a      	mov	r2, r5
 80004d6:	4621      	mov	r1, r4
 80004d8:	4805      	ldr	r0, [pc, #20]	@ (80004f0 <HAL_GPIO_EXTI_Callback+0x6c>)
 80004da:	f001 fbe3 	bl	8001ca4 <iprintf>
	alarm.AlarmTime.Minutes = 45;
	alarm.AlarmTime.Seconds = 9;
	alarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY  | RTC_ALARMMASK_HOURS;
	if(HAL_RTC_SetAlarm(&rtc, &alarm, RTC_FORMAT_BIN) != HAL_OK) Error_Handler();
 80004de:	bf00      	nop
 80004e0:	3724      	adds	r7, #36	@ 0x24
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000084 	.word	0x20000084
 80004ec:	08002b40 	.word	0x08002b40
 80004f0:	08002b5c 	.word	0x08002b5c

080004f4 <Error_Handler>:
}

void Error_Handler(void)
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
{
 80004f8:	bf00      	nop
 80004fa:	e7fd      	b.n	80004f8 <Error_Handler+0x4>

080004fc <HAL_RTC_MspInit>:
#include "stm32f4xx_hal.h"

void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b094      	sub	sp, #80	@ 0x50
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	// 1. Turn on the LSE
  RCC_OscInitTypeDef osc;

  osc.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8000504:	2304      	movs	r3, #4
 8000506:	623b      	str	r3, [r7, #32]
  osc.LSEState = RCC_LSE_ON;
 8000508:	2301      	movs	r3, #1
 800050a:	62bb      	str	r3, [r7, #40]	@ 0x28
  osc.PLL.PLLState = RCC_PLL_NONE;
 800050c:	2300      	movs	r3, #0
 800050e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_RCC_OscConfig(&osc);
 8000510:	f107 0320 	add.w	r3, r7, #32
 8000514:	4618      	mov	r0, r3
 8000516:	f000 fc91 	bl	8000e3c <HAL_RCC_OscConfig>

  //2. Select the LSE as RTC clock source
  RCC_PeriphCLKInitTypeDef rcc_rtc;
  rcc_rtc.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800051a:	2302      	movs	r3, #2
 800051c:	60bb      	str	r3, [r7, #8]
  rcc_rtc.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800051e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000522:	61bb      	str	r3, [r7, #24]
  HAL_RCCEx_PeriphCLKConfig(&rcc_rtc);
 8000524:	f107 0308 	add.w	r3, r7, #8
 8000528:	4618      	mov	r0, r3
 800052a:	f000 feff 	bl	800132c <HAL_RCCEx_PeriphCLKConfig>

  //3. Enable the RTC clock in RCC_BDCR ( it is a backup domain register, it is not changed under reset)
  __HAL_RCC_RTC_ENABLE();
 800052e:	4b03      	ldr	r3, [pc, #12]	@ (800053c <HAL_RTC_MspInit+0x40>)
 8000530:	2201      	movs	r2, #1
 8000532:	601a      	str	r2, [r3, #0]

  //4. Enable the interrup for the alarm
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 15, 0);
 8000534:	bf00      	nop
 8000536:	3750      	adds	r7, #80	@ 0x50
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	42470e3c 	.word	0x42470e3c

08000540 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800054a:	4b0f      	ldr	r3, [pc, #60]	@ (8000588 <ITM_SendChar+0x48>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a0e      	ldr	r2, [pc, #56]	@ (8000588 <ITM_SendChar+0x48>)
 8000550:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000554:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000556:	4b0d      	ldr	r3, [pc, #52]	@ (800058c <ITM_SendChar+0x4c>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a0c      	ldr	r2, [pc, #48]	@ (800058c <ITM_SendChar+0x4c>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000562:	bf00      	nop
 8000564:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	2b00      	cmp	r3, #0
 8000570:	d0f8      	beq.n	8000564 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000572:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	6013      	str	r3, [r2, #0]
}
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	e000edfc 	.word	0xe000edfc
 800058c:	e0000e00 	.word	0xe0000e00

08000590 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]
 80005a0:	e00a      	b.n	80005b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005a2:	f3af 8000 	nop.w
 80005a6:	4601      	mov	r1, r0
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	1c5a      	adds	r2, r3, #1
 80005ac:	60ba      	str	r2, [r7, #8]
 80005ae:	b2ca      	uxtb	r2, r1
 80005b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005b2:	697b      	ldr	r3, [r7, #20]
 80005b4:	3301      	adds	r3, #1
 80005b6:	617b      	str	r3, [r7, #20]
 80005b8:	697a      	ldr	r2, [r7, #20]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	429a      	cmp	r2, r3
 80005be:	dbf0      	blt.n	80005a2 <_read+0x12>
  }

  return len;
 80005c0:	687b      	ldr	r3, [r7, #4]
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3718      	adds	r7, #24
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b086      	sub	sp, #24
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	60f8      	str	r0, [r7, #12]
 80005d2:	60b9      	str	r1, [r7, #8]
 80005d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
 80005da:	e009      	b.n	80005f0 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	1c5a      	adds	r2, r3, #1
 80005e0:	60ba      	str	r2, [r7, #8]
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff ffab 	bl	8000540 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	3301      	adds	r3, #1
 80005ee:	617b      	str	r3, [r7, #20]
 80005f0:	697a      	ldr	r2, [r7, #20]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	dbf1      	blt.n	80005dc <_write+0x12>
  }
  return len;
 80005f8:	687b      	ldr	r3, [r7, #4]
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3718      	adds	r7, #24
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <_close>:

int _close(int file)
{
 8000602:	b480      	push	{r7}
 8000604:	b083      	sub	sp, #12
 8000606:	af00      	add	r7, sp, #0
 8000608:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800060a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800060e:	4618      	mov	r0, r3
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800061a:	b480      	push	{r7}
 800061c:	b083      	sub	sp, #12
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
 8000622:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800062a:	605a      	str	r2, [r3, #4]
  return 0;
 800062c:	2300      	movs	r3, #0
}
 800062e:	4618      	mov	r0, r3
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr

0800063a <_isatty>:

int _isatty(int file)
{
 800063a:	b480      	push	{r7}
 800063c:	b083      	sub	sp, #12
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000642:	2301      	movs	r3, #1
}
 8000644:	4618      	mov	r0, r3
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800065c:	2300      	movs	r3, #0
}
 800065e:	4618      	mov	r0, r3
 8000660:	3714      	adds	r7, #20
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
	...

0800066c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000674:	4a14      	ldr	r2, [pc, #80]	@ (80006c8 <_sbrk+0x5c>)
 8000676:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <_sbrk+0x60>)
 8000678:	1ad3      	subs	r3, r2, r3
 800067a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000680:	4b13      	ldr	r3, [pc, #76]	@ (80006d0 <_sbrk+0x64>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d102      	bne.n	800068e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000688:	4b11      	ldr	r3, [pc, #68]	@ (80006d0 <_sbrk+0x64>)
 800068a:	4a12      	ldr	r2, [pc, #72]	@ (80006d4 <_sbrk+0x68>)
 800068c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800068e:	4b10      	ldr	r3, [pc, #64]	@ (80006d0 <_sbrk+0x64>)
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	693a      	ldr	r2, [r7, #16]
 8000698:	429a      	cmp	r2, r3
 800069a:	d207      	bcs.n	80006ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800069c:	f001 fc98 	bl	8001fd0 <__errno>
 80006a0:	4603      	mov	r3, r0
 80006a2:	220c      	movs	r2, #12
 80006a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006a6:	f04f 33ff 	mov.w	r3, #4294967295
 80006aa:	e009      	b.n	80006c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006ac:	4b08      	ldr	r3, [pc, #32]	@ (80006d0 <_sbrk+0x64>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006b2:	4b07      	ldr	r3, [pc, #28]	@ (80006d0 <_sbrk+0x64>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4413      	add	r3, r2
 80006ba:	4a05      	ldr	r2, [pc, #20]	@ (80006d0 <_sbrk+0x64>)
 80006bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006be:	68fb      	ldr	r3, [r7, #12]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20020000 	.word	0x20020000
 80006cc:	00000400 	.word	0x00000400
 80006d0:	200000a4 	.word	0x200000a4
 80006d4:	200001f8 	.word	0x200001f8

080006d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006dc:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <SystemInit+0x20>)
 80006de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006e2:	4a05      	ldr	r2, [pc, #20]	@ (80006f8 <SystemInit+0x20>)
 80006e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80006fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000734 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000700:	f7ff ffea 	bl	80006d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000704:	480c      	ldr	r0, [pc, #48]	@ (8000738 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000706:	490d      	ldr	r1, [pc, #52]	@ (800073c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000708:	4a0d      	ldr	r2, [pc, #52]	@ (8000740 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800070a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800070c:	e002      	b.n	8000714 <LoopCopyDataInit>

0800070e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800070e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000712:	3304      	adds	r3, #4

08000714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000718:	d3f9      	bcc.n	800070e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071a:	4a0a      	ldr	r2, [pc, #40]	@ (8000744 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800071c:	4c0a      	ldr	r4, [pc, #40]	@ (8000748 <LoopFillZerobss+0x22>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000720:	e001      	b.n	8000726 <LoopFillZerobss>

08000722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000724:	3204      	adds	r2, #4

08000726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000728:	d3fb      	bcc.n	8000722 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800072a:	f001 fc57 	bl	8001fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800072e:	f7ff fdb7 	bl	80002a0 <main>
  bx  lr    
 8000732:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000734:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800073c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000740:	08002bc0 	.word	0x08002bc0
  ldr r2, =_sbss
 8000744:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000748:	200001f8 	.word	0x200001f8

0800074c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800074c:	e7fe      	b.n	800074c <ADC_IRQHandler>
	...

08000750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000754:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <HAL_Init+0x40>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a0d      	ldr	r2, [pc, #52]	@ (8000790 <HAL_Init+0x40>)
 800075a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800075e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000760:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <HAL_Init+0x40>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a0a      	ldr	r2, [pc, #40]	@ (8000790 <HAL_Init+0x40>)
 8000766:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800076a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800076c:	4b08      	ldr	r3, [pc, #32]	@ (8000790 <HAL_Init+0x40>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a07      	ldr	r2, [pc, #28]	@ (8000790 <HAL_Init+0x40>)
 8000772:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000776:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000778:	2003      	movs	r0, #3
 800077a:	f000 f933 	bl	80009e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800077e:	200f      	movs	r0, #15
 8000780:	f000 f810 	bl	80007a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000784:	f000 f806 	bl	8000794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023c00 	.word	0x40023c00

08000794 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
	...

080007a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007ac:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <HAL_InitTick+0x54>)
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	4b12      	ldr	r3, [pc, #72]	@ (80007fc <HAL_InitTick+0x58>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	4619      	mov	r1, r3
 80007b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80007be:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f943 	bl	8000a4e <HAL_SYSTICK_Config>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
 80007d0:	e00e      	b.n	80007f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2b0f      	cmp	r3, #15
 80007d6:	d80a      	bhi.n	80007ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d8:	2200      	movs	r2, #0
 80007da:	6879      	ldr	r1, [r7, #4]
 80007dc:	f04f 30ff 	mov.w	r0, #4294967295
 80007e0:	f000 f90b 	bl	80009fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007e4:	4a06      	ldr	r2, [pc, #24]	@ (8000800 <HAL_InitTick+0x5c>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007ea:	2300      	movs	r3, #0
 80007ec:	e000      	b.n	80007f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000000 	.word	0x20000000
 80007fc:	20000008 	.word	0x20000008
 8000800:	20000004 	.word	0x20000004

08000804 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000808:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <HAL_IncTick+0x20>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	461a      	mov	r2, r3
 800080e:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <HAL_IncTick+0x24>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4413      	add	r3, r2
 8000814:	4a04      	ldr	r2, [pc, #16]	@ (8000828 <HAL_IncTick+0x24>)
 8000816:	6013      	str	r3, [r2, #0]
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	20000008 	.word	0x20000008
 8000828:	200000a8 	.word	0x200000a8

0800082c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  return uwTick;
 8000830:	4b03      	ldr	r3, [pc, #12]	@ (8000840 <HAL_GetTick+0x14>)
 8000832:	681b      	ldr	r3, [r3, #0]
}
 8000834:	4618      	mov	r0, r3
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	200000a8 	.word	0x200000a8

08000844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000854:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <__NVIC_SetPriorityGrouping+0x44>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800085a:	68ba      	ldr	r2, [r7, #8]
 800085c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000860:	4013      	ands	r3, r2
 8000862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800086c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000870:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000876:	4a04      	ldr	r2, [pc, #16]	@ (8000888 <__NVIC_SetPriorityGrouping+0x44>)
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	60d3      	str	r3, [r2, #12]
}
 800087c:	bf00      	nop
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000890:	4b04      	ldr	r3, [pc, #16]	@ (80008a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	0a1b      	lsrs	r3, r3, #8
 8000896:	f003 0307 	and.w	r3, r3, #7
}
 800089a:	4618      	mov	r0, r3
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	db0b      	blt.n	80008d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	f003 021f 	and.w	r2, r3, #31
 80008c0:	4907      	ldr	r1, [pc, #28]	@ (80008e0 <__NVIC_EnableIRQ+0x38>)
 80008c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c6:	095b      	lsrs	r3, r3, #5
 80008c8:	2001      	movs	r0, #1
 80008ca:	fa00 f202 	lsl.w	r2, r0, r2
 80008ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	e000e100 	.word	0xe000e100

080008e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	6039      	str	r1, [r7, #0]
 80008ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	db0a      	blt.n	800090e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	490c      	ldr	r1, [pc, #48]	@ (8000930 <__NVIC_SetPriority+0x4c>)
 80008fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000902:	0112      	lsls	r2, r2, #4
 8000904:	b2d2      	uxtb	r2, r2
 8000906:	440b      	add	r3, r1
 8000908:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800090c:	e00a      	b.n	8000924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	b2da      	uxtb	r2, r3
 8000912:	4908      	ldr	r1, [pc, #32]	@ (8000934 <__NVIC_SetPriority+0x50>)
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	f003 030f 	and.w	r3, r3, #15
 800091a:	3b04      	subs	r3, #4
 800091c:	0112      	lsls	r2, r2, #4
 800091e:	b2d2      	uxtb	r2, r2
 8000920:	440b      	add	r3, r1
 8000922:	761a      	strb	r2, [r3, #24]
}
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	e000e100 	.word	0xe000e100
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000938:	b480      	push	{r7}
 800093a:	b089      	sub	sp, #36	@ 0x24
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	f003 0307 	and.w	r3, r3, #7
 800094a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800094c:	69fb      	ldr	r3, [r7, #28]
 800094e:	f1c3 0307 	rsb	r3, r3, #7
 8000952:	2b04      	cmp	r3, #4
 8000954:	bf28      	it	cs
 8000956:	2304      	movcs	r3, #4
 8000958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	3304      	adds	r3, #4
 800095e:	2b06      	cmp	r3, #6
 8000960:	d902      	bls.n	8000968 <NVIC_EncodePriority+0x30>
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	3b03      	subs	r3, #3
 8000966:	e000      	b.n	800096a <NVIC_EncodePriority+0x32>
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800096c:	f04f 32ff 	mov.w	r2, #4294967295
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	43da      	mvns	r2, r3
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	401a      	ands	r2, r3
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000980:	f04f 31ff 	mov.w	r1, #4294967295
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	fa01 f303 	lsl.w	r3, r1, r3
 800098a:	43d9      	mvns	r1, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000990:	4313      	orrs	r3, r2
         );
}
 8000992:	4618      	mov	r0, r3
 8000994:	3724      	adds	r7, #36	@ 0x24
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
	...

080009a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009b0:	d301      	bcc.n	80009b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009b2:	2301      	movs	r3, #1
 80009b4:	e00f      	b.n	80009d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009b6:	4a0a      	ldr	r2, [pc, #40]	@ (80009e0 <SysTick_Config+0x40>)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009be:	210f      	movs	r1, #15
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	f7ff ff8e 	bl	80008e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c8:	4b05      	ldr	r3, [pc, #20]	@ (80009e0 <SysTick_Config+0x40>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ce:	4b04      	ldr	r3, [pc, #16]	@ (80009e0 <SysTick_Config+0x40>)
 80009d0:	2207      	movs	r2, #7
 80009d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	e000e010 	.word	0xe000e010

080009e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f7ff ff29 	bl	8000844 <__NVIC_SetPriorityGrouping>
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	4603      	mov	r3, r0
 8000a02:	60b9      	str	r1, [r7, #8]
 8000a04:	607a      	str	r2, [r7, #4]
 8000a06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a0c:	f7ff ff3e 	bl	800088c <__NVIC_GetPriorityGrouping>
 8000a10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	68b9      	ldr	r1, [r7, #8]
 8000a16:	6978      	ldr	r0, [r7, #20]
 8000a18:	f7ff ff8e 	bl	8000938 <NVIC_EncodePriority>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a22:	4611      	mov	r1, r2
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff ff5d 	bl	80008e4 <__NVIC_SetPriority>
}
 8000a2a:	bf00      	nop
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b082      	sub	sp, #8
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	4603      	mov	r3, r0
 8000a3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ff31 	bl	80008a8 <__NVIC_EnableIRQ>
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b082      	sub	sp, #8
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f7ff ffa2 	bl	80009a0 <SysTick_Config>
 8000a5c:	4603      	mov	r3, r0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000a6a:	f000 f802 	bl	8000a72 <HAL_SYSTICK_Callback>
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b089      	sub	sp, #36	@ 0x24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
 8000a9a:	e159      	b.n	8000d50 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	697a      	ldr	r2, [r7, #20]
 8000aac:	4013      	ands	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	f040 8148 	bne.w	8000d4a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f003 0303 	and.w	r3, r3, #3
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d005      	beq.n	8000ad2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ace:	2b02      	cmp	r3, #2
 8000ad0:	d130      	bne.n	8000b34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	2203      	movs	r2, #3
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	68da      	ldr	r2, [r3, #12]
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	69ba      	ldr	r2, [r7, #24]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	69ba      	ldr	r2, [r7, #24]
 8000b00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b08:	2201      	movs	r2, #1
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	43db      	mvns	r3, r3
 8000b12:	69ba      	ldr	r2, [r7, #24]
 8000b14:	4013      	ands	r3, r2
 8000b16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	091b      	lsrs	r3, r3, #4
 8000b1e:	f003 0201 	and.w	r2, r3, #1
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	69ba      	ldr	r2, [r7, #24]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	69ba      	ldr	r2, [r7, #24]
 8000b32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f003 0303 	and.w	r3, r3, #3
 8000b3c:	2b03      	cmp	r3, #3
 8000b3e:	d017      	beq.n	8000b70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	2203      	movs	r2, #3
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	43db      	mvns	r3, r3
 8000b52:	69ba      	ldr	r2, [r7, #24]
 8000b54:	4013      	ands	r3, r2
 8000b56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	689a      	ldr	r2, [r3, #8]
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	69ba      	ldr	r2, [r7, #24]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	69ba      	ldr	r2, [r7, #24]
 8000b6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f003 0303 	and.w	r3, r3, #3
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d123      	bne.n	8000bc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	08da      	lsrs	r2, r3, #3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3208      	adds	r2, #8
 8000b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	f003 0307 	and.w	r3, r3, #7
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	220f      	movs	r2, #15
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	69ba      	ldr	r2, [r7, #24]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	691a      	ldr	r2, [r3, #16]
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	08da      	lsrs	r2, r3, #3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	3208      	adds	r2, #8
 8000bbe:	69b9      	ldr	r1, [r7, #24]
 8000bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	2203      	movs	r2, #3
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	69ba      	ldr	r2, [r7, #24]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f003 0203 	and.w	r2, r3, #3
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	f000 80a2 	beq.w	8000d4a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	4b57      	ldr	r3, [pc, #348]	@ (8000d68 <HAL_GPIO_Init+0x2e8>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c0e:	4a56      	ldr	r2, [pc, #344]	@ (8000d68 <HAL_GPIO_Init+0x2e8>)
 8000c10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c16:	4b54      	ldr	r3, [pc, #336]	@ (8000d68 <HAL_GPIO_Init+0x2e8>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c22:	4a52      	ldr	r2, [pc, #328]	@ (8000d6c <HAL_GPIO_Init+0x2ec>)
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	089b      	lsrs	r3, r3, #2
 8000c28:	3302      	adds	r3, #2
 8000c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	f003 0303 	and.w	r3, r3, #3
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	220f      	movs	r2, #15
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	4013      	ands	r3, r2
 8000c44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a49      	ldr	r2, [pc, #292]	@ (8000d70 <HAL_GPIO_Init+0x2f0>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d019      	beq.n	8000c82 <HAL_GPIO_Init+0x202>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a48      	ldr	r2, [pc, #288]	@ (8000d74 <HAL_GPIO_Init+0x2f4>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d013      	beq.n	8000c7e <HAL_GPIO_Init+0x1fe>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a47      	ldr	r2, [pc, #284]	@ (8000d78 <HAL_GPIO_Init+0x2f8>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d00d      	beq.n	8000c7a <HAL_GPIO_Init+0x1fa>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a46      	ldr	r2, [pc, #280]	@ (8000d7c <HAL_GPIO_Init+0x2fc>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d007      	beq.n	8000c76 <HAL_GPIO_Init+0x1f6>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a45      	ldr	r2, [pc, #276]	@ (8000d80 <HAL_GPIO_Init+0x300>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d101      	bne.n	8000c72 <HAL_GPIO_Init+0x1f2>
 8000c6e:	2304      	movs	r3, #4
 8000c70:	e008      	b.n	8000c84 <HAL_GPIO_Init+0x204>
 8000c72:	2307      	movs	r3, #7
 8000c74:	e006      	b.n	8000c84 <HAL_GPIO_Init+0x204>
 8000c76:	2303      	movs	r3, #3
 8000c78:	e004      	b.n	8000c84 <HAL_GPIO_Init+0x204>
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	e002      	b.n	8000c84 <HAL_GPIO_Init+0x204>
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e000      	b.n	8000c84 <HAL_GPIO_Init+0x204>
 8000c82:	2300      	movs	r3, #0
 8000c84:	69fa      	ldr	r2, [r7, #28]
 8000c86:	f002 0203 	and.w	r2, r2, #3
 8000c8a:	0092      	lsls	r2, r2, #2
 8000c8c:	4093      	lsls	r3, r2
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c94:	4935      	ldr	r1, [pc, #212]	@ (8000d6c <HAL_GPIO_Init+0x2ec>)
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	089b      	lsrs	r3, r3, #2
 8000c9a:	3302      	adds	r3, #2
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ca2:	4b38      	ldr	r3, [pc, #224]	@ (8000d84 <HAL_GPIO_Init+0x304>)
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	43db      	mvns	r3, r3
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d003      	beq.n	8000cc6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000cc6:	4a2f      	ldr	r2, [pc, #188]	@ (8000d84 <HAL_GPIO_Init+0x304>)
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ccc:	4b2d      	ldr	r3, [pc, #180]	@ (8000d84 <HAL_GPIO_Init+0x304>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d003      	beq.n	8000cf0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000cf0:	4a24      	ldr	r2, [pc, #144]	@ (8000d84 <HAL_GPIO_Init+0x304>)
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000cf6:	4b23      	ldr	r3, [pc, #140]	@ (8000d84 <HAL_GPIO_Init+0x304>)
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4013      	ands	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d003      	beq.n	8000d1a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d1a:	4a1a      	ldr	r2, [pc, #104]	@ (8000d84 <HAL_GPIO_Init+0x304>)
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d20:	4b18      	ldr	r3, [pc, #96]	@ (8000d84 <HAL_GPIO_Init+0x304>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d003      	beq.n	8000d44 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d44:	4a0f      	ldr	r2, [pc, #60]	@ (8000d84 <HAL_GPIO_Init+0x304>)
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	61fb      	str	r3, [r7, #28]
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	2b0f      	cmp	r3, #15
 8000d54:	f67f aea2 	bls.w	8000a9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d58:	bf00      	nop
 8000d5a:	bf00      	nop
 8000d5c:	3724      	adds	r7, #36	@ 0x24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40013800 	.word	0x40013800
 8000d70:	40020000 	.word	0x40020000
 8000d74:	40020400 	.word	0x40020400
 8000d78:	40020800 	.word	0x40020800
 8000d7c:	40020c00 	.word	0x40020c00
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40013c00 	.word	0x40013c00

08000d88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	691a      	ldr	r2, [r3, #16]
 8000d98:	887b      	ldrh	r3, [r7, #2]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d002      	beq.n	8000da6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000da0:	2301      	movs	r3, #1
 8000da2:	73fb      	strb	r3, [r7, #15]
 8000da4:	e001      	b.n	8000daa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000da6:	2300      	movs	r3, #0
 8000da8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000dc2:	4b08      	ldr	r3, [pc, #32]	@ (8000de4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000dc4:	695a      	ldr	r2, [r3, #20]
 8000dc6:	88fb      	ldrh	r3, [r7, #6]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d006      	beq.n	8000ddc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000dce:	4a05      	ldr	r2, [pc, #20]	@ (8000de4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000dd0:	88fb      	ldrh	r3, [r7, #6]
 8000dd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000dd4:	88fb      	ldrh	r3, [r7, #6]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fb54 	bl	8000484 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40013c00 	.word	0x40013c00

08000de8 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8000df0:	4b05      	ldr	r3, [pc, #20]	@ (8000e08 <HAL_PWR_EnableWakeUpPin+0x20>)
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	4904      	ldr	r1, [pc, #16]	@ (8000e08 <HAL_PWR_EnableWakeUpPin+0x20>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	604b      	str	r3, [r1, #4]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	40007000 	.word	0x40007000

08000e0c <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8000e10:	4b08      	ldr	r3, [pc, #32]	@ (8000e34 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a07      	ldr	r2, [pc, #28]	@ (8000e34 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8000e16:	f043 0302 	orr.w	r3, r3, #2
 8000e1a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000e1c:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8000e1e:	691b      	ldr	r3, [r3, #16]
 8000e20:	4a05      	ldr	r2, [pc, #20]	@ (8000e38 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8000e22:	f043 0304 	orr.w	r3, r3, #4
 8000e26:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8000e28:	bf30      	wfi
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	40007000 	.word	0x40007000
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e267      	b.n	800131e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d075      	beq.n	8000f46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000e5a:	4b88      	ldr	r3, [pc, #544]	@ (800107c <HAL_RCC_OscConfig+0x240>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	f003 030c 	and.w	r3, r3, #12
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	d00c      	beq.n	8000e80 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e66:	4b85      	ldr	r3, [pc, #532]	@ (800107c <HAL_RCC_OscConfig+0x240>)
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000e6e:	2b08      	cmp	r3, #8
 8000e70:	d112      	bne.n	8000e98 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e72:	4b82      	ldr	r3, [pc, #520]	@ (800107c <HAL_RCC_OscConfig+0x240>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000e7e:	d10b      	bne.n	8000e98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e80:	4b7e      	ldr	r3, [pc, #504]	@ (800107c <HAL_RCC_OscConfig+0x240>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d05b      	beq.n	8000f44 <HAL_RCC_OscConfig+0x108>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d157      	bne.n	8000f44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e242      	b.n	800131e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ea0:	d106      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x74>
 8000ea2:	4b76      	ldr	r3, [pc, #472]	@ (800107c <HAL_RCC_OscConfig+0x240>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a75      	ldr	r2, [pc, #468]	@ (800107c <HAL_RCC_OscConfig+0x240>)
 8000ea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	e01d      	b.n	8000eec <HAL_RCC_OscConfig+0xb0>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000eb8:	d10c      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x98>
 8000eba:	4b70      	ldr	r3, [pc, #448]	@ (800107c <HAL_RCC_OscConfig+0x240>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a6f      	ldr	r2, [pc, #444]	@ (800107c <HAL_RCC_OscConfig+0x240>)
 8000ec0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	4b6d      	ldr	r3, [pc, #436]	@ (800107c <HAL_RCC_OscConfig+0x240>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a6c      	ldr	r2, [pc, #432]	@ (800107c <HAL_RCC_OscConfig+0x240>)
 8000ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ed0:	6013      	str	r3, [r2, #0]
 8000ed2:	e00b      	b.n	8000eec <HAL_RCC_OscConfig+0xb0>
 8000ed4:	4b69      	ldr	r3, [pc, #420]	@ (800107c <HAL_RCC_OscConfig+0x240>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a68      	ldr	r2, [pc, #416]	@ (800107c <HAL_RCC_OscConfig+0x240>)
 8000eda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	4b66      	ldr	r3, [pc, #408]	@ (800107c <HAL_RCC_OscConfig+0x240>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a65      	ldr	r2, [pc, #404]	@ (800107c <HAL_RCC_OscConfig+0x240>)
 8000ee6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000eea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d013      	beq.n	8000f1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef4:	f7ff fc9a 	bl	800082c <HAL_GetTick>
 8000ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000efa:	e008      	b.n	8000f0e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000efc:	f7ff fc96 	bl	800082c <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b64      	cmp	r3, #100	@ 0x64
 8000f08:	d901      	bls.n	8000f0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e207      	b.n	800131e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f0e:	4b5b      	ldr	r3, [pc, #364]	@ (800107c <HAL_RCC_OscConfig+0x240>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d0f0      	beq.n	8000efc <HAL_RCC_OscConfig+0xc0>
 8000f1a:	e014      	b.n	8000f46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f1c:	f7ff fc86 	bl	800082c <HAL_GetTick>
 8000f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f22:	e008      	b.n	8000f36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f24:	f7ff fc82 	bl	800082c <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b64      	cmp	r3, #100	@ 0x64
 8000f30:	d901      	bls.n	8000f36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f32:	2303      	movs	r3, #3
 8000f34:	e1f3      	b.n	800131e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f36:	4b51      	ldr	r3, [pc, #324]	@ (800107c <HAL_RCC_OscConfig+0x240>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d1f0      	bne.n	8000f24 <HAL_RCC_OscConfig+0xe8>
 8000f42:	e000      	b.n	8000f46 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d063      	beq.n	800101a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000f52:	4b4a      	ldr	r3, [pc, #296]	@ (800107c <HAL_RCC_OscConfig+0x240>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	f003 030c 	and.w	r3, r3, #12
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d00b      	beq.n	8000f76 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f5e:	4b47      	ldr	r3, [pc, #284]	@ (800107c <HAL_RCC_OscConfig+0x240>)
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000f66:	2b08      	cmp	r3, #8
 8000f68:	d11c      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f6a:	4b44      	ldr	r3, [pc, #272]	@ (800107c <HAL_RCC_OscConfig+0x240>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d116      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f76:	4b41      	ldr	r3, [pc, #260]	@ (800107c <HAL_RCC_OscConfig+0x240>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d005      	beq.n	8000f8e <HAL_RCC_OscConfig+0x152>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d001      	beq.n	8000f8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e1c7      	b.n	800131e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f8e:	4b3b      	ldr	r3, [pc, #236]	@ (800107c <HAL_RCC_OscConfig+0x240>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	691b      	ldr	r3, [r3, #16]
 8000f9a:	00db      	lsls	r3, r3, #3
 8000f9c:	4937      	ldr	r1, [pc, #220]	@ (800107c <HAL_RCC_OscConfig+0x240>)
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fa2:	e03a      	b.n	800101a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d020      	beq.n	8000fee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fac:	4b34      	ldr	r3, [pc, #208]	@ (8001080 <HAL_RCC_OscConfig+0x244>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fb2:	f7ff fc3b 	bl	800082c <HAL_GetTick>
 8000fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fb8:	e008      	b.n	8000fcc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fba:	f7ff fc37 	bl	800082c <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d901      	bls.n	8000fcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e1a8      	b.n	800131e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800107c <HAL_RCC_OscConfig+0x240>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d0f0      	beq.n	8000fba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fd8:	4b28      	ldr	r3, [pc, #160]	@ (800107c <HAL_RCC_OscConfig+0x240>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	691b      	ldr	r3, [r3, #16]
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	4925      	ldr	r1, [pc, #148]	@ (800107c <HAL_RCC_OscConfig+0x240>)
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	600b      	str	r3, [r1, #0]
 8000fec:	e015      	b.n	800101a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fee:	4b24      	ldr	r3, [pc, #144]	@ (8001080 <HAL_RCC_OscConfig+0x244>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ff4:	f7ff fc1a 	bl	800082c <HAL_GetTick>
 8000ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ffa:	e008      	b.n	800100e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ffc:	f7ff fc16 	bl	800082c <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	2b02      	cmp	r3, #2
 8001008:	d901      	bls.n	800100e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800100a:	2303      	movs	r3, #3
 800100c:	e187      	b.n	800131e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800100e:	4b1b      	ldr	r3, [pc, #108]	@ (800107c <HAL_RCC_OscConfig+0x240>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1f0      	bne.n	8000ffc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0308 	and.w	r3, r3, #8
 8001022:	2b00      	cmp	r3, #0
 8001024:	d036      	beq.n	8001094 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d016      	beq.n	800105c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800102e:	4b15      	ldr	r3, [pc, #84]	@ (8001084 <HAL_RCC_OscConfig+0x248>)
 8001030:	2201      	movs	r2, #1
 8001032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001034:	f7ff fbfa 	bl	800082c <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800103a:	e008      	b.n	800104e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800103c:	f7ff fbf6 	bl	800082c <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b02      	cmp	r3, #2
 8001048:	d901      	bls.n	800104e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e167      	b.n	800131e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800104e:	4b0b      	ldr	r3, [pc, #44]	@ (800107c <HAL_RCC_OscConfig+0x240>)
 8001050:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	2b00      	cmp	r3, #0
 8001058:	d0f0      	beq.n	800103c <HAL_RCC_OscConfig+0x200>
 800105a:	e01b      	b.n	8001094 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800105c:	4b09      	ldr	r3, [pc, #36]	@ (8001084 <HAL_RCC_OscConfig+0x248>)
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001062:	f7ff fbe3 	bl	800082c <HAL_GetTick>
 8001066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001068:	e00e      	b.n	8001088 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800106a:	f7ff fbdf 	bl	800082c <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b02      	cmp	r3, #2
 8001076:	d907      	bls.n	8001088 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e150      	b.n	800131e <HAL_RCC_OscConfig+0x4e2>
 800107c:	40023800 	.word	0x40023800
 8001080:	42470000 	.word	0x42470000
 8001084:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001088:	4b88      	ldr	r3, [pc, #544]	@ (80012ac <HAL_RCC_OscConfig+0x470>)
 800108a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1ea      	bne.n	800106a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 8097 	beq.w	80011d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010a2:	2300      	movs	r3, #0
 80010a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010a6:	4b81      	ldr	r3, [pc, #516]	@ (80012ac <HAL_RCC_OscConfig+0x470>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d10f      	bne.n	80010d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	4b7d      	ldr	r3, [pc, #500]	@ (80012ac <HAL_RCC_OscConfig+0x470>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ba:	4a7c      	ldr	r2, [pc, #496]	@ (80012ac <HAL_RCC_OscConfig+0x470>)
 80010bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010c2:	4b7a      	ldr	r3, [pc, #488]	@ (80012ac <HAL_RCC_OscConfig+0x470>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010ce:	2301      	movs	r3, #1
 80010d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d2:	4b77      	ldr	r3, [pc, #476]	@ (80012b0 <HAL_RCC_OscConfig+0x474>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d118      	bne.n	8001110 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010de:	4b74      	ldr	r3, [pc, #464]	@ (80012b0 <HAL_RCC_OscConfig+0x474>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a73      	ldr	r2, [pc, #460]	@ (80012b0 <HAL_RCC_OscConfig+0x474>)
 80010e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010ea:	f7ff fb9f 	bl	800082c <HAL_GetTick>
 80010ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f0:	e008      	b.n	8001104 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010f2:	f7ff fb9b 	bl	800082c <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e10c      	b.n	800131e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001104:	4b6a      	ldr	r3, [pc, #424]	@ (80012b0 <HAL_RCC_OscConfig+0x474>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800110c:	2b00      	cmp	r3, #0
 800110e:	d0f0      	beq.n	80010f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d106      	bne.n	8001126 <HAL_RCC_OscConfig+0x2ea>
 8001118:	4b64      	ldr	r3, [pc, #400]	@ (80012ac <HAL_RCC_OscConfig+0x470>)
 800111a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800111c:	4a63      	ldr	r2, [pc, #396]	@ (80012ac <HAL_RCC_OscConfig+0x470>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	6713      	str	r3, [r2, #112]	@ 0x70
 8001124:	e01c      	b.n	8001160 <HAL_RCC_OscConfig+0x324>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	2b05      	cmp	r3, #5
 800112c:	d10c      	bne.n	8001148 <HAL_RCC_OscConfig+0x30c>
 800112e:	4b5f      	ldr	r3, [pc, #380]	@ (80012ac <HAL_RCC_OscConfig+0x470>)
 8001130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001132:	4a5e      	ldr	r2, [pc, #376]	@ (80012ac <HAL_RCC_OscConfig+0x470>)
 8001134:	f043 0304 	orr.w	r3, r3, #4
 8001138:	6713      	str	r3, [r2, #112]	@ 0x70
 800113a:	4b5c      	ldr	r3, [pc, #368]	@ (80012ac <HAL_RCC_OscConfig+0x470>)
 800113c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800113e:	4a5b      	ldr	r2, [pc, #364]	@ (80012ac <HAL_RCC_OscConfig+0x470>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6713      	str	r3, [r2, #112]	@ 0x70
 8001146:	e00b      	b.n	8001160 <HAL_RCC_OscConfig+0x324>
 8001148:	4b58      	ldr	r3, [pc, #352]	@ (80012ac <HAL_RCC_OscConfig+0x470>)
 800114a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800114c:	4a57      	ldr	r2, [pc, #348]	@ (80012ac <HAL_RCC_OscConfig+0x470>)
 800114e:	f023 0301 	bic.w	r3, r3, #1
 8001152:	6713      	str	r3, [r2, #112]	@ 0x70
 8001154:	4b55      	ldr	r3, [pc, #340]	@ (80012ac <HAL_RCC_OscConfig+0x470>)
 8001156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001158:	4a54      	ldr	r2, [pc, #336]	@ (80012ac <HAL_RCC_OscConfig+0x470>)
 800115a:	f023 0304 	bic.w	r3, r3, #4
 800115e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d015      	beq.n	8001194 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001168:	f7ff fb60 	bl	800082c <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800116e:	e00a      	b.n	8001186 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001170:	f7ff fb5c 	bl	800082c <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800117e:	4293      	cmp	r3, r2
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e0cb      	b.n	800131e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001186:	4b49      	ldr	r3, [pc, #292]	@ (80012ac <HAL_RCC_OscConfig+0x470>)
 8001188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0ee      	beq.n	8001170 <HAL_RCC_OscConfig+0x334>
 8001192:	e014      	b.n	80011be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001194:	f7ff fb4a 	bl	800082c <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800119a:	e00a      	b.n	80011b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800119c:	f7ff fb46 	bl	800082c <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e0b5      	b.n	800131e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011b2:	4b3e      	ldr	r3, [pc, #248]	@ (80012ac <HAL_RCC_OscConfig+0x470>)
 80011b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1ee      	bne.n	800119c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80011be:	7dfb      	ldrb	r3, [r7, #23]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d105      	bne.n	80011d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011c4:	4b39      	ldr	r3, [pc, #228]	@ (80012ac <HAL_RCC_OscConfig+0x470>)
 80011c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c8:	4a38      	ldr	r2, [pc, #224]	@ (80012ac <HAL_RCC_OscConfig+0x470>)
 80011ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f000 80a1 	beq.w	800131c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80011da:	4b34      	ldr	r3, [pc, #208]	@ (80012ac <HAL_RCC_OscConfig+0x470>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f003 030c 	and.w	r3, r3, #12
 80011e2:	2b08      	cmp	r3, #8
 80011e4:	d05c      	beq.n	80012a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d141      	bne.n	8001272 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ee:	4b31      	ldr	r3, [pc, #196]	@ (80012b4 <HAL_RCC_OscConfig+0x478>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f4:	f7ff fb1a 	bl	800082c <HAL_GetTick>
 80011f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011fa:	e008      	b.n	800120e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011fc:	f7ff fb16 	bl	800082c <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e087      	b.n	800131e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800120e:	4b27      	ldr	r3, [pc, #156]	@ (80012ac <HAL_RCC_OscConfig+0x470>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1f0      	bne.n	80011fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69da      	ldr	r2, [r3, #28]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a1b      	ldr	r3, [r3, #32]
 8001222:	431a      	orrs	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001228:	019b      	lsls	r3, r3, #6
 800122a:	431a      	orrs	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001230:	085b      	lsrs	r3, r3, #1
 8001232:	3b01      	subs	r3, #1
 8001234:	041b      	lsls	r3, r3, #16
 8001236:	431a      	orrs	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800123c:	061b      	lsls	r3, r3, #24
 800123e:	491b      	ldr	r1, [pc, #108]	@ (80012ac <HAL_RCC_OscConfig+0x470>)
 8001240:	4313      	orrs	r3, r2
 8001242:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001244:	4b1b      	ldr	r3, [pc, #108]	@ (80012b4 <HAL_RCC_OscConfig+0x478>)
 8001246:	2201      	movs	r2, #1
 8001248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124a:	f7ff faef 	bl	800082c <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001250:	e008      	b.n	8001264 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001252:	f7ff faeb 	bl	800082c <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e05c      	b.n	800131e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001264:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <HAL_RCC_OscConfig+0x470>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0f0      	beq.n	8001252 <HAL_RCC_OscConfig+0x416>
 8001270:	e054      	b.n	800131c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001272:	4b10      	ldr	r3, [pc, #64]	@ (80012b4 <HAL_RCC_OscConfig+0x478>)
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001278:	f7ff fad8 	bl	800082c <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001280:	f7ff fad4 	bl	800082c <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e045      	b.n	800131e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001292:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <HAL_RCC_OscConfig+0x470>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1f0      	bne.n	8001280 <HAL_RCC_OscConfig+0x444>
 800129e:	e03d      	b.n	800131c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d107      	bne.n	80012b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e038      	b.n	800131e <HAL_RCC_OscConfig+0x4e2>
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40007000 	.word	0x40007000
 80012b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001328 <HAL_RCC_OscConfig+0x4ec>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d028      	beq.n	8001318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d121      	bne.n	8001318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012de:	429a      	cmp	r2, r3
 80012e0:	d11a      	bne.n	8001318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80012e8:	4013      	ands	r3, r2
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80012ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d111      	bne.n	8001318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012fe:	085b      	lsrs	r3, r3, #1
 8001300:	3b01      	subs	r3, #1
 8001302:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001304:	429a      	cmp	r2, r3
 8001306:	d107      	bne.n	8001318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001312:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001314:	429a      	cmp	r2, r3
 8001316:	d001      	beq.n	800131c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e000      	b.n	800131e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40023800 	.word	0x40023800

0800132c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001338:	2300      	movs	r3, #0
 800133a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	2b00      	cmp	r3, #0
 8001346:	d105      	bne.n	8001354 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001350:	2b00      	cmp	r3, #0
 8001352:	d038      	beq.n	80013c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001354:	4b68      	ldr	r3, [pc, #416]	@ (80014f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800135a:	f7ff fa67 	bl	800082c <HAL_GetTick>
 800135e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001360:	e008      	b.n	8001374 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001362:	f7ff fa63 	bl	800082c <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d901      	bls.n	8001374 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e0bd      	b.n	80014f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001374:	4b61      	ldr	r3, [pc, #388]	@ (80014fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1f0      	bne.n	8001362 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	019b      	lsls	r3, r3, #6
 800138a:	431a      	orrs	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	071b      	lsls	r3, r3, #28
 8001392:	495a      	ldr	r1, [pc, #360]	@ (80014fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001394:	4313      	orrs	r3, r2
 8001396:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800139a:	4b57      	ldr	r3, [pc, #348]	@ (80014f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800139c:	2201      	movs	r2, #1
 800139e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80013a0:	f7ff fa44 	bl	800082c <HAL_GetTick>
 80013a4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80013a8:	f7ff fa40 	bl	800082c <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e09a      	b.n	80014f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80013ba:	4b50      	ldr	r3, [pc, #320]	@ (80014fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0f0      	beq.n	80013a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f000 8083 	beq.w	80014da <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	4b48      	ldr	r3, [pc, #288]	@ (80014fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80013da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013dc:	4a47      	ldr	r2, [pc, #284]	@ (80014fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80013de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80013e4:	4b45      	ldr	r3, [pc, #276]	@ (80014fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80013f0:	4b43      	ldr	r3, [pc, #268]	@ (8001500 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a42      	ldr	r2, [pc, #264]	@ (8001500 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80013f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013fa:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80013fc:	f7ff fa16 	bl	800082c <HAL_GetTick>
 8001400:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001404:	f7ff fa12 	bl	800082c <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e06c      	b.n	80014f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001416:	4b3a      	ldr	r3, [pc, #232]	@ (8001500 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f0      	beq.n	8001404 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001422:	4b36      	ldr	r3, [pc, #216]	@ (80014fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001426:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800142a:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d02f      	beq.n	8001492 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	429a      	cmp	r2, r3
 800143e:	d028      	beq.n	8001492 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001440:	4b2e      	ldr	r3, [pc, #184]	@ (80014fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001444:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001448:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800144a:	4b2e      	ldr	r3, [pc, #184]	@ (8001504 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800144c:	2201      	movs	r2, #1
 800144e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001450:	4b2c      	ldr	r3, [pc, #176]	@ (8001504 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001456:	4a29      	ldr	r2, [pc, #164]	@ (80014fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800145c:	4b27      	ldr	r3, [pc, #156]	@ (80014fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800145e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	2b01      	cmp	r3, #1
 8001466:	d114      	bne.n	8001492 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff f9e0 	bl	800082c <HAL_GetTick>
 800146c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800146e:	e00a      	b.n	8001486 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001470:	f7ff f9dc 	bl	800082c <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800147e:	4293      	cmp	r3, r2
 8001480:	d901      	bls.n	8001486 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e034      	b.n	80014f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001486:	4b1d      	ldr	r3, [pc, #116]	@ (80014fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0ee      	beq.n	8001470 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800149a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800149e:	d10d      	bne.n	80014bc <HAL_RCCEx_PeriphCLKConfig+0x190>
 80014a0:	4b16      	ldr	r3, [pc, #88]	@ (80014fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80014b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80014b4:	4911      	ldr	r1, [pc, #68]	@ (80014fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	608b      	str	r3, [r1, #8]
 80014ba:	e005      	b.n	80014c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80014bc:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	4a0e      	ldr	r2, [pc, #56]	@ (80014fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014c2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80014c6:	6093      	str	r3, [r2, #8]
 80014c8:	4b0c      	ldr	r3, [pc, #48]	@ (80014fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014ca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014d4:	4909      	ldr	r1, [pc, #36]	@ (80014fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	7d1a      	ldrb	r2, [r3, #20]
 80014ea:	4b07      	ldr	r3, [pc, #28]	@ (8001508 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80014ec:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	42470068 	.word	0x42470068
 80014fc:	40023800 	.word	0x40023800
 8001500:	40007000 	.word	0x40007000
 8001504:	42470e40 	.word	0x42470e40
 8001508:	424711e0 	.word	0x424711e0

0800150c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e073      	b.n	8001606 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	7f5b      	ldrb	r3, [r3, #29]
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b00      	cmp	r3, #0
 8001526:	d105      	bne.n	8001534 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7fe ffe4 	bl	80004fc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2202      	movs	r2, #2
 8001538:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	f003 0310 	and.w	r3, r3, #16
 8001544:	2b10      	cmp	r3, #16
 8001546:	d055      	beq.n	80015f4 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	22ca      	movs	r2, #202	@ 0xca
 800154e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2253      	movs	r2, #83	@ 0x53
 8001556:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f000 fa49 	bl	80019f0 <RTC_EnterInitMode>
 800155e:	4603      	mov	r3, r0
 8001560:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d12c      	bne.n	80015c2 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	6812      	ldr	r2, [r2, #0]
 8001572:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8001576:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800157a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6899      	ldr	r1, [r3, #8]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	431a      	orrs	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	695b      	ldr	r3, [r3, #20]
 8001590:	431a      	orrs	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	430a      	orrs	r2, r1
 8001598:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	68d2      	ldr	r2, [r2, #12]
 80015a2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6919      	ldr	r1, [r3, #16]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	041a      	lsls	r2, r3, #16
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 fa50 	bl	8001a5e <RTC_ExitInitMode>
 80015be:	4603      	mov	r3, r0
 80015c0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d110      	bne.n	80015ea <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80015d6:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	699a      	ldr	r2, [r3, #24]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	430a      	orrs	r2, r1
 80015e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	22ff      	movs	r2, #255	@ 0xff
 80015f0:	625a      	str	r2, [r3, #36]	@ 0x24
 80015f2:	e001      	b.n	80015f8 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d102      	bne.n	8001604 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2201      	movs	r2, #1
 8001602:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8001604:	7bfb      	ldrb	r3, [r7, #15]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800160e:	b590      	push	{r4, r7, lr}
 8001610:	b087      	sub	sp, #28
 8001612:	af00      	add	r7, sp, #0
 8001614:	60f8      	str	r0, [r7, #12]
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	7f1b      	ldrb	r3, [r3, #28]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d101      	bne.n	800162a <HAL_RTC_SetTime+0x1c>
 8001626:	2302      	movs	r3, #2
 8001628:	e087      	b.n	800173a <HAL_RTC_SetTime+0x12c>
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2201      	movs	r2, #1
 800162e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2202      	movs	r2, #2
 8001634:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d126      	bne.n	800168a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001646:	2b00      	cmp	r3, #0
 8001648:	d102      	bne.n	8001650 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	2200      	movs	r2, #0
 800164e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f000 fa27 	bl	8001aa8 <RTC_ByteToBcd2>
 800165a:	4603      	mov	r3, r0
 800165c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	785b      	ldrb	r3, [r3, #1]
 8001662:	4618      	mov	r0, r3
 8001664:	f000 fa20 	bl	8001aa8 <RTC_ByteToBcd2>
 8001668:	4603      	mov	r3, r0
 800166a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800166c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	789b      	ldrb	r3, [r3, #2]
 8001672:	4618      	mov	r0, r3
 8001674:	f000 fa18 	bl	8001aa8 <RTC_ByteToBcd2>
 8001678:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800167a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	78db      	ldrb	r3, [r3, #3]
 8001682:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001684:	4313      	orrs	r3, r2
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	e018      	b.n	80016bc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001694:	2b00      	cmp	r3, #0
 8001696:	d102      	bne.n	800169e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	2200      	movs	r2, #0
 800169c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	785b      	ldrb	r3, [r3, #1]
 80016a8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80016aa:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80016ac:	68ba      	ldr	r2, [r7, #8]
 80016ae:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80016b0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	78db      	ldrb	r3, [r3, #3]
 80016b6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80016b8:	4313      	orrs	r3, r2
 80016ba:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	22ca      	movs	r2, #202	@ 0xca
 80016c2:	625a      	str	r2, [r3, #36]	@ 0x24
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2253      	movs	r2, #83	@ 0x53
 80016ca:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80016cc:	68f8      	ldr	r0, [r7, #12]
 80016ce:	f000 f98f 	bl	80019f0 <RTC_EnterInitMode>
 80016d2:	4603      	mov	r3, r0
 80016d4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80016d6:	7cfb      	ldrb	r3, [r7, #19]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d120      	bne.n	800171e <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80016e6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80016ea:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80016fa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6899      	ldr	r1, [r3, #8]
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	431a      	orrs	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	430a      	orrs	r2, r1
 8001712:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f000 f9a2 	bl	8001a5e <RTC_ExitInitMode>
 800171a:	4603      	mov	r3, r0
 800171c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800171e:	7cfb      	ldrb	r3, [r7, #19]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d102      	bne.n	800172a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2201      	movs	r2, #1
 8001728:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	22ff      	movs	r2, #255	@ 0xff
 8001730:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2200      	movs	r2, #0
 8001736:	771a      	strb	r2, [r3, #28]

  return status;
 8001738:	7cfb      	ldrb	r3, [r7, #19]
}
 800173a:	4618      	mov	r0, r3
 800173c:	371c      	adds	r7, #28
 800173e:	46bd      	mov	sp, r7
 8001740:	bd90      	pop	{r4, r7, pc}

08001742 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b086      	sub	sp, #24
 8001746:	af00      	add	r7, sp, #0
 8001748:	60f8      	str	r0, [r7, #12]
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8001774:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8001778:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	0c1b      	lsrs	r3, r3, #16
 800177e:	b2db      	uxtb	r3, r3
 8001780:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001784:	b2da      	uxtb	r2, r3
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	0a1b      	lsrs	r3, r3, #8
 800178e:	b2db      	uxtb	r3, r3
 8001790:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001794:	b2da      	uxtb	r2, r3
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	b2db      	uxtb	r3, r3
 800179e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	0d9b      	lsrs	r3, r3, #22
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d11a      	bne.n	80017f4 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 f98e 	bl	8001ae4 <RTC_Bcd2ToByte>
 80017c8:	4603      	mov	r3, r0
 80017ca:	461a      	mov	r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	785b      	ldrb	r3, [r3, #1]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f000 f985 	bl	8001ae4 <RTC_Bcd2ToByte>
 80017da:	4603      	mov	r3, r0
 80017dc:	461a      	mov	r2, r3
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	789b      	ldrb	r3, [r3, #2]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 f97c 	bl	8001ae4 <RTC_Bcd2ToByte>
 80017ec:	4603      	mov	r3, r0
 80017ee:	461a      	mov	r2, r3
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80017fe:	b590      	push	{r4, r7, lr}
 8001800:	b087      	sub	sp, #28
 8001802:	af00      	add	r7, sp, #0
 8001804:	60f8      	str	r0, [r7, #12]
 8001806:	60b9      	str	r1, [r7, #8]
 8001808:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	7f1b      	ldrb	r3, [r3, #28]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d101      	bne.n	800181a <HAL_RTC_SetDate+0x1c>
 8001816:	2302      	movs	r3, #2
 8001818:	e071      	b.n	80018fe <HAL_RTC_SetDate+0x100>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2201      	movs	r2, #1
 800181e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2202      	movs	r2, #2
 8001824:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d10e      	bne.n	800184a <HAL_RTC_SetDate+0x4c>
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	785b      	ldrb	r3, [r3, #1]
 8001830:	f003 0310 	and.w	r3, r3, #16
 8001834:	2b00      	cmp	r3, #0
 8001836:	d008      	beq.n	800184a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	785b      	ldrb	r3, [r3, #1]
 800183c:	f023 0310 	bic.w	r3, r3, #16
 8001840:	b2db      	uxtb	r3, r3
 8001842:	330a      	adds	r3, #10
 8001844:	b2da      	uxtb	r2, r3
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d11c      	bne.n	800188a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	78db      	ldrb	r3, [r3, #3]
 8001854:	4618      	mov	r0, r3
 8001856:	f000 f927 	bl	8001aa8 <RTC_ByteToBcd2>
 800185a:	4603      	mov	r3, r0
 800185c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	785b      	ldrb	r3, [r3, #1]
 8001862:	4618      	mov	r0, r3
 8001864:	f000 f920 	bl	8001aa8 <RTC_ByteToBcd2>
 8001868:	4603      	mov	r3, r0
 800186a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800186c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	789b      	ldrb	r3, [r3, #2]
 8001872:	4618      	mov	r0, r3
 8001874:	f000 f918 	bl	8001aa8 <RTC_ByteToBcd2>
 8001878:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800187a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001884:	4313      	orrs	r3, r2
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	e00e      	b.n	80018a8 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	78db      	ldrb	r3, [r3, #3]
 800188e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	785b      	ldrb	r3, [r3, #1]
 8001894:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8001896:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8001898:	68ba      	ldr	r2, [r7, #8]
 800189a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800189c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80018a4:	4313      	orrs	r3, r2
 80018a6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	22ca      	movs	r2, #202	@ 0xca
 80018ae:	625a      	str	r2, [r3, #36]	@ 0x24
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2253      	movs	r2, #83	@ 0x53
 80018b6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	f000 f899 	bl	80019f0 <RTC_EnterInitMode>
 80018be:	4603      	mov	r3, r0
 80018c0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80018c2:	7cfb      	ldrb	r3, [r7, #19]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d10c      	bne.n	80018e2 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80018d2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80018d6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f000 f8c0 	bl	8001a5e <RTC_ExitInitMode>
 80018de:	4603      	mov	r3, r0
 80018e0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80018e2:	7cfb      	ldrb	r3, [r7, #19]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d102      	bne.n	80018ee <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2201      	movs	r2, #1
 80018ec:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	22ff      	movs	r2, #255	@ 0xff
 80018f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	771a      	strb	r2, [r3, #28]

  return status;
 80018fc:	7cfb      	ldrb	r3, [r7, #19]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	371c      	adds	r7, #28
 8001902:	46bd      	mov	sp, r7
 8001904:	bd90      	pop	{r4, r7, pc}

08001906 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b086      	sub	sp, #24
 800190a:	af00      	add	r7, sp, #0
 800190c:	60f8      	str	r0, [r7, #12]
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001920:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001924:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	0c1b      	lsrs	r3, r3, #16
 800192a:	b2da      	uxtb	r2, r3
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	0a1b      	lsrs	r3, r3, #8
 8001934:	b2db      	uxtb	r3, r3
 8001936:	f003 031f 	and.w	r3, r3, #31
 800193a:	b2da      	uxtb	r2, r3
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	b2db      	uxtb	r3, r3
 8001944:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001948:	b2da      	uxtb	r2, r3
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	0b5b      	lsrs	r3, r3, #13
 8001952:	b2db      	uxtb	r3, r3
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	b2da      	uxtb	r2, r3
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d11a      	bne.n	800199a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	78db      	ldrb	r3, [r3, #3]
 8001968:	4618      	mov	r0, r3
 800196a:	f000 f8bb 	bl	8001ae4 <RTC_Bcd2ToByte>
 800196e:	4603      	mov	r3, r0
 8001970:	461a      	mov	r2, r3
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	785b      	ldrb	r3, [r3, #1]
 800197a:	4618      	mov	r0, r3
 800197c:	f000 f8b2 	bl	8001ae4 <RTC_Bcd2ToByte>
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	789b      	ldrb	r3, [r3, #2]
 800198c:	4618      	mov	r0, r3
 800198e:	f000 f8a9 	bl	8001ae4 <RTC_Bcd2ToByte>
 8001992:	4603      	mov	r3, r0
 8001994:	461a      	mov	r2, r3
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a0d      	ldr	r2, [pc, #52]	@ (80019ec <HAL_RTC_WaitForSynchro+0x48>)
 80019b6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019b8:	f7fe ff38 	bl	800082c <HAL_GetTick>
 80019bc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80019be:	e009      	b.n	80019d4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80019c0:	f7fe ff34 	bl	800082c <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80019ce:	d901      	bls.n	80019d4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e007      	b.n	80019e4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	f003 0320 	and.w	r3, r3, #32
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0ee      	beq.n	80019c0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	00013f5f 	.word	0x00013f5f

080019f0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d122      	bne.n	8001a54 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68da      	ldr	r2, [r3, #12]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a1c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a1e:	f7fe ff05 	bl	800082c <HAL_GetTick>
 8001a22:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8001a24:	e00c      	b.n	8001a40 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001a26:	f7fe ff01 	bl	800082c <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a34:	d904      	bls.n	8001a40 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2204      	movs	r2, #4
 8001a3a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d102      	bne.n	8001a54 <RTC_EnterInitMode+0x64>
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d1e8      	bne.n	8001a26 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b084      	sub	sp, #16
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a78:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 0320 	and.w	r3, r3, #32
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d10a      	bne.n	8001a9e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff ff8b 	bl	80019a4 <HAL_RTC_WaitForSynchro>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d004      	beq.n	8001a9e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2204      	movs	r2, #4
 8001a98:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8001ab6:	e005      	b.n	8001ac4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	3301      	adds	r3, #1
 8001abc:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	3b0a      	subs	r3, #10
 8001ac2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	2b09      	cmp	r3, #9
 8001ac8:	d8f6      	bhi.n	8001ab8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	011b      	lsls	r3, r3, #4
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	b2db      	uxtb	r3, r3
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	461a      	mov	r2, r3
 8001afa:	4613      	mov	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	4413      	add	r3, r2
 8001b12:	b2db      	uxtb	r3, r3
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <std>:
 8001b20:	2300      	movs	r3, #0
 8001b22:	b510      	push	{r4, lr}
 8001b24:	4604      	mov	r4, r0
 8001b26:	e9c0 3300 	strd	r3, r3, [r0]
 8001b2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001b2e:	6083      	str	r3, [r0, #8]
 8001b30:	8181      	strh	r1, [r0, #12]
 8001b32:	6643      	str	r3, [r0, #100]	@ 0x64
 8001b34:	81c2      	strh	r2, [r0, #14]
 8001b36:	6183      	str	r3, [r0, #24]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	2208      	movs	r2, #8
 8001b3c:	305c      	adds	r0, #92	@ 0x5c
 8001b3e:	f000 f9f9 	bl	8001f34 <memset>
 8001b42:	4b0d      	ldr	r3, [pc, #52]	@ (8001b78 <std+0x58>)
 8001b44:	6263      	str	r3, [r4, #36]	@ 0x24
 8001b46:	4b0d      	ldr	r3, [pc, #52]	@ (8001b7c <std+0x5c>)
 8001b48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b80 <std+0x60>)
 8001b4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b84 <std+0x64>)
 8001b50:	6323      	str	r3, [r4, #48]	@ 0x30
 8001b52:	4b0d      	ldr	r3, [pc, #52]	@ (8001b88 <std+0x68>)
 8001b54:	6224      	str	r4, [r4, #32]
 8001b56:	429c      	cmp	r4, r3
 8001b58:	d006      	beq.n	8001b68 <std+0x48>
 8001b5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001b5e:	4294      	cmp	r4, r2
 8001b60:	d002      	beq.n	8001b68 <std+0x48>
 8001b62:	33d0      	adds	r3, #208	@ 0xd0
 8001b64:	429c      	cmp	r4, r3
 8001b66:	d105      	bne.n	8001b74 <std+0x54>
 8001b68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b70:	f000 ba58 	b.w	8002024 <__retarget_lock_init_recursive>
 8001b74:	bd10      	pop	{r4, pc}
 8001b76:	bf00      	nop
 8001b78:	08001d85 	.word	0x08001d85
 8001b7c:	08001da7 	.word	0x08001da7
 8001b80:	08001ddf 	.word	0x08001ddf
 8001b84:	08001e03 	.word	0x08001e03
 8001b88:	200000ac 	.word	0x200000ac

08001b8c <stdio_exit_handler>:
 8001b8c:	4a02      	ldr	r2, [pc, #8]	@ (8001b98 <stdio_exit_handler+0xc>)
 8001b8e:	4903      	ldr	r1, [pc, #12]	@ (8001b9c <stdio_exit_handler+0x10>)
 8001b90:	4803      	ldr	r0, [pc, #12]	@ (8001ba0 <stdio_exit_handler+0x14>)
 8001b92:	f000 b869 	b.w	8001c68 <_fwalk_sglue>
 8001b96:	bf00      	nop
 8001b98:	2000000c 	.word	0x2000000c
 8001b9c:	080028c1 	.word	0x080028c1
 8001ba0:	2000001c 	.word	0x2000001c

08001ba4 <cleanup_stdio>:
 8001ba4:	6841      	ldr	r1, [r0, #4]
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd8 <cleanup_stdio+0x34>)
 8001ba8:	4299      	cmp	r1, r3
 8001baa:	b510      	push	{r4, lr}
 8001bac:	4604      	mov	r4, r0
 8001bae:	d001      	beq.n	8001bb4 <cleanup_stdio+0x10>
 8001bb0:	f000 fe86 	bl	80028c0 <_fflush_r>
 8001bb4:	68a1      	ldr	r1, [r4, #8]
 8001bb6:	4b09      	ldr	r3, [pc, #36]	@ (8001bdc <cleanup_stdio+0x38>)
 8001bb8:	4299      	cmp	r1, r3
 8001bba:	d002      	beq.n	8001bc2 <cleanup_stdio+0x1e>
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	f000 fe7f 	bl	80028c0 <_fflush_r>
 8001bc2:	68e1      	ldr	r1, [r4, #12]
 8001bc4:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <cleanup_stdio+0x3c>)
 8001bc6:	4299      	cmp	r1, r3
 8001bc8:	d004      	beq.n	8001bd4 <cleanup_stdio+0x30>
 8001bca:	4620      	mov	r0, r4
 8001bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001bd0:	f000 be76 	b.w	80028c0 <_fflush_r>
 8001bd4:	bd10      	pop	{r4, pc}
 8001bd6:	bf00      	nop
 8001bd8:	200000ac 	.word	0x200000ac
 8001bdc:	20000114 	.word	0x20000114
 8001be0:	2000017c 	.word	0x2000017c

08001be4 <global_stdio_init.part.0>:
 8001be4:	b510      	push	{r4, lr}
 8001be6:	4b0b      	ldr	r3, [pc, #44]	@ (8001c14 <global_stdio_init.part.0+0x30>)
 8001be8:	4c0b      	ldr	r4, [pc, #44]	@ (8001c18 <global_stdio_init.part.0+0x34>)
 8001bea:	4a0c      	ldr	r2, [pc, #48]	@ (8001c1c <global_stdio_init.part.0+0x38>)
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	4620      	mov	r0, r4
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2104      	movs	r1, #4
 8001bf4:	f7ff ff94 	bl	8001b20 <std>
 8001bf8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	2109      	movs	r1, #9
 8001c00:	f7ff ff8e 	bl	8001b20 <std>
 8001c04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001c08:	2202      	movs	r2, #2
 8001c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c0e:	2112      	movs	r1, #18
 8001c10:	f7ff bf86 	b.w	8001b20 <std>
 8001c14:	200001e4 	.word	0x200001e4
 8001c18:	200000ac 	.word	0x200000ac
 8001c1c:	08001b8d 	.word	0x08001b8d

08001c20 <__sfp_lock_acquire>:
 8001c20:	4801      	ldr	r0, [pc, #4]	@ (8001c28 <__sfp_lock_acquire+0x8>)
 8001c22:	f000 ba00 	b.w	8002026 <__retarget_lock_acquire_recursive>
 8001c26:	bf00      	nop
 8001c28:	200001ed 	.word	0x200001ed

08001c2c <__sfp_lock_release>:
 8001c2c:	4801      	ldr	r0, [pc, #4]	@ (8001c34 <__sfp_lock_release+0x8>)
 8001c2e:	f000 b9fb 	b.w	8002028 <__retarget_lock_release_recursive>
 8001c32:	bf00      	nop
 8001c34:	200001ed 	.word	0x200001ed

08001c38 <__sinit>:
 8001c38:	b510      	push	{r4, lr}
 8001c3a:	4604      	mov	r4, r0
 8001c3c:	f7ff fff0 	bl	8001c20 <__sfp_lock_acquire>
 8001c40:	6a23      	ldr	r3, [r4, #32]
 8001c42:	b11b      	cbz	r3, 8001c4c <__sinit+0x14>
 8001c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c48:	f7ff bff0 	b.w	8001c2c <__sfp_lock_release>
 8001c4c:	4b04      	ldr	r3, [pc, #16]	@ (8001c60 <__sinit+0x28>)
 8001c4e:	6223      	str	r3, [r4, #32]
 8001c50:	4b04      	ldr	r3, [pc, #16]	@ (8001c64 <__sinit+0x2c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1f5      	bne.n	8001c44 <__sinit+0xc>
 8001c58:	f7ff ffc4 	bl	8001be4 <global_stdio_init.part.0>
 8001c5c:	e7f2      	b.n	8001c44 <__sinit+0xc>
 8001c5e:	bf00      	nop
 8001c60:	08001ba5 	.word	0x08001ba5
 8001c64:	200001e4 	.word	0x200001e4

08001c68 <_fwalk_sglue>:
 8001c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c6c:	4607      	mov	r7, r0
 8001c6e:	4688      	mov	r8, r1
 8001c70:	4614      	mov	r4, r2
 8001c72:	2600      	movs	r6, #0
 8001c74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001c78:	f1b9 0901 	subs.w	r9, r9, #1
 8001c7c:	d505      	bpl.n	8001c8a <_fwalk_sglue+0x22>
 8001c7e:	6824      	ldr	r4, [r4, #0]
 8001c80:	2c00      	cmp	r4, #0
 8001c82:	d1f7      	bne.n	8001c74 <_fwalk_sglue+0xc>
 8001c84:	4630      	mov	r0, r6
 8001c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c8a:	89ab      	ldrh	r3, [r5, #12]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d907      	bls.n	8001ca0 <_fwalk_sglue+0x38>
 8001c90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001c94:	3301      	adds	r3, #1
 8001c96:	d003      	beq.n	8001ca0 <_fwalk_sglue+0x38>
 8001c98:	4629      	mov	r1, r5
 8001c9a:	4638      	mov	r0, r7
 8001c9c:	47c0      	blx	r8
 8001c9e:	4306      	orrs	r6, r0
 8001ca0:	3568      	adds	r5, #104	@ 0x68
 8001ca2:	e7e9      	b.n	8001c78 <_fwalk_sglue+0x10>

08001ca4 <iprintf>:
 8001ca4:	b40f      	push	{r0, r1, r2, r3}
 8001ca6:	b507      	push	{r0, r1, r2, lr}
 8001ca8:	4906      	ldr	r1, [pc, #24]	@ (8001cc4 <iprintf+0x20>)
 8001caa:	ab04      	add	r3, sp, #16
 8001cac:	6808      	ldr	r0, [r1, #0]
 8001cae:	f853 2b04 	ldr.w	r2, [r3], #4
 8001cb2:	6881      	ldr	r1, [r0, #8]
 8001cb4:	9301      	str	r3, [sp, #4]
 8001cb6:	f000 fadb 	bl	8002270 <_vfiprintf_r>
 8001cba:	b003      	add	sp, #12
 8001cbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8001cc0:	b004      	add	sp, #16
 8001cc2:	4770      	bx	lr
 8001cc4:	20000018 	.word	0x20000018

08001cc8 <_puts_r>:
 8001cc8:	6a03      	ldr	r3, [r0, #32]
 8001cca:	b570      	push	{r4, r5, r6, lr}
 8001ccc:	6884      	ldr	r4, [r0, #8]
 8001cce:	4605      	mov	r5, r0
 8001cd0:	460e      	mov	r6, r1
 8001cd2:	b90b      	cbnz	r3, 8001cd8 <_puts_r+0x10>
 8001cd4:	f7ff ffb0 	bl	8001c38 <__sinit>
 8001cd8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001cda:	07db      	lsls	r3, r3, #31
 8001cdc:	d405      	bmi.n	8001cea <_puts_r+0x22>
 8001cde:	89a3      	ldrh	r3, [r4, #12]
 8001ce0:	0598      	lsls	r0, r3, #22
 8001ce2:	d402      	bmi.n	8001cea <_puts_r+0x22>
 8001ce4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001ce6:	f000 f99e 	bl	8002026 <__retarget_lock_acquire_recursive>
 8001cea:	89a3      	ldrh	r3, [r4, #12]
 8001cec:	0719      	lsls	r1, r3, #28
 8001cee:	d502      	bpl.n	8001cf6 <_puts_r+0x2e>
 8001cf0:	6923      	ldr	r3, [r4, #16]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d135      	bne.n	8001d62 <_puts_r+0x9a>
 8001cf6:	4621      	mov	r1, r4
 8001cf8:	4628      	mov	r0, r5
 8001cfa:	f000 f8c5 	bl	8001e88 <__swsetup_r>
 8001cfe:	b380      	cbz	r0, 8001d62 <_puts_r+0x9a>
 8001d00:	f04f 35ff 	mov.w	r5, #4294967295
 8001d04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001d06:	07da      	lsls	r2, r3, #31
 8001d08:	d405      	bmi.n	8001d16 <_puts_r+0x4e>
 8001d0a:	89a3      	ldrh	r3, [r4, #12]
 8001d0c:	059b      	lsls	r3, r3, #22
 8001d0e:	d402      	bmi.n	8001d16 <_puts_r+0x4e>
 8001d10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001d12:	f000 f989 	bl	8002028 <__retarget_lock_release_recursive>
 8001d16:	4628      	mov	r0, r5
 8001d18:	bd70      	pop	{r4, r5, r6, pc}
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	da04      	bge.n	8001d28 <_puts_r+0x60>
 8001d1e:	69a2      	ldr	r2, [r4, #24]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	dc17      	bgt.n	8001d54 <_puts_r+0x8c>
 8001d24:	290a      	cmp	r1, #10
 8001d26:	d015      	beq.n	8001d54 <_puts_r+0x8c>
 8001d28:	6823      	ldr	r3, [r4, #0]
 8001d2a:	1c5a      	adds	r2, r3, #1
 8001d2c:	6022      	str	r2, [r4, #0]
 8001d2e:	7019      	strb	r1, [r3, #0]
 8001d30:	68a3      	ldr	r3, [r4, #8]
 8001d32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001d36:	3b01      	subs	r3, #1
 8001d38:	60a3      	str	r3, [r4, #8]
 8001d3a:	2900      	cmp	r1, #0
 8001d3c:	d1ed      	bne.n	8001d1a <_puts_r+0x52>
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	da11      	bge.n	8001d66 <_puts_r+0x9e>
 8001d42:	4622      	mov	r2, r4
 8001d44:	210a      	movs	r1, #10
 8001d46:	4628      	mov	r0, r5
 8001d48:	f000 f85f 	bl	8001e0a <__swbuf_r>
 8001d4c:	3001      	adds	r0, #1
 8001d4e:	d0d7      	beq.n	8001d00 <_puts_r+0x38>
 8001d50:	250a      	movs	r5, #10
 8001d52:	e7d7      	b.n	8001d04 <_puts_r+0x3c>
 8001d54:	4622      	mov	r2, r4
 8001d56:	4628      	mov	r0, r5
 8001d58:	f000 f857 	bl	8001e0a <__swbuf_r>
 8001d5c:	3001      	adds	r0, #1
 8001d5e:	d1e7      	bne.n	8001d30 <_puts_r+0x68>
 8001d60:	e7ce      	b.n	8001d00 <_puts_r+0x38>
 8001d62:	3e01      	subs	r6, #1
 8001d64:	e7e4      	b.n	8001d30 <_puts_r+0x68>
 8001d66:	6823      	ldr	r3, [r4, #0]
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	6022      	str	r2, [r4, #0]
 8001d6c:	220a      	movs	r2, #10
 8001d6e:	701a      	strb	r2, [r3, #0]
 8001d70:	e7ee      	b.n	8001d50 <_puts_r+0x88>
	...

08001d74 <puts>:
 8001d74:	4b02      	ldr	r3, [pc, #8]	@ (8001d80 <puts+0xc>)
 8001d76:	4601      	mov	r1, r0
 8001d78:	6818      	ldr	r0, [r3, #0]
 8001d7a:	f7ff bfa5 	b.w	8001cc8 <_puts_r>
 8001d7e:	bf00      	nop
 8001d80:	20000018 	.word	0x20000018

08001d84 <__sread>:
 8001d84:	b510      	push	{r4, lr}
 8001d86:	460c      	mov	r4, r1
 8001d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d8c:	f000 f8fc 	bl	8001f88 <_read_r>
 8001d90:	2800      	cmp	r0, #0
 8001d92:	bfab      	itete	ge
 8001d94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001d96:	89a3      	ldrhlt	r3, [r4, #12]
 8001d98:	181b      	addge	r3, r3, r0
 8001d9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001d9e:	bfac      	ite	ge
 8001da0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001da2:	81a3      	strhlt	r3, [r4, #12]
 8001da4:	bd10      	pop	{r4, pc}

08001da6 <__swrite>:
 8001da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001daa:	461f      	mov	r7, r3
 8001dac:	898b      	ldrh	r3, [r1, #12]
 8001dae:	05db      	lsls	r3, r3, #23
 8001db0:	4605      	mov	r5, r0
 8001db2:	460c      	mov	r4, r1
 8001db4:	4616      	mov	r6, r2
 8001db6:	d505      	bpl.n	8001dc4 <__swrite+0x1e>
 8001db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f000 f8d0 	bl	8001f64 <_lseek_r>
 8001dc4:	89a3      	ldrh	r3, [r4, #12]
 8001dc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001dca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001dce:	81a3      	strh	r3, [r4, #12]
 8001dd0:	4632      	mov	r2, r6
 8001dd2:	463b      	mov	r3, r7
 8001dd4:	4628      	mov	r0, r5
 8001dd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001dda:	f000 b8e7 	b.w	8001fac <_write_r>

08001dde <__sseek>:
 8001dde:	b510      	push	{r4, lr}
 8001de0:	460c      	mov	r4, r1
 8001de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001de6:	f000 f8bd 	bl	8001f64 <_lseek_r>
 8001dea:	1c43      	adds	r3, r0, #1
 8001dec:	89a3      	ldrh	r3, [r4, #12]
 8001dee:	bf15      	itete	ne
 8001df0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001df2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001df6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001dfa:	81a3      	strheq	r3, [r4, #12]
 8001dfc:	bf18      	it	ne
 8001dfe:	81a3      	strhne	r3, [r4, #12]
 8001e00:	bd10      	pop	{r4, pc}

08001e02 <__sclose>:
 8001e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e06:	f000 b89d 	b.w	8001f44 <_close_r>

08001e0a <__swbuf_r>:
 8001e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e0c:	460e      	mov	r6, r1
 8001e0e:	4614      	mov	r4, r2
 8001e10:	4605      	mov	r5, r0
 8001e12:	b118      	cbz	r0, 8001e1c <__swbuf_r+0x12>
 8001e14:	6a03      	ldr	r3, [r0, #32]
 8001e16:	b90b      	cbnz	r3, 8001e1c <__swbuf_r+0x12>
 8001e18:	f7ff ff0e 	bl	8001c38 <__sinit>
 8001e1c:	69a3      	ldr	r3, [r4, #24]
 8001e1e:	60a3      	str	r3, [r4, #8]
 8001e20:	89a3      	ldrh	r3, [r4, #12]
 8001e22:	071a      	lsls	r2, r3, #28
 8001e24:	d501      	bpl.n	8001e2a <__swbuf_r+0x20>
 8001e26:	6923      	ldr	r3, [r4, #16]
 8001e28:	b943      	cbnz	r3, 8001e3c <__swbuf_r+0x32>
 8001e2a:	4621      	mov	r1, r4
 8001e2c:	4628      	mov	r0, r5
 8001e2e:	f000 f82b 	bl	8001e88 <__swsetup_r>
 8001e32:	b118      	cbz	r0, 8001e3c <__swbuf_r+0x32>
 8001e34:	f04f 37ff 	mov.w	r7, #4294967295
 8001e38:	4638      	mov	r0, r7
 8001e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e3c:	6823      	ldr	r3, [r4, #0]
 8001e3e:	6922      	ldr	r2, [r4, #16]
 8001e40:	1a98      	subs	r0, r3, r2
 8001e42:	6963      	ldr	r3, [r4, #20]
 8001e44:	b2f6      	uxtb	r6, r6
 8001e46:	4283      	cmp	r3, r0
 8001e48:	4637      	mov	r7, r6
 8001e4a:	dc05      	bgt.n	8001e58 <__swbuf_r+0x4e>
 8001e4c:	4621      	mov	r1, r4
 8001e4e:	4628      	mov	r0, r5
 8001e50:	f000 fd36 	bl	80028c0 <_fflush_r>
 8001e54:	2800      	cmp	r0, #0
 8001e56:	d1ed      	bne.n	8001e34 <__swbuf_r+0x2a>
 8001e58:	68a3      	ldr	r3, [r4, #8]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	60a3      	str	r3, [r4, #8]
 8001e5e:	6823      	ldr	r3, [r4, #0]
 8001e60:	1c5a      	adds	r2, r3, #1
 8001e62:	6022      	str	r2, [r4, #0]
 8001e64:	701e      	strb	r6, [r3, #0]
 8001e66:	6962      	ldr	r2, [r4, #20]
 8001e68:	1c43      	adds	r3, r0, #1
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d004      	beq.n	8001e78 <__swbuf_r+0x6e>
 8001e6e:	89a3      	ldrh	r3, [r4, #12]
 8001e70:	07db      	lsls	r3, r3, #31
 8001e72:	d5e1      	bpl.n	8001e38 <__swbuf_r+0x2e>
 8001e74:	2e0a      	cmp	r6, #10
 8001e76:	d1df      	bne.n	8001e38 <__swbuf_r+0x2e>
 8001e78:	4621      	mov	r1, r4
 8001e7a:	4628      	mov	r0, r5
 8001e7c:	f000 fd20 	bl	80028c0 <_fflush_r>
 8001e80:	2800      	cmp	r0, #0
 8001e82:	d0d9      	beq.n	8001e38 <__swbuf_r+0x2e>
 8001e84:	e7d6      	b.n	8001e34 <__swbuf_r+0x2a>
	...

08001e88 <__swsetup_r>:
 8001e88:	b538      	push	{r3, r4, r5, lr}
 8001e8a:	4b29      	ldr	r3, [pc, #164]	@ (8001f30 <__swsetup_r+0xa8>)
 8001e8c:	4605      	mov	r5, r0
 8001e8e:	6818      	ldr	r0, [r3, #0]
 8001e90:	460c      	mov	r4, r1
 8001e92:	b118      	cbz	r0, 8001e9c <__swsetup_r+0x14>
 8001e94:	6a03      	ldr	r3, [r0, #32]
 8001e96:	b90b      	cbnz	r3, 8001e9c <__swsetup_r+0x14>
 8001e98:	f7ff fece 	bl	8001c38 <__sinit>
 8001e9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ea0:	0719      	lsls	r1, r3, #28
 8001ea2:	d422      	bmi.n	8001eea <__swsetup_r+0x62>
 8001ea4:	06da      	lsls	r2, r3, #27
 8001ea6:	d407      	bmi.n	8001eb8 <__swsetup_r+0x30>
 8001ea8:	2209      	movs	r2, #9
 8001eaa:	602a      	str	r2, [r5, #0]
 8001eac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001eb0:	81a3      	strh	r3, [r4, #12]
 8001eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb6:	e033      	b.n	8001f20 <__swsetup_r+0x98>
 8001eb8:	0758      	lsls	r0, r3, #29
 8001eba:	d512      	bpl.n	8001ee2 <__swsetup_r+0x5a>
 8001ebc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001ebe:	b141      	cbz	r1, 8001ed2 <__swsetup_r+0x4a>
 8001ec0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001ec4:	4299      	cmp	r1, r3
 8001ec6:	d002      	beq.n	8001ece <__swsetup_r+0x46>
 8001ec8:	4628      	mov	r0, r5
 8001eca:	f000 f8af 	bl	800202c <_free_r>
 8001ece:	2300      	movs	r3, #0
 8001ed0:	6363      	str	r3, [r4, #52]	@ 0x34
 8001ed2:	89a3      	ldrh	r3, [r4, #12]
 8001ed4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001ed8:	81a3      	strh	r3, [r4, #12]
 8001eda:	2300      	movs	r3, #0
 8001edc:	6063      	str	r3, [r4, #4]
 8001ede:	6923      	ldr	r3, [r4, #16]
 8001ee0:	6023      	str	r3, [r4, #0]
 8001ee2:	89a3      	ldrh	r3, [r4, #12]
 8001ee4:	f043 0308 	orr.w	r3, r3, #8
 8001ee8:	81a3      	strh	r3, [r4, #12]
 8001eea:	6923      	ldr	r3, [r4, #16]
 8001eec:	b94b      	cbnz	r3, 8001f02 <__swsetup_r+0x7a>
 8001eee:	89a3      	ldrh	r3, [r4, #12]
 8001ef0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001ef4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ef8:	d003      	beq.n	8001f02 <__swsetup_r+0x7a>
 8001efa:	4621      	mov	r1, r4
 8001efc:	4628      	mov	r0, r5
 8001efe:	f000 fd2d 	bl	800295c <__smakebuf_r>
 8001f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f06:	f013 0201 	ands.w	r2, r3, #1
 8001f0a:	d00a      	beq.n	8001f22 <__swsetup_r+0x9a>
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	60a2      	str	r2, [r4, #8]
 8001f10:	6962      	ldr	r2, [r4, #20]
 8001f12:	4252      	negs	r2, r2
 8001f14:	61a2      	str	r2, [r4, #24]
 8001f16:	6922      	ldr	r2, [r4, #16]
 8001f18:	b942      	cbnz	r2, 8001f2c <__swsetup_r+0xa4>
 8001f1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001f1e:	d1c5      	bne.n	8001eac <__swsetup_r+0x24>
 8001f20:	bd38      	pop	{r3, r4, r5, pc}
 8001f22:	0799      	lsls	r1, r3, #30
 8001f24:	bf58      	it	pl
 8001f26:	6962      	ldrpl	r2, [r4, #20]
 8001f28:	60a2      	str	r2, [r4, #8]
 8001f2a:	e7f4      	b.n	8001f16 <__swsetup_r+0x8e>
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	e7f7      	b.n	8001f20 <__swsetup_r+0x98>
 8001f30:	20000018 	.word	0x20000018

08001f34 <memset>:
 8001f34:	4402      	add	r2, r0
 8001f36:	4603      	mov	r3, r0
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d100      	bne.n	8001f3e <memset+0xa>
 8001f3c:	4770      	bx	lr
 8001f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8001f42:	e7f9      	b.n	8001f38 <memset+0x4>

08001f44 <_close_r>:
 8001f44:	b538      	push	{r3, r4, r5, lr}
 8001f46:	4d06      	ldr	r5, [pc, #24]	@ (8001f60 <_close_r+0x1c>)
 8001f48:	2300      	movs	r3, #0
 8001f4a:	4604      	mov	r4, r0
 8001f4c:	4608      	mov	r0, r1
 8001f4e:	602b      	str	r3, [r5, #0]
 8001f50:	f7fe fb57 	bl	8000602 <_close>
 8001f54:	1c43      	adds	r3, r0, #1
 8001f56:	d102      	bne.n	8001f5e <_close_r+0x1a>
 8001f58:	682b      	ldr	r3, [r5, #0]
 8001f5a:	b103      	cbz	r3, 8001f5e <_close_r+0x1a>
 8001f5c:	6023      	str	r3, [r4, #0]
 8001f5e:	bd38      	pop	{r3, r4, r5, pc}
 8001f60:	200001e8 	.word	0x200001e8

08001f64 <_lseek_r>:
 8001f64:	b538      	push	{r3, r4, r5, lr}
 8001f66:	4d07      	ldr	r5, [pc, #28]	@ (8001f84 <_lseek_r+0x20>)
 8001f68:	4604      	mov	r4, r0
 8001f6a:	4608      	mov	r0, r1
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	2200      	movs	r2, #0
 8001f70:	602a      	str	r2, [r5, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	f7fe fb6c 	bl	8000650 <_lseek>
 8001f78:	1c43      	adds	r3, r0, #1
 8001f7a:	d102      	bne.n	8001f82 <_lseek_r+0x1e>
 8001f7c:	682b      	ldr	r3, [r5, #0]
 8001f7e:	b103      	cbz	r3, 8001f82 <_lseek_r+0x1e>
 8001f80:	6023      	str	r3, [r4, #0]
 8001f82:	bd38      	pop	{r3, r4, r5, pc}
 8001f84:	200001e8 	.word	0x200001e8

08001f88 <_read_r>:
 8001f88:	b538      	push	{r3, r4, r5, lr}
 8001f8a:	4d07      	ldr	r5, [pc, #28]	@ (8001fa8 <_read_r+0x20>)
 8001f8c:	4604      	mov	r4, r0
 8001f8e:	4608      	mov	r0, r1
 8001f90:	4611      	mov	r1, r2
 8001f92:	2200      	movs	r2, #0
 8001f94:	602a      	str	r2, [r5, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	f7fe fafa 	bl	8000590 <_read>
 8001f9c:	1c43      	adds	r3, r0, #1
 8001f9e:	d102      	bne.n	8001fa6 <_read_r+0x1e>
 8001fa0:	682b      	ldr	r3, [r5, #0]
 8001fa2:	b103      	cbz	r3, 8001fa6 <_read_r+0x1e>
 8001fa4:	6023      	str	r3, [r4, #0]
 8001fa6:	bd38      	pop	{r3, r4, r5, pc}
 8001fa8:	200001e8 	.word	0x200001e8

08001fac <_write_r>:
 8001fac:	b538      	push	{r3, r4, r5, lr}
 8001fae:	4d07      	ldr	r5, [pc, #28]	@ (8001fcc <_write_r+0x20>)
 8001fb0:	4604      	mov	r4, r0
 8001fb2:	4608      	mov	r0, r1
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	602a      	str	r2, [r5, #0]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	f7fe fb05 	bl	80005ca <_write>
 8001fc0:	1c43      	adds	r3, r0, #1
 8001fc2:	d102      	bne.n	8001fca <_write_r+0x1e>
 8001fc4:	682b      	ldr	r3, [r5, #0]
 8001fc6:	b103      	cbz	r3, 8001fca <_write_r+0x1e>
 8001fc8:	6023      	str	r3, [r4, #0]
 8001fca:	bd38      	pop	{r3, r4, r5, pc}
 8001fcc:	200001e8 	.word	0x200001e8

08001fd0 <__errno>:
 8001fd0:	4b01      	ldr	r3, [pc, #4]	@ (8001fd8 <__errno+0x8>)
 8001fd2:	6818      	ldr	r0, [r3, #0]
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	20000018 	.word	0x20000018

08001fdc <__libc_init_array>:
 8001fdc:	b570      	push	{r4, r5, r6, lr}
 8001fde:	4d0d      	ldr	r5, [pc, #52]	@ (8002014 <__libc_init_array+0x38>)
 8001fe0:	4c0d      	ldr	r4, [pc, #52]	@ (8002018 <__libc_init_array+0x3c>)
 8001fe2:	1b64      	subs	r4, r4, r5
 8001fe4:	10a4      	asrs	r4, r4, #2
 8001fe6:	2600      	movs	r6, #0
 8001fe8:	42a6      	cmp	r6, r4
 8001fea:	d109      	bne.n	8002000 <__libc_init_array+0x24>
 8001fec:	4d0b      	ldr	r5, [pc, #44]	@ (800201c <__libc_init_array+0x40>)
 8001fee:	4c0c      	ldr	r4, [pc, #48]	@ (8002020 <__libc_init_array+0x44>)
 8001ff0:	f000 fd22 	bl	8002a38 <_init>
 8001ff4:	1b64      	subs	r4, r4, r5
 8001ff6:	10a4      	asrs	r4, r4, #2
 8001ff8:	2600      	movs	r6, #0
 8001ffa:	42a6      	cmp	r6, r4
 8001ffc:	d105      	bne.n	800200a <__libc_init_array+0x2e>
 8001ffe:	bd70      	pop	{r4, r5, r6, pc}
 8002000:	f855 3b04 	ldr.w	r3, [r5], #4
 8002004:	4798      	blx	r3
 8002006:	3601      	adds	r6, #1
 8002008:	e7ee      	b.n	8001fe8 <__libc_init_array+0xc>
 800200a:	f855 3b04 	ldr.w	r3, [r5], #4
 800200e:	4798      	blx	r3
 8002010:	3601      	adds	r6, #1
 8002012:	e7f2      	b.n	8001ffa <__libc_init_array+0x1e>
 8002014:	08002bb8 	.word	0x08002bb8
 8002018:	08002bb8 	.word	0x08002bb8
 800201c:	08002bb8 	.word	0x08002bb8
 8002020:	08002bbc 	.word	0x08002bbc

08002024 <__retarget_lock_init_recursive>:
 8002024:	4770      	bx	lr

08002026 <__retarget_lock_acquire_recursive>:
 8002026:	4770      	bx	lr

08002028 <__retarget_lock_release_recursive>:
 8002028:	4770      	bx	lr
	...

0800202c <_free_r>:
 800202c:	b538      	push	{r3, r4, r5, lr}
 800202e:	4605      	mov	r5, r0
 8002030:	2900      	cmp	r1, #0
 8002032:	d041      	beq.n	80020b8 <_free_r+0x8c>
 8002034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002038:	1f0c      	subs	r4, r1, #4
 800203a:	2b00      	cmp	r3, #0
 800203c:	bfb8      	it	lt
 800203e:	18e4      	addlt	r4, r4, r3
 8002040:	f000 f8e0 	bl	8002204 <__malloc_lock>
 8002044:	4a1d      	ldr	r2, [pc, #116]	@ (80020bc <_free_r+0x90>)
 8002046:	6813      	ldr	r3, [r2, #0]
 8002048:	b933      	cbnz	r3, 8002058 <_free_r+0x2c>
 800204a:	6063      	str	r3, [r4, #4]
 800204c:	6014      	str	r4, [r2, #0]
 800204e:	4628      	mov	r0, r5
 8002050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002054:	f000 b8dc 	b.w	8002210 <__malloc_unlock>
 8002058:	42a3      	cmp	r3, r4
 800205a:	d908      	bls.n	800206e <_free_r+0x42>
 800205c:	6820      	ldr	r0, [r4, #0]
 800205e:	1821      	adds	r1, r4, r0
 8002060:	428b      	cmp	r3, r1
 8002062:	bf01      	itttt	eq
 8002064:	6819      	ldreq	r1, [r3, #0]
 8002066:	685b      	ldreq	r3, [r3, #4]
 8002068:	1809      	addeq	r1, r1, r0
 800206a:	6021      	streq	r1, [r4, #0]
 800206c:	e7ed      	b.n	800204a <_free_r+0x1e>
 800206e:	461a      	mov	r2, r3
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	b10b      	cbz	r3, 8002078 <_free_r+0x4c>
 8002074:	42a3      	cmp	r3, r4
 8002076:	d9fa      	bls.n	800206e <_free_r+0x42>
 8002078:	6811      	ldr	r1, [r2, #0]
 800207a:	1850      	adds	r0, r2, r1
 800207c:	42a0      	cmp	r0, r4
 800207e:	d10b      	bne.n	8002098 <_free_r+0x6c>
 8002080:	6820      	ldr	r0, [r4, #0]
 8002082:	4401      	add	r1, r0
 8002084:	1850      	adds	r0, r2, r1
 8002086:	4283      	cmp	r3, r0
 8002088:	6011      	str	r1, [r2, #0]
 800208a:	d1e0      	bne.n	800204e <_free_r+0x22>
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	6053      	str	r3, [r2, #4]
 8002092:	4408      	add	r0, r1
 8002094:	6010      	str	r0, [r2, #0]
 8002096:	e7da      	b.n	800204e <_free_r+0x22>
 8002098:	d902      	bls.n	80020a0 <_free_r+0x74>
 800209a:	230c      	movs	r3, #12
 800209c:	602b      	str	r3, [r5, #0]
 800209e:	e7d6      	b.n	800204e <_free_r+0x22>
 80020a0:	6820      	ldr	r0, [r4, #0]
 80020a2:	1821      	adds	r1, r4, r0
 80020a4:	428b      	cmp	r3, r1
 80020a6:	bf04      	itt	eq
 80020a8:	6819      	ldreq	r1, [r3, #0]
 80020aa:	685b      	ldreq	r3, [r3, #4]
 80020ac:	6063      	str	r3, [r4, #4]
 80020ae:	bf04      	itt	eq
 80020b0:	1809      	addeq	r1, r1, r0
 80020b2:	6021      	streq	r1, [r4, #0]
 80020b4:	6054      	str	r4, [r2, #4]
 80020b6:	e7ca      	b.n	800204e <_free_r+0x22>
 80020b8:	bd38      	pop	{r3, r4, r5, pc}
 80020ba:	bf00      	nop
 80020bc:	200001f4 	.word	0x200001f4

080020c0 <sbrk_aligned>:
 80020c0:	b570      	push	{r4, r5, r6, lr}
 80020c2:	4e0f      	ldr	r6, [pc, #60]	@ (8002100 <sbrk_aligned+0x40>)
 80020c4:	460c      	mov	r4, r1
 80020c6:	6831      	ldr	r1, [r6, #0]
 80020c8:	4605      	mov	r5, r0
 80020ca:	b911      	cbnz	r1, 80020d2 <sbrk_aligned+0x12>
 80020cc:	f000 fca4 	bl	8002a18 <_sbrk_r>
 80020d0:	6030      	str	r0, [r6, #0]
 80020d2:	4621      	mov	r1, r4
 80020d4:	4628      	mov	r0, r5
 80020d6:	f000 fc9f 	bl	8002a18 <_sbrk_r>
 80020da:	1c43      	adds	r3, r0, #1
 80020dc:	d103      	bne.n	80020e6 <sbrk_aligned+0x26>
 80020de:	f04f 34ff 	mov.w	r4, #4294967295
 80020e2:	4620      	mov	r0, r4
 80020e4:	bd70      	pop	{r4, r5, r6, pc}
 80020e6:	1cc4      	adds	r4, r0, #3
 80020e8:	f024 0403 	bic.w	r4, r4, #3
 80020ec:	42a0      	cmp	r0, r4
 80020ee:	d0f8      	beq.n	80020e2 <sbrk_aligned+0x22>
 80020f0:	1a21      	subs	r1, r4, r0
 80020f2:	4628      	mov	r0, r5
 80020f4:	f000 fc90 	bl	8002a18 <_sbrk_r>
 80020f8:	3001      	adds	r0, #1
 80020fa:	d1f2      	bne.n	80020e2 <sbrk_aligned+0x22>
 80020fc:	e7ef      	b.n	80020de <sbrk_aligned+0x1e>
 80020fe:	bf00      	nop
 8002100:	200001f0 	.word	0x200001f0

08002104 <_malloc_r>:
 8002104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002108:	1ccd      	adds	r5, r1, #3
 800210a:	f025 0503 	bic.w	r5, r5, #3
 800210e:	3508      	adds	r5, #8
 8002110:	2d0c      	cmp	r5, #12
 8002112:	bf38      	it	cc
 8002114:	250c      	movcc	r5, #12
 8002116:	2d00      	cmp	r5, #0
 8002118:	4606      	mov	r6, r0
 800211a:	db01      	blt.n	8002120 <_malloc_r+0x1c>
 800211c:	42a9      	cmp	r1, r5
 800211e:	d904      	bls.n	800212a <_malloc_r+0x26>
 8002120:	230c      	movs	r3, #12
 8002122:	6033      	str	r3, [r6, #0]
 8002124:	2000      	movs	r0, #0
 8002126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800212a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002200 <_malloc_r+0xfc>
 800212e:	f000 f869 	bl	8002204 <__malloc_lock>
 8002132:	f8d8 3000 	ldr.w	r3, [r8]
 8002136:	461c      	mov	r4, r3
 8002138:	bb44      	cbnz	r4, 800218c <_malloc_r+0x88>
 800213a:	4629      	mov	r1, r5
 800213c:	4630      	mov	r0, r6
 800213e:	f7ff ffbf 	bl	80020c0 <sbrk_aligned>
 8002142:	1c43      	adds	r3, r0, #1
 8002144:	4604      	mov	r4, r0
 8002146:	d158      	bne.n	80021fa <_malloc_r+0xf6>
 8002148:	f8d8 4000 	ldr.w	r4, [r8]
 800214c:	4627      	mov	r7, r4
 800214e:	2f00      	cmp	r7, #0
 8002150:	d143      	bne.n	80021da <_malloc_r+0xd6>
 8002152:	2c00      	cmp	r4, #0
 8002154:	d04b      	beq.n	80021ee <_malloc_r+0xea>
 8002156:	6823      	ldr	r3, [r4, #0]
 8002158:	4639      	mov	r1, r7
 800215a:	4630      	mov	r0, r6
 800215c:	eb04 0903 	add.w	r9, r4, r3
 8002160:	f000 fc5a 	bl	8002a18 <_sbrk_r>
 8002164:	4581      	cmp	r9, r0
 8002166:	d142      	bne.n	80021ee <_malloc_r+0xea>
 8002168:	6821      	ldr	r1, [r4, #0]
 800216a:	1a6d      	subs	r5, r5, r1
 800216c:	4629      	mov	r1, r5
 800216e:	4630      	mov	r0, r6
 8002170:	f7ff ffa6 	bl	80020c0 <sbrk_aligned>
 8002174:	3001      	adds	r0, #1
 8002176:	d03a      	beq.n	80021ee <_malloc_r+0xea>
 8002178:	6823      	ldr	r3, [r4, #0]
 800217a:	442b      	add	r3, r5
 800217c:	6023      	str	r3, [r4, #0]
 800217e:	f8d8 3000 	ldr.w	r3, [r8]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	bb62      	cbnz	r2, 80021e0 <_malloc_r+0xdc>
 8002186:	f8c8 7000 	str.w	r7, [r8]
 800218a:	e00f      	b.n	80021ac <_malloc_r+0xa8>
 800218c:	6822      	ldr	r2, [r4, #0]
 800218e:	1b52      	subs	r2, r2, r5
 8002190:	d420      	bmi.n	80021d4 <_malloc_r+0xd0>
 8002192:	2a0b      	cmp	r2, #11
 8002194:	d917      	bls.n	80021c6 <_malloc_r+0xc2>
 8002196:	1961      	adds	r1, r4, r5
 8002198:	42a3      	cmp	r3, r4
 800219a:	6025      	str	r5, [r4, #0]
 800219c:	bf18      	it	ne
 800219e:	6059      	strne	r1, [r3, #4]
 80021a0:	6863      	ldr	r3, [r4, #4]
 80021a2:	bf08      	it	eq
 80021a4:	f8c8 1000 	streq.w	r1, [r8]
 80021a8:	5162      	str	r2, [r4, r5]
 80021aa:	604b      	str	r3, [r1, #4]
 80021ac:	4630      	mov	r0, r6
 80021ae:	f000 f82f 	bl	8002210 <__malloc_unlock>
 80021b2:	f104 000b 	add.w	r0, r4, #11
 80021b6:	1d23      	adds	r3, r4, #4
 80021b8:	f020 0007 	bic.w	r0, r0, #7
 80021bc:	1ac2      	subs	r2, r0, r3
 80021be:	bf1c      	itt	ne
 80021c0:	1a1b      	subne	r3, r3, r0
 80021c2:	50a3      	strne	r3, [r4, r2]
 80021c4:	e7af      	b.n	8002126 <_malloc_r+0x22>
 80021c6:	6862      	ldr	r2, [r4, #4]
 80021c8:	42a3      	cmp	r3, r4
 80021ca:	bf0c      	ite	eq
 80021cc:	f8c8 2000 	streq.w	r2, [r8]
 80021d0:	605a      	strne	r2, [r3, #4]
 80021d2:	e7eb      	b.n	80021ac <_malloc_r+0xa8>
 80021d4:	4623      	mov	r3, r4
 80021d6:	6864      	ldr	r4, [r4, #4]
 80021d8:	e7ae      	b.n	8002138 <_malloc_r+0x34>
 80021da:	463c      	mov	r4, r7
 80021dc:	687f      	ldr	r7, [r7, #4]
 80021de:	e7b6      	b.n	800214e <_malloc_r+0x4a>
 80021e0:	461a      	mov	r2, r3
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	42a3      	cmp	r3, r4
 80021e6:	d1fb      	bne.n	80021e0 <_malloc_r+0xdc>
 80021e8:	2300      	movs	r3, #0
 80021ea:	6053      	str	r3, [r2, #4]
 80021ec:	e7de      	b.n	80021ac <_malloc_r+0xa8>
 80021ee:	230c      	movs	r3, #12
 80021f0:	6033      	str	r3, [r6, #0]
 80021f2:	4630      	mov	r0, r6
 80021f4:	f000 f80c 	bl	8002210 <__malloc_unlock>
 80021f8:	e794      	b.n	8002124 <_malloc_r+0x20>
 80021fa:	6005      	str	r5, [r0, #0]
 80021fc:	e7d6      	b.n	80021ac <_malloc_r+0xa8>
 80021fe:	bf00      	nop
 8002200:	200001f4 	.word	0x200001f4

08002204 <__malloc_lock>:
 8002204:	4801      	ldr	r0, [pc, #4]	@ (800220c <__malloc_lock+0x8>)
 8002206:	f7ff bf0e 	b.w	8002026 <__retarget_lock_acquire_recursive>
 800220a:	bf00      	nop
 800220c:	200001ec 	.word	0x200001ec

08002210 <__malloc_unlock>:
 8002210:	4801      	ldr	r0, [pc, #4]	@ (8002218 <__malloc_unlock+0x8>)
 8002212:	f7ff bf09 	b.w	8002028 <__retarget_lock_release_recursive>
 8002216:	bf00      	nop
 8002218:	200001ec 	.word	0x200001ec

0800221c <__sfputc_r>:
 800221c:	6893      	ldr	r3, [r2, #8]
 800221e:	3b01      	subs	r3, #1
 8002220:	2b00      	cmp	r3, #0
 8002222:	b410      	push	{r4}
 8002224:	6093      	str	r3, [r2, #8]
 8002226:	da08      	bge.n	800223a <__sfputc_r+0x1e>
 8002228:	6994      	ldr	r4, [r2, #24]
 800222a:	42a3      	cmp	r3, r4
 800222c:	db01      	blt.n	8002232 <__sfputc_r+0x16>
 800222e:	290a      	cmp	r1, #10
 8002230:	d103      	bne.n	800223a <__sfputc_r+0x1e>
 8002232:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002236:	f7ff bde8 	b.w	8001e0a <__swbuf_r>
 800223a:	6813      	ldr	r3, [r2, #0]
 800223c:	1c58      	adds	r0, r3, #1
 800223e:	6010      	str	r0, [r2, #0]
 8002240:	7019      	strb	r1, [r3, #0]
 8002242:	4608      	mov	r0, r1
 8002244:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002248:	4770      	bx	lr

0800224a <__sfputs_r>:
 800224a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800224c:	4606      	mov	r6, r0
 800224e:	460f      	mov	r7, r1
 8002250:	4614      	mov	r4, r2
 8002252:	18d5      	adds	r5, r2, r3
 8002254:	42ac      	cmp	r4, r5
 8002256:	d101      	bne.n	800225c <__sfputs_r+0x12>
 8002258:	2000      	movs	r0, #0
 800225a:	e007      	b.n	800226c <__sfputs_r+0x22>
 800225c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002260:	463a      	mov	r2, r7
 8002262:	4630      	mov	r0, r6
 8002264:	f7ff ffda 	bl	800221c <__sfputc_r>
 8002268:	1c43      	adds	r3, r0, #1
 800226a:	d1f3      	bne.n	8002254 <__sfputs_r+0xa>
 800226c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002270 <_vfiprintf_r>:
 8002270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002274:	460d      	mov	r5, r1
 8002276:	b09d      	sub	sp, #116	@ 0x74
 8002278:	4614      	mov	r4, r2
 800227a:	4698      	mov	r8, r3
 800227c:	4606      	mov	r6, r0
 800227e:	b118      	cbz	r0, 8002288 <_vfiprintf_r+0x18>
 8002280:	6a03      	ldr	r3, [r0, #32]
 8002282:	b90b      	cbnz	r3, 8002288 <_vfiprintf_r+0x18>
 8002284:	f7ff fcd8 	bl	8001c38 <__sinit>
 8002288:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800228a:	07d9      	lsls	r1, r3, #31
 800228c:	d405      	bmi.n	800229a <_vfiprintf_r+0x2a>
 800228e:	89ab      	ldrh	r3, [r5, #12]
 8002290:	059a      	lsls	r2, r3, #22
 8002292:	d402      	bmi.n	800229a <_vfiprintf_r+0x2a>
 8002294:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002296:	f7ff fec6 	bl	8002026 <__retarget_lock_acquire_recursive>
 800229a:	89ab      	ldrh	r3, [r5, #12]
 800229c:	071b      	lsls	r3, r3, #28
 800229e:	d501      	bpl.n	80022a4 <_vfiprintf_r+0x34>
 80022a0:	692b      	ldr	r3, [r5, #16]
 80022a2:	b99b      	cbnz	r3, 80022cc <_vfiprintf_r+0x5c>
 80022a4:	4629      	mov	r1, r5
 80022a6:	4630      	mov	r0, r6
 80022a8:	f7ff fdee 	bl	8001e88 <__swsetup_r>
 80022ac:	b170      	cbz	r0, 80022cc <_vfiprintf_r+0x5c>
 80022ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80022b0:	07dc      	lsls	r4, r3, #31
 80022b2:	d504      	bpl.n	80022be <_vfiprintf_r+0x4e>
 80022b4:	f04f 30ff 	mov.w	r0, #4294967295
 80022b8:	b01d      	add	sp, #116	@ 0x74
 80022ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022be:	89ab      	ldrh	r3, [r5, #12]
 80022c0:	0598      	lsls	r0, r3, #22
 80022c2:	d4f7      	bmi.n	80022b4 <_vfiprintf_r+0x44>
 80022c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80022c6:	f7ff feaf 	bl	8002028 <__retarget_lock_release_recursive>
 80022ca:	e7f3      	b.n	80022b4 <_vfiprintf_r+0x44>
 80022cc:	2300      	movs	r3, #0
 80022ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80022d0:	2320      	movs	r3, #32
 80022d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80022d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80022da:	2330      	movs	r3, #48	@ 0x30
 80022dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800248c <_vfiprintf_r+0x21c>
 80022e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80022e4:	f04f 0901 	mov.w	r9, #1
 80022e8:	4623      	mov	r3, r4
 80022ea:	469a      	mov	sl, r3
 80022ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80022f0:	b10a      	cbz	r2, 80022f6 <_vfiprintf_r+0x86>
 80022f2:	2a25      	cmp	r2, #37	@ 0x25
 80022f4:	d1f9      	bne.n	80022ea <_vfiprintf_r+0x7a>
 80022f6:	ebba 0b04 	subs.w	fp, sl, r4
 80022fa:	d00b      	beq.n	8002314 <_vfiprintf_r+0xa4>
 80022fc:	465b      	mov	r3, fp
 80022fe:	4622      	mov	r2, r4
 8002300:	4629      	mov	r1, r5
 8002302:	4630      	mov	r0, r6
 8002304:	f7ff ffa1 	bl	800224a <__sfputs_r>
 8002308:	3001      	adds	r0, #1
 800230a:	f000 80a7 	beq.w	800245c <_vfiprintf_r+0x1ec>
 800230e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002310:	445a      	add	r2, fp
 8002312:	9209      	str	r2, [sp, #36]	@ 0x24
 8002314:	f89a 3000 	ldrb.w	r3, [sl]
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 809f 	beq.w	800245c <_vfiprintf_r+0x1ec>
 800231e:	2300      	movs	r3, #0
 8002320:	f04f 32ff 	mov.w	r2, #4294967295
 8002324:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002328:	f10a 0a01 	add.w	sl, sl, #1
 800232c:	9304      	str	r3, [sp, #16]
 800232e:	9307      	str	r3, [sp, #28]
 8002330:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002334:	931a      	str	r3, [sp, #104]	@ 0x68
 8002336:	4654      	mov	r4, sl
 8002338:	2205      	movs	r2, #5
 800233a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800233e:	4853      	ldr	r0, [pc, #332]	@ (800248c <_vfiprintf_r+0x21c>)
 8002340:	f7fd ff4e 	bl	80001e0 <memchr>
 8002344:	9a04      	ldr	r2, [sp, #16]
 8002346:	b9d8      	cbnz	r0, 8002380 <_vfiprintf_r+0x110>
 8002348:	06d1      	lsls	r1, r2, #27
 800234a:	bf44      	itt	mi
 800234c:	2320      	movmi	r3, #32
 800234e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002352:	0713      	lsls	r3, r2, #28
 8002354:	bf44      	itt	mi
 8002356:	232b      	movmi	r3, #43	@ 0x2b
 8002358:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800235c:	f89a 3000 	ldrb.w	r3, [sl]
 8002360:	2b2a      	cmp	r3, #42	@ 0x2a
 8002362:	d015      	beq.n	8002390 <_vfiprintf_r+0x120>
 8002364:	9a07      	ldr	r2, [sp, #28]
 8002366:	4654      	mov	r4, sl
 8002368:	2000      	movs	r0, #0
 800236a:	f04f 0c0a 	mov.w	ip, #10
 800236e:	4621      	mov	r1, r4
 8002370:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002374:	3b30      	subs	r3, #48	@ 0x30
 8002376:	2b09      	cmp	r3, #9
 8002378:	d94b      	bls.n	8002412 <_vfiprintf_r+0x1a2>
 800237a:	b1b0      	cbz	r0, 80023aa <_vfiprintf_r+0x13a>
 800237c:	9207      	str	r2, [sp, #28]
 800237e:	e014      	b.n	80023aa <_vfiprintf_r+0x13a>
 8002380:	eba0 0308 	sub.w	r3, r0, r8
 8002384:	fa09 f303 	lsl.w	r3, r9, r3
 8002388:	4313      	orrs	r3, r2
 800238a:	9304      	str	r3, [sp, #16]
 800238c:	46a2      	mov	sl, r4
 800238e:	e7d2      	b.n	8002336 <_vfiprintf_r+0xc6>
 8002390:	9b03      	ldr	r3, [sp, #12]
 8002392:	1d19      	adds	r1, r3, #4
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	9103      	str	r1, [sp, #12]
 8002398:	2b00      	cmp	r3, #0
 800239a:	bfbb      	ittet	lt
 800239c:	425b      	neglt	r3, r3
 800239e:	f042 0202 	orrlt.w	r2, r2, #2
 80023a2:	9307      	strge	r3, [sp, #28]
 80023a4:	9307      	strlt	r3, [sp, #28]
 80023a6:	bfb8      	it	lt
 80023a8:	9204      	strlt	r2, [sp, #16]
 80023aa:	7823      	ldrb	r3, [r4, #0]
 80023ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80023ae:	d10a      	bne.n	80023c6 <_vfiprintf_r+0x156>
 80023b0:	7863      	ldrb	r3, [r4, #1]
 80023b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80023b4:	d132      	bne.n	800241c <_vfiprintf_r+0x1ac>
 80023b6:	9b03      	ldr	r3, [sp, #12]
 80023b8:	1d1a      	adds	r2, r3, #4
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	9203      	str	r2, [sp, #12]
 80023be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80023c2:	3402      	adds	r4, #2
 80023c4:	9305      	str	r3, [sp, #20]
 80023c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800249c <_vfiprintf_r+0x22c>
 80023ca:	7821      	ldrb	r1, [r4, #0]
 80023cc:	2203      	movs	r2, #3
 80023ce:	4650      	mov	r0, sl
 80023d0:	f7fd ff06 	bl	80001e0 <memchr>
 80023d4:	b138      	cbz	r0, 80023e6 <_vfiprintf_r+0x176>
 80023d6:	9b04      	ldr	r3, [sp, #16]
 80023d8:	eba0 000a 	sub.w	r0, r0, sl
 80023dc:	2240      	movs	r2, #64	@ 0x40
 80023de:	4082      	lsls	r2, r0
 80023e0:	4313      	orrs	r3, r2
 80023e2:	3401      	adds	r4, #1
 80023e4:	9304      	str	r3, [sp, #16]
 80023e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023ea:	4829      	ldr	r0, [pc, #164]	@ (8002490 <_vfiprintf_r+0x220>)
 80023ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80023f0:	2206      	movs	r2, #6
 80023f2:	f7fd fef5 	bl	80001e0 <memchr>
 80023f6:	2800      	cmp	r0, #0
 80023f8:	d03f      	beq.n	800247a <_vfiprintf_r+0x20a>
 80023fa:	4b26      	ldr	r3, [pc, #152]	@ (8002494 <_vfiprintf_r+0x224>)
 80023fc:	bb1b      	cbnz	r3, 8002446 <_vfiprintf_r+0x1d6>
 80023fe:	9b03      	ldr	r3, [sp, #12]
 8002400:	3307      	adds	r3, #7
 8002402:	f023 0307 	bic.w	r3, r3, #7
 8002406:	3308      	adds	r3, #8
 8002408:	9303      	str	r3, [sp, #12]
 800240a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800240c:	443b      	add	r3, r7
 800240e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002410:	e76a      	b.n	80022e8 <_vfiprintf_r+0x78>
 8002412:	fb0c 3202 	mla	r2, ip, r2, r3
 8002416:	460c      	mov	r4, r1
 8002418:	2001      	movs	r0, #1
 800241a:	e7a8      	b.n	800236e <_vfiprintf_r+0xfe>
 800241c:	2300      	movs	r3, #0
 800241e:	3401      	adds	r4, #1
 8002420:	9305      	str	r3, [sp, #20]
 8002422:	4619      	mov	r1, r3
 8002424:	f04f 0c0a 	mov.w	ip, #10
 8002428:	4620      	mov	r0, r4
 800242a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800242e:	3a30      	subs	r2, #48	@ 0x30
 8002430:	2a09      	cmp	r2, #9
 8002432:	d903      	bls.n	800243c <_vfiprintf_r+0x1cc>
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0c6      	beq.n	80023c6 <_vfiprintf_r+0x156>
 8002438:	9105      	str	r1, [sp, #20]
 800243a:	e7c4      	b.n	80023c6 <_vfiprintf_r+0x156>
 800243c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002440:	4604      	mov	r4, r0
 8002442:	2301      	movs	r3, #1
 8002444:	e7f0      	b.n	8002428 <_vfiprintf_r+0x1b8>
 8002446:	ab03      	add	r3, sp, #12
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	462a      	mov	r2, r5
 800244c:	4b12      	ldr	r3, [pc, #72]	@ (8002498 <_vfiprintf_r+0x228>)
 800244e:	a904      	add	r1, sp, #16
 8002450:	4630      	mov	r0, r6
 8002452:	f3af 8000 	nop.w
 8002456:	4607      	mov	r7, r0
 8002458:	1c78      	adds	r0, r7, #1
 800245a:	d1d6      	bne.n	800240a <_vfiprintf_r+0x19a>
 800245c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800245e:	07d9      	lsls	r1, r3, #31
 8002460:	d405      	bmi.n	800246e <_vfiprintf_r+0x1fe>
 8002462:	89ab      	ldrh	r3, [r5, #12]
 8002464:	059a      	lsls	r2, r3, #22
 8002466:	d402      	bmi.n	800246e <_vfiprintf_r+0x1fe>
 8002468:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800246a:	f7ff fddd 	bl	8002028 <__retarget_lock_release_recursive>
 800246e:	89ab      	ldrh	r3, [r5, #12]
 8002470:	065b      	lsls	r3, r3, #25
 8002472:	f53f af1f 	bmi.w	80022b4 <_vfiprintf_r+0x44>
 8002476:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002478:	e71e      	b.n	80022b8 <_vfiprintf_r+0x48>
 800247a:	ab03      	add	r3, sp, #12
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	462a      	mov	r2, r5
 8002480:	4b05      	ldr	r3, [pc, #20]	@ (8002498 <_vfiprintf_r+0x228>)
 8002482:	a904      	add	r1, sp, #16
 8002484:	4630      	mov	r0, r6
 8002486:	f000 f879 	bl	800257c <_printf_i>
 800248a:	e7e4      	b.n	8002456 <_vfiprintf_r+0x1e6>
 800248c:	08002b7a 	.word	0x08002b7a
 8002490:	08002b84 	.word	0x08002b84
 8002494:	00000000 	.word	0x00000000
 8002498:	0800224b 	.word	0x0800224b
 800249c:	08002b80 	.word	0x08002b80

080024a0 <_printf_common>:
 80024a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024a4:	4616      	mov	r6, r2
 80024a6:	4698      	mov	r8, r3
 80024a8:	688a      	ldr	r2, [r1, #8]
 80024aa:	690b      	ldr	r3, [r1, #16]
 80024ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80024b0:	4293      	cmp	r3, r2
 80024b2:	bfb8      	it	lt
 80024b4:	4613      	movlt	r3, r2
 80024b6:	6033      	str	r3, [r6, #0]
 80024b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80024bc:	4607      	mov	r7, r0
 80024be:	460c      	mov	r4, r1
 80024c0:	b10a      	cbz	r2, 80024c6 <_printf_common+0x26>
 80024c2:	3301      	adds	r3, #1
 80024c4:	6033      	str	r3, [r6, #0]
 80024c6:	6823      	ldr	r3, [r4, #0]
 80024c8:	0699      	lsls	r1, r3, #26
 80024ca:	bf42      	ittt	mi
 80024cc:	6833      	ldrmi	r3, [r6, #0]
 80024ce:	3302      	addmi	r3, #2
 80024d0:	6033      	strmi	r3, [r6, #0]
 80024d2:	6825      	ldr	r5, [r4, #0]
 80024d4:	f015 0506 	ands.w	r5, r5, #6
 80024d8:	d106      	bne.n	80024e8 <_printf_common+0x48>
 80024da:	f104 0a19 	add.w	sl, r4, #25
 80024de:	68e3      	ldr	r3, [r4, #12]
 80024e0:	6832      	ldr	r2, [r6, #0]
 80024e2:	1a9b      	subs	r3, r3, r2
 80024e4:	42ab      	cmp	r3, r5
 80024e6:	dc26      	bgt.n	8002536 <_printf_common+0x96>
 80024e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80024ec:	6822      	ldr	r2, [r4, #0]
 80024ee:	3b00      	subs	r3, #0
 80024f0:	bf18      	it	ne
 80024f2:	2301      	movne	r3, #1
 80024f4:	0692      	lsls	r2, r2, #26
 80024f6:	d42b      	bmi.n	8002550 <_printf_common+0xb0>
 80024f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80024fc:	4641      	mov	r1, r8
 80024fe:	4638      	mov	r0, r7
 8002500:	47c8      	blx	r9
 8002502:	3001      	adds	r0, #1
 8002504:	d01e      	beq.n	8002544 <_printf_common+0xa4>
 8002506:	6823      	ldr	r3, [r4, #0]
 8002508:	6922      	ldr	r2, [r4, #16]
 800250a:	f003 0306 	and.w	r3, r3, #6
 800250e:	2b04      	cmp	r3, #4
 8002510:	bf02      	ittt	eq
 8002512:	68e5      	ldreq	r5, [r4, #12]
 8002514:	6833      	ldreq	r3, [r6, #0]
 8002516:	1aed      	subeq	r5, r5, r3
 8002518:	68a3      	ldr	r3, [r4, #8]
 800251a:	bf0c      	ite	eq
 800251c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002520:	2500      	movne	r5, #0
 8002522:	4293      	cmp	r3, r2
 8002524:	bfc4      	itt	gt
 8002526:	1a9b      	subgt	r3, r3, r2
 8002528:	18ed      	addgt	r5, r5, r3
 800252a:	2600      	movs	r6, #0
 800252c:	341a      	adds	r4, #26
 800252e:	42b5      	cmp	r5, r6
 8002530:	d11a      	bne.n	8002568 <_printf_common+0xc8>
 8002532:	2000      	movs	r0, #0
 8002534:	e008      	b.n	8002548 <_printf_common+0xa8>
 8002536:	2301      	movs	r3, #1
 8002538:	4652      	mov	r2, sl
 800253a:	4641      	mov	r1, r8
 800253c:	4638      	mov	r0, r7
 800253e:	47c8      	blx	r9
 8002540:	3001      	adds	r0, #1
 8002542:	d103      	bne.n	800254c <_printf_common+0xac>
 8002544:	f04f 30ff 	mov.w	r0, #4294967295
 8002548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800254c:	3501      	adds	r5, #1
 800254e:	e7c6      	b.n	80024de <_printf_common+0x3e>
 8002550:	18e1      	adds	r1, r4, r3
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	2030      	movs	r0, #48	@ 0x30
 8002556:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800255a:	4422      	add	r2, r4
 800255c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002560:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002564:	3302      	adds	r3, #2
 8002566:	e7c7      	b.n	80024f8 <_printf_common+0x58>
 8002568:	2301      	movs	r3, #1
 800256a:	4622      	mov	r2, r4
 800256c:	4641      	mov	r1, r8
 800256e:	4638      	mov	r0, r7
 8002570:	47c8      	blx	r9
 8002572:	3001      	adds	r0, #1
 8002574:	d0e6      	beq.n	8002544 <_printf_common+0xa4>
 8002576:	3601      	adds	r6, #1
 8002578:	e7d9      	b.n	800252e <_printf_common+0x8e>
	...

0800257c <_printf_i>:
 800257c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002580:	7e0f      	ldrb	r7, [r1, #24]
 8002582:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002584:	2f78      	cmp	r7, #120	@ 0x78
 8002586:	4691      	mov	r9, r2
 8002588:	4680      	mov	r8, r0
 800258a:	460c      	mov	r4, r1
 800258c:	469a      	mov	sl, r3
 800258e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002592:	d807      	bhi.n	80025a4 <_printf_i+0x28>
 8002594:	2f62      	cmp	r7, #98	@ 0x62
 8002596:	d80a      	bhi.n	80025ae <_printf_i+0x32>
 8002598:	2f00      	cmp	r7, #0
 800259a:	f000 80d1 	beq.w	8002740 <_printf_i+0x1c4>
 800259e:	2f58      	cmp	r7, #88	@ 0x58
 80025a0:	f000 80b8 	beq.w	8002714 <_printf_i+0x198>
 80025a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80025a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80025ac:	e03a      	b.n	8002624 <_printf_i+0xa8>
 80025ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80025b2:	2b15      	cmp	r3, #21
 80025b4:	d8f6      	bhi.n	80025a4 <_printf_i+0x28>
 80025b6:	a101      	add	r1, pc, #4	@ (adr r1, 80025bc <_printf_i+0x40>)
 80025b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80025bc:	08002615 	.word	0x08002615
 80025c0:	08002629 	.word	0x08002629
 80025c4:	080025a5 	.word	0x080025a5
 80025c8:	080025a5 	.word	0x080025a5
 80025cc:	080025a5 	.word	0x080025a5
 80025d0:	080025a5 	.word	0x080025a5
 80025d4:	08002629 	.word	0x08002629
 80025d8:	080025a5 	.word	0x080025a5
 80025dc:	080025a5 	.word	0x080025a5
 80025e0:	080025a5 	.word	0x080025a5
 80025e4:	080025a5 	.word	0x080025a5
 80025e8:	08002727 	.word	0x08002727
 80025ec:	08002653 	.word	0x08002653
 80025f0:	080026e1 	.word	0x080026e1
 80025f4:	080025a5 	.word	0x080025a5
 80025f8:	080025a5 	.word	0x080025a5
 80025fc:	08002749 	.word	0x08002749
 8002600:	080025a5 	.word	0x080025a5
 8002604:	08002653 	.word	0x08002653
 8002608:	080025a5 	.word	0x080025a5
 800260c:	080025a5 	.word	0x080025a5
 8002610:	080026e9 	.word	0x080026e9
 8002614:	6833      	ldr	r3, [r6, #0]
 8002616:	1d1a      	adds	r2, r3, #4
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6032      	str	r2, [r6, #0]
 800261c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002620:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002624:	2301      	movs	r3, #1
 8002626:	e09c      	b.n	8002762 <_printf_i+0x1e6>
 8002628:	6833      	ldr	r3, [r6, #0]
 800262a:	6820      	ldr	r0, [r4, #0]
 800262c:	1d19      	adds	r1, r3, #4
 800262e:	6031      	str	r1, [r6, #0]
 8002630:	0606      	lsls	r6, r0, #24
 8002632:	d501      	bpl.n	8002638 <_printf_i+0xbc>
 8002634:	681d      	ldr	r5, [r3, #0]
 8002636:	e003      	b.n	8002640 <_printf_i+0xc4>
 8002638:	0645      	lsls	r5, r0, #25
 800263a:	d5fb      	bpl.n	8002634 <_printf_i+0xb8>
 800263c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002640:	2d00      	cmp	r5, #0
 8002642:	da03      	bge.n	800264c <_printf_i+0xd0>
 8002644:	232d      	movs	r3, #45	@ 0x2d
 8002646:	426d      	negs	r5, r5
 8002648:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800264c:	4858      	ldr	r0, [pc, #352]	@ (80027b0 <_printf_i+0x234>)
 800264e:	230a      	movs	r3, #10
 8002650:	e011      	b.n	8002676 <_printf_i+0xfa>
 8002652:	6821      	ldr	r1, [r4, #0]
 8002654:	6833      	ldr	r3, [r6, #0]
 8002656:	0608      	lsls	r0, r1, #24
 8002658:	f853 5b04 	ldr.w	r5, [r3], #4
 800265c:	d402      	bmi.n	8002664 <_printf_i+0xe8>
 800265e:	0649      	lsls	r1, r1, #25
 8002660:	bf48      	it	mi
 8002662:	b2ad      	uxthmi	r5, r5
 8002664:	2f6f      	cmp	r7, #111	@ 0x6f
 8002666:	4852      	ldr	r0, [pc, #328]	@ (80027b0 <_printf_i+0x234>)
 8002668:	6033      	str	r3, [r6, #0]
 800266a:	bf14      	ite	ne
 800266c:	230a      	movne	r3, #10
 800266e:	2308      	moveq	r3, #8
 8002670:	2100      	movs	r1, #0
 8002672:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002676:	6866      	ldr	r6, [r4, #4]
 8002678:	60a6      	str	r6, [r4, #8]
 800267a:	2e00      	cmp	r6, #0
 800267c:	db05      	blt.n	800268a <_printf_i+0x10e>
 800267e:	6821      	ldr	r1, [r4, #0]
 8002680:	432e      	orrs	r6, r5
 8002682:	f021 0104 	bic.w	r1, r1, #4
 8002686:	6021      	str	r1, [r4, #0]
 8002688:	d04b      	beq.n	8002722 <_printf_i+0x1a6>
 800268a:	4616      	mov	r6, r2
 800268c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002690:	fb03 5711 	mls	r7, r3, r1, r5
 8002694:	5dc7      	ldrb	r7, [r0, r7]
 8002696:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800269a:	462f      	mov	r7, r5
 800269c:	42bb      	cmp	r3, r7
 800269e:	460d      	mov	r5, r1
 80026a0:	d9f4      	bls.n	800268c <_printf_i+0x110>
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d10b      	bne.n	80026be <_printf_i+0x142>
 80026a6:	6823      	ldr	r3, [r4, #0]
 80026a8:	07df      	lsls	r7, r3, #31
 80026aa:	d508      	bpl.n	80026be <_printf_i+0x142>
 80026ac:	6923      	ldr	r3, [r4, #16]
 80026ae:	6861      	ldr	r1, [r4, #4]
 80026b0:	4299      	cmp	r1, r3
 80026b2:	bfde      	ittt	le
 80026b4:	2330      	movle	r3, #48	@ 0x30
 80026b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80026ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 80026be:	1b92      	subs	r2, r2, r6
 80026c0:	6122      	str	r2, [r4, #16]
 80026c2:	f8cd a000 	str.w	sl, [sp]
 80026c6:	464b      	mov	r3, r9
 80026c8:	aa03      	add	r2, sp, #12
 80026ca:	4621      	mov	r1, r4
 80026cc:	4640      	mov	r0, r8
 80026ce:	f7ff fee7 	bl	80024a0 <_printf_common>
 80026d2:	3001      	adds	r0, #1
 80026d4:	d14a      	bne.n	800276c <_printf_i+0x1f0>
 80026d6:	f04f 30ff 	mov.w	r0, #4294967295
 80026da:	b004      	add	sp, #16
 80026dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026e0:	6823      	ldr	r3, [r4, #0]
 80026e2:	f043 0320 	orr.w	r3, r3, #32
 80026e6:	6023      	str	r3, [r4, #0]
 80026e8:	4832      	ldr	r0, [pc, #200]	@ (80027b4 <_printf_i+0x238>)
 80026ea:	2778      	movs	r7, #120	@ 0x78
 80026ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80026f0:	6823      	ldr	r3, [r4, #0]
 80026f2:	6831      	ldr	r1, [r6, #0]
 80026f4:	061f      	lsls	r7, r3, #24
 80026f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80026fa:	d402      	bmi.n	8002702 <_printf_i+0x186>
 80026fc:	065f      	lsls	r7, r3, #25
 80026fe:	bf48      	it	mi
 8002700:	b2ad      	uxthmi	r5, r5
 8002702:	6031      	str	r1, [r6, #0]
 8002704:	07d9      	lsls	r1, r3, #31
 8002706:	bf44      	itt	mi
 8002708:	f043 0320 	orrmi.w	r3, r3, #32
 800270c:	6023      	strmi	r3, [r4, #0]
 800270e:	b11d      	cbz	r5, 8002718 <_printf_i+0x19c>
 8002710:	2310      	movs	r3, #16
 8002712:	e7ad      	b.n	8002670 <_printf_i+0xf4>
 8002714:	4826      	ldr	r0, [pc, #152]	@ (80027b0 <_printf_i+0x234>)
 8002716:	e7e9      	b.n	80026ec <_printf_i+0x170>
 8002718:	6823      	ldr	r3, [r4, #0]
 800271a:	f023 0320 	bic.w	r3, r3, #32
 800271e:	6023      	str	r3, [r4, #0]
 8002720:	e7f6      	b.n	8002710 <_printf_i+0x194>
 8002722:	4616      	mov	r6, r2
 8002724:	e7bd      	b.n	80026a2 <_printf_i+0x126>
 8002726:	6833      	ldr	r3, [r6, #0]
 8002728:	6825      	ldr	r5, [r4, #0]
 800272a:	6961      	ldr	r1, [r4, #20]
 800272c:	1d18      	adds	r0, r3, #4
 800272e:	6030      	str	r0, [r6, #0]
 8002730:	062e      	lsls	r6, r5, #24
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	d501      	bpl.n	800273a <_printf_i+0x1be>
 8002736:	6019      	str	r1, [r3, #0]
 8002738:	e002      	b.n	8002740 <_printf_i+0x1c4>
 800273a:	0668      	lsls	r0, r5, #25
 800273c:	d5fb      	bpl.n	8002736 <_printf_i+0x1ba>
 800273e:	8019      	strh	r1, [r3, #0]
 8002740:	2300      	movs	r3, #0
 8002742:	6123      	str	r3, [r4, #16]
 8002744:	4616      	mov	r6, r2
 8002746:	e7bc      	b.n	80026c2 <_printf_i+0x146>
 8002748:	6833      	ldr	r3, [r6, #0]
 800274a:	1d1a      	adds	r2, r3, #4
 800274c:	6032      	str	r2, [r6, #0]
 800274e:	681e      	ldr	r6, [r3, #0]
 8002750:	6862      	ldr	r2, [r4, #4]
 8002752:	2100      	movs	r1, #0
 8002754:	4630      	mov	r0, r6
 8002756:	f7fd fd43 	bl	80001e0 <memchr>
 800275a:	b108      	cbz	r0, 8002760 <_printf_i+0x1e4>
 800275c:	1b80      	subs	r0, r0, r6
 800275e:	6060      	str	r0, [r4, #4]
 8002760:	6863      	ldr	r3, [r4, #4]
 8002762:	6123      	str	r3, [r4, #16]
 8002764:	2300      	movs	r3, #0
 8002766:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800276a:	e7aa      	b.n	80026c2 <_printf_i+0x146>
 800276c:	6923      	ldr	r3, [r4, #16]
 800276e:	4632      	mov	r2, r6
 8002770:	4649      	mov	r1, r9
 8002772:	4640      	mov	r0, r8
 8002774:	47d0      	blx	sl
 8002776:	3001      	adds	r0, #1
 8002778:	d0ad      	beq.n	80026d6 <_printf_i+0x15a>
 800277a:	6823      	ldr	r3, [r4, #0]
 800277c:	079b      	lsls	r3, r3, #30
 800277e:	d413      	bmi.n	80027a8 <_printf_i+0x22c>
 8002780:	68e0      	ldr	r0, [r4, #12]
 8002782:	9b03      	ldr	r3, [sp, #12]
 8002784:	4298      	cmp	r0, r3
 8002786:	bfb8      	it	lt
 8002788:	4618      	movlt	r0, r3
 800278a:	e7a6      	b.n	80026da <_printf_i+0x15e>
 800278c:	2301      	movs	r3, #1
 800278e:	4632      	mov	r2, r6
 8002790:	4649      	mov	r1, r9
 8002792:	4640      	mov	r0, r8
 8002794:	47d0      	blx	sl
 8002796:	3001      	adds	r0, #1
 8002798:	d09d      	beq.n	80026d6 <_printf_i+0x15a>
 800279a:	3501      	adds	r5, #1
 800279c:	68e3      	ldr	r3, [r4, #12]
 800279e:	9903      	ldr	r1, [sp, #12]
 80027a0:	1a5b      	subs	r3, r3, r1
 80027a2:	42ab      	cmp	r3, r5
 80027a4:	dcf2      	bgt.n	800278c <_printf_i+0x210>
 80027a6:	e7eb      	b.n	8002780 <_printf_i+0x204>
 80027a8:	2500      	movs	r5, #0
 80027aa:	f104 0619 	add.w	r6, r4, #25
 80027ae:	e7f5      	b.n	800279c <_printf_i+0x220>
 80027b0:	08002b8b 	.word	0x08002b8b
 80027b4:	08002b9c 	.word	0x08002b9c

080027b8 <__sflush_r>:
 80027b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80027bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027c0:	0716      	lsls	r6, r2, #28
 80027c2:	4605      	mov	r5, r0
 80027c4:	460c      	mov	r4, r1
 80027c6:	d454      	bmi.n	8002872 <__sflush_r+0xba>
 80027c8:	684b      	ldr	r3, [r1, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	dc02      	bgt.n	80027d4 <__sflush_r+0x1c>
 80027ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	dd48      	ble.n	8002866 <__sflush_r+0xae>
 80027d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80027d6:	2e00      	cmp	r6, #0
 80027d8:	d045      	beq.n	8002866 <__sflush_r+0xae>
 80027da:	2300      	movs	r3, #0
 80027dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80027e0:	682f      	ldr	r7, [r5, #0]
 80027e2:	6a21      	ldr	r1, [r4, #32]
 80027e4:	602b      	str	r3, [r5, #0]
 80027e6:	d030      	beq.n	800284a <__sflush_r+0x92>
 80027e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80027ea:	89a3      	ldrh	r3, [r4, #12]
 80027ec:	0759      	lsls	r1, r3, #29
 80027ee:	d505      	bpl.n	80027fc <__sflush_r+0x44>
 80027f0:	6863      	ldr	r3, [r4, #4]
 80027f2:	1ad2      	subs	r2, r2, r3
 80027f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80027f6:	b10b      	cbz	r3, 80027fc <__sflush_r+0x44>
 80027f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80027fa:	1ad2      	subs	r2, r2, r3
 80027fc:	2300      	movs	r3, #0
 80027fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002800:	6a21      	ldr	r1, [r4, #32]
 8002802:	4628      	mov	r0, r5
 8002804:	47b0      	blx	r6
 8002806:	1c43      	adds	r3, r0, #1
 8002808:	89a3      	ldrh	r3, [r4, #12]
 800280a:	d106      	bne.n	800281a <__sflush_r+0x62>
 800280c:	6829      	ldr	r1, [r5, #0]
 800280e:	291d      	cmp	r1, #29
 8002810:	d82b      	bhi.n	800286a <__sflush_r+0xb2>
 8002812:	4a2a      	ldr	r2, [pc, #168]	@ (80028bc <__sflush_r+0x104>)
 8002814:	40ca      	lsrs	r2, r1
 8002816:	07d6      	lsls	r6, r2, #31
 8002818:	d527      	bpl.n	800286a <__sflush_r+0xb2>
 800281a:	2200      	movs	r2, #0
 800281c:	6062      	str	r2, [r4, #4]
 800281e:	04d9      	lsls	r1, r3, #19
 8002820:	6922      	ldr	r2, [r4, #16]
 8002822:	6022      	str	r2, [r4, #0]
 8002824:	d504      	bpl.n	8002830 <__sflush_r+0x78>
 8002826:	1c42      	adds	r2, r0, #1
 8002828:	d101      	bne.n	800282e <__sflush_r+0x76>
 800282a:	682b      	ldr	r3, [r5, #0]
 800282c:	b903      	cbnz	r3, 8002830 <__sflush_r+0x78>
 800282e:	6560      	str	r0, [r4, #84]	@ 0x54
 8002830:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002832:	602f      	str	r7, [r5, #0]
 8002834:	b1b9      	cbz	r1, 8002866 <__sflush_r+0xae>
 8002836:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800283a:	4299      	cmp	r1, r3
 800283c:	d002      	beq.n	8002844 <__sflush_r+0x8c>
 800283e:	4628      	mov	r0, r5
 8002840:	f7ff fbf4 	bl	800202c <_free_r>
 8002844:	2300      	movs	r3, #0
 8002846:	6363      	str	r3, [r4, #52]	@ 0x34
 8002848:	e00d      	b.n	8002866 <__sflush_r+0xae>
 800284a:	2301      	movs	r3, #1
 800284c:	4628      	mov	r0, r5
 800284e:	47b0      	blx	r6
 8002850:	4602      	mov	r2, r0
 8002852:	1c50      	adds	r0, r2, #1
 8002854:	d1c9      	bne.n	80027ea <__sflush_r+0x32>
 8002856:	682b      	ldr	r3, [r5, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0c6      	beq.n	80027ea <__sflush_r+0x32>
 800285c:	2b1d      	cmp	r3, #29
 800285e:	d001      	beq.n	8002864 <__sflush_r+0xac>
 8002860:	2b16      	cmp	r3, #22
 8002862:	d11e      	bne.n	80028a2 <__sflush_r+0xea>
 8002864:	602f      	str	r7, [r5, #0]
 8002866:	2000      	movs	r0, #0
 8002868:	e022      	b.n	80028b0 <__sflush_r+0xf8>
 800286a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800286e:	b21b      	sxth	r3, r3
 8002870:	e01b      	b.n	80028aa <__sflush_r+0xf2>
 8002872:	690f      	ldr	r7, [r1, #16]
 8002874:	2f00      	cmp	r7, #0
 8002876:	d0f6      	beq.n	8002866 <__sflush_r+0xae>
 8002878:	0793      	lsls	r3, r2, #30
 800287a:	680e      	ldr	r6, [r1, #0]
 800287c:	bf08      	it	eq
 800287e:	694b      	ldreq	r3, [r1, #20]
 8002880:	600f      	str	r7, [r1, #0]
 8002882:	bf18      	it	ne
 8002884:	2300      	movne	r3, #0
 8002886:	eba6 0807 	sub.w	r8, r6, r7
 800288a:	608b      	str	r3, [r1, #8]
 800288c:	f1b8 0f00 	cmp.w	r8, #0
 8002890:	dde9      	ble.n	8002866 <__sflush_r+0xae>
 8002892:	6a21      	ldr	r1, [r4, #32]
 8002894:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002896:	4643      	mov	r3, r8
 8002898:	463a      	mov	r2, r7
 800289a:	4628      	mov	r0, r5
 800289c:	47b0      	blx	r6
 800289e:	2800      	cmp	r0, #0
 80028a0:	dc08      	bgt.n	80028b4 <__sflush_r+0xfc>
 80028a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028aa:	81a3      	strh	r3, [r4, #12]
 80028ac:	f04f 30ff 	mov.w	r0, #4294967295
 80028b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028b4:	4407      	add	r7, r0
 80028b6:	eba8 0800 	sub.w	r8, r8, r0
 80028ba:	e7e7      	b.n	800288c <__sflush_r+0xd4>
 80028bc:	20400001 	.word	0x20400001

080028c0 <_fflush_r>:
 80028c0:	b538      	push	{r3, r4, r5, lr}
 80028c2:	690b      	ldr	r3, [r1, #16]
 80028c4:	4605      	mov	r5, r0
 80028c6:	460c      	mov	r4, r1
 80028c8:	b913      	cbnz	r3, 80028d0 <_fflush_r+0x10>
 80028ca:	2500      	movs	r5, #0
 80028cc:	4628      	mov	r0, r5
 80028ce:	bd38      	pop	{r3, r4, r5, pc}
 80028d0:	b118      	cbz	r0, 80028da <_fflush_r+0x1a>
 80028d2:	6a03      	ldr	r3, [r0, #32]
 80028d4:	b90b      	cbnz	r3, 80028da <_fflush_r+0x1a>
 80028d6:	f7ff f9af 	bl	8001c38 <__sinit>
 80028da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f3      	beq.n	80028ca <_fflush_r+0xa>
 80028e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80028e4:	07d0      	lsls	r0, r2, #31
 80028e6:	d404      	bmi.n	80028f2 <_fflush_r+0x32>
 80028e8:	0599      	lsls	r1, r3, #22
 80028ea:	d402      	bmi.n	80028f2 <_fflush_r+0x32>
 80028ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80028ee:	f7ff fb9a 	bl	8002026 <__retarget_lock_acquire_recursive>
 80028f2:	4628      	mov	r0, r5
 80028f4:	4621      	mov	r1, r4
 80028f6:	f7ff ff5f 	bl	80027b8 <__sflush_r>
 80028fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80028fc:	07da      	lsls	r2, r3, #31
 80028fe:	4605      	mov	r5, r0
 8002900:	d4e4      	bmi.n	80028cc <_fflush_r+0xc>
 8002902:	89a3      	ldrh	r3, [r4, #12]
 8002904:	059b      	lsls	r3, r3, #22
 8002906:	d4e1      	bmi.n	80028cc <_fflush_r+0xc>
 8002908:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800290a:	f7ff fb8d 	bl	8002028 <__retarget_lock_release_recursive>
 800290e:	e7dd      	b.n	80028cc <_fflush_r+0xc>

08002910 <__swhatbuf_r>:
 8002910:	b570      	push	{r4, r5, r6, lr}
 8002912:	460c      	mov	r4, r1
 8002914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002918:	2900      	cmp	r1, #0
 800291a:	b096      	sub	sp, #88	@ 0x58
 800291c:	4615      	mov	r5, r2
 800291e:	461e      	mov	r6, r3
 8002920:	da0d      	bge.n	800293e <__swhatbuf_r+0x2e>
 8002922:	89a3      	ldrh	r3, [r4, #12]
 8002924:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002928:	f04f 0100 	mov.w	r1, #0
 800292c:	bf14      	ite	ne
 800292e:	2340      	movne	r3, #64	@ 0x40
 8002930:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002934:	2000      	movs	r0, #0
 8002936:	6031      	str	r1, [r6, #0]
 8002938:	602b      	str	r3, [r5, #0]
 800293a:	b016      	add	sp, #88	@ 0x58
 800293c:	bd70      	pop	{r4, r5, r6, pc}
 800293e:	466a      	mov	r2, sp
 8002940:	f000 f848 	bl	80029d4 <_fstat_r>
 8002944:	2800      	cmp	r0, #0
 8002946:	dbec      	blt.n	8002922 <__swhatbuf_r+0x12>
 8002948:	9901      	ldr	r1, [sp, #4]
 800294a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800294e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002952:	4259      	negs	r1, r3
 8002954:	4159      	adcs	r1, r3
 8002956:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800295a:	e7eb      	b.n	8002934 <__swhatbuf_r+0x24>

0800295c <__smakebuf_r>:
 800295c:	898b      	ldrh	r3, [r1, #12]
 800295e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002960:	079d      	lsls	r5, r3, #30
 8002962:	4606      	mov	r6, r0
 8002964:	460c      	mov	r4, r1
 8002966:	d507      	bpl.n	8002978 <__smakebuf_r+0x1c>
 8002968:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800296c:	6023      	str	r3, [r4, #0]
 800296e:	6123      	str	r3, [r4, #16]
 8002970:	2301      	movs	r3, #1
 8002972:	6163      	str	r3, [r4, #20]
 8002974:	b003      	add	sp, #12
 8002976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002978:	ab01      	add	r3, sp, #4
 800297a:	466a      	mov	r2, sp
 800297c:	f7ff ffc8 	bl	8002910 <__swhatbuf_r>
 8002980:	9f00      	ldr	r7, [sp, #0]
 8002982:	4605      	mov	r5, r0
 8002984:	4639      	mov	r1, r7
 8002986:	4630      	mov	r0, r6
 8002988:	f7ff fbbc 	bl	8002104 <_malloc_r>
 800298c:	b948      	cbnz	r0, 80029a2 <__smakebuf_r+0x46>
 800298e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002992:	059a      	lsls	r2, r3, #22
 8002994:	d4ee      	bmi.n	8002974 <__smakebuf_r+0x18>
 8002996:	f023 0303 	bic.w	r3, r3, #3
 800299a:	f043 0302 	orr.w	r3, r3, #2
 800299e:	81a3      	strh	r3, [r4, #12]
 80029a0:	e7e2      	b.n	8002968 <__smakebuf_r+0xc>
 80029a2:	89a3      	ldrh	r3, [r4, #12]
 80029a4:	6020      	str	r0, [r4, #0]
 80029a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029aa:	81a3      	strh	r3, [r4, #12]
 80029ac:	9b01      	ldr	r3, [sp, #4]
 80029ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80029b2:	b15b      	cbz	r3, 80029cc <__smakebuf_r+0x70>
 80029b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80029b8:	4630      	mov	r0, r6
 80029ba:	f000 f81d 	bl	80029f8 <_isatty_r>
 80029be:	b128      	cbz	r0, 80029cc <__smakebuf_r+0x70>
 80029c0:	89a3      	ldrh	r3, [r4, #12]
 80029c2:	f023 0303 	bic.w	r3, r3, #3
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	81a3      	strh	r3, [r4, #12]
 80029cc:	89a3      	ldrh	r3, [r4, #12]
 80029ce:	431d      	orrs	r5, r3
 80029d0:	81a5      	strh	r5, [r4, #12]
 80029d2:	e7cf      	b.n	8002974 <__smakebuf_r+0x18>

080029d4 <_fstat_r>:
 80029d4:	b538      	push	{r3, r4, r5, lr}
 80029d6:	4d07      	ldr	r5, [pc, #28]	@ (80029f4 <_fstat_r+0x20>)
 80029d8:	2300      	movs	r3, #0
 80029da:	4604      	mov	r4, r0
 80029dc:	4608      	mov	r0, r1
 80029de:	4611      	mov	r1, r2
 80029e0:	602b      	str	r3, [r5, #0]
 80029e2:	f7fd fe1a 	bl	800061a <_fstat>
 80029e6:	1c43      	adds	r3, r0, #1
 80029e8:	d102      	bne.n	80029f0 <_fstat_r+0x1c>
 80029ea:	682b      	ldr	r3, [r5, #0]
 80029ec:	b103      	cbz	r3, 80029f0 <_fstat_r+0x1c>
 80029ee:	6023      	str	r3, [r4, #0]
 80029f0:	bd38      	pop	{r3, r4, r5, pc}
 80029f2:	bf00      	nop
 80029f4:	200001e8 	.word	0x200001e8

080029f8 <_isatty_r>:
 80029f8:	b538      	push	{r3, r4, r5, lr}
 80029fa:	4d06      	ldr	r5, [pc, #24]	@ (8002a14 <_isatty_r+0x1c>)
 80029fc:	2300      	movs	r3, #0
 80029fe:	4604      	mov	r4, r0
 8002a00:	4608      	mov	r0, r1
 8002a02:	602b      	str	r3, [r5, #0]
 8002a04:	f7fd fe19 	bl	800063a <_isatty>
 8002a08:	1c43      	adds	r3, r0, #1
 8002a0a:	d102      	bne.n	8002a12 <_isatty_r+0x1a>
 8002a0c:	682b      	ldr	r3, [r5, #0]
 8002a0e:	b103      	cbz	r3, 8002a12 <_isatty_r+0x1a>
 8002a10:	6023      	str	r3, [r4, #0]
 8002a12:	bd38      	pop	{r3, r4, r5, pc}
 8002a14:	200001e8 	.word	0x200001e8

08002a18 <_sbrk_r>:
 8002a18:	b538      	push	{r3, r4, r5, lr}
 8002a1a:	4d06      	ldr	r5, [pc, #24]	@ (8002a34 <_sbrk_r+0x1c>)
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	4604      	mov	r4, r0
 8002a20:	4608      	mov	r0, r1
 8002a22:	602b      	str	r3, [r5, #0]
 8002a24:	f7fd fe22 	bl	800066c <_sbrk>
 8002a28:	1c43      	adds	r3, r0, #1
 8002a2a:	d102      	bne.n	8002a32 <_sbrk_r+0x1a>
 8002a2c:	682b      	ldr	r3, [r5, #0]
 8002a2e:	b103      	cbz	r3, 8002a32 <_sbrk_r+0x1a>
 8002a30:	6023      	str	r3, [r4, #0]
 8002a32:	bd38      	pop	{r3, r4, r5, pc}
 8002a34:	200001e8 	.word	0x200001e8

08002a38 <_init>:
 8002a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a3a:	bf00      	nop
 8002a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a3e:	bc08      	pop	{r3}
 8002a40:	469e      	mov	lr, r3
 8002a42:	4770      	bx	lr

08002a44 <_fini>:
 8002a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a46:	bf00      	nop
 8002a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a4a:	bc08      	pop	{r3}
 8002a4c:	469e      	mov	lr, r3
 8002a4e:	4770      	bx	lr
