
Cap_based_sensing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b34  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004cd4  08004cd4  00005cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d6c  08004d6c  0000606c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004d6c  08004d6c  00005d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d74  08004d74  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d74  08004d74  00005d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d78  08004d78  00005d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004d7c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012f70  2000006c  08004de8  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012fdc  08004de8  00006fdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a53e  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fca  00000000  00000000  000105da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  000125a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000804  00000000  00000000  00013048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189fa  00000000  00000000  0001384c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc89  00000000  00000000  0002c246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fe7c  00000000  00000000  00037ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7d4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003210  00000000  00000000  000d7d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000dafa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004cbc 	.word	0x08004cbc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08004cbc 	.word	0x08004cbc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:

void GpioCapInit(void);


int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b088      	sub	sp, #32
 8000284:	af02      	add	r7, sp, #8
	HAL_Init();
 8000286:	f000 faa9 	bl	80007dc <HAL_Init>
	GpioSwoInit();
 800028a:	f000 f88d 	bl	80003a8 <GpioSwoInit>
	AdcInit();
 800028e:	f000 f8b3 	bl	80003f8 <AdcInit>

	BaseType_t status;

	status = xTaskCreate(CapChargeTaskHandler, "CapChargeTask", 200, NULL, 4, &CapChargeHandle);
 8000292:	4b37      	ldr	r3, [pc, #220]	@ (8000370 <main+0xf0>)
 8000294:	9301      	str	r3, [sp, #4]
 8000296:	2304      	movs	r3, #4
 8000298:	9300      	str	r3, [sp, #0]
 800029a:	2300      	movs	r3, #0
 800029c:	22c8      	movs	r2, #200	@ 0xc8
 800029e:	4935      	ldr	r1, [pc, #212]	@ (8000374 <main+0xf4>)
 80002a0:	4835      	ldr	r0, [pc, #212]	@ (8000378 <main+0xf8>)
 80002a2:	f001 fcd5 	bl	8001c50 <xTaskCreate>
 80002a6:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 80002a8:	697b      	ldr	r3, [r7, #20]
 80002aa:	2b01      	cmp	r3, #1
 80002ac:	d00b      	beq.n	80002c6 <main+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80002ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80002b2:	f383 8811 	msr	BASEPRI, r3
 80002b6:	f3bf 8f6f 	isb	sy
 80002ba:	f3bf 8f4f 	dsb	sy
 80002be:	613b      	str	r3, [r7, #16]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80002c0:	bf00      	nop
 80002c2:	bf00      	nop
 80002c4:	e7fd      	b.n	80002c2 <main+0x42>

	status = xTaskCreate(AdcReadTaskHandler, "AdcReadTask", 200, NULL, 2, &AdcReadHandle);
 80002c6:	4b2d      	ldr	r3, [pc, #180]	@ (800037c <main+0xfc>)
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2302      	movs	r3, #2
 80002cc:	9300      	str	r3, [sp, #0]
 80002ce:	2300      	movs	r3, #0
 80002d0:	22c8      	movs	r2, #200	@ 0xc8
 80002d2:	492b      	ldr	r1, [pc, #172]	@ (8000380 <main+0x100>)
 80002d4:	482b      	ldr	r0, [pc, #172]	@ (8000384 <main+0x104>)
 80002d6:	f001 fcbb 	bl	8001c50 <xTaskCreate>
 80002da:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 80002dc:	697b      	ldr	r3, [r7, #20]
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d00b      	beq.n	80002fa <main+0x7a>
    __asm volatile
 80002e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80002e6:	f383 8811 	msr	BASEPRI, r3
 80002ea:	f3bf 8f6f 	isb	sy
 80002ee:	f3bf 8f4f 	dsb	sy
 80002f2:	60fb      	str	r3, [r7, #12]
}
 80002f4:	bf00      	nop
 80002f6:	bf00      	nop
 80002f8:	e7fd      	b.n	80002f6 <main+0x76>

	status = xTaskCreate(CapDischargeTaskHandler, "CapDischargeTask", 200, NULL, 2, &CapDischargeHandle);
 80002fa:	4b23      	ldr	r3, [pc, #140]	@ (8000388 <main+0x108>)
 80002fc:	9301      	str	r3, [sp, #4]
 80002fe:	2302      	movs	r3, #2
 8000300:	9300      	str	r3, [sp, #0]
 8000302:	2300      	movs	r3, #0
 8000304:	22c8      	movs	r2, #200	@ 0xc8
 8000306:	4921      	ldr	r1, [pc, #132]	@ (800038c <main+0x10c>)
 8000308:	4821      	ldr	r0, [pc, #132]	@ (8000390 <main+0x110>)
 800030a:	f001 fca1 	bl	8001c50 <xTaskCreate>
 800030e:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	2b01      	cmp	r3, #1
 8000314:	d00b      	beq.n	800032e <main+0xae>
    __asm volatile
 8000316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800031a:	f383 8811 	msr	BASEPRI, r3
 800031e:	f3bf 8f6f 	isb	sy
 8000322:	f3bf 8f4f 	dsb	sy
 8000326:	60bb      	str	r3, [r7, #8]
}
 8000328:	bf00      	nop
 800032a:	bf00      	nop
 800032c:	e7fd      	b.n	800032a <main+0xaa>

	status = xTaskCreate(LcdPrintTaskHandler, "LcdPrintTask", 200, NULL, 2, &LcdPrintHandle);
 800032e:	4b19      	ldr	r3, [pc, #100]	@ (8000394 <main+0x114>)
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2302      	movs	r3, #2
 8000334:	9300      	str	r3, [sp, #0]
 8000336:	2300      	movs	r3, #0
 8000338:	22c8      	movs	r2, #200	@ 0xc8
 800033a:	4917      	ldr	r1, [pc, #92]	@ (8000398 <main+0x118>)
 800033c:	4817      	ldr	r0, [pc, #92]	@ (800039c <main+0x11c>)
 800033e:	f001 fc87 	bl	8001c50 <xTaskCreate>
 8000342:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	2b01      	cmp	r3, #1
 8000348:	d00b      	beq.n	8000362 <main+0xe2>
    __asm volatile
 800034a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800034e:	f383 8811 	msr	BASEPRI, r3
 8000352:	f3bf 8f6f 	isb	sy
 8000356:	f3bf 8f4f 	dsb	sy
 800035a:	607b      	str	r3, [r7, #4]
}
 800035c:	bf00      	nop
 800035e:	bf00      	nop
 8000360:	e7fd      	b.n	800035e <main+0xde>

	vTaskStartScheduler();
 8000362:	f001 fe41 	bl	8001fe8 <vTaskStartScheduler>

	return 0;
 8000366:	2300      	movs	r3, #0
}
 8000368:	4618      	mov	r0, r3
 800036a:	3718      	adds	r7, #24
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	200000d4 	.word	0x200000d4
 8000374:	08004cd4 	.word	0x08004cd4
 8000378:	0800049d 	.word	0x0800049d
 800037c:	200000d8 	.word	0x200000d8
 8000380:	08004ce4 	.word	0x08004ce4
 8000384:	080004d5 	.word	0x080004d5
 8000388:	200000dc 	.word	0x200000dc
 800038c:	08004cf0 	.word	0x08004cf0
 8000390:	0800053d 	.word	0x0800053d
 8000394:	200000e0 	.word	0x200000e0
 8000398:	08004d04 	.word	0x08004d04
 800039c:	08000585 	.word	0x08000585

080003a0 <Error_Handler>:

void  Error_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
	while(1);
 80003a4:	bf00      	nop
 80003a6:	e7fd      	b.n	80003a4 <Error_Handler+0x4>

080003a8 <GpioSwoInit>:
{

}

void GpioSwoInit(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b086      	sub	sp, #24
 80003ac:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80003ae:	2300      	movs	r3, #0
 80003b0:	603b      	str	r3, [r7, #0]
 80003b2:	4b0f      	ldr	r3, [pc, #60]	@ (80003f0 <GpioSwoInit+0x48>)
 80003b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b6:	4a0e      	ldr	r2, [pc, #56]	@ (80003f0 <GpioSwoInit+0x48>)
 80003b8:	f043 0302 	orr.w	r3, r3, #2
 80003bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80003be:	4b0c      	ldr	r3, [pc, #48]	@ (80003f0 <GpioSwoInit+0x48>)
 80003c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c2:	f003 0302 	and.w	r3, r3, #2
 80003c6:	603b      	str	r3, [r7, #0]
 80003c8:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef gpio_swo;
	gpio_swo.Mode = GPIO_MODE_AF_PP;
 80003ca:	2302      	movs	r3, #2
 80003cc:	60bb      	str	r3, [r7, #8]
	gpio_swo.Pin = GPIO_PIN_3;
 80003ce:	2308      	movs	r3, #8
 80003d0:	607b      	str	r3, [r7, #4]
	gpio_swo.Alternate = GPIO_AF0_SWJ;
 80003d2:	2300      	movs	r3, #0
 80003d4:	617b      	str	r3, [r7, #20]
	gpio_swo.Pull = GPIO_NOPULL;
 80003d6:	2300      	movs	r3, #0
 80003d8:	60fb      	str	r3, [r7, #12]
	gpio_swo.Speed = GPIO_SPEED_FREQ_LOW;
 80003da:	2300      	movs	r3, #0
 80003dc:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &gpio_swo);
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	4619      	mov	r1, r3
 80003e2:	4804      	ldr	r0, [pc, #16]	@ (80003f4 <GpioSwoInit+0x4c>)
 80003e4:	f000 fed2 	bl	800118c <HAL_GPIO_Init>
}
 80003e8:	bf00      	nop
 80003ea:	3718      	adds	r7, #24
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	40023800 	.word	0x40023800
 80003f4:	40020400 	.word	0x40020400

080003f8 <AdcInit>:
	gpio_cap.Speed = GPIO_SPEED_FREQ_MEDIUM;
	HAL_GPIO_Init(GPIOA, &gpio_cap);
}

void AdcInit(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b08a      	sub	sp, #40	@ 0x28
 80003fc:	af00      	add	r7, sp, #0
	__HAL_RCC_ADC1_CLK_ENABLE();
 80003fe:	2300      	movs	r3, #0
 8000400:	603b      	str	r3, [r7, #0]
 8000402:	4b22      	ldr	r3, [pc, #136]	@ (800048c <AdcInit+0x94>)
 8000404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000406:	4a21      	ldr	r2, [pc, #132]	@ (800048c <AdcInit+0x94>)
 8000408:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800040c:	6453      	str	r3, [r2, #68]	@ 0x44
 800040e:	4b1f      	ldr	r3, [pc, #124]	@ (800048c <AdcInit+0x94>)
 8000410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000416:	603b      	str	r3, [r7, #0]
 8000418:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef gpio_adc;
	gpio_adc.Mode = GPIO_MODE_ANALOG;
 800041a:	2303      	movs	r3, #3
 800041c:	61bb      	str	r3, [r7, #24]
	gpio_adc.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800041e:	2301      	movs	r3, #1
 8000420:	623b      	str	r3, [r7, #32]
	gpio_adc.Pin = GPIO_PIN_1;
 8000422:	2302      	movs	r3, #2
 8000424:	617b      	str	r3, [r7, #20]
	gpio_adc.Pull = GPIO_NOPULL;
 8000426:	2300      	movs	r3, #0
 8000428:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &gpio_adc);
 800042a:	f107 0314 	add.w	r3, r7, #20
 800042e:	4619      	mov	r1, r3
 8000430:	4817      	ldr	r0, [pc, #92]	@ (8000490 <AdcInit+0x98>)
 8000432:	f000 feab 	bl	800118c <HAL_GPIO_Init>


	adc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000436:	4b17      	ldr	r3, [pc, #92]	@ (8000494 <AdcInit+0x9c>)
 8000438:	2200      	movs	r2, #0
 800043a:	605a      	str	r2, [r3, #4]
	adc.Init.Resolution = ADC_RESOLUTION_12B;
 800043c:	4b15      	ldr	r3, [pc, #84]	@ (8000494 <AdcInit+0x9c>)
 800043e:	2200      	movs	r2, #0
 8000440:	609a      	str	r2, [r3, #8]
	adc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000442:	4b14      	ldr	r3, [pc, #80]	@ (8000494 <AdcInit+0x9c>)
 8000444:	2200      	movs	r2, #0
 8000446:	60da      	str	r2, [r3, #12]
	adc.Init.ContinuousConvMode = DISABLE;
 8000448:	4b12      	ldr	r3, [pc, #72]	@ (8000494 <AdcInit+0x9c>)
 800044a:	2200      	movs	r2, #0
 800044c:	761a      	strb	r2, [r3, #24]
	adc.Instance = ADC1;
 800044e:	4b11      	ldr	r3, [pc, #68]	@ (8000494 <AdcInit+0x9c>)
 8000450:	4a11      	ldr	r2, [pc, #68]	@ (8000498 <AdcInit+0xa0>)
 8000452:	601a      	str	r2, [r3, #0]
	if(HAL_ADC_Init(&adc) != HAL_OK) Error_Handler();
 8000454:	480f      	ldr	r0, [pc, #60]	@ (8000494 <AdcInit+0x9c>)
 8000456:	f000 fa43 	bl	80008e0 <HAL_ADC_Init>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <AdcInit+0x6c>
 8000460:	f7ff ff9e 	bl	80003a0 <Error_Handler>

	ADC_ChannelConfTypeDef cnl;
	cnl.Channel = ADC_CHANNEL_1;
 8000464:	2301      	movs	r3, #1
 8000466:	607b      	str	r3, [r7, #4]
	cnl.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000468:	2301      	movs	r3, #1
 800046a:	60fb      	str	r3, [r7, #12]
	cnl.Rank = 1;
 800046c:	2301      	movs	r3, #1
 800046e:	60bb      	str	r3, [r7, #8]
	if(HAL_ADC_ConfigChannel(&adc, &cnl) != HAL_OK) Error_Handler();
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	4619      	mov	r1, r3
 8000474:	4807      	ldr	r0, [pc, #28]	@ (8000494 <AdcInit+0x9c>)
 8000476:	f000 fb75 	bl	8000b64 <HAL_ADC_ConfigChannel>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <AdcInit+0x8c>
 8000480:	f7ff ff8e 	bl	80003a0 <Error_Handler>


}
 8000484:	bf00      	nop
 8000486:	3728      	adds	r7, #40	@ 0x28
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40023800 	.word	0x40023800
 8000490:	40020000 	.word	0x40020000
 8000494:	20000088 	.word	0x20000088
 8000498:	40012000 	.word	0x40012000

0800049c <CapChargeTaskHandler>:

void CapChargeTaskHandler(void* parameters)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af02      	add	r7, sp, #8
 80004a2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80004a4:	2201      	movs	r2, #1
 80004a6:	2101      	movs	r1, #1
 80004a8:	4808      	ldr	r0, [pc, #32]	@ (80004cc <CapChargeTaskHandler+0x30>)
 80004aa:	f000 fff3 	bl	8001494 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(1000));
 80004ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004b2:	f001 fd19 	bl	8001ee8 <vTaskDelay>
		xTaskNotify(AdcReadHandle, 0, eNoAction);
 80004b6:	4b06      	ldr	r3, [pc, #24]	@ (80004d0 <CapChargeTaskHandler+0x34>)
 80004b8:	6818      	ldr	r0, [r3, #0]
 80004ba:	2300      	movs	r3, #0
 80004bc:	9300      	str	r3, [sp, #0]
 80004be:	2300      	movs	r3, #0
 80004c0:	2200      	movs	r2, #0
 80004c2:	2100      	movs	r1, #0
 80004c4:	f002 fba4 	bl	8002c10 <xTaskGenericNotify>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80004c8:	bf00      	nop
 80004ca:	e7eb      	b.n	80004a4 <CapChargeTaskHandler+0x8>
 80004cc:	40020000 	.word	0x40020000
 80004d0:	200000d8 	.word	0x200000d8

080004d4 <AdcReadTaskHandler>:
	}
}

void AdcReadTaskHandler(void* parameters)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af02      	add	r7, sp, #8
 80004da:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80004dc:	f04f 33ff 	mov.w	r3, #4294967295
 80004e0:	9300      	str	r3, [sp, #0]
 80004e2:	2300      	movs	r3, #0
 80004e4:	2200      	movs	r2, #0
 80004e6:	2100      	movs	r1, #0
 80004e8:	2000      	movs	r0, #0
 80004ea:	f002 faff 	bl	8002aec <xTaskGenericNotifyWait>
		if(HAL_ADC_Start(&adc) != HAL_OK) Error_Handler();
 80004ee:	4810      	ldr	r0, [pc, #64]	@ (8000530 <AdcReadTaskHandler+0x5c>)
 80004f0:	f000 fa44 	bl	800097c <HAL_ADC_Start>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <AdcReadTaskHandler+0x2a>
 80004fa:	f7ff ff51 	bl	80003a0 <Error_Handler>
		val = HAL_ADC_GetValue(&adc);
 80004fe:	480c      	ldr	r0, [pc, #48]	@ (8000530 <AdcReadTaskHandler+0x5c>)
 8000500:	f000 fb23 	bl	8000b4a <HAL_ADC_GetValue>
 8000504:	4603      	mov	r3, r0
 8000506:	4a0b      	ldr	r2, [pc, #44]	@ (8000534 <AdcReadTaskHandler+0x60>)
 8000508:	6013      	str	r3, [r2, #0]
		if(HAL_ADC_Stop(&adc) != HAL_OK) Error_Handler();
 800050a:	4809      	ldr	r0, [pc, #36]	@ (8000530 <AdcReadTaskHandler+0x5c>)
 800050c:	f000 faea 	bl	8000ae4 <HAL_ADC_Stop>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <AdcReadTaskHandler+0x46>
 8000516:	f7ff ff43 	bl	80003a0 <Error_Handler>
		xTaskNotify(LcdPrintHandle, 0, eNoAction);
 800051a:	4b07      	ldr	r3, [pc, #28]	@ (8000538 <AdcReadTaskHandler+0x64>)
 800051c:	6818      	ldr	r0, [r3, #0]
 800051e:	2300      	movs	r3, #0
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2300      	movs	r3, #0
 8000524:	2200      	movs	r2, #0
 8000526:	2100      	movs	r1, #0
 8000528:	f002 fb72 	bl	8002c10 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800052c:	e7d6      	b.n	80004dc <AdcReadTaskHandler+0x8>
 800052e:	bf00      	nop
 8000530:	20000088 	.word	0x20000088
 8000534:	200000d0 	.word	0x200000d0
 8000538:	200000e0 	.word	0x200000e0

0800053c <CapDischargeTaskHandler>:


}

void CapDischargeTaskHandler(void* parameters)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af02      	add	r7, sp, #8
 8000542:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000544:	f04f 33ff 	mov.w	r3, #4294967295
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2300      	movs	r3, #0
 800054c:	2200      	movs	r2, #0
 800054e:	2100      	movs	r1, #0
 8000550:	2000      	movs	r0, #0
 8000552:	f002 facb 	bl	8002aec <xTaskGenericNotifyWait>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	2101      	movs	r1, #1
 800055a:	4808      	ldr	r0, [pc, #32]	@ (800057c <CapDischargeTaskHandler+0x40>)
 800055c:	f000 ff9a 	bl	8001494 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000560:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000564:	f000 f998 	bl	8000898 <HAL_Delay>
		taskYIELD();
 8000568:	4b05      	ldr	r3, [pc, #20]	@ (8000580 <CapDischargeTaskHandler+0x44>)
 800056a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	f3bf 8f4f 	dsb	sy
 8000574:	f3bf 8f6f 	isb	sy
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000578:	bf00      	nop
 800057a:	e7e3      	b.n	8000544 <CapDischargeTaskHandler+0x8>
 800057c:	40020000 	.word	0x40020000
 8000580:	e000ed04 	.word	0xe000ed04

08000584 <LcdPrintTaskHandler>:
	}
}

void LcdPrintTaskHandler(void* parameters)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af02      	add	r7, sp, #8
 800058a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800058c:	f04f 33ff 	mov.w	r3, #4294967295
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2300      	movs	r3, #0
 8000594:	2200      	movs	r2, #0
 8000596:	2100      	movs	r1, #0
 8000598:	2000      	movs	r0, #0
 800059a:	f002 faa7 	bl	8002aec <xTaskGenericNotifyWait>
		printf("%lu \n",val);
 800059e:	4b08      	ldr	r3, [pc, #32]	@ (80005c0 <LcdPrintTaskHandler+0x3c>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4619      	mov	r1, r3
 80005a4:	4807      	ldr	r0, [pc, #28]	@ (80005c4 <LcdPrintTaskHandler+0x40>)
 80005a6:	f003 fd0f 	bl	8003fc8 <iprintf>
		xTaskNotify(CapDischargeHandle, 0, eNoAction);
 80005aa:	4b07      	ldr	r3, [pc, #28]	@ (80005c8 <LcdPrintTaskHandler+0x44>)
 80005ac:	6818      	ldr	r0, [r3, #0]
 80005ae:	2300      	movs	r3, #0
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2300      	movs	r3, #0
 80005b4:	2200      	movs	r2, #0
 80005b6:	2100      	movs	r1, #0
 80005b8:	f002 fb2a 	bl	8002c10 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80005bc:	bf00      	nop
 80005be:	e7e5      	b.n	800058c <LcdPrintTaskHandler+0x8>
 80005c0:	200000d0 	.word	0x200000d0
 80005c4:	08004d14 	.word	0x08004d14
 80005c8:	200000dc 	.word	0x200000dc

080005cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	4b10      	ldr	r3, [pc, #64]	@ (8000618 <HAL_MspInit+0x4c>)
 80005d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005da:	4a0f      	ldr	r2, [pc, #60]	@ (8000618 <HAL_MspInit+0x4c>)
 80005dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80005e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000618 <HAL_MspInit+0x4c>)
 80005e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	603b      	str	r3, [r7, #0]
 80005f2:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <HAL_MspInit+0x4c>)
 80005f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f6:	4a08      	ldr	r2, [pc, #32]	@ (8000618 <HAL_MspInit+0x4c>)
 80005f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80005fe:	4b06      	ldr	r3, [pc, #24]	@ (8000618 <HAL_MspInit+0x4c>)
 8000600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	40023800 	.word	0x40023800

0800061c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
 800062c:	e00a      	b.n	8000644 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800062e:	f3af 8000 	nop.w
 8000632:	4601      	mov	r1, r0
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	1c5a      	adds	r2, r3, #1
 8000638:	60ba      	str	r2, [r7, #8]
 800063a:	b2ca      	uxtb	r2, r1
 800063c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	3301      	adds	r3, #1
 8000642:	617b      	str	r3, [r7, #20]
 8000644:	697a      	ldr	r2, [r7, #20]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	429a      	cmp	r2, r3
 800064a:	dbf0      	blt.n	800062e <_read+0x12>
  }

  return len;
 800064c:	687b      	ldr	r3, [r7, #4]
}
 800064e:	4618      	mov	r0, r3
 8000650:	3718      	adds	r7, #24
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	b086      	sub	sp, #24
 800065a:	af00      	add	r7, sp, #0
 800065c:	60f8      	str	r0, [r7, #12]
 800065e:	60b9      	str	r1, [r7, #8]
 8000660:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]
 8000666:	e009      	b.n	800067c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	1c5a      	adds	r2, r3, #1
 800066c:	60ba      	str	r2, [r7, #8]
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4618      	mov	r0, r3
 8000672:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	3301      	adds	r3, #1
 800067a:	617b      	str	r3, [r7, #20]
 800067c:	697a      	ldr	r2, [r7, #20]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	429a      	cmp	r2, r3
 8000682:	dbf1      	blt.n	8000668 <_write+0x12>
  }
  return len;
 8000684:	687b      	ldr	r3, [r7, #4]
}
 8000686:	4618      	mov	r0, r3
 8000688:	3718      	adds	r7, #24
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <_close>:

int _close(int file)
{
 800068e:	b480      	push	{r7}
 8000690:	b083      	sub	sp, #12
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000696:	f04f 33ff 	mov.w	r3, #4294967295
}
 800069a:	4618      	mov	r0, r3
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006a6:	b480      	push	{r7}
 80006a8:	b083      	sub	sp, #12
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
 80006ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006b6:	605a      	str	r2, [r3, #4]
  return 0;
 80006b8:	2300      	movs	r3, #0
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <_isatty>:

int _isatty(int file)
{
 80006c6:	b480      	push	{r7}
 80006c8:	b083      	sub	sp, #12
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006ce:	2301      	movs	r3, #1
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
	...

080006f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000700:	4a14      	ldr	r2, [pc, #80]	@ (8000754 <_sbrk+0x5c>)
 8000702:	4b15      	ldr	r3, [pc, #84]	@ (8000758 <_sbrk+0x60>)
 8000704:	1ad3      	subs	r3, r2, r3
 8000706:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800070c:	4b13      	ldr	r3, [pc, #76]	@ (800075c <_sbrk+0x64>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d102      	bne.n	800071a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000714:	4b11      	ldr	r3, [pc, #68]	@ (800075c <_sbrk+0x64>)
 8000716:	4a12      	ldr	r2, [pc, #72]	@ (8000760 <_sbrk+0x68>)
 8000718:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <_sbrk+0x64>)
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4413      	add	r3, r2
 8000722:	693a      	ldr	r2, [r7, #16]
 8000724:	429a      	cmp	r2, r3
 8000726:	d207      	bcs.n	8000738 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000728:	f003 fcf2 	bl	8004110 <__errno>
 800072c:	4603      	mov	r3, r0
 800072e:	220c      	movs	r2, #12
 8000730:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000732:	f04f 33ff 	mov.w	r3, #4294967295
 8000736:	e009      	b.n	800074c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000738:	4b08      	ldr	r3, [pc, #32]	@ (800075c <_sbrk+0x64>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800073e:	4b07      	ldr	r3, [pc, #28]	@ (800075c <_sbrk+0x64>)
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4413      	add	r3, r2
 8000746:	4a05      	ldr	r2, [pc, #20]	@ (800075c <_sbrk+0x64>)
 8000748:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800074a:	68fb      	ldr	r3, [r7, #12]
}
 800074c:	4618      	mov	r0, r3
 800074e:	3718      	adds	r7, #24
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20020000 	.word	0x20020000
 8000758:	00000400 	.word	0x00000400
 800075c:	200000e4 	.word	0x200000e4
 8000760:	20012fe0 	.word	0x20012fe0

08000764 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <SystemInit+0x20>)
 800076a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800076e:	4a05      	ldr	r2, [pc, #20]	@ (8000784 <SystemInit+0x20>)
 8000770:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000774:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000788:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800078c:	f7ff ffea 	bl	8000764 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000790:	480c      	ldr	r0, [pc, #48]	@ (80007c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000792:	490d      	ldr	r1, [pc, #52]	@ (80007c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000794:	4a0d      	ldr	r2, [pc, #52]	@ (80007cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000798:	e002      	b.n	80007a0 <LoopCopyDataInit>

0800079a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800079a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800079c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800079e:	3304      	adds	r3, #4

080007a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a4:	d3f9      	bcc.n	800079a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007a6:	4a0a      	ldr	r2, [pc, #40]	@ (80007d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007a8:	4c0a      	ldr	r4, [pc, #40]	@ (80007d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007ac:	e001      	b.n	80007b2 <LoopFillZerobss>

080007ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b0:	3204      	adds	r2, #4

080007b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b4:	d3fb      	bcc.n	80007ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007b6:	f003 fcb1 	bl	800411c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007ba:	f7ff fd61 	bl	8000280 <main>
  bx  lr    
 80007be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80007c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80007cc:	08004d7c 	.word	0x08004d7c
  ldr r2, =_sbss
 80007d0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80007d4:	20012fdc 	.word	0x20012fdc

080007d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007d8:	e7fe      	b.n	80007d8 <ADC_IRQHandler>
	...

080007dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007e0:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <HAL_Init+0x40>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a0d      	ldr	r2, [pc, #52]	@ (800081c <HAL_Init+0x40>)
 80007e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007ec:	4b0b      	ldr	r3, [pc, #44]	@ (800081c <HAL_Init+0x40>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a0a      	ldr	r2, [pc, #40]	@ (800081c <HAL_Init+0x40>)
 80007f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f8:	4b08      	ldr	r3, [pc, #32]	@ (800081c <HAL_Init+0x40>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a07      	ldr	r2, [pc, #28]	@ (800081c <HAL_Init+0x40>)
 80007fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000802:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000804:	2003      	movs	r0, #3
 8000806:	f000 fc8d 	bl	8001124 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800080a:	200f      	movs	r0, #15
 800080c:	f000 f808 	bl	8000820 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000810:	f7ff fedc 	bl	80005cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000814:	2300      	movs	r3, #0
}
 8000816:	4618      	mov	r0, r3
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40023c00 	.word	0x40023c00

08000820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000828:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <HAL_InitTick+0x54>)
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <HAL_InitTick+0x58>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	4619      	mov	r1, r3
 8000832:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000836:	fbb3 f3f1 	udiv	r3, r3, r1
 800083a:	fbb2 f3f3 	udiv	r3, r2, r3
 800083e:	4618      	mov	r0, r3
 8000840:	f000 fc97 	bl	8001172 <HAL_SYSTICK_Config>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800084a:	2301      	movs	r3, #1
 800084c:	e00e      	b.n	800086c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2b0f      	cmp	r3, #15
 8000852:	d80a      	bhi.n	800086a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000854:	2200      	movs	r2, #0
 8000856:	6879      	ldr	r1, [r7, #4]
 8000858:	f04f 30ff 	mov.w	r0, #4294967295
 800085c:	f000 fc6d 	bl	800113a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000860:	4a06      	ldr	r2, [pc, #24]	@ (800087c <HAL_InitTick+0x5c>)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000866:	2300      	movs	r3, #0
 8000868:	e000      	b.n	800086c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800086a:	2301      	movs	r3, #1
}
 800086c:	4618      	mov	r0, r3
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000000 	.word	0x20000000
 8000878:	20000008 	.word	0x20000008
 800087c:	20000004 	.word	0x20000004

08000880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  return uwTick;
 8000884:	4b03      	ldr	r3, [pc, #12]	@ (8000894 <HAL_GetTick+0x14>)
 8000886:	681b      	ldr	r3, [r3, #0]
}
 8000888:	4618      	mov	r0, r3
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	200000e8 	.word	0x200000e8

08000898 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008a0:	f7ff ffee 	bl	8000880 <HAL_GetTick>
 80008a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008b0:	d005      	beq.n	80008be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008b2:	4b0a      	ldr	r3, [pc, #40]	@ (80008dc <HAL_Delay+0x44>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	461a      	mov	r2, r3
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	4413      	add	r3, r2
 80008bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008be:	bf00      	nop
 80008c0:	f7ff ffde 	bl	8000880 <HAL_GetTick>
 80008c4:	4602      	mov	r2, r0
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	68fa      	ldr	r2, [r7, #12]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d8f7      	bhi.n	80008c0 <HAL_Delay+0x28>
  {
  }
}
 80008d0:	bf00      	nop
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000008 	.word	0x20000008

080008e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008e8:	2300      	movs	r3, #0
 80008ea:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d101      	bne.n	80008f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e033      	b.n	800095e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d109      	bne.n	8000912 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f000 f831 	bl	8000966 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2200      	movs	r2, #0
 8000908:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2200      	movs	r2, #0
 800090e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000916:	f003 0310 	and.w	r3, r3, #16
 800091a:	2b00      	cmp	r3, #0
 800091c:	d118      	bne.n	8000950 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000922:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000926:	f023 0302 	bic.w	r3, r3, #2
 800092a:	f043 0202 	orr.w	r2, r3, #2
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f000 fa48 	bl	8000dc8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2200      	movs	r2, #0
 800093c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000942:	f023 0303 	bic.w	r3, r3, #3
 8000946:	f043 0201 	orr.w	r2, r3, #1
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	641a      	str	r2, [r3, #64]	@ 0x40
 800094e:	e001      	b.n	8000954 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000950:	2301      	movs	r3, #1
 8000952:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2200      	movs	r2, #0
 8000958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800095c:	7bfb      	ldrb	r3, [r7, #15]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <HAL_ADC_MspInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
 8000966:	b480      	push	{r7}
 8000968:	b083      	sub	sp, #12
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
	...

0800097c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000984:	2300      	movs	r3, #0
 8000986:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800098e:	2b01      	cmp	r3, #1
 8000990:	d101      	bne.n	8000996 <HAL_ADC_Start+0x1a>
 8000992:	2302      	movs	r3, #2
 8000994:	e097      	b.n	8000ac6 <HAL_ADC_Start+0x14a>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2201      	movs	r2, #1
 800099a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	f003 0301 	and.w	r3, r3, #1
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d018      	beq.n	80009de <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	689a      	ldr	r2, [r3, #8]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f042 0201 	orr.w	r2, r2, #1
 80009ba:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80009bc:	4b45      	ldr	r3, [pc, #276]	@ (8000ad4 <HAL_ADC_Start+0x158>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a45      	ldr	r2, [pc, #276]	@ (8000ad8 <HAL_ADC_Start+0x15c>)
 80009c2:	fba2 2303 	umull	r2, r3, r2, r3
 80009c6:	0c9a      	lsrs	r2, r3, #18
 80009c8:	4613      	mov	r3, r2
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	4413      	add	r3, r2
 80009ce:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80009d0:	e002      	b.n	80009d8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	3b01      	subs	r3, #1
 80009d6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d1f9      	bne.n	80009d2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d15f      	bne.n	8000aac <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80009f4:	f023 0301 	bic.w	r3, r3, #1
 80009f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d007      	beq.n	8000a1e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000a16:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000a2a:	d106      	bne.n	8000a3a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a30:	f023 0206 	bic.w	r2, r3, #6
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	645a      	str	r2, [r3, #68]	@ 0x44
 8000a38:	e002      	b.n	8000a40 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2200      	movs	r2, #0
 8000a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000a48:	4b24      	ldr	r3, [pc, #144]	@ (8000adc <HAL_ADC_Start+0x160>)
 8000a4a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000a54:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f003 031f 	and.w	r3, r3, #31
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d10f      	bne.n	8000a82 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d129      	bne.n	8000ac4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	689a      	ldr	r2, [r3, #8]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	e020      	b.n	8000ac4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a16      	ldr	r2, [pc, #88]	@ (8000ae0 <HAL_ADC_Start+0x164>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d11b      	bne.n	8000ac4 <HAL_ADC_Start+0x148>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d114      	bne.n	8000ac4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	689a      	ldr	r2, [r3, #8]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	e00b      	b.n	8000ac4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab0:	f043 0210 	orr.w	r2, r3, #16
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000abc:	f043 0201 	orr.w	r2, r3, #1
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3714      	adds	r7, #20
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	431bde83 	.word	0x431bde83
 8000adc:	40012300 	.word	0x40012300
 8000ae0:	40012000 	.word	0x40012000

08000ae4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d101      	bne.n	8000afa <HAL_ADC_Stop+0x16>
 8000af6:	2302      	movs	r3, #2
 8000af8:	e021      	b.n	8000b3e <HAL_ADC_Stop+0x5a>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2201      	movs	r2, #1
 8000afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	689a      	ldr	r2, [r3, #8]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f022 0201 	bic.w	r2, r2, #1
 8000b10:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d109      	bne.n	8000b34 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b24:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000b28:	f023 0301 	bic.w	r3, r3, #1
 8000b2c:	f043 0201 	orr.w	r2, r3, #1
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2200      	movs	r2, #0
 8000b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b083      	sub	sp, #12
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d101      	bne.n	8000b80 <HAL_ADC_ConfigChannel+0x1c>
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	e113      	b.n	8000da8 <HAL_ADC_ConfigChannel+0x244>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2201      	movs	r2, #1
 8000b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b09      	cmp	r3, #9
 8000b8e:	d925      	bls.n	8000bdc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	68d9      	ldr	r1, [r3, #12]
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	4413      	add	r3, r2
 8000ba4:	3b1e      	subs	r3, #30
 8000ba6:	2207      	movs	r2, #7
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	43da      	mvns	r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	400a      	ands	r2, r1
 8000bb4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	68d9      	ldr	r1, [r3, #12]
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	689a      	ldr	r2, [r3, #8]
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	4603      	mov	r3, r0
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	4403      	add	r3, r0
 8000bce:	3b1e      	subs	r3, #30
 8000bd0:	409a      	lsls	r2, r3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	e022      	b.n	8000c22 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	6919      	ldr	r1, [r3, #16]
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	461a      	mov	r2, r3
 8000bea:	4613      	mov	r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	4413      	add	r3, r2
 8000bf0:	2207      	movs	r2, #7
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43da      	mvns	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	400a      	ands	r2, r1
 8000bfe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	6919      	ldr	r1, [r3, #16]
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	689a      	ldr	r2, [r3, #8]
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	4618      	mov	r0, r3
 8000c12:	4603      	mov	r3, r0
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	4403      	add	r3, r0
 8000c18:	409a      	lsls	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	2b06      	cmp	r3, #6
 8000c28:	d824      	bhi.n	8000c74 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685a      	ldr	r2, [r3, #4]
 8000c34:	4613      	mov	r3, r2
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	4413      	add	r3, r2
 8000c3a:	3b05      	subs	r3, #5
 8000c3c:	221f      	movs	r2, #31
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43da      	mvns	r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	400a      	ands	r2, r1
 8000c4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	4618      	mov	r0, r3
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685a      	ldr	r2, [r3, #4]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	4413      	add	r3, r2
 8000c64:	3b05      	subs	r3, #5
 8000c66:	fa00 f203 	lsl.w	r2, r0, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c72:	e04c      	b.n	8000d0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	2b0c      	cmp	r3, #12
 8000c7a:	d824      	bhi.n	8000cc6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685a      	ldr	r2, [r3, #4]
 8000c86:	4613      	mov	r3, r2
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	4413      	add	r3, r2
 8000c8c:	3b23      	subs	r3, #35	@ 0x23
 8000c8e:	221f      	movs	r2, #31
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	43da      	mvns	r2, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	400a      	ands	r2, r1
 8000c9c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	4618      	mov	r0, r3
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685a      	ldr	r2, [r3, #4]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	4413      	add	r3, r2
 8000cb6:	3b23      	subs	r3, #35	@ 0x23
 8000cb8:	fa00 f203 	lsl.w	r2, r0, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	631a      	str	r2, [r3, #48]	@ 0x30
 8000cc4:	e023      	b.n	8000d0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685a      	ldr	r2, [r3, #4]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4413      	add	r3, r2
 8000cd6:	3b41      	subs	r3, #65	@ 0x41
 8000cd8:	221f      	movs	r2, #31
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43da      	mvns	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	400a      	ands	r2, r1
 8000ce6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685a      	ldr	r2, [r3, #4]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4413      	add	r3, r2
 8000d00:	3b41      	subs	r3, #65	@ 0x41
 8000d02:	fa00 f203 	lsl.w	r2, r0, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d0e:	4b29      	ldr	r3, [pc, #164]	@ (8000db4 <HAL_ADC_ConfigChannel+0x250>)
 8000d10:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a28      	ldr	r2, [pc, #160]	@ (8000db8 <HAL_ADC_ConfigChannel+0x254>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d10f      	bne.n	8000d3c <HAL_ADC_ConfigChannel+0x1d8>
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b12      	cmp	r3, #18
 8000d22:	d10b      	bne.n	8000d3c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a1d      	ldr	r2, [pc, #116]	@ (8000db8 <HAL_ADC_ConfigChannel+0x254>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d12b      	bne.n	8000d9e <HAL_ADC_ConfigChannel+0x23a>
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a1c      	ldr	r2, [pc, #112]	@ (8000dbc <HAL_ADC_ConfigChannel+0x258>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d003      	beq.n	8000d58 <HAL_ADC_ConfigChannel+0x1f4>
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b11      	cmp	r3, #17
 8000d56:	d122      	bne.n	8000d9e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a11      	ldr	r2, [pc, #68]	@ (8000dbc <HAL_ADC_ConfigChannel+0x258>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d111      	bne.n	8000d9e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d7a:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <HAL_ADC_ConfigChannel+0x25c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a11      	ldr	r2, [pc, #68]	@ (8000dc4 <HAL_ADC_ConfigChannel+0x260>)
 8000d80:	fba2 2303 	umull	r2, r3, r2, r3
 8000d84:	0c9a      	lsrs	r2, r3, #18
 8000d86:	4613      	mov	r3, r2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	4413      	add	r3, r2
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000d90:	e002      	b.n	8000d98 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	3b01      	subs	r3, #1
 8000d96:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d1f9      	bne.n	8000d92 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2200      	movs	r2, #0
 8000da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8000da6:	2300      	movs	r3, #0
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	40012300 	.word	0x40012300
 8000db8:	40012000 	.word	0x40012000
 8000dbc:	10000012 	.word	0x10000012
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	431bde83 	.word	0x431bde83

08000dc8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000dd0:	4b79      	ldr	r3, [pc, #484]	@ (8000fb8 <ADC_Init+0x1f0>)
 8000dd2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	431a      	orrs	r2, r3
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000dfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	6859      	ldr	r1, [r3, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	691b      	ldr	r3, [r3, #16]
 8000e08:	021a      	lsls	r2, r3, #8
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	685a      	ldr	r2, [r3, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8000e20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	6859      	ldr	r1, [r3, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	689a      	ldr	r2, [r3, #8]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	430a      	orrs	r2, r1
 8000e32:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	689a      	ldr	r2, [r3, #8]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000e42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	6899      	ldr	r1, [r3, #8]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	68da      	ldr	r2, [r3, #12]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	430a      	orrs	r2, r1
 8000e54:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e5a:	4a58      	ldr	r2, [pc, #352]	@ (8000fbc <ADC_Init+0x1f4>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d022      	beq.n	8000ea6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	689a      	ldr	r2, [r3, #8]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000e6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	6899      	ldr	r1, [r3, #8]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	689a      	ldr	r2, [r3, #8]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000e90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	6899      	ldr	r1, [r3, #8]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	e00f      	b.n	8000ec6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	689a      	ldr	r2, [r3, #8]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000eb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	689a      	ldr	r2, [r3, #8]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000ec4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	689a      	ldr	r2, [r3, #8]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f022 0202 	bic.w	r2, r2, #2
 8000ed4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	6899      	ldr	r1, [r3, #8]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	7e1b      	ldrb	r3, [r3, #24]
 8000ee0:	005a      	lsls	r2, r3, #1
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d01b      	beq.n	8000f2c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	685a      	ldr	r2, [r3, #4]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000f02:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	685a      	ldr	r2, [r3, #4]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8000f12:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	6859      	ldr	r1, [r3, #4]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	035a      	lsls	r2, r3, #13
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	430a      	orrs	r2, r1
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	e007      	b.n	8000f3c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000f3a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8000f4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	051a      	lsls	r2, r3, #20
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	689a      	ldr	r2, [r3, #8]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000f70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	6899      	ldr	r1, [r3, #8]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000f7e:	025a      	lsls	r2, r3, #9
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	430a      	orrs	r2, r1
 8000f86:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	689a      	ldr	r2, [r3, #8]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000f96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	6899      	ldr	r1, [r3, #8]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	695b      	ldr	r3, [r3, #20]
 8000fa2:	029a      	lsls	r2, r3, #10
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	609a      	str	r2, [r3, #8]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	40012300 	.word	0x40012300
 8000fbc:	0f000001 	.word	0x0f000001

08000fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff2:	4a04      	ldr	r2, [pc, #16]	@ (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	60d3      	str	r3, [r2, #12]
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800100c:	4b04      	ldr	r3, [pc, #16]	@ (8001020 <__NVIC_GetPriorityGrouping+0x18>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	f003 0307 	and.w	r3, r3, #7
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	6039      	str	r1, [r7, #0]
 800102e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001034:	2b00      	cmp	r3, #0
 8001036:	db0a      	blt.n	800104e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	b2da      	uxtb	r2, r3
 800103c:	490c      	ldr	r1, [pc, #48]	@ (8001070 <__NVIC_SetPriority+0x4c>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	0112      	lsls	r2, r2, #4
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	440b      	add	r3, r1
 8001048:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800104c:	e00a      	b.n	8001064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4908      	ldr	r1, [pc, #32]	@ (8001074 <__NVIC_SetPriority+0x50>)
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	f003 030f 	and.w	r3, r3, #15
 800105a:	3b04      	subs	r3, #4
 800105c:	0112      	lsls	r2, r2, #4
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	440b      	add	r3, r1
 8001062:	761a      	strb	r2, [r3, #24]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000e100 	.word	0xe000e100
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	@ 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f1c3 0307 	rsb	r3, r3, #7
 8001092:	2b04      	cmp	r3, #4
 8001094:	bf28      	it	cs
 8001096:	2304      	movcs	r3, #4
 8001098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3304      	adds	r3, #4
 800109e:	2b06      	cmp	r3, #6
 80010a0:	d902      	bls.n	80010a8 <NVIC_EncodePriority+0x30>
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3b03      	subs	r3, #3
 80010a6:	e000      	b.n	80010aa <NVIC_EncodePriority+0x32>
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	f04f 32ff 	mov.w	r2, #4294967295
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43da      	mvns	r2, r3
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	401a      	ands	r2, r3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c0:	f04f 31ff 	mov.w	r1, #4294967295
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ca:	43d9      	mvns	r1, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d0:	4313      	orrs	r3, r2
         );
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3724      	adds	r7, #36	@ 0x24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010f0:	d301      	bcc.n	80010f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010f2:	2301      	movs	r3, #1
 80010f4:	e00f      	b.n	8001116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001120 <SysTick_Config+0x40>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010fe:	210f      	movs	r1, #15
 8001100:	f04f 30ff 	mov.w	r0, #4294967295
 8001104:	f7ff ff8e 	bl	8001024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001108:	4b05      	ldr	r3, [pc, #20]	@ (8001120 <SysTick_Config+0x40>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800110e:	4b04      	ldr	r3, [pc, #16]	@ (8001120 <SysTick_Config+0x40>)
 8001110:	2207      	movs	r2, #7
 8001112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	e000e010 	.word	0xe000e010

08001124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ff47 	bl	8000fc0 <__NVIC_SetPriorityGrouping>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800113a:	b580      	push	{r7, lr}
 800113c:	b086      	sub	sp, #24
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	60b9      	str	r1, [r7, #8]
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800114c:	f7ff ff5c 	bl	8001008 <__NVIC_GetPriorityGrouping>
 8001150:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	6978      	ldr	r0, [r7, #20]
 8001158:	f7ff ff8e 	bl	8001078 <NVIC_EncodePriority>
 800115c:	4602      	mov	r2, r0
 800115e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001162:	4611      	mov	r1, r2
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff5d 	bl	8001024 <__NVIC_SetPriority>
}
 800116a:	bf00      	nop
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ffb0 	bl	80010e0 <SysTick_Config>
 8001180:	4603      	mov	r3, r0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800118c:	b480      	push	{r7}
 800118e:	b089      	sub	sp, #36	@ 0x24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
 80011a6:	e159      	b.n	800145c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011a8:	2201      	movs	r2, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	f040 8148 	bne.w	8001456 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d005      	beq.n	80011de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d130      	bne.n	8001240 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	2203      	movs	r2, #3
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	68da      	ldr	r2, [r3, #12]
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001214:	2201      	movs	r2, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	091b      	lsrs	r3, r3, #4
 800122a:	f003 0201 	and.w	r2, r3, #1
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b03      	cmp	r3, #3
 800124a:	d017      	beq.n	800127c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d123      	bne.n	80012d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	08da      	lsrs	r2, r3, #3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3208      	adds	r2, #8
 8001290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	220f      	movs	r2, #15
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	691a      	ldr	r2, [r3, #16]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	08da      	lsrs	r2, r3, #3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3208      	adds	r2, #8
 80012ca:	69b9      	ldr	r1, [r7, #24]
 80012cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	2203      	movs	r2, #3
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0203 	and.w	r2, r3, #3
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 80a2 	beq.w	8001456 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b57      	ldr	r3, [pc, #348]	@ (8001474 <HAL_GPIO_Init+0x2e8>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131a:	4a56      	ldr	r2, [pc, #344]	@ (8001474 <HAL_GPIO_Init+0x2e8>)
 800131c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001320:	6453      	str	r3, [r2, #68]	@ 0x44
 8001322:	4b54      	ldr	r3, [pc, #336]	@ (8001474 <HAL_GPIO_Init+0x2e8>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001326:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800132e:	4a52      	ldr	r2, [pc, #328]	@ (8001478 <HAL_GPIO_Init+0x2ec>)
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3302      	adds	r3, #2
 8001336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	220f      	movs	r2, #15
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a49      	ldr	r2, [pc, #292]	@ (800147c <HAL_GPIO_Init+0x2f0>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d019      	beq.n	800138e <HAL_GPIO_Init+0x202>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a48      	ldr	r2, [pc, #288]	@ (8001480 <HAL_GPIO_Init+0x2f4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d013      	beq.n	800138a <HAL_GPIO_Init+0x1fe>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a47      	ldr	r2, [pc, #284]	@ (8001484 <HAL_GPIO_Init+0x2f8>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d00d      	beq.n	8001386 <HAL_GPIO_Init+0x1fa>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a46      	ldr	r2, [pc, #280]	@ (8001488 <HAL_GPIO_Init+0x2fc>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d007      	beq.n	8001382 <HAL_GPIO_Init+0x1f6>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a45      	ldr	r2, [pc, #276]	@ (800148c <HAL_GPIO_Init+0x300>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d101      	bne.n	800137e <HAL_GPIO_Init+0x1f2>
 800137a:	2304      	movs	r3, #4
 800137c:	e008      	b.n	8001390 <HAL_GPIO_Init+0x204>
 800137e:	2307      	movs	r3, #7
 8001380:	e006      	b.n	8001390 <HAL_GPIO_Init+0x204>
 8001382:	2303      	movs	r3, #3
 8001384:	e004      	b.n	8001390 <HAL_GPIO_Init+0x204>
 8001386:	2302      	movs	r3, #2
 8001388:	e002      	b.n	8001390 <HAL_GPIO_Init+0x204>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <HAL_GPIO_Init+0x204>
 800138e:	2300      	movs	r3, #0
 8001390:	69fa      	ldr	r2, [r7, #28]
 8001392:	f002 0203 	and.w	r2, r2, #3
 8001396:	0092      	lsls	r2, r2, #2
 8001398:	4093      	lsls	r3, r2
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a0:	4935      	ldr	r1, [pc, #212]	@ (8001478 <HAL_GPIO_Init+0x2ec>)
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	089b      	lsrs	r3, r3, #2
 80013a6:	3302      	adds	r3, #2
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ae:	4b38      	ldr	r3, [pc, #224]	@ (8001490 <HAL_GPIO_Init+0x304>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013d2:	4a2f      	ldr	r2, [pc, #188]	@ (8001490 <HAL_GPIO_Init+0x304>)
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001490 <HAL_GPIO_Init+0x304>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013fc:	4a24      	ldr	r2, [pc, #144]	@ (8001490 <HAL_GPIO_Init+0x304>)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001402:	4b23      	ldr	r3, [pc, #140]	@ (8001490 <HAL_GPIO_Init+0x304>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001426:	4a1a      	ldr	r2, [pc, #104]	@ (8001490 <HAL_GPIO_Init+0x304>)
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800142c:	4b18      	ldr	r3, [pc, #96]	@ (8001490 <HAL_GPIO_Init+0x304>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001450:	4a0f      	ldr	r2, [pc, #60]	@ (8001490 <HAL_GPIO_Init+0x304>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3301      	adds	r3, #1
 800145a:	61fb      	str	r3, [r7, #28]
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	2b0f      	cmp	r3, #15
 8001460:	f67f aea2 	bls.w	80011a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	3724      	adds	r7, #36	@ 0x24
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800
 8001478:	40013800 	.word	0x40013800
 800147c:	40020000 	.word	0x40020000
 8001480:	40020400 	.word	0x40020400
 8001484:	40020800 	.word	0x40020800
 8001488:	40020c00 	.word	0x40020c00
 800148c:	40021000 	.word	0x40021000
 8001490:	40013c00 	.word	0x40013c00

08001494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	807b      	strh	r3, [r7, #2]
 80014a0:	4613      	mov	r3, r2
 80014a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014a4:	787b      	ldrb	r3, [r7, #1]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014aa:	887a      	ldrh	r2, [r7, #2]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014b0:	e003      	b.n	80014ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014b2:	887b      	ldrh	r3, [r7, #2]
 80014b4:	041a      	lsls	r2, r3, #16
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	619a      	str	r2, [r3, #24]
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f103 0208 	add.w	r2, r3, #8
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f04f 32ff 	mov.w	r2, #4294967295
 80014de:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f103 0208 	add.w	r2, r3, #8
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f103 0208 	add.w	r2, r3, #8
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001536:	d103      	bne.n	8001540 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	e00c      	b.n	800155a <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3308      	adds	r3, #8
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	e002      	b.n	800154e <vListInsert+0x2e>
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68ba      	ldr	r2, [r7, #8]
 8001556:	429a      	cmp	r2, r3
 8001558:	d2f6      	bcs.n	8001548 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	1c5a      	adds	r2, r3, #1
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8001586:	bf00      	nop
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001592:	b480      	push	{r7}
 8001594:	b085      	sub	sp, #20
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6892      	ldr	r2, [r2, #8]
 80015a8:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	6852      	ldr	r2, [r2, #4]
 80015b2:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d103      	bne.n	80015c6 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	1e5a      	subs	r2, r3, #1
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
	...

080015e8 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80015f2:	2301      	movs	r3, #1
 80015f4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d10b      	bne.n	8001618 <xQueueGenericReset+0x30>
    __asm volatile
 8001600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001604:	f383 8811 	msr	BASEPRI, r3
 8001608:	f3bf 8f6f 	isb	sy
 800160c:	f3bf 8f4f 	dsb	sy
 8001610:	60fb      	str	r3, [r7, #12]
}
 8001612:	bf00      	nop
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d05d      	beq.n	80016da <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8001622:	2b00      	cmp	r3, #0
 8001624:	d059      	beq.n	80016da <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800162e:	2100      	movs	r1, #0
 8001630:	fba3 2302 	umull	r2, r3, r3, r2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d000      	beq.n	800163a <xQueueGenericReset+0x52>
 8001638:	2101      	movs	r1, #1
 800163a:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800163c:	2b00      	cmp	r3, #0
 800163e:	d14c      	bne.n	80016da <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8001640:	f002 f8a0 	bl	8003784 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800164c:	6939      	ldr	r1, [r7, #16]
 800164e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001650:	fb01 f303 	mul.w	r3, r1, r3
 8001654:	441a      	add	r2, r3
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	2200      	movs	r2, #0
 800165e:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001670:	3b01      	subs	r3, #1
 8001672:	6939      	ldr	r1, [r7, #16]
 8001674:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001676:	fb01 f303 	mul.w	r3, r1, r3
 800167a:	441a      	add	r2, r3
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	22ff      	movs	r2, #255	@ 0xff
 8001684:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	22ff      	movs	r2, #255	@ 0xff
 800168c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d114      	bne.n	80016c0 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d01a      	beq.n	80016d4 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	3310      	adds	r3, #16
 80016a2:	4618      	mov	r0, r3
 80016a4:	f000 ffee 	bl	8002684 <xTaskRemoveFromEventList>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d012      	beq.n	80016d4 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80016ae:	4b16      	ldr	r3, [pc, #88]	@ (8001708 <xQueueGenericReset+0x120>)
 80016b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	f3bf 8f4f 	dsb	sy
 80016ba:	f3bf 8f6f 	isb	sy
 80016be:	e009      	b.n	80016d4 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	3310      	adds	r3, #16
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fefe 	bl	80014c6 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	3324      	adds	r3, #36	@ 0x24
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fef9 	bl	80014c6 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80016d4:	f002 f888 	bl	80037e8 <vPortExitCritical>
 80016d8:	e001      	b.n	80016de <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d10b      	bne.n	80016fc <xQueueGenericReset+0x114>
    __asm volatile
 80016e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016e8:	f383 8811 	msr	BASEPRI, r3
 80016ec:	f3bf 8f6f 	isb	sy
 80016f0:	f3bf 8f4f 	dsb	sy
 80016f4:	60bb      	str	r3, [r7, #8]
}
 80016f6:	bf00      	nop
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 80016fc:	697b      	ldr	r3, [r7, #20]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	e000ed04 	.word	0xe000ed04

0800170c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	@ 0x28
 8001710:	af02      	add	r7, sp, #8
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	4613      	mov	r3, r2
 8001718:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d02e      	beq.n	8001782 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001724:	2100      	movs	r1, #0
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	fba3 2302 	umull	r2, r3, r3, r2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d000      	beq.n	8001734 <xQueueGenericCreate+0x28>
 8001732:	2101      	movs	r1, #1
 8001734:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001736:	2b00      	cmp	r3, #0
 8001738:	d123      	bne.n	8001782 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	68ba      	ldr	r2, [r7, #8]
 800173e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001742:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8001746:	d81c      	bhi.n	8001782 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	fb02 f303 	mul.w	r3, r2, r3
 8001750:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	3350      	adds	r3, #80	@ 0x50
 8001756:	4618      	mov	r0, r3
 8001758:	f002 f8f8 	bl	800394c <pvPortMalloc>
 800175c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d01d      	beq.n	80017a0 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	3350      	adds	r3, #80	@ 0x50
 800176c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800176e:	79fa      	ldrb	r2, [r7, #7]
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	4613      	mov	r3, r2
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f000 f815 	bl	80017aa <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001780:	e00e      	b.n	80017a0 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d10b      	bne.n	80017a0 <xQueueGenericCreate+0x94>
    __asm volatile
 8001788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800178c:	f383 8811 	msr	BASEPRI, r3
 8001790:	f3bf 8f6f 	isb	sy
 8001794:	f3bf 8f4f 	dsb	sy
 8001798:	613b      	str	r3, [r7, #16]
}
 800179a:	bf00      	nop
 800179c:	bf00      	nop
 800179e:	e7fd      	b.n	800179c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 80017a0:	69fb      	ldr	r3, [r7, #28]
    }
 80017a2:	4618      	mov	r0, r3
 80017a4:	3720      	adds	r7, #32
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b084      	sub	sp, #16
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	60f8      	str	r0, [r7, #12]
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	607a      	str	r2, [r7, #4]
 80017b6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d103      	bne.n	80017c6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	e002      	b.n	80017cc <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	68ba      	ldr	r2, [r7, #8]
 80017d6:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80017d8:	2101      	movs	r1, #1
 80017da:	69b8      	ldr	r0, [r7, #24]
 80017dc:	f7ff ff04 	bl	80015e8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	78fa      	ldrb	r2, [r7, #3]
 80017e4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80017e8:	bf00      	nop
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08c      	sub	sp, #48	@ 0x30
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10b      	bne.n	8001822 <xQueueReceive+0x32>
    __asm volatile
 800180a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800180e:	f383 8811 	msr	BASEPRI, r3
 8001812:	f3bf 8f6f 	isb	sy
 8001816:	f3bf 8f4f 	dsb	sy
 800181a:	623b      	str	r3, [r7, #32]
}
 800181c:	bf00      	nop
 800181e:	bf00      	nop
 8001820:	e7fd      	b.n	800181e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d103      	bne.n	8001830 <xQueueReceive+0x40>
 8001828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800182a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <xQueueReceive+0x44>
 8001830:	2301      	movs	r3, #1
 8001832:	e000      	b.n	8001836 <xQueueReceive+0x46>
 8001834:	2300      	movs	r3, #0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10b      	bne.n	8001852 <xQueueReceive+0x62>
    __asm volatile
 800183a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800183e:	f383 8811 	msr	BASEPRI, r3
 8001842:	f3bf 8f6f 	isb	sy
 8001846:	f3bf 8f4f 	dsb	sy
 800184a:	61fb      	str	r3, [r7, #28]
}
 800184c:	bf00      	nop
 800184e:	bf00      	nop
 8001850:	e7fd      	b.n	800184e <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001852:	f001 f92d 	bl	8002ab0 <xTaskGetSchedulerState>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d102      	bne.n	8001862 <xQueueReceive+0x72>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <xQueueReceive+0x76>
 8001862:	2301      	movs	r3, #1
 8001864:	e000      	b.n	8001868 <xQueueReceive+0x78>
 8001866:	2300      	movs	r3, #0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d10b      	bne.n	8001884 <xQueueReceive+0x94>
    __asm volatile
 800186c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001870:	f383 8811 	msr	BASEPRI, r3
 8001874:	f3bf 8f6f 	isb	sy
 8001878:	f3bf 8f4f 	dsb	sy
 800187c:	61bb      	str	r3, [r7, #24]
}
 800187e:	bf00      	nop
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001884:	f001 ff7e 	bl	8003784 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800188a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800188c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800188e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001890:	2b00      	cmp	r3, #0
 8001892:	d01f      	beq.n	80018d4 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001894:	68b9      	ldr	r1, [r7, #8]
 8001896:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001898:	f000 f88c 	bl	80019b4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 800189c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189e:	1e5a      	subs	r2, r3, #1
 80018a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018a2:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80018a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00f      	beq.n	80018cc <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80018ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018ae:	3310      	adds	r3, #16
 80018b0:	4618      	mov	r0, r3
 80018b2:	f000 fee7 	bl	8002684 <xTaskRemoveFromEventList>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d007      	beq.n	80018cc <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80018bc:	4b3c      	ldr	r3, [pc, #240]	@ (80019b0 <xQueueReceive+0x1c0>)
 80018be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	f3bf 8f4f 	dsb	sy
 80018c8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80018cc:	f001 ff8c 	bl	80037e8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e069      	b.n	80019a8 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d103      	bne.n	80018e2 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80018da:	f001 ff85 	bl	80037e8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 80018de:	2300      	movs	r3, #0
 80018e0:	e062      	b.n	80019a8 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80018e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d106      	bne.n	80018f6 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80018e8:	f107 0310 	add.w	r3, r7, #16
 80018ec:	4618      	mov	r0, r3
 80018ee:	f000 ffa3 	bl	8002838 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80018f2:	2301      	movs	r3, #1
 80018f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80018f6:	f001 ff77 	bl	80037e8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80018fa:	f000 fbb9 	bl	8002070 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80018fe:	f001 ff41 	bl	8003784 <vPortEnterCritical>
 8001902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001904:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001908:	b25b      	sxtb	r3, r3
 800190a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190e:	d103      	bne.n	8001918 <xQueueReceive+0x128>
 8001910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800191a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800191e:	b25b      	sxtb	r3, r3
 8001920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001924:	d103      	bne.n	800192e <xQueueReceive+0x13e>
 8001926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800192e:	f001 ff5b 	bl	80037e8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001932:	1d3a      	adds	r2, r7, #4
 8001934:	f107 0310 	add.w	r3, r7, #16
 8001938:	4611      	mov	r1, r2
 800193a:	4618      	mov	r0, r3
 800193c:	f000 ff92 	bl	8002864 <xTaskCheckForTimeOut>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d123      	bne.n	800198e <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001946:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001948:	f000 f8ac 	bl	8001aa4 <prvIsQueueEmpty>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d017      	beq.n	8001982 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001954:	3324      	adds	r3, #36	@ 0x24
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	4611      	mov	r1, r2
 800195a:	4618      	mov	r0, r3
 800195c:	f000 fe26 	bl	80025ac <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001960:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001962:	f000 f84d 	bl	8001a00 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001966:	f000 fb91 	bl	800208c <xTaskResumeAll>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d189      	bne.n	8001884 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8001970:	4b0f      	ldr	r3, [pc, #60]	@ (80019b0 <xQueueReceive+0x1c0>)
 8001972:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	f3bf 8f4f 	dsb	sy
 800197c:	f3bf 8f6f 	isb	sy
 8001980:	e780      	b.n	8001884 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001982:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001984:	f000 f83c 	bl	8001a00 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001988:	f000 fb80 	bl	800208c <xTaskResumeAll>
 800198c:	e77a      	b.n	8001884 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800198e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001990:	f000 f836 	bl	8001a00 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001994:	f000 fb7a 	bl	800208c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001998:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800199a:	f000 f883 	bl	8001aa4 <prvIsQueueEmpty>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f43f af6f 	beq.w	8001884 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 80019a6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3730      	adds	r7, #48	@ 0x30
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	e000ed04 	.word	0xe000ed04

080019b4 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d018      	beq.n	80019f8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68da      	ldr	r2, [r3, #12]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ce:	441a      	add	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d303      	bcc.n	80019e8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68d9      	ldr	r1, [r3, #12]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f0:	461a      	mov	r2, r3
 80019f2:	6838      	ldr	r0, [r7, #0]
 80019f4:	f002 fbb9 	bl	800416a <memcpy>
    }
}
 80019f8:	bf00      	nop
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001a08:	f001 febc 	bl	8003784 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001a12:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001a14:	e011      	b.n	8001a3a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d012      	beq.n	8001a44 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3324      	adds	r3, #36	@ 0x24
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 fe2e 	bl	8002684 <xTaskRemoveFromEventList>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8001a2e:	f000 ff81 	bl	8002934 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	3b01      	subs	r3, #1
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	dce9      	bgt.n	8001a16 <prvUnlockQueue+0x16>
 8001a42:	e000      	b.n	8001a46 <prvUnlockQueue+0x46>
                    break;
 8001a44:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	22ff      	movs	r2, #255	@ 0xff
 8001a4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8001a4e:	f001 fecb 	bl	80037e8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001a52:	f001 fe97 	bl	8003784 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001a5c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001a5e:	e011      	b.n	8001a84 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d012      	beq.n	8001a8e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3310      	adds	r3, #16
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f000 fe09 	bl	8002684 <xTaskRemoveFromEventList>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001a78:	f000 ff5c 	bl	8002934 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001a7c:	7bbb      	ldrb	r3, [r7, #14]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001a84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	dce9      	bgt.n	8001a60 <prvUnlockQueue+0x60>
 8001a8c:	e000      	b.n	8001a90 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001a8e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	22ff      	movs	r2, #255	@ 0xff
 8001a94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8001a98:	f001 fea6 	bl	80037e8 <vPortExitCritical>
}
 8001a9c:	bf00      	nop
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001aac:	f001 fe6a 	bl	8003784 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d102      	bne.n	8001abe <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	e001      	b.n	8001ac2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001ac2:	f001 fe91 	bl	80037e8 <vPortExitCritical>

    return xReturn;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8001ad0:	b480      	push	{r7}
 8001ad2:	b087      	sub	sp, #28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10b      	bne.n	8001afc <vQueueAddToRegistry+0x2c>
    __asm volatile
 8001ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ae8:	f383 8811 	msr	BASEPRI, r3
 8001aec:	f3bf 8f6f 	isb	sy
 8001af0:	f3bf 8f4f 	dsb	sy
 8001af4:	60fb      	str	r3, [r7, #12]
}
 8001af6:	bf00      	nop
 8001af8:	bf00      	nop
 8001afa:	e7fd      	b.n	8001af8 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d024      	beq.n	8001b4c <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001b02:	2300      	movs	r3, #0
 8001b04:	617b      	str	r3, [r7, #20]
 8001b06:	e01e      	b.n	8001b46 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001b08:	4a18      	ldr	r2, [pc, #96]	@ (8001b6c <vQueueAddToRegistry+0x9c>)
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	4413      	add	r3, r2
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d105      	bne.n	8001b24 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	4a13      	ldr	r2, [pc, #76]	@ (8001b6c <vQueueAddToRegistry+0x9c>)
 8001b1e:	4413      	add	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
                    break;
 8001b22:	e013      	b.n	8001b4c <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10a      	bne.n	8001b40 <vQueueAddToRegistry+0x70>
 8001b2a:	4a10      	ldr	r2, [pc, #64]	@ (8001b6c <vQueueAddToRegistry+0x9c>)
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d104      	bne.n	8001b40 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	4a0c      	ldr	r2, [pc, #48]	@ (8001b6c <vQueueAddToRegistry+0x9c>)
 8001b3c:	4413      	add	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	3301      	adds	r3, #1
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	2b07      	cmp	r3, #7
 8001b4a:	d9dd      	bls.n	8001b08 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d005      	beq.n	8001b5e <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 8001b5e:	bf00      	nop
 8001b60:	371c      	adds	r7, #28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	200000ec 	.word	0x200000ec

08001b70 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001b80:	f001 fe00 	bl	8003784 <vPortEnterCritical>
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001b8a:	b25b      	sxtb	r3, r3
 8001b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b90:	d103      	bne.n	8001b9a <vQueueWaitForMessageRestricted+0x2a>
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001ba0:	b25b      	sxtb	r3, r3
 8001ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba6:	d103      	bne.n	8001bb0 <vQueueWaitForMessageRestricted+0x40>
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001bb0:	f001 fe1a 	bl	80037e8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d106      	bne.n	8001bca <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	3324      	adds	r3, #36	@ 0x24
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	68b9      	ldr	r1, [r7, #8]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f000 fd17 	bl	80025f8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001bca:	6978      	ldr	r0, [r7, #20]
 8001bcc:	f7ff ff18 	bl	8001a00 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 8001bd0:	bf00      	nop
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	@ 0x28
 8001bdc:	af04      	add	r7, sp, #16
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4618      	mov	r0, r3
 8001bec:	f001 feae 	bl	800394c <pvPortMalloc>
 8001bf0:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d013      	beq.n	8001c20 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8001bf8:	2058      	movs	r0, #88	@ 0x58
 8001bfa:	f001 fea7 	bl	800394c <pvPortMalloc>
 8001bfe:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d008      	beq.n	8001c18 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001c06:	2258      	movs	r2, #88	@ 0x58
 8001c08:	2100      	movs	r1, #0
 8001c0a:	6978      	ldr	r0, [r7, #20]
 8001c0c:	f002 fa31 	bl	8004072 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c16:	e005      	b.n	8001c24 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001c18:	6938      	ldr	r0, [r7, #16]
 8001c1a:	f001 ffc9 	bl	8003bb0 <vPortFree>
 8001c1e:	e001      	b.n	8001c24 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00d      	beq.n	8001c46 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	9303      	str	r3, [sp, #12]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	9302      	str	r3, [sp, #8]
 8001c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c34:	9301      	str	r3, [sp, #4]
 8001c36:	6a3b      	ldr	r3, [r7, #32]
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	68b9      	ldr	r1, [r7, #8]
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f000 f828 	bl	8001c96 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8001c46:	697b      	ldr	r3, [r7, #20]
    }
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b088      	sub	sp, #32
 8001c54:	af02      	add	r7, sp, #8
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
 8001c5c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c60:	9301      	str	r3, [sp, #4]
 8001c62:	6a3b      	ldr	r3, [r7, #32]
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	68b9      	ldr	r1, [r7, #8]
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f7ff ffb3 	bl	8001bd8 <prvCreateTask>
 8001c72:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d005      	beq.n	8001c86 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8001c7a:	6938      	ldr	r0, [r7, #16]
 8001c7c:	f000 f89c 	bl	8001db8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001c80:	2301      	movs	r3, #1
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	e002      	b.n	8001c8c <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001c86:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8a:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8001c8c:	697b      	ldr	r3, [r7, #20]
    }
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b088      	sub	sp, #32
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	60f8      	str	r0, [r7, #12]
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
 8001ca2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8001ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ca6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	461a      	mov	r2, r3
 8001cae:	21a5      	movs	r1, #165	@ 0xa5
 8001cb0:	f002 f9df 	bl	8004072 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8001cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	f023 0307 	bic.w	r3, r3, #7
 8001ccc:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00b      	beq.n	8001cf0 <prvInitialiseNewTask+0x5a>
    __asm volatile
 8001cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cdc:	f383 8811 	msr	BASEPRI, r3
 8001ce0:	f3bf 8f6f 	isb	sy
 8001ce4:	f3bf 8f4f 	dsb	sy
 8001ce8:	617b      	str	r3, [r7, #20]
}
 8001cea:	bf00      	nop
 8001cec:	bf00      	nop
 8001cee:	e7fd      	b.n	8001cec <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d01e      	beq.n	8001d34 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	e012      	b.n	8001d22 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	4413      	add	r3, r2
 8001d02:	7819      	ldrb	r1, [r3, #0]
 8001d04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	4413      	add	r3, r2
 8001d0a:	3334      	adds	r3, #52	@ 0x34
 8001d0c:	460a      	mov	r2, r1
 8001d0e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001d10:	68ba      	ldr	r2, [r7, #8]
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	4413      	add	r3, r2
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d006      	beq.n	8001d2a <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	61fb      	str	r3, [r7, #28]
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	2b09      	cmp	r3, #9
 8001d26:	d9e9      	bls.n	8001cfc <prvInitialiseNewTask+0x66>
 8001d28:	e000      	b.n	8001d2c <prvInitialiseNewTask+0x96>
            {
                break;
 8001d2a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8001d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	d90b      	bls.n	8001d52 <prvInitialiseNewTask+0xbc>
    __asm volatile
 8001d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d3e:	f383 8811 	msr	BASEPRI, r3
 8001d42:	f3bf 8f6f 	isb	sy
 8001d46:	f3bf 8f4f 	dsb	sy
 8001d4a:	613b      	str	r3, [r7, #16]
}
 8001d4c:	bf00      	nop
 8001d4e:	bf00      	nop
 8001d50:	e7fd      	b.n	8001d4e <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d901      	bls.n	8001d5c <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001d58:	2304      	movs	r3, #4
 8001d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d60:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d66:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fbca 	bl	8001506 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d74:	3318      	adds	r3, #24
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fbc5 	bl	8001506 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d80:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8001d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d84:	f1c3 0205 	rsb	r2, r3, #5
 8001d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d8a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d90:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	68f9      	ldr	r1, [r7, #12]
 8001d96:	69b8      	ldr	r0, [r7, #24]
 8001d98:	f001 fb76 	bl	8003488 <pxPortInitialiseStack>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001da0:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8001da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d002      	beq.n	8001dae <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001daa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001dac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001dae:	bf00      	nop
 8001db0:	3720      	adds	r7, #32
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8001dc0:	f001 fce0 	bl	8003784 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8001dc4:	4b41      	ldr	r3, [pc, #260]	@ (8001ecc <prvAddNewTaskToReadyList+0x114>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	4a40      	ldr	r2, [pc, #256]	@ (8001ecc <prvAddNewTaskToReadyList+0x114>)
 8001dcc:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8001dce:	4b40      	ldr	r3, [pc, #256]	@ (8001ed0 <prvAddNewTaskToReadyList+0x118>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d109      	bne.n	8001dea <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8001dd6:	4a3e      	ldr	r2, [pc, #248]	@ (8001ed0 <prvAddNewTaskToReadyList+0x118>)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001ddc:	4b3b      	ldr	r3, [pc, #236]	@ (8001ecc <prvAddNewTaskToReadyList+0x114>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d110      	bne.n	8001e06 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8001de4:	f000 fdca 	bl	800297c <prvInitialiseTaskLists>
 8001de8:	e00d      	b.n	8001e06 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8001dea:	4b3a      	ldr	r3, [pc, #232]	@ (8001ed4 <prvAddNewTaskToReadyList+0x11c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d109      	bne.n	8001e06 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001df2:	4b37      	ldr	r3, [pc, #220]	@ (8001ed0 <prvAddNewTaskToReadyList+0x118>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d802      	bhi.n	8001e06 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8001e00:	4a33      	ldr	r2, [pc, #204]	@ (8001ed0 <prvAddNewTaskToReadyList+0x118>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8001e06:	4b34      	ldr	r3, [pc, #208]	@ (8001ed8 <prvAddNewTaskToReadyList+0x120>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	4a32      	ldr	r2, [pc, #200]	@ (8001ed8 <prvAddNewTaskToReadyList+0x120>)
 8001e0e:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001e10:	4b31      	ldr	r3, [pc, #196]	@ (8001ed8 <prvAddNewTaskToReadyList+0x120>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	4b2e      	ldr	r3, [pc, #184]	@ (8001edc <prvAddNewTaskToReadyList+0x124>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	4a2d      	ldr	r2, [pc, #180]	@ (8001edc <prvAddNewTaskToReadyList+0x124>)
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e2e:	492c      	ldr	r1, [pc, #176]	@ (8001ee0 <prvAddNewTaskToReadyList+0x128>)
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	609a      	str	r2, [r3, #8]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	3204      	adds	r2, #4
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	1d1a      	adds	r2, r3, #4
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e64:	4613      	mov	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ee0 <prvAddNewTaskToReadyList+0x128>)
 8001e6e:	441a      	add	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	615a      	str	r2, [r3, #20]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e78:	4919      	ldr	r1, [pc, #100]	@ (8001ee0 <prvAddNewTaskToReadyList+0x128>)
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001e8a:	1c59      	adds	r1, r3, #1
 8001e8c:	4814      	ldr	r0, [pc, #80]	@ (8001ee0 <prvAddNewTaskToReadyList+0x128>)
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4403      	add	r3, r0
 8001e98:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8001e9a:	f001 fca5 	bl	80037e8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8001e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed4 <prvAddNewTaskToReadyList+0x11c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00e      	beq.n	8001ec4 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed0 <prvAddNewTaskToReadyList+0x118>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d207      	bcs.n	8001ec4 <prvAddNewTaskToReadyList+0x10c>
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee4 <prvAddNewTaskToReadyList+0x12c>)
 8001eb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	f3bf 8f4f 	dsb	sy
 8001ec0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001ec4:	bf00      	nop
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20000204 	.word	0x20000204
 8001ed0:	2000012c 	.word	0x2000012c
 8001ed4:	20000210 	.word	0x20000210
 8001ed8:	20000220 	.word	0x20000220
 8001edc:	2000020c 	.word	0x2000020c
 8001ee0:	20000130 	.word	0x20000130
 8001ee4:	e000ed04 	.word	0xe000ed04

08001ee8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d018      	beq.n	8001f2c <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 8001efa:	f000 f8b9 	bl	8002070 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8001efe:	4b13      	ldr	r3, [pc, #76]	@ (8001f4c <vTaskDelay+0x64>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d00b      	beq.n	8001f1e <vTaskDelay+0x36>
    __asm volatile
 8001f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f0a:	f383 8811 	msr	BASEPRI, r3
 8001f0e:	f3bf 8f6f 	isb	sy
 8001f12:	f3bf 8f4f 	dsb	sy
 8001f16:	60bb      	str	r3, [r7, #8]
}
 8001f18:	bf00      	nop
 8001f1a:	bf00      	nop
 8001f1c:	e7fd      	b.n	8001f1a <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001f1e:	2100      	movs	r1, #0
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 ff9d 	bl	8002e60 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001f26:	f000 f8b1 	bl	800208c <xTaskResumeAll>
 8001f2a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d107      	bne.n	8001f42 <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 8001f32:	4b07      	ldr	r3, [pc, #28]	@ (8001f50 <vTaskDelay+0x68>)
 8001f34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	f3bf 8f4f 	dsb	sy
 8001f3e:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 8001f42:	bf00      	nop
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	2000022c 	.word	0x2000022c
 8001f50:	e000ed04 	.word	0xe000ed04

08001f54 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	@ 0x28
 8001f58:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	e011      	b.n	8001f8c <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8001f68:	4a1c      	ldr	r2, [pc, #112]	@ (8001fdc <prvCreateIdleTasks+0x88>)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	7819      	ldrb	r1, [r3, #0]
 8001f70:	1d3a      	adds	r2, r7, #4
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	4413      	add	r3, r2
 8001f76:	460a      	mov	r2, r1
 8001f78:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8001f7a:	1d3a      	adds	r2, r7, #4
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	4413      	add	r3, r2
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d006      	beq.n	8001f94 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	2b09      	cmp	r3, #9
 8001f90:	ddea      	ble.n	8001f68 <prvCreateIdleTasks+0x14>
 8001f92:	e000      	b.n	8001f96 <prvCreateIdleTasks+0x42>
        {
            break;
 8001f94:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8001f96:	2300      	movs	r3, #0
 8001f98:	61bb      	str	r3, [r7, #24]
 8001f9a:	e015      	b.n	8001fc8 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8001f9c:	4b10      	ldr	r3, [pc, #64]	@ (8001fe0 <prvCreateIdleTasks+0x8c>)
 8001f9e:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe4 <prvCreateIdleTasks+0x90>)
 8001fa6:	4413      	add	r3, r2
 8001fa8:	1d39      	adds	r1, r7, #4
 8001faa:	9301      	str	r3, [sp, #4]
 8001fac:	2300      	movs	r3, #0
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	2282      	movs	r2, #130	@ 0x82
 8001fb4:	6938      	ldr	r0, [r7, #16]
 8001fb6:	f7ff fe4b 	bl	8001c50 <xTaskCreate>
 8001fba:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d006      	beq.n	8001fd0 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	61bb      	str	r3, [r7, #24]
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	dde6      	ble.n	8001f9c <prvCreateIdleTasks+0x48>
 8001fce:	e000      	b.n	8001fd2 <prvCreateIdleTasks+0x7e>
        {
            break;
 8001fd0:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8001fd2:	69fb      	ldr	r3, [r7, #28]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3720      	adds	r7, #32
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	08004d1c 	.word	0x08004d1c
 8001fe0:	0800294d 	.word	0x0800294d
 8001fe4:	20000228 	.word	0x20000228

08001fe8 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8001fee:	f7ff ffb1 	bl	8001f54 <prvCreateIdleTasks>
 8001ff2:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d102      	bne.n	8002000 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8001ffa:	f000 ffb3 	bl	8002f64 <xTimerCreateTimerTask>
 8001ffe:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d116      	bne.n	8002034 <vTaskStartScheduler+0x4c>
    __asm volatile
 8002006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800200a:	f383 8811 	msr	BASEPRI, r3
 800200e:	f3bf 8f6f 	isb	sy
 8002012:	f3bf 8f4f 	dsb	sy
 8002016:	60bb      	str	r3, [r7, #8]
}
 8002018:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800201a:	4b11      	ldr	r3, [pc, #68]	@ (8002060 <vTaskStartScheduler+0x78>)
 800201c:	f04f 32ff 	mov.w	r2, #4294967295
 8002020:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002022:	4b10      	ldr	r3, [pc, #64]	@ (8002064 <vTaskStartScheduler+0x7c>)
 8002024:	2201      	movs	r2, #1
 8002026:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002028:	4b0f      	ldr	r3, [pc, #60]	@ (8002068 <vTaskStartScheduler+0x80>)
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 800202e:	f001 fab9 	bl	80035a4 <xPortStartScheduler>
 8002032:	e00f      	b.n	8002054 <vTaskStartScheduler+0x6c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800203a:	d10b      	bne.n	8002054 <vTaskStartScheduler+0x6c>
    __asm volatile
 800203c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002040:	f383 8811 	msr	BASEPRI, r3
 8002044:	f3bf 8f6f 	isb	sy
 8002048:	f3bf 8f4f 	dsb	sy
 800204c:	607b      	str	r3, [r7, #4]
}
 800204e:	bf00      	nop
 8002050:	bf00      	nop
 8002052:	e7fd      	b.n	8002050 <vTaskStartScheduler+0x68>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002054:	4b05      	ldr	r3, [pc, #20]	@ (800206c <vTaskStartScheduler+0x84>)
 8002056:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8002058:	bf00      	nop
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20000224 	.word	0x20000224
 8002064:	20000210 	.word	0x20000210
 8002068:	20000208 	.word	0x20000208
 800206c:	08004d34 	.word	0x08004d34

08002070 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8002074:	4b04      	ldr	r3, [pc, #16]	@ (8002088 <vTaskSuspendAll+0x18>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	3301      	adds	r3, #1
 800207a:	4a03      	ldr	r2, [pc, #12]	@ (8002088 <vTaskSuspendAll+0x18>)
 800207c:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 800207e:	bf00      	nop
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	2000022c 	.word	0x2000022c

0800208c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b088      	sub	sp, #32
 8002090:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002096:	2300      	movs	r3, #0
 8002098:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 800209a:	f001 fb73 	bl	8003784 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80020a2:	4b75      	ldr	r3, [pc, #468]	@ (8002278 <xTaskResumeAll+0x1ec>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10b      	bne.n	80020c2 <xTaskResumeAll+0x36>
    __asm volatile
 80020aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020ae:	f383 8811 	msr	BASEPRI, r3
 80020b2:	f3bf 8f6f 	isb	sy
 80020b6:	f3bf 8f4f 	dsb	sy
 80020ba:	603b      	str	r3, [r7, #0]
}
 80020bc:	bf00      	nop
 80020be:	bf00      	nop
 80020c0:	e7fd      	b.n	80020be <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80020c2:	4b6d      	ldr	r3, [pc, #436]	@ (8002278 <xTaskResumeAll+0x1ec>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	4a6b      	ldr	r2, [pc, #428]	@ (8002278 <xTaskResumeAll+0x1ec>)
 80020ca:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80020cc:	4b6a      	ldr	r3, [pc, #424]	@ (8002278 <xTaskResumeAll+0x1ec>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f040 80ca 	bne.w	800226a <xTaskResumeAll+0x1de>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80020d6:	4b69      	ldr	r3, [pc, #420]	@ (800227c <xTaskResumeAll+0x1f0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 80c5 	beq.w	800226a <xTaskResumeAll+0x1de>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80020e0:	e08e      	b.n	8002200 <xTaskResumeAll+0x174>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80020e2:	4b67      	ldr	r3, [pc, #412]	@ (8002280 <xTaskResumeAll+0x1f4>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	69fa      	ldr	r2, [r7, #28]
 80020f6:	6a12      	ldr	r2, [r2, #32]
 80020f8:	609a      	str	r2, [r3, #8]
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	69fa      	ldr	r2, [r7, #28]
 8002100:	69d2      	ldr	r2, [r2, #28]
 8002102:	605a      	str	r2, [r3, #4]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	3318      	adds	r3, #24
 800210c:	429a      	cmp	r2, r3
 800210e:	d103      	bne.n	8002118 <xTaskResumeAll+0x8c>
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	6a1a      	ldr	r2, [r3, #32]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	605a      	str	r2, [r3, #4]
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	2200      	movs	r2, #0
 800211c:	629a      	str	r2, [r3, #40]	@ 0x28
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	1e5a      	subs	r2, r3, #1
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	69fa      	ldr	r2, [r7, #28]
 8002134:	68d2      	ldr	r2, [r2, #12]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	69fa      	ldr	r2, [r7, #28]
 800213e:	6892      	ldr	r2, [r2, #8]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3304      	adds	r3, #4
 800214a:	429a      	cmp	r2, r3
 800214c:	d103      	bne.n	8002156 <xTaskResumeAll+0xca>
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	2200      	movs	r2, #0
 800215a:	615a      	str	r2, [r3, #20]
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	1e5a      	subs	r2, r3, #1
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216a:	2201      	movs	r2, #1
 800216c:	409a      	lsls	r2, r3
 800216e:	4b45      	ldr	r3, [pc, #276]	@ (8002284 <xTaskResumeAll+0x1f8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4313      	orrs	r3, r2
 8002174:	4a43      	ldr	r2, [pc, #268]	@ (8002284 <xTaskResumeAll+0x1f8>)
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800217c:	4942      	ldr	r1, [pc, #264]	@ (8002288 <xTaskResumeAll+0x1fc>)
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	440b      	add	r3, r1
 8002188:	3304      	adds	r3, #4
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	607b      	str	r3, [r7, #4]
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	60da      	str	r2, [r3, #12]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	69fa      	ldr	r2, [r7, #28]
 80021a2:	3204      	adds	r2, #4
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	1d1a      	adds	r2, r3, #4
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	609a      	str	r2, [r3, #8]
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4a33      	ldr	r2, [pc, #204]	@ (8002288 <xTaskResumeAll+0x1fc>)
 80021bc:	441a      	add	r2, r3
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	615a      	str	r2, [r3, #20]
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021c6:	4930      	ldr	r1, [pc, #192]	@ (8002288 <xTaskResumeAll+0x1fc>)
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	69fa      	ldr	r2, [r7, #28]
 80021d6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80021d8:	1c59      	adds	r1, r3, #1
 80021da:	482b      	ldr	r0, [pc, #172]	@ (8002288 <xTaskResumeAll+0x1fc>)
 80021dc:	4613      	mov	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4403      	add	r3, r0
 80021e6:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021ec:	4b27      	ldr	r3, [pc, #156]	@ (800228c <xTaskResumeAll+0x200>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d904      	bls.n	8002200 <xTaskResumeAll+0x174>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 80021f6:	4a26      	ldr	r2, [pc, #152]	@ (8002290 <xTaskResumeAll+0x204>)
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	2101      	movs	r1, #1
 80021fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002200:	4b1f      	ldr	r3, [pc, #124]	@ (8002280 <xTaskResumeAll+0x1f4>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	f47f af6c 	bne.w	80020e2 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <xTaskResumeAll+0x188>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8002210:	f000 fc32 	bl	8002a78 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002214:	4b1f      	ldr	r3, [pc, #124]	@ (8002294 <xTaskResumeAll+0x208>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d012      	beq.n	8002246 <xTaskResumeAll+0x1ba>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8002220:	f000 f84c 	bl	80022bc <xTaskIncrementTick>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d004      	beq.n	8002234 <xTaskResumeAll+0x1a8>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800222a:	4a19      	ldr	r2, [pc, #100]	@ (8002290 <xTaskResumeAll+0x204>)
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	2101      	movs	r1, #1
 8002230:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	3b01      	subs	r3, #1
 8002238:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1ef      	bne.n	8002220 <xTaskResumeAll+0x194>

                            xPendedTicks = 0;
 8002240:	4b14      	ldr	r3, [pc, #80]	@ (8002294 <xTaskResumeAll+0x208>)
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8002246:	4a12      	ldr	r2, [pc, #72]	@ (8002290 <xTaskResumeAll+0x204>)
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00b      	beq.n	800226a <xTaskResumeAll+0x1de>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002252:	2301      	movs	r3, #1
 8002254:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8002256:	4b0d      	ldr	r3, [pc, #52]	@ (800228c <xTaskResumeAll+0x200>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4b0f      	ldr	r3, [pc, #60]	@ (8002298 <xTaskResumeAll+0x20c>)
 800225c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	f3bf 8f4f 	dsb	sy
 8002266:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800226a:	f001 fabd 	bl	80037e8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 800226e:	69bb      	ldr	r3, [r7, #24]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3720      	adds	r7, #32
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	2000022c 	.word	0x2000022c
 800227c:	20000204 	.word	0x20000204
 8002280:	200001c4 	.word	0x200001c4
 8002284:	2000020c 	.word	0x2000020c
 8002288:	20000130 	.word	0x20000130
 800228c:	2000012c 	.word	0x2000012c
 8002290:	20000218 	.word	0x20000218
 8002294:	20000214 	.word	0x20000214
 8002298:	e000ed04 	.word	0xe000ed04

0800229c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80022a2:	4b05      	ldr	r3, [pc, #20]	@ (80022b8 <xTaskGetTickCount+0x1c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 80022a8:	687b      	ldr	r3, [r7, #4]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	20000208 	.word	0x20000208

080022bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08a      	sub	sp, #40	@ 0x28
 80022c0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80022c6:	4b7f      	ldr	r3, [pc, #508]	@ (80024c4 <xTaskIncrementTick+0x208>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f040 80ef 	bne.w	80024ae <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80022d0:	4b7d      	ldr	r3, [pc, #500]	@ (80024c8 <xTaskIncrementTick+0x20c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	3301      	adds	r3, #1
 80022d6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80022d8:	4a7b      	ldr	r2, [pc, #492]	@ (80024c8 <xTaskIncrementTick+0x20c>)
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d121      	bne.n	8002328 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80022e4:	4b79      	ldr	r3, [pc, #484]	@ (80024cc <xTaskIncrementTick+0x210>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00b      	beq.n	8002306 <xTaskIncrementTick+0x4a>
    __asm volatile
 80022ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022f2:	f383 8811 	msr	BASEPRI, r3
 80022f6:	f3bf 8f6f 	isb	sy
 80022fa:	f3bf 8f4f 	dsb	sy
 80022fe:	607b      	str	r3, [r7, #4]
}
 8002300:	bf00      	nop
 8002302:	bf00      	nop
 8002304:	e7fd      	b.n	8002302 <xTaskIncrementTick+0x46>
 8002306:	4b71      	ldr	r3, [pc, #452]	@ (80024cc <xTaskIncrementTick+0x210>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	61fb      	str	r3, [r7, #28]
 800230c:	4b70      	ldr	r3, [pc, #448]	@ (80024d0 <xTaskIncrementTick+0x214>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a6e      	ldr	r2, [pc, #440]	@ (80024cc <xTaskIncrementTick+0x210>)
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	4a6e      	ldr	r2, [pc, #440]	@ (80024d0 <xTaskIncrementTick+0x214>)
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	4b6e      	ldr	r3, [pc, #440]	@ (80024d4 <xTaskIncrementTick+0x218>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	3301      	adds	r3, #1
 8002320:	4a6c      	ldr	r2, [pc, #432]	@ (80024d4 <xTaskIncrementTick+0x218>)
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	f000 fba8 	bl	8002a78 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002328:	4b6b      	ldr	r3, [pc, #428]	@ (80024d8 <xTaskIncrementTick+0x21c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6a3a      	ldr	r2, [r7, #32]
 800232e:	429a      	cmp	r2, r3
 8002330:	f0c0 80a8 	bcc.w	8002484 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002334:	4b65      	ldr	r3, [pc, #404]	@ (80024cc <xTaskIncrementTick+0x210>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d104      	bne.n	8002348 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800233e:	4b66      	ldr	r3, [pc, #408]	@ (80024d8 <xTaskIncrementTick+0x21c>)
 8002340:	f04f 32ff 	mov.w	r2, #4294967295
 8002344:	601a      	str	r2, [r3, #0]
                    break;
 8002346:	e09d      	b.n	8002484 <xTaskIncrementTick+0x1c8>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002348:	4b60      	ldr	r3, [pc, #384]	@ (80024cc <xTaskIncrementTick+0x210>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002358:	6a3a      	ldr	r2, [r7, #32]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	429a      	cmp	r2, r3
 800235e:	d203      	bcs.n	8002368 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002360:	4a5d      	ldr	r2, [pc, #372]	@ (80024d8 <xTaskIncrementTick+0x21c>)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	6013      	str	r3, [r2, #0]
                        break;
 8002366:	e08d      	b.n	8002484 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	68d2      	ldr	r2, [r2, #12]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	6892      	ldr	r2, [r2, #8]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	3304      	adds	r3, #4
 800238a:	429a      	cmp	r2, r3
 800238c:	d103      	bne.n	8002396 <xTaskIncrementTick+0xda>
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	2200      	movs	r2, #0
 800239a:	615a      	str	r2, [r3, #20]
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	1e5a      	subs	r2, r3, #1
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d01e      	beq.n	80023ec <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	6a12      	ldr	r2, [r2, #32]
 80023bc:	609a      	str	r2, [r3, #8]
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	69d2      	ldr	r2, [r2, #28]
 80023c6:	605a      	str	r2, [r3, #4]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	3318      	adds	r3, #24
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d103      	bne.n	80023dc <xTaskIncrementTick+0x120>
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	6a1a      	ldr	r2, [r3, #32]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	605a      	str	r2, [r3, #4]
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	2200      	movs	r2, #0
 80023e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	1e5a      	subs	r2, r3, #1
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f0:	2201      	movs	r2, #1
 80023f2:	409a      	lsls	r2, r3
 80023f4:	4b39      	ldr	r3, [pc, #228]	@ (80024dc <xTaskIncrementTick+0x220>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	4a38      	ldr	r2, [pc, #224]	@ (80024dc <xTaskIncrementTick+0x220>)
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002402:	4937      	ldr	r1, [pc, #220]	@ (80024e0 <xTaskIncrementTick+0x224>)
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	3304      	adds	r3, #4
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	609a      	str	r2, [r3, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	3204      	adds	r2, #4
 800242a:	605a      	str	r2, [r3, #4]
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	1d1a      	adds	r2, r3, #4
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4a27      	ldr	r2, [pc, #156]	@ (80024e0 <xTaskIncrementTick+0x224>)
 8002442:	441a      	add	r2, r3
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	615a      	str	r2, [r3, #20]
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800244c:	4924      	ldr	r1, [pc, #144]	@ (80024e0 <xTaskIncrementTick+0x224>)
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	440b      	add	r3, r1
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800245e:	1c59      	adds	r1, r3, #1
 8002460:	481f      	ldr	r0, [pc, #124]	@ (80024e0 <xTaskIncrementTick+0x224>)
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4403      	add	r3, r0
 800246c:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002472:	4b1c      	ldr	r3, [pc, #112]	@ (80024e4 <xTaskIncrementTick+0x228>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002478:	429a      	cmp	r2, r3
 800247a:	f67f af5b 	bls.w	8002334 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 800247e:	2301      	movs	r3, #1
 8002480:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002482:	e757      	b.n	8002334 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8002484:	4b17      	ldr	r3, [pc, #92]	@ (80024e4 <xTaskIncrementTick+0x228>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800248a:	4915      	ldr	r1, [pc, #84]	@ (80024e0 <xTaskIncrementTick+0x224>)
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d901      	bls.n	80024a0 <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 800249c:	2301      	movs	r3, #1
 800249e:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 80024a0:	4b11      	ldr	r3, [pc, #68]	@ (80024e8 <xTaskIncrementTick+0x22c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d007      	beq.n	80024b8 <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 80024a8:	2301      	movs	r3, #1
 80024aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80024ac:	e004      	b.n	80024b8 <xTaskIncrementTick+0x1fc>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80024ae:	4b0f      	ldr	r3, [pc, #60]	@ (80024ec <xTaskIncrementTick+0x230>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	3301      	adds	r3, #1
 80024b4:	4a0d      	ldr	r2, [pc, #52]	@ (80024ec <xTaskIncrementTick+0x230>)
 80024b6:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 80024b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3728      	adds	r7, #40	@ 0x28
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	2000022c 	.word	0x2000022c
 80024c8:	20000208 	.word	0x20000208
 80024cc:	200001bc 	.word	0x200001bc
 80024d0:	200001c0 	.word	0x200001c0
 80024d4:	2000021c 	.word	0x2000021c
 80024d8:	20000224 	.word	0x20000224
 80024dc:	2000020c 	.word	0x2000020c
 80024e0:	20000130 	.word	0x20000130
 80024e4:	2000012c 	.word	0x2000012c
 80024e8:	20000218 	.word	0x20000218
 80024ec:	20000214 	.word	0x20000214

080024f0 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 80024f0:	b480      	push	{r7}
 80024f2:	b087      	sub	sp, #28
 80024f4:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80024f6:	4b28      	ldr	r3, [pc, #160]	@ (8002598 <vTaskSwitchContext+0xa8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 80024fe:	4b27      	ldr	r3, [pc, #156]	@ (800259c <vTaskSwitchContext+0xac>)
 8002500:	2201      	movs	r2, #1
 8002502:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8002504:	e041      	b.n	800258a <vTaskSwitchContext+0x9a>
            xYieldPendings[ 0 ] = pdFALSE;
 8002506:	4b25      	ldr	r3, [pc, #148]	@ (800259c <vTaskSwitchContext+0xac>)
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 800250c:	4b24      	ldr	r3, [pc, #144]	@ (80025a0 <vTaskSwitchContext+0xb0>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	fab3 f383 	clz	r3, r3
 8002518:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 800251a:	7afb      	ldrb	r3, [r7, #11]
 800251c:	f1c3 031f 	rsb	r3, r3, #31
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	4920      	ldr	r1, [pc, #128]	@ (80025a4 <vTaskSwitchContext+0xb4>)
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	4613      	mov	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	440b      	add	r3, r1
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10b      	bne.n	800254e <vTaskSwitchContext+0x5e>
    __asm volatile
 8002536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800253a:	f383 8811 	msr	BASEPRI, r3
 800253e:	f3bf 8f6f 	isb	sy
 8002542:	f3bf 8f4f 	dsb	sy
 8002546:	607b      	str	r3, [r7, #4]
}
 8002548:	bf00      	nop
 800254a:	bf00      	nop
 800254c:	e7fd      	b.n	800254a <vTaskSwitchContext+0x5a>
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4a12      	ldr	r2, [pc, #72]	@ (80025a4 <vTaskSwitchContext+0xb4>)
 800255a:	4413      	add	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	605a      	str	r2, [r3, #4]
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	3308      	adds	r3, #8
 8002570:	429a      	cmp	r2, r3
 8002572:	d103      	bne.n	800257c <vTaskSwitchContext+0x8c>
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	605a      	str	r2, [r3, #4]
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	4a09      	ldr	r2, [pc, #36]	@ (80025a8 <vTaskSwitchContext+0xb8>)
 8002584:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8002586:	4b08      	ldr	r3, [pc, #32]	@ (80025a8 <vTaskSwitchContext+0xb8>)
 8002588:	681b      	ldr	r3, [r3, #0]
    }
 800258a:	bf00      	nop
 800258c:	371c      	adds	r7, #28
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	2000022c 	.word	0x2000022c
 800259c:	20000218 	.word	0x20000218
 80025a0:	2000020c 	.word	0x2000020c
 80025a4:	20000130 	.word	0x20000130
 80025a8:	2000012c 	.word	0x2000012c

080025ac <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10b      	bne.n	80025d4 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 80025bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025c0:	f383 8811 	msr	BASEPRI, r3
 80025c4:	f3bf 8f6f 	isb	sy
 80025c8:	f3bf 8f4f 	dsb	sy
 80025cc:	60fb      	str	r3, [r7, #12]
}
 80025ce:	bf00      	nop
 80025d0:	bf00      	nop
 80025d2:	e7fd      	b.n	80025d0 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80025d4:	4b07      	ldr	r3, [pc, #28]	@ (80025f4 <vTaskPlaceOnEventList+0x48>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	3318      	adds	r3, #24
 80025da:	4619      	mov	r1, r3
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7fe ff9f 	bl	8001520 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80025e2:	2101      	movs	r1, #1
 80025e4:	6838      	ldr	r0, [r7, #0]
 80025e6:	f000 fc3b 	bl	8002e60 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 80025ea:	bf00      	nop
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	2000012c 	.word	0x2000012c

080025f8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10b      	bne.n	8002622 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 800260a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800260e:	f383 8811 	msr	BASEPRI, r3
 8002612:	f3bf 8f6f 	isb	sy
 8002616:	f3bf 8f4f 	dsb	sy
 800261a:	613b      	str	r3, [r7, #16]
}
 800261c:	bf00      	nop
 800261e:	bf00      	nop
 8002620:	e7fd      	b.n	800261e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	4b15      	ldr	r3, [pc, #84]	@ (8002680 <vTaskPlaceOnEventListRestricted+0x88>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	61da      	str	r2, [r3, #28]
 8002630:	4b13      	ldr	r3, [pc, #76]	@ (8002680 <vTaskPlaceOnEventListRestricted+0x88>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	6892      	ldr	r2, [r2, #8]
 8002638:	621a      	str	r2, [r3, #32]
 800263a:	4b11      	ldr	r3, [pc, #68]	@ (8002680 <vTaskPlaceOnEventListRestricted+0x88>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	3218      	adds	r2, #24
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	4b0e      	ldr	r3, [pc, #56]	@ (8002680 <vTaskPlaceOnEventListRestricted+0x88>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f103 0218 	add.w	r2, r3, #24
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	609a      	str	r2, [r3, #8]
 8002652:	4b0b      	ldr	r3, [pc, #44]	@ (8002680 <vTaskPlaceOnEventListRestricted+0x88>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	629a      	str	r2, [r3, #40]	@ 0x28
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	1c5a      	adds	r2, r3, #1
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d002      	beq.n	8002670 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 800266a:	f04f 33ff 	mov.w	r3, #4294967295
 800266e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002670:	6879      	ldr	r1, [r7, #4]
 8002672:	68b8      	ldr	r0, [r7, #8]
 8002674:	f000 fbf4 	bl	8002e60 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 8002678:	bf00      	nop
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	2000012c 	.word	0x2000012c

08002684 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002684:	b480      	push	{r7}
 8002686:	b08b      	sub	sp, #44	@ 0x2c
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002694:	6a3b      	ldr	r3, [r7, #32]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10b      	bne.n	80026b2 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 800269a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800269e:	f383 8811 	msr	BASEPRI, r3
 80026a2:	f3bf 8f6f 	isb	sy
 80026a6:	f3bf 8f4f 	dsb	sy
 80026aa:	60fb      	str	r3, [r7, #12]
}
 80026ac:	bf00      	nop
 80026ae:	bf00      	nop
 80026b0:	e7fd      	b.n	80026ae <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b6:	61fb      	str	r3, [r7, #28]
 80026b8:	6a3b      	ldr	r3, [r7, #32]
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	6a3a      	ldr	r2, [r7, #32]
 80026be:	6a12      	ldr	r2, [r2, #32]
 80026c0:	609a      	str	r2, [r3, #8]
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	6a3a      	ldr	r2, [r7, #32]
 80026c8:	69d2      	ldr	r2, [r2, #28]
 80026ca:	605a      	str	r2, [r3, #4]
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	6a3b      	ldr	r3, [r7, #32]
 80026d2:	3318      	adds	r3, #24
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d103      	bne.n	80026e0 <xTaskRemoveFromEventList+0x5c>
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	6a1a      	ldr	r2, [r3, #32]
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	605a      	str	r2, [r3, #4]
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	2200      	movs	r2, #0
 80026e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	1e5a      	subs	r2, r3, #1
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80026f0:	4b4b      	ldr	r3, [pc, #300]	@ (8002820 <xTaskRemoveFromEventList+0x19c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d160      	bne.n	80027ba <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	6a3a      	ldr	r2, [r7, #32]
 8002704:	68d2      	ldr	r2, [r2, #12]
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	6a3a      	ldr	r2, [r7, #32]
 800270e:	6892      	ldr	r2, [r2, #8]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	3304      	adds	r3, #4
 800271a:	429a      	cmp	r2, r3
 800271c:	d103      	bne.n	8002726 <xTaskRemoveFromEventList+0xa2>
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	605a      	str	r2, [r3, #4]
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	2200      	movs	r2, #0
 800272a:	615a      	str	r2, [r3, #20]
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	1e5a      	subs	r2, r3, #1
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002736:	6a3b      	ldr	r3, [r7, #32]
 8002738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800273a:	2201      	movs	r2, #1
 800273c:	409a      	lsls	r2, r3
 800273e:	4b39      	ldr	r3, [pc, #228]	@ (8002824 <xTaskRemoveFromEventList+0x1a0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4313      	orrs	r3, r2
 8002744:	4a37      	ldr	r2, [pc, #220]	@ (8002824 <xTaskRemoveFromEventList+0x1a0>)
 8002746:	6013      	str	r3, [r2, #0]
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800274c:	4936      	ldr	r1, [pc, #216]	@ (8002828 <xTaskRemoveFromEventList+0x1a4>)
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	3304      	adds	r3, #4
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	60da      	str	r2, [r3, #12]
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	6a3a      	ldr	r2, [r7, #32]
 8002772:	3204      	adds	r2, #4
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	1d1a      	adds	r2, r3, #4
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	609a      	str	r2, [r3, #8]
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002782:	4613      	mov	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4a27      	ldr	r2, [pc, #156]	@ (8002828 <xTaskRemoveFromEventList+0x1a4>)
 800278c:	441a      	add	r2, r3
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	615a      	str	r2, [r3, #20]
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002796:	4924      	ldr	r1, [pc, #144]	@ (8002828 <xTaskRemoveFromEventList+0x1a4>)
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	440b      	add	r3, r1
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6a3a      	ldr	r2, [r7, #32]
 80027a6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80027a8:	1c59      	adds	r1, r3, #1
 80027aa:	481f      	ldr	r0, [pc, #124]	@ (8002828 <xTaskRemoveFromEventList+0x1a4>)
 80027ac:	4613      	mov	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4403      	add	r3, r0
 80027b6:	6019      	str	r1, [r3, #0]
 80027b8:	e01b      	b.n	80027f2 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80027ba:	4b1c      	ldr	r3, [pc, #112]	@ (800282c <xTaskRemoveFromEventList+0x1a8>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	61bb      	str	r3, [r7, #24]
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	61da      	str	r2, [r3, #28]
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	621a      	str	r2, [r3, #32]
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	6a3a      	ldr	r2, [r7, #32]
 80027d4:	3218      	adds	r2, #24
 80027d6:	605a      	str	r2, [r3, #4]
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	f103 0218 	add.w	r2, r3, #24
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	609a      	str	r2, [r3, #8]
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	4a11      	ldr	r2, [pc, #68]	@ (800282c <xTaskRemoveFromEventList+0x1a8>)
 80027e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80027e8:	4b10      	ldr	r3, [pc, #64]	@ (800282c <xTaskRemoveFromEventList+0x1a8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	3301      	adds	r3, #1
 80027ee:	4a0f      	ldr	r2, [pc, #60]	@ (800282c <xTaskRemoveFromEventList+0x1a8>)
 80027f0:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002830 <xTaskRemoveFromEventList+0x1ac>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d905      	bls.n	800280c <xTaskRemoveFromEventList+0x188>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8002800:	2301      	movs	r3, #1
 8002802:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002804:	4b0b      	ldr	r3, [pc, #44]	@ (8002834 <xTaskRemoveFromEventList+0x1b0>)
 8002806:	2201      	movs	r2, #1
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	e001      	b.n	8002810 <xTaskRemoveFromEventList+0x18c>
        }
        else
        {
            xReturn = pdFALSE;
 800280c:	2300      	movs	r3, #0
 800280e:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8002810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002812:	4618      	mov	r0, r3
 8002814:	372c      	adds	r7, #44	@ 0x2c
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	2000022c 	.word	0x2000022c
 8002824:	2000020c 	.word	0x2000020c
 8002828:	20000130 	.word	0x20000130
 800282c:	200001c4 	.word	0x200001c4
 8002830:	2000012c 	.word	0x2000012c
 8002834:	20000218 	.word	0x20000218

08002838 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002840:	4b06      	ldr	r3, [pc, #24]	@ (800285c <vTaskInternalSetTimeOutState+0x24>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002848:	4b05      	ldr	r3, [pc, #20]	@ (8002860 <vTaskInternalSetTimeOutState+0x28>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	2000021c 	.word	0x2000021c
 8002860:	20000208 	.word	0x20000208

08002864 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10b      	bne.n	800288c <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8002874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002878:	f383 8811 	msr	BASEPRI, r3
 800287c:	f3bf 8f6f 	isb	sy
 8002880:	f3bf 8f4f 	dsb	sy
 8002884:	613b      	str	r3, [r7, #16]
}
 8002886:	bf00      	nop
 8002888:	bf00      	nop
 800288a:	e7fd      	b.n	8002888 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10b      	bne.n	80028aa <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8002892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002896:	f383 8811 	msr	BASEPRI, r3
 800289a:	f3bf 8f6f 	isb	sy
 800289e:	f3bf 8f4f 	dsb	sy
 80028a2:	60fb      	str	r3, [r7, #12]
}
 80028a4:	bf00      	nop
 80028a6:	bf00      	nop
 80028a8:	e7fd      	b.n	80028a6 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80028aa:	f000 ff6b 	bl	8003784 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80028ae:	4b1f      	ldr	r3, [pc, #124]	@ (800292c <xTaskCheckForTimeOut+0xc8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c6:	d102      	bne.n	80028ce <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80028c8:	2300      	movs	r3, #0
 80028ca:	61fb      	str	r3, [r7, #28]
 80028cc:	e026      	b.n	800291c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	4b17      	ldr	r3, [pc, #92]	@ (8002930 <xTaskCheckForTimeOut+0xcc>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d00a      	beq.n	80028f0 <xTaskCheckForTimeOut+0x8c>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d305      	bcc.n	80028f0 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80028e4:	2301      	movs	r3, #1
 80028e6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	e015      	b.n	800291c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d20b      	bcs.n	8002912 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	1ad2      	subs	r2, r2, r3
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff ff96 	bl	8002838 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800290c:	2300      	movs	r3, #0
 800290e:	61fb      	str	r3, [r7, #28]
 8002910:	e004      	b.n	800291c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002918:	2301      	movs	r3, #1
 800291a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800291c:	f000 ff64 	bl	80037e8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8002920:	69fb      	ldr	r3, [r7, #28]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3720      	adds	r7, #32
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	20000208 	.word	0x20000208
 8002930:	2000021c 	.word	0x2000021c

08002934 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8002938:	4b03      	ldr	r3, [pc, #12]	@ (8002948 <vTaskMissedYield+0x14>)
 800293a:	2201      	movs	r2, #1
 800293c:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 800293e:	bf00      	nop
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	20000218 	.word	0x20000218

0800294c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002954:	f000 f852 	bl	80029fc <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8002958:	4b06      	ldr	r3, [pc, #24]	@ (8002974 <prvIdleTask+0x28>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d9f9      	bls.n	8002954 <prvIdleTask+0x8>
            {
                taskYIELD();
 8002960:	4b05      	ldr	r3, [pc, #20]	@ (8002978 <prvIdleTask+0x2c>)
 8002962:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	f3bf 8f4f 	dsb	sy
 800296c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002970:	e7f0      	b.n	8002954 <prvIdleTask+0x8>
 8002972:	bf00      	nop
 8002974:	20000130 	.word	0x20000130
 8002978:	e000ed04 	.word	0xe000ed04

0800297c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002982:	2300      	movs	r3, #0
 8002984:	607b      	str	r3, [r7, #4]
 8002986:	e00c      	b.n	80029a2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4a12      	ldr	r2, [pc, #72]	@ (80029dc <prvInitialiseTaskLists+0x60>)
 8002994:	4413      	add	r3, r2
 8002996:	4618      	mov	r0, r3
 8002998:	f7fe fd95 	bl	80014c6 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3301      	adds	r3, #1
 80029a0:	607b      	str	r3, [r7, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b04      	cmp	r3, #4
 80029a6:	d9ef      	bls.n	8002988 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80029a8:	480d      	ldr	r0, [pc, #52]	@ (80029e0 <prvInitialiseTaskLists+0x64>)
 80029aa:	f7fe fd8c 	bl	80014c6 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80029ae:	480d      	ldr	r0, [pc, #52]	@ (80029e4 <prvInitialiseTaskLists+0x68>)
 80029b0:	f7fe fd89 	bl	80014c6 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80029b4:	480c      	ldr	r0, [pc, #48]	@ (80029e8 <prvInitialiseTaskLists+0x6c>)
 80029b6:	f7fe fd86 	bl	80014c6 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80029ba:	480c      	ldr	r0, [pc, #48]	@ (80029ec <prvInitialiseTaskLists+0x70>)
 80029bc:	f7fe fd83 	bl	80014c6 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80029c0:	480b      	ldr	r0, [pc, #44]	@ (80029f0 <prvInitialiseTaskLists+0x74>)
 80029c2:	f7fe fd80 	bl	80014c6 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80029c6:	4b0b      	ldr	r3, [pc, #44]	@ (80029f4 <prvInitialiseTaskLists+0x78>)
 80029c8:	4a05      	ldr	r2, [pc, #20]	@ (80029e0 <prvInitialiseTaskLists+0x64>)
 80029ca:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80029cc:	4b0a      	ldr	r3, [pc, #40]	@ (80029f8 <prvInitialiseTaskLists+0x7c>)
 80029ce:	4a05      	ldr	r2, [pc, #20]	@ (80029e4 <prvInitialiseTaskLists+0x68>)
 80029d0:	601a      	str	r2, [r3, #0]
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000130 	.word	0x20000130
 80029e0:	20000194 	.word	0x20000194
 80029e4:	200001a8 	.word	0x200001a8
 80029e8:	200001c4 	.word	0x200001c4
 80029ec:	200001d8 	.word	0x200001d8
 80029f0:	200001f0 	.word	0x200001f0
 80029f4:	200001bc 	.word	0x200001bc
 80029f8:	200001c0 	.word	0x200001c0

080029fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a02:	e019      	b.n	8002a38 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8002a04:	f000 febe 	bl	8003784 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002a08:	4b10      	ldr	r3, [pc, #64]	@ (8002a4c <prvCheckTasksWaitingTermination+0x50>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3304      	adds	r3, #4
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fe fdbc 	bl	8001592 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8002a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a50 <prvCheckTasksWaitingTermination+0x54>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	4a0b      	ldr	r2, [pc, #44]	@ (8002a50 <prvCheckTasksWaitingTermination+0x54>)
 8002a22:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8002a24:	4b0b      	ldr	r3, [pc, #44]	@ (8002a54 <prvCheckTasksWaitingTermination+0x58>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a54 <prvCheckTasksWaitingTermination+0x58>)
 8002a2c:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8002a2e:	f000 fedb 	bl	80037e8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f810 	bl	8002a58 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a38:	4b06      	ldr	r3, [pc, #24]	@ (8002a54 <prvCheckTasksWaitingTermination+0x58>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1e1      	bne.n	8002a04 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002a40:	bf00      	nop
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	200001d8 	.word	0x200001d8
 8002a50:	20000204 	.word	0x20000204
 8002a54:	200001ec 	.word	0x200001ec

08002a58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a64:	4618      	mov	r0, r3
 8002a66:	f001 f8a3 	bl	8003bb0 <vPortFree>
            vPortFree( pxTCB );
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f001 f8a0 	bl	8003bb0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002a70:	bf00      	nop
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa8 <prvResetNextTaskUnblockTime+0x30>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d104      	bne.n	8002a90 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002a86:	4b09      	ldr	r3, [pc, #36]	@ (8002aac <prvResetNextTaskUnblockTime+0x34>)
 8002a88:	f04f 32ff 	mov.w	r2, #4294967295
 8002a8c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002a8e:	e005      	b.n	8002a9c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a90:	4b05      	ldr	r3, [pc, #20]	@ (8002aa8 <prvResetNextTaskUnblockTime+0x30>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a04      	ldr	r2, [pc, #16]	@ (8002aac <prvResetNextTaskUnblockTime+0x34>)
 8002a9a:	6013      	str	r3, [r2, #0]
}
 8002a9c:	bf00      	nop
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	200001bc 	.word	0x200001bc
 8002aac:	20000224 	.word	0x20000224

08002ab0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8002ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae4 <xTaskGetSchedulerState+0x34>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d102      	bne.n	8002ac4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	607b      	str	r3, [r7, #4]
 8002ac2:	e008      	b.n	8002ad6 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002ac4:	4b08      	ldr	r3, [pc, #32]	@ (8002ae8 <xTaskGetSchedulerState+0x38>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d102      	bne.n	8002ad2 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8002acc:	2302      	movs	r3, #2
 8002ace:	607b      	str	r3, [r7, #4]
 8002ad0:	e001      	b.n	8002ad6 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 8002ad6:	687b      	ldr	r3, [r7, #4]
    }
 8002ad8:	4618      	mov	r0, r3
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	20000210 	.word	0x20000210
 8002ae8:	2000022c 	.word	0x2000022c

08002aec <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00b      	beq.n	8002b1c <xTaskGenericNotifyWait+0x30>
    __asm volatile
 8002b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b08:	f383 8811 	msr	BASEPRI, r3
 8002b0c:	f3bf 8f6f 	isb	sy
 8002b10:	f3bf 8f4f 	dsb	sy
 8002b14:	613b      	str	r3, [r7, #16]
}
 8002b16:	bf00      	nop
 8002b18:	bf00      	nop
 8002b1a:	e7fd      	b.n	8002b18 <xTaskGenericNotifyWait+0x2c>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8002b1c:	f7ff faa8 	bl	8002070 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 8002b20:	f000 fe30 	bl	8003784 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8002b24:	4b38      	ldr	r3, [pc, #224]	@ (8002c08 <xTaskGenericNotifyWait+0x11c>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3354      	adds	r3, #84	@ 0x54
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d018      	beq.n	8002b68 <xTaskGenericNotifyWait+0x7c>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 8002b36:	4b34      	ldr	r3, [pc, #208]	@ (8002c08 <xTaskGenericNotifyWait+0x11c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	3214      	adds	r2, #20
 8002b3e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	43d2      	mvns	r2, r2
 8002b46:	4011      	ands	r1, r2
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	3214      	adds	r2, #20
 8002b4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8002b50:	4b2d      	ldr	r3, [pc, #180]	@ (8002c08 <xTaskGenericNotifyWait+0x11c>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4413      	add	r3, r2
 8002b58:	3354      	adds	r3, #84	@ 0x54
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8002b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <xTaskGenericNotifyWait+0x7c>
                    {
                        xShouldBlock = pdTRUE;
 8002b64:	2301      	movs	r3, #1
 8002b66:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8002b68:	f000 fe3e 	bl	80037e8 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d103      	bne.n	8002b7a <xTaskGenericNotifyWait+0x8e>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002b72:	2101      	movs	r1, #1
 8002b74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b76:	f000 f973 	bl	8002e60 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8002b7a:	f7ff fa87 	bl	800208c <xTaskResumeAll>
 8002b7e:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d10a      	bne.n	8002b9c <xTaskGenericNotifyWait+0xb0>
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d107      	bne.n	8002b9c <xTaskGenericNotifyWait+0xb0>
        {
            taskYIELD_WITHIN_API();
 8002b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8002c0c <xTaskGenericNotifyWait+0x120>)
 8002b8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	f3bf 8f4f 	dsb	sy
 8002b98:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8002b9c:	f000 fdf2 	bl	8003784 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d007      	beq.n	8002bb6 <xTaskGenericNotifyWait+0xca>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8002ba6:	4b18      	ldr	r3, [pc, #96]	@ (8002c08 <xTaskGenericNotifyWait+0x11c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	3214      	adds	r2, #20
 8002bae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8002bb6:	4b14      	ldr	r3, [pc, #80]	@ (8002c08 <xTaskGenericNotifyWait+0x11c>)
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3354      	adds	r3, #84	@ 0x54
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d002      	beq.n	8002bce <xTaskGenericNotifyWait+0xe2>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	61fb      	str	r3, [r7, #28]
 8002bcc:	e00e      	b.n	8002bec <xTaskGenericNotifyWait+0x100>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 8002bce:	4b0e      	ldr	r3, [pc, #56]	@ (8002c08 <xTaskGenericNotifyWait+0x11c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	3214      	adds	r2, #20
 8002bd6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	43d2      	mvns	r2, r2
 8002bde:	4011      	ands	r1, r2
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	3214      	adds	r2, #20
 8002be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8002be8:	2301      	movs	r3, #1
 8002bea:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8002bec:	4b06      	ldr	r3, [pc, #24]	@ (8002c08 <xTaskGenericNotifyWait+0x11c>)
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	3354      	adds	r3, #84	@ 0x54
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002bfa:	f000 fdf5 	bl	80037e8 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );

        return xReturn;
 8002bfe:	69fb      	ldr	r3, [r7, #28]
    }
 8002c00:	4618      	mov	r0, r3
 8002c02:	3720      	adds	r7, #32
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	2000012c 	.word	0x2000012c
 8002c0c:	e000ed04 	.word	0xe000ed04

08002c10 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08e      	sub	sp, #56	@ 0x38
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
 8002c1c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00b      	beq.n	8002c40 <xTaskGenericNotify+0x30>
    __asm volatile
 8002c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c2c:	f383 8811 	msr	BASEPRI, r3
 8002c30:	f3bf 8f6f 	isb	sy
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	623b      	str	r3, [r7, #32]
}
 8002c3a:	bf00      	nop
 8002c3c:	bf00      	nop
 8002c3e:	e7fd      	b.n	8002c3c <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10b      	bne.n	8002c5e <xTaskGenericNotify+0x4e>
    __asm volatile
 8002c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c4a:	f383 8811 	msr	BASEPRI, r3
 8002c4e:	f3bf 8f6f 	isb	sy
 8002c52:	f3bf 8f4f 	dsb	sy
 8002c56:	61fb      	str	r3, [r7, #28]
}
 8002c58:	bf00      	nop
 8002c5a:	bf00      	nop
 8002c5c:	e7fd      	b.n	8002c5a <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 8002c62:	f000 fd8f 	bl	8003784 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8002c66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d006      	beq.n	8002c7a <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	3214      	adds	r2, #20
 8002c72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002c76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c78:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002c7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	4413      	add	r3, r2
 8002c80:	3354      	adds	r3, #84	@ 0x54
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002c88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3354      	adds	r3, #84	@ 0x54
 8002c90:	2202      	movs	r2, #2
 8002c92:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002c94:	78fb      	ldrb	r3, [r7, #3]
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d83b      	bhi.n	8002d12 <xTaskGenericNotify+0x102>
 8002c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8002ca0 <xTaskGenericNotify+0x90>)
 8002c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca0:	08002d33 	.word	0x08002d33
 8002ca4:	08002cb5 	.word	0x08002cb5
 8002ca8:	08002cd1 	.word	0x08002cd1
 8002cac:	08002ce9 	.word	0x08002ce9
 8002cb0:	08002cf7 	.word	0x08002cf7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	3214      	adds	r2, #20
 8002cba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	ea42 0103 	orr.w	r1, r2, r3
 8002cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	3214      	adds	r2, #20
 8002cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002cce:	e033      	b.n	8002d38 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	3214      	adds	r2, #20
 8002cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cda:	1c59      	adds	r1, r3, #1
 8002cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	3214      	adds	r2, #20
 8002ce2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002ce6:	e027      	b.n	8002d38 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	3214      	adds	r2, #20
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002cf4:	e020      	b.n	8002d38 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002cf6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d006      	beq.n	8002d0c <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	3214      	adds	r2, #20
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8002d0a:	e015      	b.n	8002d38 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 8002d10:	e012      	b.n	8002d38 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8002d12:	4b4e      	ldr	r3, [pc, #312]	@ (8002e4c <xTaskGenericNotify+0x23c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00d      	beq.n	8002d36 <xTaskGenericNotify+0x126>
    __asm volatile
 8002d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d1e:	f383 8811 	msr	BASEPRI, r3
 8002d22:	f3bf 8f6f 	isb	sy
 8002d26:	f3bf 8f4f 	dsb	sy
 8002d2a:	61bb      	str	r3, [r7, #24]
}
 8002d2c:	bf00      	nop
 8002d2e:	bf00      	nop
 8002d30:	e7fd      	b.n	8002d2e <xTaskGenericNotify+0x11e>
                    break;
 8002d32:	bf00      	nop
 8002d34:	e000      	b.n	8002d38 <xTaskGenericNotify+0x128>

                    break;
 8002d36:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002d38:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d17e      	bne.n	8002e3e <xTaskGenericNotify+0x22e>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d4c:	68d2      	ldr	r2, [r2, #12]
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d56:	6892      	ldr	r2, [r2, #8]
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d60:	3304      	adds	r3, #4
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d103      	bne.n	8002d6e <xTaskGenericNotify+0x15e>
 8002d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d70:	2200      	movs	r2, #0
 8002d72:	615a      	str	r2, [r3, #20]
 8002d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	1e5a      	subs	r2, r3, #1
 8002d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d7c:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d82:	2201      	movs	r2, #1
 8002d84:	409a      	lsls	r2, r3
 8002d86:	4b32      	ldr	r3, [pc, #200]	@ (8002e50 <xTaskGenericNotify+0x240>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	4a30      	ldr	r2, [pc, #192]	@ (8002e50 <xTaskGenericNotify+0x240>)
 8002d8e:	6013      	str	r3, [r2, #0]
 8002d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d94:	492f      	ldr	r1, [pc, #188]	@ (8002e54 <xTaskGenericNotify+0x244>)
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	3304      	adds	r3, #4
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002daa:	609a      	str	r2, [r3, #8]
 8002dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db2:	60da      	str	r2, [r3, #12]
 8002db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dba:	3204      	adds	r2, #4
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc0:	1d1a      	adds	r2, r3, #4
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc4:	609a      	str	r2, [r3, #8]
 8002dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4a20      	ldr	r2, [pc, #128]	@ (8002e54 <xTaskGenericNotify+0x244>)
 8002dd4:	441a      	add	r2, r3
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd8:	615a      	str	r2, [r3, #20]
 8002dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dde:	491d      	ldr	r1, [pc, #116]	@ (8002e54 <xTaskGenericNotify+0x244>)
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dee:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002df0:	1c59      	adds	r1, r3, #1
 8002df2:	4818      	ldr	r0, [pc, #96]	@ (8002e54 <xTaskGenericNotify+0x244>)
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4403      	add	r3, r0
 8002dfe:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00b      	beq.n	8002e20 <xTaskGenericNotify+0x210>
    __asm volatile
 8002e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e0c:	f383 8811 	msr	BASEPRI, r3
 8002e10:	f3bf 8f6f 	isb	sy
 8002e14:	f3bf 8f4f 	dsb	sy
 8002e18:	617b      	str	r3, [r7, #20]
}
 8002e1a:	bf00      	nop
 8002e1c:	bf00      	nop
 8002e1e:	e7fd      	b.n	8002e1c <xTaskGenericNotify+0x20c>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 8002e20:	4b0d      	ldr	r3, [pc, #52]	@ (8002e58 <xTaskGenericNotify+0x248>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d207      	bcs.n	8002e3e <xTaskGenericNotify+0x22e>
 8002e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e5c <xTaskGenericNotify+0x24c>)
 8002e30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	f3bf 8f4f 	dsb	sy
 8002e3a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002e3e:	f000 fcd3 	bl	80037e8 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );

        return xReturn;
 8002e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8002e44:	4618      	mov	r0, r3
 8002e46:	3738      	adds	r7, #56	@ 0x38
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20000208 	.word	0x20000208
 8002e50:	2000020c 	.word	0x2000020c
 8002e54:	20000130 	.word	0x20000130
 8002e58:	2000012c 	.word	0x2000012c
 8002e5c:	e000ed04 	.word	0xe000ed04

08002e60 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b088      	sub	sp, #32
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002e6a:	4b37      	ldr	r3, [pc, #220]	@ (8002f48 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8002e70:	4b36      	ldr	r3, [pc, #216]	@ (8002f4c <prvAddCurrentTaskToDelayedList+0xec>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8002e76:	4b36      	ldr	r3, [pc, #216]	@ (8002f50 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e7c:	4b35      	ldr	r3, [pc, #212]	@ (8002f54 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	3304      	adds	r3, #4
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe fb85 	bl	8001592 <uxListRemove>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10b      	bne.n	8002ea6 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002e8e:	4b31      	ldr	r3, [pc, #196]	@ (8002f54 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e94:	2201      	movs	r2, #1
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	43da      	mvns	r2, r3
 8002e9c:	4b2e      	ldr	r3, [pc, #184]	@ (8002f58 <prvAddCurrentTaskToDelayedList+0xf8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	4a2d      	ldr	r2, [pc, #180]	@ (8002f58 <prvAddCurrentTaskToDelayedList+0xf8>)
 8002ea4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eac:	d124      	bne.n	8002ef8 <prvAddCurrentTaskToDelayedList+0x98>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d021      	beq.n	8002ef8 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002eb4:	4b29      	ldr	r3, [pc, #164]	@ (8002f5c <prvAddCurrentTaskToDelayedList+0xfc>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	4b26      	ldr	r3, [pc, #152]	@ (8002f54 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	609a      	str	r2, [r3, #8]
 8002ec2:	4b24      	ldr	r3, [pc, #144]	@ (8002f54 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	6892      	ldr	r2, [r2, #8]
 8002eca:	60da      	str	r2, [r3, #12]
 8002ecc:	4b21      	ldr	r3, [pc, #132]	@ (8002f54 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	3204      	adds	r2, #4
 8002ed6:	605a      	str	r2, [r3, #4]
 8002ed8:	4b1e      	ldr	r3, [pc, #120]	@ (8002f54 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	1d1a      	adds	r2, r3, #4
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	609a      	str	r2, [r3, #8]
 8002ee2:	4b1c      	ldr	r3, [pc, #112]	@ (8002f54 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a1d      	ldr	r2, [pc, #116]	@ (8002f5c <prvAddCurrentTaskToDelayedList+0xfc>)
 8002ee8:	615a      	str	r2, [r3, #20]
 8002eea:	4b1c      	ldr	r3, [pc, #112]	@ (8002f5c <prvAddCurrentTaskToDelayedList+0xfc>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	4a1a      	ldr	r2, [pc, #104]	@ (8002f5c <prvAddCurrentTaskToDelayedList+0xfc>)
 8002ef2:	6013      	str	r3, [r2, #0]
 8002ef4:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002ef6:	e022      	b.n	8002f3e <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002ef8:	69fa      	ldr	r2, [r7, #28]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4413      	add	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002f00:	4b14      	ldr	r3, [pc, #80]	@ (8002f54 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d207      	bcs.n	8002f20 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8002f10:	4b10      	ldr	r3, [pc, #64]	@ (8002f54 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	3304      	adds	r3, #4
 8002f16:	4619      	mov	r1, r3
 8002f18:	6978      	ldr	r0, [r7, #20]
 8002f1a:	f7fe fb01 	bl	8001520 <vListInsert>
}
 8002f1e:	e00e      	b.n	8002f3e <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8002f20:	4b0c      	ldr	r3, [pc, #48]	@ (8002f54 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	3304      	adds	r3, #4
 8002f26:	4619      	mov	r1, r3
 8002f28:	69b8      	ldr	r0, [r7, #24]
 8002f2a:	f7fe faf9 	bl	8001520 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8002f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002f60 <prvAddCurrentTaskToDelayedList+0x100>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d202      	bcs.n	8002f3e <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8002f38:	4a09      	ldr	r2, [pc, #36]	@ (8002f60 <prvAddCurrentTaskToDelayedList+0x100>)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6013      	str	r3, [r2, #0]
}
 8002f3e:	bf00      	nop
 8002f40:	3720      	adds	r7, #32
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20000208 	.word	0x20000208
 8002f4c:	200001bc 	.word	0x200001bc
 8002f50:	200001c0 	.word	0x200001c0
 8002f54:	2000012c 	.word	0x2000012c
 8002f58:	2000020c 	.word	0x2000020c
 8002f5c:	200001f0 	.word	0x200001f0
 8002f60:	20000224 	.word	0x20000224

08002f64 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002f6e:	f000 fa55 	bl	800341c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002f72:	4b12      	ldr	r3, [pc, #72]	@ (8002fbc <xTimerCreateTimerTask+0x58>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00b      	beq.n	8002f92 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8002f7a:	4b11      	ldr	r3, [pc, #68]	@ (8002fc0 <xTimerCreateTimerTask+0x5c>)
 8002f7c:	9301      	str	r3, [sp, #4]
 8002f7e:	2302      	movs	r3, #2
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	2300      	movs	r3, #0
 8002f84:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002f88:	490e      	ldr	r1, [pc, #56]	@ (8002fc4 <xTimerCreateTimerTask+0x60>)
 8002f8a:	480f      	ldr	r0, [pc, #60]	@ (8002fc8 <xTimerCreateTimerTask+0x64>)
 8002f8c:	f7fe fe60 	bl	8001c50 <xTaskCreate>
 8002f90:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10b      	bne.n	8002fb0 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 8002f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f9c:	f383 8811 	msr	BASEPRI, r3
 8002fa0:	f3bf 8f6f 	isb	sy
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	603b      	str	r3, [r7, #0]
}
 8002faa:	bf00      	nop
 8002fac:	bf00      	nop
 8002fae:	e7fd      	b.n	8002fac <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 8002fb0:	687b      	ldr	r3, [r7, #4]
    }
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000260 	.word	0x20000260
 8002fc0:	20000264 	.word	0x20000264
 8002fc4:	08004d24 	.word	0x08004d24
 8002fc8:	08003071 	.word	0x08003071

08002fcc <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002fd8:	e008      	b.n	8002fec <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	699a      	ldr	r2, [r3, #24]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	18d1      	adds	r1, r2, r3
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 f8df 	bl	80031bc <prvInsertTimerInActiveList>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1ea      	bne.n	8002fda <prvReloadTimer+0xe>
        }
    }
 8003004:	bf00      	nop
 8003006:	bf00      	nop
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800301a:	4b14      	ldr	r3, [pc, #80]	@ (800306c <prvProcessExpiredTimer+0x5c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	3304      	adds	r3, #4
 8003028:	4618      	mov	r0, r3
 800302a:	f7fe fab2 	bl	8001592 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f7ff ffc3 	bl	8002fcc <prvReloadTimer>
 8003046:	e008      	b.n	800305a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800304e:	f023 0301 	bic.w	r3, r3, #1
 8003052:	b2da      	uxtb	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	4798      	blx	r3
    }
 8003062:	bf00      	nop
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20000258 	.word	0x20000258

08003070 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003078:	f107 0308 	add.w	r3, r7, #8
 800307c:	4618      	mov	r0, r3
 800307e:	f000 f859 	bl	8003134 <prvGetNextExpireTime>
 8003082:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	4619      	mov	r1, r3
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 f805 	bl	8003098 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800308e:	f000 f8d7 	bl	8003240 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003092:	bf00      	nop
 8003094:	e7f0      	b.n	8003078 <prvTimerTask+0x8>
	...

08003098 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80030a2:	f7fe ffe5 	bl	8002070 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80030a6:	f107 0308 	add.w	r3, r7, #8
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 f866 	bl	800317c <prvSampleTimeNow>
 80030b0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d130      	bne.n	800311a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10a      	bne.n	80030d4 <prvProcessTimerOrBlockTask+0x3c>
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d806      	bhi.n	80030d4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80030c6:	f7fe ffe1 	bl	800208c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80030ca:	68f9      	ldr	r1, [r7, #12]
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff ff9f 	bl	8003010 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80030d2:	e024      	b.n	800311e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d008      	beq.n	80030ec <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80030da:	4b13      	ldr	r3, [pc, #76]	@ (8003128 <prvProcessTimerOrBlockTask+0x90>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <prvProcessTimerOrBlockTask+0x50>
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <prvProcessTimerOrBlockTask+0x52>
 80030e8:	2300      	movs	r3, #0
 80030ea:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80030ec:	4b0f      	ldr	r3, [pc, #60]	@ (800312c <prvProcessTimerOrBlockTask+0x94>)
 80030ee:	6818      	ldr	r0, [r3, #0]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	4619      	mov	r1, r3
 80030fa:	f7fe fd39 	bl	8001b70 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80030fe:	f7fe ffc5 	bl	800208c <xTaskResumeAll>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10a      	bne.n	800311e <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8003108:	4b09      	ldr	r3, [pc, #36]	@ (8003130 <prvProcessTimerOrBlockTask+0x98>)
 800310a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	f3bf 8f4f 	dsb	sy
 8003114:	f3bf 8f6f 	isb	sy
    }
 8003118:	e001      	b.n	800311e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800311a:	f7fe ffb7 	bl	800208c <xTaskResumeAll>
    }
 800311e:	bf00      	nop
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	2000025c 	.word	0x2000025c
 800312c:	20000260 	.word	0x20000260
 8003130:	e000ed04 	.word	0xe000ed04

08003134 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800313c:	4b0e      	ldr	r3, [pc, #56]	@ (8003178 <prvGetNextExpireTime+0x44>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <prvGetNextExpireTime+0x16>
 8003146:	2201      	movs	r2, #1
 8003148:	e000      	b.n	800314c <prvGetNextExpireTime+0x18>
 800314a:	2200      	movs	r2, #0
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d105      	bne.n	8003164 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003158:	4b07      	ldr	r3, [pc, #28]	@ (8003178 <prvGetNextExpireTime+0x44>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	e001      	b.n	8003168 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003168:	68fb      	ldr	r3, [r7, #12]
    }
 800316a:	4618      	mov	r0, r3
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	20000258 	.word	0x20000258

0800317c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8003184:	f7ff f88a 	bl	800229c <xTaskGetTickCount>
 8003188:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800318a:	4b0b      	ldr	r3, [pc, #44]	@ (80031b8 <prvSampleTimeNow+0x3c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	429a      	cmp	r2, r3
 8003192:	d205      	bcs.n	80031a0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003194:	f000 f91c 	bl	80033d0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	e002      	b.n	80031a6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80031a6:	4a04      	ldr	r2, [pc, #16]	@ (80031b8 <prvSampleTimeNow+0x3c>)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80031ac:	68fb      	ldr	r3, [r7, #12]
    }
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20000268 	.word	0x20000268

080031bc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
 80031c8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80031ca:	2300      	movs	r3, #0
 80031cc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d812      	bhi.n	8003208 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	1ad2      	subs	r2, r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d302      	bcc.n	80031f6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80031f0:	2301      	movs	r3, #1
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	e01b      	b.n	800322e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80031f6:	4b10      	ldr	r3, [pc, #64]	@ (8003238 <prvInsertTimerInActiveList+0x7c>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	3304      	adds	r3, #4
 80031fe:	4619      	mov	r1, r3
 8003200:	4610      	mov	r0, r2
 8003202:	f7fe f98d 	bl	8001520 <vListInsert>
 8003206:	e012      	b.n	800322e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	429a      	cmp	r2, r3
 800320e:	d206      	bcs.n	800321e <prvInsertTimerInActiveList+0x62>
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	429a      	cmp	r2, r3
 8003216:	d302      	bcc.n	800321e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003218:	2301      	movs	r3, #1
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	e007      	b.n	800322e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800321e:	4b07      	ldr	r3, [pc, #28]	@ (800323c <prvInsertTimerInActiveList+0x80>)
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	3304      	adds	r3, #4
 8003226:	4619      	mov	r1, r3
 8003228:	4610      	mov	r0, r2
 800322a:	f7fe f979 	bl	8001520 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800322e:	697b      	ldr	r3, [r7, #20]
    }
 8003230:	4618      	mov	r0, r3
 8003232:	3718      	adds	r7, #24
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	2000025c 	.word	0x2000025c
 800323c:	20000258 	.word	0x20000258

08003240 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003240:	b580      	push	{r7, lr}
 8003242:	b088      	sub	sp, #32
 8003244:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8003246:	f107 0308 	add.w	r3, r7, #8
 800324a:	2200      	movs	r2, #0
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	605a      	str	r2, [r3, #4]
 8003250:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8003252:	e0a9      	b.n	80033a8 <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2b00      	cmp	r3, #0
 8003258:	f2c0 80a6 	blt.w	80033a8 <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d004      	beq.n	8003272 <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	3304      	adds	r3, #4
 800326c:	4618      	mov	r0, r3
 800326e:	f7fe f990 	bl	8001592 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003272:	1d3b      	adds	r3, r7, #4
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff ff81 	bl	800317c <prvSampleTimeNow>
 800327a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	3b01      	subs	r3, #1
 8003280:	2b08      	cmp	r3, #8
 8003282:	f200 808e 	bhi.w	80033a2 <prvProcessReceivedCommands+0x162>
 8003286:	a201      	add	r2, pc, #4	@ (adr r2, 800328c <prvProcessReceivedCommands+0x4c>)
 8003288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328c:	080032b1 	.word	0x080032b1
 8003290:	080032b1 	.word	0x080032b1
 8003294:	08003319 	.word	0x08003319
 8003298:	0800332d 	.word	0x0800332d
 800329c:	08003379 	.word	0x08003379
 80032a0:	080032b1 	.word	0x080032b1
 80032a4:	080032b1 	.word	0x080032b1
 80032a8:	08003319 	.word	0x08003319
 80032ac:	0800332d 	.word	0x0800332d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	18d1      	adds	r1, r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	69f8      	ldr	r0, [r7, #28]
 80032d0:	f7ff ff74 	bl	80031bc <prvInsertTimerInActiveList>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d065      	beq.n	80033a6 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d009      	beq.n	80032fc <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	4413      	add	r3, r2
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4619      	mov	r1, r3
 80032f4:	69f8      	ldr	r0, [r7, #28]
 80032f6:	f7ff fe69 	bl	8002fcc <prvReloadTimer>
 80032fa:	e008      	b.n	800330e <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003302:	f023 0301 	bic.w	r3, r3, #1
 8003306:	b2da      	uxtb	r2, r3
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	69f8      	ldr	r0, [r7, #28]
 8003314:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003316:	e046      	b.n	80033a6 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800331e:	f023 0301 	bic.w	r3, r3, #1
 8003322:	b2da      	uxtb	r2, r3
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800332a:	e03d      	b.n	80033a8 <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003332:	f043 0301 	orr.w	r3, r3, #1
 8003336:	b2da      	uxtb	r2, r3
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10b      	bne.n	8003364 <prvProcessReceivedCommands+0x124>
    __asm volatile
 800334c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003350:	f383 8811 	msr	BASEPRI, r3
 8003354:	f3bf 8f6f 	isb	sy
 8003358:	f3bf 8f4f 	dsb	sy
 800335c:	617b      	str	r3, [r7, #20]
}
 800335e:	bf00      	nop
 8003360:	bf00      	nop
 8003362:	e7fd      	b.n	8003360 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	699a      	ldr	r2, [r3, #24]
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	18d1      	adds	r1, r2, r3
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	69f8      	ldr	r0, [r7, #28]
 8003372:	f7ff ff23 	bl	80031bc <prvInsertTimerInActiveList>
                        break;
 8003376:	e017      	b.n	80033a8 <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d103      	bne.n	800338e <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 8003386:	69f8      	ldr	r0, [r7, #28]
 8003388:	f000 fc12 	bl	8003bb0 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800338c:	e00c      	b.n	80033a8 <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003394:	f023 0301 	bic.w	r3, r3, #1
 8003398:	b2da      	uxtb	r2, r3
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80033a0:	e002      	b.n	80033a8 <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 80033a2:	bf00      	nop
 80033a4:	e000      	b.n	80033a8 <prvProcessReceivedCommands+0x168>
                        break;
 80033a6:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80033a8:	4b08      	ldr	r3, [pc, #32]	@ (80033cc <prvProcessReceivedCommands+0x18c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f107 0108 	add.w	r1, r7, #8
 80033b0:	2200      	movs	r2, #0
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fe fa1c 	bl	80017f0 <xQueueReceive>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f47f af4a 	bne.w	8003254 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 80033c0:	bf00      	nop
 80033c2:	bf00      	nop
 80033c4:	3720      	adds	r7, #32
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20000260 	.word	0x20000260

080033d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80033d6:	e009      	b.n	80033ec <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80033d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003414 <prvSwitchTimerLists+0x44>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80033e2:	f04f 31ff 	mov.w	r1, #4294967295
 80033e6:	6838      	ldr	r0, [r7, #0]
 80033e8:	f7ff fe12 	bl	8003010 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80033ec:	4b09      	ldr	r3, [pc, #36]	@ (8003414 <prvSwitchTimerLists+0x44>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f0      	bne.n	80033d8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80033f6:	4b07      	ldr	r3, [pc, #28]	@ (8003414 <prvSwitchTimerLists+0x44>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80033fc:	4b06      	ldr	r3, [pc, #24]	@ (8003418 <prvSwitchTimerLists+0x48>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a04      	ldr	r2, [pc, #16]	@ (8003414 <prvSwitchTimerLists+0x44>)
 8003402:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003404:	4a04      	ldr	r2, [pc, #16]	@ (8003418 <prvSwitchTimerLists+0x48>)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6013      	str	r3, [r2, #0]
    }
 800340a:	bf00      	nop
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	20000258 	.word	0x20000258
 8003418:	2000025c 	.word	0x2000025c

0800341c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003420:	f000 f9b0 	bl	8003784 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003424:	4b12      	ldr	r3, [pc, #72]	@ (8003470 <prvCheckForValidListAndQueue+0x54>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d11d      	bne.n	8003468 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800342c:	4811      	ldr	r0, [pc, #68]	@ (8003474 <prvCheckForValidListAndQueue+0x58>)
 800342e:	f7fe f84a 	bl	80014c6 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003432:	4811      	ldr	r0, [pc, #68]	@ (8003478 <prvCheckForValidListAndQueue+0x5c>)
 8003434:	f7fe f847 	bl	80014c6 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003438:	4b10      	ldr	r3, [pc, #64]	@ (800347c <prvCheckForValidListAndQueue+0x60>)
 800343a:	4a0e      	ldr	r2, [pc, #56]	@ (8003474 <prvCheckForValidListAndQueue+0x58>)
 800343c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800343e:	4b10      	ldr	r3, [pc, #64]	@ (8003480 <prvCheckForValidListAndQueue+0x64>)
 8003440:	4a0d      	ldr	r2, [pc, #52]	@ (8003478 <prvCheckForValidListAndQueue+0x5c>)
 8003442:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8003444:	2200      	movs	r2, #0
 8003446:	210c      	movs	r1, #12
 8003448:	200a      	movs	r0, #10
 800344a:	f7fe f95f 	bl	800170c <xQueueGenericCreate>
 800344e:	4603      	mov	r3, r0
 8003450:	4a07      	ldr	r2, [pc, #28]	@ (8003470 <prvCheckForValidListAndQueue+0x54>)
 8003452:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003454:	4b06      	ldr	r3, [pc, #24]	@ (8003470 <prvCheckForValidListAndQueue+0x54>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800345c:	4b04      	ldr	r3, [pc, #16]	@ (8003470 <prvCheckForValidListAndQueue+0x54>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4908      	ldr	r1, [pc, #32]	@ (8003484 <prvCheckForValidListAndQueue+0x68>)
 8003462:	4618      	mov	r0, r3
 8003464:	f7fe fb34 	bl	8001ad0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003468:	f000 f9be 	bl	80037e8 <vPortExitCritical>
    }
 800346c:	bf00      	nop
 800346e:	bd80      	pop	{r7, pc}
 8003470:	20000260 	.word	0x20000260
 8003474:	20000230 	.word	0x20000230
 8003478:	20000244 	.word	0x20000244
 800347c:	20000258 	.word	0x20000258
 8003480:	2000025c 	.word	0x2000025c
 8003484:	08004d2c 	.word	0x08004d2c

08003488 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	3b04      	subs	r3, #4
 8003498:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80034a0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	3b04      	subs	r3, #4
 80034a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f023 0201 	bic.w	r2, r3, #1
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	3b04      	subs	r3, #4
 80034b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80034b8:	4a0c      	ldr	r2, [pc, #48]	@ (80034ec <pxPortInitialiseStack+0x64>)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	3b14      	subs	r3, #20
 80034c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	3b04      	subs	r3, #4
 80034ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f06f 0202 	mvn.w	r2, #2
 80034d6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	3b20      	subs	r3, #32
 80034dc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80034de:	68fb      	ldr	r3, [r7, #12]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	080034f1 	.word	0x080034f1

080034f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80034f6:	2300      	movs	r3, #0
 80034f8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80034fa:	4b13      	ldr	r3, [pc, #76]	@ (8003548 <prvTaskExitError+0x58>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003502:	d00b      	beq.n	800351c <prvTaskExitError+0x2c>
    __asm volatile
 8003504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003508:	f383 8811 	msr	BASEPRI, r3
 800350c:	f3bf 8f6f 	isb	sy
 8003510:	f3bf 8f4f 	dsb	sy
 8003514:	60fb      	str	r3, [r7, #12]
}
 8003516:	bf00      	nop
 8003518:	bf00      	nop
 800351a:	e7fd      	b.n	8003518 <prvTaskExitError+0x28>
    __asm volatile
 800351c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003520:	f383 8811 	msr	BASEPRI, r3
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	f3bf 8f4f 	dsb	sy
 800352c:	60bb      	str	r3, [r7, #8]
}
 800352e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003530:	bf00      	nop
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0fc      	beq.n	8003532 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003538:	bf00      	nop
 800353a:	bf00      	nop
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	2000000c 	.word	0x2000000c
 800354c:	00000000 	.word	0x00000000

08003550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003550:	4b07      	ldr	r3, [pc, #28]	@ (8003570 <pxCurrentTCBConst2>)
 8003552:	6819      	ldr	r1, [r3, #0]
 8003554:	6808      	ldr	r0, [r1, #0]
 8003556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800355a:	f380 8809 	msr	PSP, r0
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	f04f 0000 	mov.w	r0, #0
 8003566:	f380 8811 	msr	BASEPRI, r0
 800356a:	4770      	bx	lr
 800356c:	f3af 8000 	nop.w

08003570 <pxCurrentTCBConst2>:
 8003570:	2000012c 	.word	0x2000012c
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8003574:	bf00      	nop
 8003576:	bf00      	nop

08003578 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003578:	4808      	ldr	r0, [pc, #32]	@ (800359c <prvPortStartFirstTask+0x24>)
 800357a:	6800      	ldr	r0, [r0, #0]
 800357c:	6800      	ldr	r0, [r0, #0]
 800357e:	f380 8808 	msr	MSP, r0
 8003582:	f04f 0000 	mov.w	r0, #0
 8003586:	f380 8814 	msr	CONTROL, r0
 800358a:	b662      	cpsie	i
 800358c:	b661      	cpsie	f
 800358e:	f3bf 8f4f 	dsb	sy
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	df00      	svc	0
 8003598:	bf00      	nop
 800359a:	0000      	.short	0x0000
 800359c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 80035a0:	bf00      	nop
 80035a2:	bf00      	nop

080035a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b08c      	sub	sp, #48	@ 0x30
 80035a8:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80035aa:	4b69      	ldr	r3, [pc, #420]	@ (8003750 <xPortStartScheduler+0x1ac>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a69      	ldr	r2, [pc, #420]	@ (8003754 <xPortStartScheduler+0x1b0>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d10b      	bne.n	80035cc <xPortStartScheduler+0x28>
    __asm volatile
 80035b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b8:	f383 8811 	msr	BASEPRI, r3
 80035bc:	f3bf 8f6f 	isb	sy
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	623b      	str	r3, [r7, #32]
}
 80035c6:	bf00      	nop
 80035c8:	bf00      	nop
 80035ca:	e7fd      	b.n	80035c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80035cc:	4b60      	ldr	r3, [pc, #384]	@ (8003750 <xPortStartScheduler+0x1ac>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a61      	ldr	r2, [pc, #388]	@ (8003758 <xPortStartScheduler+0x1b4>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d10b      	bne.n	80035ee <xPortStartScheduler+0x4a>
    __asm volatile
 80035d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035da:	f383 8811 	msr	BASEPRI, r3
 80035de:	f3bf 8f6f 	isb	sy
 80035e2:	f3bf 8f4f 	dsb	sy
 80035e6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80035e8:	bf00      	nop
 80035ea:	bf00      	nop
 80035ec:	e7fd      	b.n	80035ea <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80035ee:	4b5b      	ldr	r3, [pc, #364]	@ (800375c <xPortStartScheduler+0x1b8>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80035f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035f6:	332c      	adds	r3, #44	@ 0x2c
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a59      	ldr	r2, [pc, #356]	@ (8003760 <xPortStartScheduler+0x1bc>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d00b      	beq.n	8003618 <xPortStartScheduler+0x74>
    __asm volatile
 8003600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003604:	f383 8811 	msr	BASEPRI, r3
 8003608:	f3bf 8f6f 	isb	sy
 800360c:	f3bf 8f4f 	dsb	sy
 8003610:	61fb      	str	r3, [r7, #28]
}
 8003612:	bf00      	nop
 8003614:	bf00      	nop
 8003616:	e7fd      	b.n	8003614 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8003618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800361a:	3338      	adds	r3, #56	@ 0x38
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a51      	ldr	r2, [pc, #324]	@ (8003764 <xPortStartScheduler+0x1c0>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d00b      	beq.n	800363c <xPortStartScheduler+0x98>
    __asm volatile
 8003624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003628:	f383 8811 	msr	BASEPRI, r3
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	61bb      	str	r3, [r7, #24]
}
 8003636:	bf00      	nop
 8003638:	bf00      	nop
 800363a:	e7fd      	b.n	8003638 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800363c:	2300      	movs	r3, #0
 800363e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003640:	4b49      	ldr	r3, [pc, #292]	@ (8003768 <xPortStartScheduler+0x1c4>)
 8003642:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8003644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800364c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800364e:	22ff      	movs	r2, #255	@ 0xff
 8003650:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	b2db      	uxtb	r3, r3
 8003658:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800365a:	79fb      	ldrb	r3, [r7, #7]
 800365c:	b2db      	uxtb	r3, r3
 800365e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003662:	b2da      	uxtb	r2, r3
 8003664:	4b41      	ldr	r3, [pc, #260]	@ (800376c <xPortStartScheduler+0x1c8>)
 8003666:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8003668:	4b40      	ldr	r3, [pc, #256]	@ (800376c <xPortStartScheduler+0x1c8>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10b      	bne.n	8003688 <xPortStartScheduler+0xe4>
    __asm volatile
 8003670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003674:	f383 8811 	msr	BASEPRI, r3
 8003678:	f3bf 8f6f 	isb	sy
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	617b      	str	r3, [r7, #20]
}
 8003682:	bf00      	nop
 8003684:	bf00      	nop
 8003686:	e7fd      	b.n	8003684 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8003688:	79fb      	ldrb	r3, [r7, #7]
 800368a:	b2db      	uxtb	r3, r3
 800368c:	43db      	mvns	r3, r3
 800368e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003692:	2b00      	cmp	r3, #0
 8003694:	d013      	beq.n	80036be <xPortStartScheduler+0x11a>
    __asm volatile
 8003696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800369a:	f383 8811 	msr	BASEPRI, r3
 800369e:	f3bf 8f6f 	isb	sy
 80036a2:	f3bf 8f4f 	dsb	sy
 80036a6:	613b      	str	r3, [r7, #16]
}
 80036a8:	bf00      	nop
 80036aa:	bf00      	nop
 80036ac:	e7fd      	b.n	80036aa <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	3301      	adds	r3, #1
 80036b2:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80036b4:	79fb      	ldrb	r3, [r7, #7]
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80036be:	79fb      	ldrb	r3, [r7, #7]
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c6:	2b80      	cmp	r3, #128	@ 0x80
 80036c8:	d0f1      	beq.n	80036ae <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d103      	bne.n	80036d8 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 80036d0:	4b27      	ldr	r3, [pc, #156]	@ (8003770 <xPortStartScheduler+0x1cc>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	e004      	b.n	80036e2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f1c3 0307 	rsb	r3, r3, #7
 80036de:	4a24      	ldr	r2, [pc, #144]	@ (8003770 <xPortStartScheduler+0x1cc>)
 80036e0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80036e2:	4b23      	ldr	r3, [pc, #140]	@ (8003770 <xPortStartScheduler+0x1cc>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	021b      	lsls	r3, r3, #8
 80036e8:	4a21      	ldr	r2, [pc, #132]	@ (8003770 <xPortStartScheduler+0x1cc>)
 80036ea:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80036ec:	4b20      	ldr	r3, [pc, #128]	@ (8003770 <xPortStartScheduler+0x1cc>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80036f4:	4a1e      	ldr	r2, [pc, #120]	@ (8003770 <xPortStartScheduler+0x1cc>)
 80036f6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036fe:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003700:	4b1c      	ldr	r3, [pc, #112]	@ (8003774 <xPortStartScheduler+0x1d0>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a1b      	ldr	r2, [pc, #108]	@ (8003774 <xPortStartScheduler+0x1d0>)
 8003706:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800370a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800370c:	4b19      	ldr	r3, [pc, #100]	@ (8003774 <xPortStartScheduler+0x1d0>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a18      	ldr	r2, [pc, #96]	@ (8003774 <xPortStartScheduler+0x1d0>)
 8003712:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003716:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8003718:	4b17      	ldr	r3, [pc, #92]	@ (8003778 <xPortStartScheduler+0x1d4>)
 800371a:	2200      	movs	r2, #0
 800371c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800371e:	f000 f8e5 	bl	80038ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003722:	4b16      	ldr	r3, [pc, #88]	@ (800377c <xPortStartScheduler+0x1d8>)
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003728:	f000 f904 	bl	8003934 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800372c:	4b14      	ldr	r3, [pc, #80]	@ (8003780 <xPortStartScheduler+0x1dc>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a13      	ldr	r2, [pc, #76]	@ (8003780 <xPortStartScheduler+0x1dc>)
 8003732:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003736:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003738:	f7ff ff1e 	bl	8003578 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800373c:	f7fe fed8 	bl	80024f0 <vTaskSwitchContext>
    prvTaskExitError();
 8003740:	f7ff fed6 	bl	80034f0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3730      	adds	r7, #48	@ 0x30
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	e000ed00 	.word	0xe000ed00
 8003754:	410fc271 	.word	0x410fc271
 8003758:	410fc270 	.word	0x410fc270
 800375c:	e000ed08 	.word	0xe000ed08
 8003760:	08003551 	.word	0x08003551
 8003764:	08003841 	.word	0x08003841
 8003768:	e000e400 	.word	0xe000e400
 800376c:	2000026c 	.word	0x2000026c
 8003770:	20000270 	.word	0x20000270
 8003774:	e000ed20 	.word	0xe000ed20
 8003778:	e000ed1c 	.word	0xe000ed1c
 800377c:	2000000c 	.word	0x2000000c
 8003780:	e000ef34 	.word	0xe000ef34

08003784 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
    __asm volatile
 800378a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800378e:	f383 8811 	msr	BASEPRI, r3
 8003792:	f3bf 8f6f 	isb	sy
 8003796:	f3bf 8f4f 	dsb	sy
 800379a:	607b      	str	r3, [r7, #4]
}
 800379c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800379e:	4b10      	ldr	r3, [pc, #64]	@ (80037e0 <vPortEnterCritical+0x5c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	3301      	adds	r3, #1
 80037a4:	4a0e      	ldr	r2, [pc, #56]	@ (80037e0 <vPortEnterCritical+0x5c>)
 80037a6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80037a8:	4b0d      	ldr	r3, [pc, #52]	@ (80037e0 <vPortEnterCritical+0x5c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d110      	bne.n	80037d2 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80037b0:	4b0c      	ldr	r3, [pc, #48]	@ (80037e4 <vPortEnterCritical+0x60>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00b      	beq.n	80037d2 <vPortEnterCritical+0x4e>
    __asm volatile
 80037ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037be:	f383 8811 	msr	BASEPRI, r3
 80037c2:	f3bf 8f6f 	isb	sy
 80037c6:	f3bf 8f4f 	dsb	sy
 80037ca:	603b      	str	r3, [r7, #0]
}
 80037cc:	bf00      	nop
 80037ce:	bf00      	nop
 80037d0:	e7fd      	b.n	80037ce <vPortEnterCritical+0x4a>
    }
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	2000000c 	.word	0x2000000c
 80037e4:	e000ed04 	.word	0xe000ed04

080037e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80037ee:	4b12      	ldr	r3, [pc, #72]	@ (8003838 <vPortExitCritical+0x50>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10b      	bne.n	800380e <vPortExitCritical+0x26>
    __asm volatile
 80037f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037fa:	f383 8811 	msr	BASEPRI, r3
 80037fe:	f3bf 8f6f 	isb	sy
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	607b      	str	r3, [r7, #4]
}
 8003808:	bf00      	nop
 800380a:	bf00      	nop
 800380c:	e7fd      	b.n	800380a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800380e:	4b0a      	ldr	r3, [pc, #40]	@ (8003838 <vPortExitCritical+0x50>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	3b01      	subs	r3, #1
 8003814:	4a08      	ldr	r2, [pc, #32]	@ (8003838 <vPortExitCritical+0x50>)
 8003816:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003818:	4b07      	ldr	r3, [pc, #28]	@ (8003838 <vPortExitCritical+0x50>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d105      	bne.n	800382c <vPortExitCritical+0x44>
 8003820:	2300      	movs	r3, #0
 8003822:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800382a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	2000000c 	.word	0x2000000c
 800383c:	00000000 	.word	0x00000000

08003840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003840:	f3ef 8009 	mrs	r0, PSP
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	4b15      	ldr	r3, [pc, #84]	@ (80038a0 <pxCurrentTCBConst>)
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	f01e 0f10 	tst.w	lr, #16
 8003850:	bf08      	it	eq
 8003852:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003856:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800385a:	6010      	str	r0, [r2, #0]
 800385c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003860:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003864:	f380 8811 	msr	BASEPRI, r0
 8003868:	f3bf 8f4f 	dsb	sy
 800386c:	f3bf 8f6f 	isb	sy
 8003870:	f7fe fe3e 	bl	80024f0 <vTaskSwitchContext>
 8003874:	f04f 0000 	mov.w	r0, #0
 8003878:	f380 8811 	msr	BASEPRI, r0
 800387c:	bc09      	pop	{r0, r3}
 800387e:	6819      	ldr	r1, [r3, #0]
 8003880:	6808      	ldr	r0, [r1, #0]
 8003882:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003886:	f01e 0f10 	tst.w	lr, #16
 800388a:	bf08      	it	eq
 800388c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003890:	f380 8809 	msr	PSP, r0
 8003894:	f3bf 8f6f 	isb	sy
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	f3af 8000 	nop.w

080038a0 <pxCurrentTCBConst>:
 80038a0:	2000012c 	.word	0x2000012c
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80038a4:	bf00      	nop
 80038a6:	bf00      	nop

080038a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
    __asm volatile
 80038ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038b2:	f383 8811 	msr	BASEPRI, r3
 80038b6:	f3bf 8f6f 	isb	sy
 80038ba:	f3bf 8f4f 	dsb	sy
 80038be:	607b      	str	r3, [r7, #4]
}
 80038c0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80038c2:	f7fe fcfb 	bl	80022bc <xTaskIncrementTick>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80038cc:	4b06      	ldr	r3, [pc, #24]	@ (80038e8 <SysTick_Handler+0x40>)
 80038ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	2300      	movs	r3, #0
 80038d6:	603b      	str	r3, [r7, #0]
    __asm volatile
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	f383 8811 	msr	BASEPRI, r3
}
 80038de:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 80038e0:	bf00      	nop
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	e000ed04 	.word	0xe000ed04

080038ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80038f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003920 <vPortSetupTimerInterrupt+0x34>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80038f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003924 <vPortSetupTimerInterrupt+0x38>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80038fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003928 <vPortSetupTimerInterrupt+0x3c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a0a      	ldr	r2, [pc, #40]	@ (800392c <vPortSetupTimerInterrupt+0x40>)
 8003902:	fba2 2303 	umull	r2, r3, r2, r3
 8003906:	099b      	lsrs	r3, r3, #6
 8003908:	4a09      	ldr	r2, [pc, #36]	@ (8003930 <vPortSetupTimerInterrupt+0x44>)
 800390a:	3b01      	subs	r3, #1
 800390c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800390e:	4b04      	ldr	r3, [pc, #16]	@ (8003920 <vPortSetupTimerInterrupt+0x34>)
 8003910:	2207      	movs	r2, #7
 8003912:	601a      	str	r2, [r3, #0]
}
 8003914:	bf00      	nop
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	e000e010 	.word	0xe000e010
 8003924:	e000e018 	.word	0xe000e018
 8003928:	20000000 	.word	0x20000000
 800392c:	10624dd3 	.word	0x10624dd3
 8003930:	e000e014 	.word	0xe000e014

08003934 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003934:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003944 <vPortEnableVFP+0x10>
 8003938:	6801      	ldr	r1, [r0, #0]
 800393a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800393e:	6001      	str	r1, [r0, #0]
 8003940:	4770      	bx	lr
 8003942:	0000      	.short	0x0000
 8003944:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8003948:	bf00      	nop
 800394a:	bf00      	nop

0800394c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08e      	sub	sp, #56	@ 0x38
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003954:	2300      	movs	r3, #0
 8003956:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d022      	beq.n	80039a4 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 800395e:	2308      	movs	r3, #8
 8003960:	43db      	mvns	r3, r3
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	429a      	cmp	r2, r3
 8003966:	d81b      	bhi.n	80039a0 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8003968:	2208      	movs	r2, #8
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4413      	add	r3, r2
 800396e:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	2b00      	cmp	r3, #0
 8003978:	d014      	beq.n	80039a4 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	f1c3 0308 	rsb	r3, r3, #8
 8003984:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003988:	43db      	mvns	r3, r3
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	429a      	cmp	r2, r3
 800398e:	d804      	bhi.n	800399a <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003994:	4413      	add	r3, r2
 8003996:	607b      	str	r3, [r7, #4]
 8003998:	e004      	b.n	80039a4 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800399a:	2300      	movs	r3, #0
 800399c:	607b      	str	r3, [r7, #4]
 800399e:	e001      	b.n	80039a4 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 80039a0:	2300      	movs	r3, #0
 80039a2:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 80039a4:	f7fe fb64 	bl	8002070 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80039a8:	4b7a      	ldr	r3, [pc, #488]	@ (8003b94 <pvPortMalloc+0x248>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 80039b0:	f000 f974 	bl	8003c9c <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f2c0 80d3 	blt.w	8003b62 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 80cf 	beq.w	8003b62 <pvPortMalloc+0x216>
 80039c4:	4b74      	ldr	r3, [pc, #464]	@ (8003b98 <pvPortMalloc+0x24c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	f200 80c9 	bhi.w	8003b62 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80039d0:	4b72      	ldr	r3, [pc, #456]	@ (8003b9c <pvPortMalloc+0x250>)
 80039d2:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80039d4:	4b71      	ldr	r3, [pc, #452]	@ (8003b9c <pvPortMalloc+0x250>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 80039da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039dc:	4a70      	ldr	r2, [pc, #448]	@ (8003ba0 <pvPortMalloc+0x254>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d305      	bcc.n	80039ee <pvPortMalloc+0xa2>
 80039e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039e4:	4a6f      	ldr	r2, [pc, #444]	@ (8003ba4 <pvPortMalloc+0x258>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d801      	bhi.n	80039ee <pvPortMalloc+0xa2>
 80039ea:	2301      	movs	r3, #1
 80039ec:	e000      	b.n	80039f0 <pvPortMalloc+0xa4>
 80039ee:	2300      	movs	r3, #0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d129      	bne.n	8003a48 <pvPortMalloc+0xfc>
    __asm volatile
 80039f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	623b      	str	r3, [r7, #32]
}
 8003a06:	bf00      	nop
 8003a08:	bf00      	nop
 8003a0a:	e7fd      	b.n	8003a08 <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8003a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a0e:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8003a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8003a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a18:	4a61      	ldr	r2, [pc, #388]	@ (8003ba0 <pvPortMalloc+0x254>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d305      	bcc.n	8003a2a <pvPortMalloc+0xde>
 8003a1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a20:	4a60      	ldr	r2, [pc, #384]	@ (8003ba4 <pvPortMalloc+0x258>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d801      	bhi.n	8003a2a <pvPortMalloc+0xde>
 8003a26:	2301      	movs	r3, #1
 8003a28:	e000      	b.n	8003a2c <pvPortMalloc+0xe0>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10b      	bne.n	8003a48 <pvPortMalloc+0xfc>
    __asm volatile
 8003a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a34:	f383 8811 	msr	BASEPRI, r3
 8003a38:	f3bf 8f6f 	isb	sy
 8003a3c:	f3bf 8f4f 	dsb	sy
 8003a40:	61fb      	str	r3, [r7, #28]
}
 8003a42:	bf00      	nop
 8003a44:	bf00      	nop
 8003a46:	e7fd      	b.n	8003a44 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8003a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d903      	bls.n	8003a5a <pvPortMalloc+0x10e>
 8003a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1d8      	bne.n	8003a0c <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003a5a:	4b4e      	ldr	r3, [pc, #312]	@ (8003b94 <pvPortMalloc+0x248>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d07e      	beq.n	8003b62 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8003a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2208      	movs	r2, #8
 8003a6a:	4413      	add	r3, r2
 8003a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8003a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a70:	4a4b      	ldr	r2, [pc, #300]	@ (8003ba0 <pvPortMalloc+0x254>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d305      	bcc.n	8003a82 <pvPortMalloc+0x136>
 8003a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a78:	4a4a      	ldr	r2, [pc, #296]	@ (8003ba4 <pvPortMalloc+0x258>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d801      	bhi.n	8003a82 <pvPortMalloc+0x136>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <pvPortMalloc+0x138>
 8003a82:	2300      	movs	r3, #0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10b      	bne.n	8003aa0 <pvPortMalloc+0x154>
    __asm volatile
 8003a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a8c:	f383 8811 	msr	BASEPRI, r3
 8003a90:	f3bf 8f6f 	isb	sy
 8003a94:	f3bf 8f4f 	dsb	sy
 8003a98:	61bb      	str	r3, [r7, #24]
}
 8003a9a:	bf00      	nop
 8003a9c:	bf00      	nop
 8003a9e:	e7fd      	b.n	8003a9c <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa6:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8003aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d90b      	bls.n	8003aca <pvPortMalloc+0x17e>
    __asm volatile
 8003ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab6:	f383 8811 	msr	BASEPRI, r3
 8003aba:	f3bf 8f6f 	isb	sy
 8003abe:	f3bf 8f4f 	dsb	sy
 8003ac2:	617b      	str	r3, [r7, #20]
}
 8003ac4:	bf00      	nop
 8003ac6:	bf00      	nop
 8003ac8:	e7fd      	b.n	8003ac6 <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	1ad2      	subs	r2, r2, r3
 8003ad2:	2308      	movs	r3, #8
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d924      	bls.n	8003b24 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ada:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4413      	add	r3, r2
 8003ae0:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00b      	beq.n	8003b04 <pvPortMalloc+0x1b8>
    __asm volatile
 8003aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003af0:	f383 8811 	msr	BASEPRI, r3
 8003af4:	f3bf 8f6f 	isb	sy
 8003af8:	f3bf 8f4f 	dsb	sy
 8003afc:	613b      	str	r3, [r7, #16]
}
 8003afe:	bf00      	nop
 8003b00:	bf00      	nop
 8003b02:	e7fd      	b.n	8003b00 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	1ad2      	subs	r2, r2, r3
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8003b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1c:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b22:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003b24:	4b1c      	ldr	r3, [pc, #112]	@ (8003b98 <pvPortMalloc+0x24c>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	4a1a      	ldr	r2, [pc, #104]	@ (8003b98 <pvPortMalloc+0x24c>)
 8003b30:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b32:	4b19      	ldr	r3, [pc, #100]	@ (8003b98 <pvPortMalloc+0x24c>)
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	4b1c      	ldr	r3, [pc, #112]	@ (8003ba8 <pvPortMalloc+0x25c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d203      	bcs.n	8003b46 <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003b3e:	4b16      	ldr	r3, [pc, #88]	@ (8003b98 <pvPortMalloc+0x24c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a19      	ldr	r2, [pc, #100]	@ (8003ba8 <pvPortMalloc+0x25c>)
 8003b44:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b50:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003b58:	4b14      	ldr	r3, [pc, #80]	@ (8003bac <pvPortMalloc+0x260>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	4a13      	ldr	r2, [pc, #76]	@ (8003bac <pvPortMalloc+0x260>)
 8003b60:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003b62:	f7fe fa93 	bl	800208c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00b      	beq.n	8003b88 <pvPortMalloc+0x23c>
    __asm volatile
 8003b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	60fb      	str	r3, [r7, #12]
}
 8003b82:	bf00      	nop
 8003b84:	bf00      	nop
 8003b86:	e7fd      	b.n	8003b84 <pvPortMalloc+0x238>
    return pvReturn;
 8003b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3738      	adds	r7, #56	@ 0x38
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	20012e7c 	.word	0x20012e7c
 8003b98:	20012e80 	.word	0x20012e80
 8003b9c:	20012e74 	.word	0x20012e74
 8003ba0:	20000274 	.word	0x20000274
 8003ba4:	20012e73 	.word	0x20012e73
 8003ba8:	20012e84 	.word	0x20012e84
 8003bac:	20012e88 	.word	0x20012e88

08003bb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d060      	beq.n	8003c84 <vPortFree+0xd4>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003bc2:	2308      	movs	r3, #8
 8003bc4:	425b      	negs	r3, r3
 8003bc6:	69fa      	ldr	r2, [r7, #28]
 8003bc8:	4413      	add	r3, r2
 8003bca:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	4a2e      	ldr	r2, [pc, #184]	@ (8003c8c <vPortFree+0xdc>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d305      	bcc.n	8003be4 <vPortFree+0x34>
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	4a2d      	ldr	r2, [pc, #180]	@ (8003c90 <vPortFree+0xe0>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d801      	bhi.n	8003be4 <vPortFree+0x34>
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <vPortFree+0x36>
 8003be4:	2300      	movs	r3, #0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10b      	bne.n	8003c02 <vPortFree+0x52>
    __asm volatile
 8003bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bee:	f383 8811 	msr	BASEPRI, r3
 8003bf2:	f3bf 8f6f 	isb	sy
 8003bf6:	f3bf 8f4f 	dsb	sy
 8003bfa:	617b      	str	r3, [r7, #20]
}
 8003bfc:	bf00      	nop
 8003bfe:	bf00      	nop
 8003c00:	e7fd      	b.n	8003bfe <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	db0b      	blt.n	8003c22 <vPortFree+0x72>
    __asm volatile
 8003c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c0e:	f383 8811 	msr	BASEPRI, r3
 8003c12:	f3bf 8f6f 	isb	sy
 8003c16:	f3bf 8f4f 	dsb	sy
 8003c1a:	613b      	str	r3, [r7, #16]
}
 8003c1c:	bf00      	nop
 8003c1e:	bf00      	nop
 8003c20:	e7fd      	b.n	8003c1e <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00b      	beq.n	8003c42 <vPortFree+0x92>
    __asm volatile
 8003c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c2e:	f383 8811 	msr	BASEPRI, r3
 8003c32:	f3bf 8f6f 	isb	sy
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	60fb      	str	r3, [r7, #12]
}
 8003c3c:	bf00      	nop
 8003c3e:	bf00      	nop
 8003c40:	e7fd      	b.n	8003c3e <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	da1c      	bge.n	8003c84 <vPortFree+0xd4>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d118      	bne.n	8003c84 <vPortFree+0xd4>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8003c5e:	f7fe fa07 	bl	8002070 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	4b0b      	ldr	r3, [pc, #44]	@ (8003c94 <vPortFree+0xe4>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	4a09      	ldr	r2, [pc, #36]	@ (8003c94 <vPortFree+0xe4>)
 8003c6e:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003c70:	69b8      	ldr	r0, [r7, #24]
 8003c72:	f000 f86d 	bl	8003d50 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003c76:	4b08      	ldr	r3, [pc, #32]	@ (8003c98 <vPortFree+0xe8>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	4a06      	ldr	r2, [pc, #24]	@ (8003c98 <vPortFree+0xe8>)
 8003c7e:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003c80:	f7fe fa04 	bl	800208c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003c84:	bf00      	nop
 8003c86:	3720      	adds	r7, #32
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	20000274 	.word	0x20000274
 8003c90:	20012e73 	.word	0x20012e73
 8003c94:	20012e80 	.word	0x20012e80
 8003c98:	20012e8c 	.word	0x20012e8c

08003c9c <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003ca2:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8003ca6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003ca8:	4b24      	ldr	r3, [pc, #144]	@ (8003d3c <prvHeapInit+0xa0>)
 8003caa:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00c      	beq.n	8003cd0 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	3307      	adds	r3, #7
 8003cba:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f023 0307 	bic.w	r3, r3, #7
 8003cc2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	4a1c      	ldr	r2, [pc, #112]	@ (8003d3c <prvHeapInit+0xa0>)
 8003ccc:	4413      	add	r3, r2
 8003cce:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4a1b      	ldr	r2, [pc, #108]	@ (8003d40 <prvHeapInit+0xa4>)
 8003cd4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d40 <prvHeapInit+0xa4>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8003ce4:	2208      	movs	r2, #8
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	1a9b      	subs	r3, r3, r2
 8003cea:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f023 0307 	bic.w	r3, r3, #7
 8003cf2:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a13      	ldr	r2, [pc, #76]	@ (8003d44 <prvHeapInit+0xa8>)
 8003cf8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003cfa:	4b12      	ldr	r3, [pc, #72]	@ (8003d44 <prvHeapInit+0xa8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8003d02:	4b10      	ldr	r3, [pc, #64]	@ (8003d44 <prvHeapInit+0xa8>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	1ad2      	subs	r2, r2, r3
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003d18:	4b0a      	ldr	r3, [pc, #40]	@ (8003d44 <prvHeapInit+0xa8>)
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	4a08      	ldr	r2, [pc, #32]	@ (8003d48 <prvHeapInit+0xac>)
 8003d26:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	4a07      	ldr	r2, [pc, #28]	@ (8003d4c <prvHeapInit+0xb0>)
 8003d2e:	6013      	str	r3, [r2, #0]
}
 8003d30:	bf00      	nop
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	20000274 	.word	0x20000274
 8003d40:	20012e74 	.word	0x20012e74
 8003d44:	20012e7c 	.word	0x20012e7c
 8003d48:	20012e84 	.word	0x20012e84
 8003d4c:	20012e80 	.word	0x20012e80

08003d50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003d50:	b480      	push	{r7}
 8003d52:	b087      	sub	sp, #28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003d58:	4b36      	ldr	r3, [pc, #216]	@ (8003e34 <prvInsertBlockIntoFreeList+0xe4>)
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	e002      	b.n	8003d64 <prvInsertBlockIntoFreeList+0x14>
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d8f7      	bhi.n	8003d5e <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	4a30      	ldr	r2, [pc, #192]	@ (8003e34 <prvInsertBlockIntoFreeList+0xe4>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d018      	beq.n	8003da8 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	4a2f      	ldr	r2, [pc, #188]	@ (8003e38 <prvInsertBlockIntoFreeList+0xe8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d305      	bcc.n	8003d8a <prvInsertBlockIntoFreeList+0x3a>
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	4a2e      	ldr	r2, [pc, #184]	@ (8003e3c <prvInsertBlockIntoFreeList+0xec>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d801      	bhi.n	8003d8a <prvInsertBlockIntoFreeList+0x3a>
 8003d86:	2301      	movs	r3, #1
 8003d88:	e000      	b.n	8003d8c <prvInsertBlockIntoFreeList+0x3c>
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10b      	bne.n	8003da8 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8003d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d94:	f383 8811 	msr	BASEPRI, r3
 8003d98:	f3bf 8f6f 	isb	sy
 8003d9c:	f3bf 8f4f 	dsb	sy
 8003da0:	60fb      	str	r3, [r7, #12]
}
 8003da2:	bf00      	nop
 8003da4:	bf00      	nop
 8003da6:	e7fd      	b.n	8003da4 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	4413      	add	r3, r2
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d108      	bne.n	8003dcc <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	441a      	add	r2, r3
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	441a      	add	r2, r3
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d118      	bne.n	8003e12 <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	4b16      	ldr	r3, [pc, #88]	@ (8003e40 <prvInsertBlockIntoFreeList+0xf0>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d00d      	beq.n	8003e08 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	441a      	add	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	e008      	b.n	8003e1a <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003e08:	4b0d      	ldr	r3, [pc, #52]	@ (8003e40 <prvInsertBlockIntoFreeList+0xf0>)
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	e003      	b.n	8003e1a <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d002      	beq.n	8003e28 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003e28:	bf00      	nop
 8003e2a:	371c      	adds	r7, #28
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	20012e74 	.word	0x20012e74
 8003e38:	20000274 	.word	0x20000274
 8003e3c:	20012e73 	.word	0x20012e73
 8003e40:	20012e7c 	.word	0x20012e7c

08003e44 <std>:
 8003e44:	2300      	movs	r3, #0
 8003e46:	b510      	push	{r4, lr}
 8003e48:	4604      	mov	r4, r0
 8003e4a:	e9c0 3300 	strd	r3, r3, [r0]
 8003e4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e52:	6083      	str	r3, [r0, #8]
 8003e54:	8181      	strh	r1, [r0, #12]
 8003e56:	6643      	str	r3, [r0, #100]	@ 0x64
 8003e58:	81c2      	strh	r2, [r0, #14]
 8003e5a:	6183      	str	r3, [r0, #24]
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	2208      	movs	r2, #8
 8003e60:	305c      	adds	r0, #92	@ 0x5c
 8003e62:	f000 f906 	bl	8004072 <memset>
 8003e66:	4b0d      	ldr	r3, [pc, #52]	@ (8003e9c <std+0x58>)
 8003e68:	6263      	str	r3, [r4, #36]	@ 0x24
 8003e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ea0 <std+0x5c>)
 8003e6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ea4 <std+0x60>)
 8003e70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003e72:	4b0d      	ldr	r3, [pc, #52]	@ (8003ea8 <std+0x64>)
 8003e74:	6323      	str	r3, [r4, #48]	@ 0x30
 8003e76:	4b0d      	ldr	r3, [pc, #52]	@ (8003eac <std+0x68>)
 8003e78:	6224      	str	r4, [r4, #32]
 8003e7a:	429c      	cmp	r4, r3
 8003e7c:	d006      	beq.n	8003e8c <std+0x48>
 8003e7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003e82:	4294      	cmp	r4, r2
 8003e84:	d002      	beq.n	8003e8c <std+0x48>
 8003e86:	33d0      	adds	r3, #208	@ 0xd0
 8003e88:	429c      	cmp	r4, r3
 8003e8a:	d105      	bne.n	8003e98 <std+0x54>
 8003e8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e94:	f000 b966 	b.w	8004164 <__retarget_lock_init_recursive>
 8003e98:	bd10      	pop	{r4, pc}
 8003e9a:	bf00      	nop
 8003e9c:	08003fed 	.word	0x08003fed
 8003ea0:	0800400f 	.word	0x0800400f
 8003ea4:	08004047 	.word	0x08004047
 8003ea8:	0800406b 	.word	0x0800406b
 8003eac:	20012e90 	.word	0x20012e90

08003eb0 <stdio_exit_handler>:
 8003eb0:	4a02      	ldr	r2, [pc, #8]	@ (8003ebc <stdio_exit_handler+0xc>)
 8003eb2:	4903      	ldr	r1, [pc, #12]	@ (8003ec0 <stdio_exit_handler+0x10>)
 8003eb4:	4803      	ldr	r0, [pc, #12]	@ (8003ec4 <stdio_exit_handler+0x14>)
 8003eb6:	f000 b869 	b.w	8003f8c <_fwalk_sglue>
 8003eba:	bf00      	nop
 8003ebc:	20000010 	.word	0x20000010
 8003ec0:	08004a1d 	.word	0x08004a1d
 8003ec4:	20000020 	.word	0x20000020

08003ec8 <cleanup_stdio>:
 8003ec8:	6841      	ldr	r1, [r0, #4]
 8003eca:	4b0c      	ldr	r3, [pc, #48]	@ (8003efc <cleanup_stdio+0x34>)
 8003ecc:	4299      	cmp	r1, r3
 8003ece:	b510      	push	{r4, lr}
 8003ed0:	4604      	mov	r4, r0
 8003ed2:	d001      	beq.n	8003ed8 <cleanup_stdio+0x10>
 8003ed4:	f000 fda2 	bl	8004a1c <_fflush_r>
 8003ed8:	68a1      	ldr	r1, [r4, #8]
 8003eda:	4b09      	ldr	r3, [pc, #36]	@ (8003f00 <cleanup_stdio+0x38>)
 8003edc:	4299      	cmp	r1, r3
 8003ede:	d002      	beq.n	8003ee6 <cleanup_stdio+0x1e>
 8003ee0:	4620      	mov	r0, r4
 8003ee2:	f000 fd9b 	bl	8004a1c <_fflush_r>
 8003ee6:	68e1      	ldr	r1, [r4, #12]
 8003ee8:	4b06      	ldr	r3, [pc, #24]	@ (8003f04 <cleanup_stdio+0x3c>)
 8003eea:	4299      	cmp	r1, r3
 8003eec:	d004      	beq.n	8003ef8 <cleanup_stdio+0x30>
 8003eee:	4620      	mov	r0, r4
 8003ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ef4:	f000 bd92 	b.w	8004a1c <_fflush_r>
 8003ef8:	bd10      	pop	{r4, pc}
 8003efa:	bf00      	nop
 8003efc:	20012e90 	.word	0x20012e90
 8003f00:	20012ef8 	.word	0x20012ef8
 8003f04:	20012f60 	.word	0x20012f60

08003f08 <global_stdio_init.part.0>:
 8003f08:	b510      	push	{r4, lr}
 8003f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f38 <global_stdio_init.part.0+0x30>)
 8003f0c:	4c0b      	ldr	r4, [pc, #44]	@ (8003f3c <global_stdio_init.part.0+0x34>)
 8003f0e:	4a0c      	ldr	r2, [pc, #48]	@ (8003f40 <global_stdio_init.part.0+0x38>)
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	4620      	mov	r0, r4
 8003f14:	2200      	movs	r2, #0
 8003f16:	2104      	movs	r1, #4
 8003f18:	f7ff ff94 	bl	8003e44 <std>
 8003f1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003f20:	2201      	movs	r2, #1
 8003f22:	2109      	movs	r1, #9
 8003f24:	f7ff ff8e 	bl	8003e44 <std>
 8003f28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003f2c:	2202      	movs	r2, #2
 8003f2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f32:	2112      	movs	r1, #18
 8003f34:	f7ff bf86 	b.w	8003e44 <std>
 8003f38:	20012fc8 	.word	0x20012fc8
 8003f3c:	20012e90 	.word	0x20012e90
 8003f40:	08003eb1 	.word	0x08003eb1

08003f44 <__sfp_lock_acquire>:
 8003f44:	4801      	ldr	r0, [pc, #4]	@ (8003f4c <__sfp_lock_acquire+0x8>)
 8003f46:	f000 b90e 	b.w	8004166 <__retarget_lock_acquire_recursive>
 8003f4a:	bf00      	nop
 8003f4c:	20012fd1 	.word	0x20012fd1

08003f50 <__sfp_lock_release>:
 8003f50:	4801      	ldr	r0, [pc, #4]	@ (8003f58 <__sfp_lock_release+0x8>)
 8003f52:	f000 b909 	b.w	8004168 <__retarget_lock_release_recursive>
 8003f56:	bf00      	nop
 8003f58:	20012fd1 	.word	0x20012fd1

08003f5c <__sinit>:
 8003f5c:	b510      	push	{r4, lr}
 8003f5e:	4604      	mov	r4, r0
 8003f60:	f7ff fff0 	bl	8003f44 <__sfp_lock_acquire>
 8003f64:	6a23      	ldr	r3, [r4, #32]
 8003f66:	b11b      	cbz	r3, 8003f70 <__sinit+0x14>
 8003f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f6c:	f7ff bff0 	b.w	8003f50 <__sfp_lock_release>
 8003f70:	4b04      	ldr	r3, [pc, #16]	@ (8003f84 <__sinit+0x28>)
 8003f72:	6223      	str	r3, [r4, #32]
 8003f74:	4b04      	ldr	r3, [pc, #16]	@ (8003f88 <__sinit+0x2c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1f5      	bne.n	8003f68 <__sinit+0xc>
 8003f7c:	f7ff ffc4 	bl	8003f08 <global_stdio_init.part.0>
 8003f80:	e7f2      	b.n	8003f68 <__sinit+0xc>
 8003f82:	bf00      	nop
 8003f84:	08003ec9 	.word	0x08003ec9
 8003f88:	20012fc8 	.word	0x20012fc8

08003f8c <_fwalk_sglue>:
 8003f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f90:	4607      	mov	r7, r0
 8003f92:	4688      	mov	r8, r1
 8003f94:	4614      	mov	r4, r2
 8003f96:	2600      	movs	r6, #0
 8003f98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f9c:	f1b9 0901 	subs.w	r9, r9, #1
 8003fa0:	d505      	bpl.n	8003fae <_fwalk_sglue+0x22>
 8003fa2:	6824      	ldr	r4, [r4, #0]
 8003fa4:	2c00      	cmp	r4, #0
 8003fa6:	d1f7      	bne.n	8003f98 <_fwalk_sglue+0xc>
 8003fa8:	4630      	mov	r0, r6
 8003faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fae:	89ab      	ldrh	r3, [r5, #12]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d907      	bls.n	8003fc4 <_fwalk_sglue+0x38>
 8003fb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	d003      	beq.n	8003fc4 <_fwalk_sglue+0x38>
 8003fbc:	4629      	mov	r1, r5
 8003fbe:	4638      	mov	r0, r7
 8003fc0:	47c0      	blx	r8
 8003fc2:	4306      	orrs	r6, r0
 8003fc4:	3568      	adds	r5, #104	@ 0x68
 8003fc6:	e7e9      	b.n	8003f9c <_fwalk_sglue+0x10>

08003fc8 <iprintf>:
 8003fc8:	b40f      	push	{r0, r1, r2, r3}
 8003fca:	b507      	push	{r0, r1, r2, lr}
 8003fcc:	4906      	ldr	r1, [pc, #24]	@ (8003fe8 <iprintf+0x20>)
 8003fce:	ab04      	add	r3, sp, #16
 8003fd0:	6808      	ldr	r0, [r1, #0]
 8003fd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fd6:	6881      	ldr	r1, [r0, #8]
 8003fd8:	9301      	str	r3, [sp, #4]
 8003fda:	f000 f9f7 	bl	80043cc <_vfiprintf_r>
 8003fde:	b003      	add	sp, #12
 8003fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fe4:	b004      	add	sp, #16
 8003fe6:	4770      	bx	lr
 8003fe8:	2000001c 	.word	0x2000001c

08003fec <__sread>:
 8003fec:	b510      	push	{r4, lr}
 8003fee:	460c      	mov	r4, r1
 8003ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ff4:	f000 f868 	bl	80040c8 <_read_r>
 8003ff8:	2800      	cmp	r0, #0
 8003ffa:	bfab      	itete	ge
 8003ffc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003ffe:	89a3      	ldrhlt	r3, [r4, #12]
 8004000:	181b      	addge	r3, r3, r0
 8004002:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004006:	bfac      	ite	ge
 8004008:	6563      	strge	r3, [r4, #84]	@ 0x54
 800400a:	81a3      	strhlt	r3, [r4, #12]
 800400c:	bd10      	pop	{r4, pc}

0800400e <__swrite>:
 800400e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004012:	461f      	mov	r7, r3
 8004014:	898b      	ldrh	r3, [r1, #12]
 8004016:	05db      	lsls	r3, r3, #23
 8004018:	4605      	mov	r5, r0
 800401a:	460c      	mov	r4, r1
 800401c:	4616      	mov	r6, r2
 800401e:	d505      	bpl.n	800402c <__swrite+0x1e>
 8004020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004024:	2302      	movs	r3, #2
 8004026:	2200      	movs	r2, #0
 8004028:	f000 f83c 	bl	80040a4 <_lseek_r>
 800402c:	89a3      	ldrh	r3, [r4, #12]
 800402e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004032:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004036:	81a3      	strh	r3, [r4, #12]
 8004038:	4632      	mov	r2, r6
 800403a:	463b      	mov	r3, r7
 800403c:	4628      	mov	r0, r5
 800403e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004042:	f000 b853 	b.w	80040ec <_write_r>

08004046 <__sseek>:
 8004046:	b510      	push	{r4, lr}
 8004048:	460c      	mov	r4, r1
 800404a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800404e:	f000 f829 	bl	80040a4 <_lseek_r>
 8004052:	1c43      	adds	r3, r0, #1
 8004054:	89a3      	ldrh	r3, [r4, #12]
 8004056:	bf15      	itete	ne
 8004058:	6560      	strne	r0, [r4, #84]	@ 0x54
 800405a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800405e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004062:	81a3      	strheq	r3, [r4, #12]
 8004064:	bf18      	it	ne
 8004066:	81a3      	strhne	r3, [r4, #12]
 8004068:	bd10      	pop	{r4, pc}

0800406a <__sclose>:
 800406a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800406e:	f000 b809 	b.w	8004084 <_close_r>

08004072 <memset>:
 8004072:	4402      	add	r2, r0
 8004074:	4603      	mov	r3, r0
 8004076:	4293      	cmp	r3, r2
 8004078:	d100      	bne.n	800407c <memset+0xa>
 800407a:	4770      	bx	lr
 800407c:	f803 1b01 	strb.w	r1, [r3], #1
 8004080:	e7f9      	b.n	8004076 <memset+0x4>
	...

08004084 <_close_r>:
 8004084:	b538      	push	{r3, r4, r5, lr}
 8004086:	4d06      	ldr	r5, [pc, #24]	@ (80040a0 <_close_r+0x1c>)
 8004088:	2300      	movs	r3, #0
 800408a:	4604      	mov	r4, r0
 800408c:	4608      	mov	r0, r1
 800408e:	602b      	str	r3, [r5, #0]
 8004090:	f7fc fafd 	bl	800068e <_close>
 8004094:	1c43      	adds	r3, r0, #1
 8004096:	d102      	bne.n	800409e <_close_r+0x1a>
 8004098:	682b      	ldr	r3, [r5, #0]
 800409a:	b103      	cbz	r3, 800409e <_close_r+0x1a>
 800409c:	6023      	str	r3, [r4, #0]
 800409e:	bd38      	pop	{r3, r4, r5, pc}
 80040a0:	20012fcc 	.word	0x20012fcc

080040a4 <_lseek_r>:
 80040a4:	b538      	push	{r3, r4, r5, lr}
 80040a6:	4d07      	ldr	r5, [pc, #28]	@ (80040c4 <_lseek_r+0x20>)
 80040a8:	4604      	mov	r4, r0
 80040aa:	4608      	mov	r0, r1
 80040ac:	4611      	mov	r1, r2
 80040ae:	2200      	movs	r2, #0
 80040b0:	602a      	str	r2, [r5, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	f7fc fb12 	bl	80006dc <_lseek>
 80040b8:	1c43      	adds	r3, r0, #1
 80040ba:	d102      	bne.n	80040c2 <_lseek_r+0x1e>
 80040bc:	682b      	ldr	r3, [r5, #0]
 80040be:	b103      	cbz	r3, 80040c2 <_lseek_r+0x1e>
 80040c0:	6023      	str	r3, [r4, #0]
 80040c2:	bd38      	pop	{r3, r4, r5, pc}
 80040c4:	20012fcc 	.word	0x20012fcc

080040c8 <_read_r>:
 80040c8:	b538      	push	{r3, r4, r5, lr}
 80040ca:	4d07      	ldr	r5, [pc, #28]	@ (80040e8 <_read_r+0x20>)
 80040cc:	4604      	mov	r4, r0
 80040ce:	4608      	mov	r0, r1
 80040d0:	4611      	mov	r1, r2
 80040d2:	2200      	movs	r2, #0
 80040d4:	602a      	str	r2, [r5, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	f7fc faa0 	bl	800061c <_read>
 80040dc:	1c43      	adds	r3, r0, #1
 80040de:	d102      	bne.n	80040e6 <_read_r+0x1e>
 80040e0:	682b      	ldr	r3, [r5, #0]
 80040e2:	b103      	cbz	r3, 80040e6 <_read_r+0x1e>
 80040e4:	6023      	str	r3, [r4, #0]
 80040e6:	bd38      	pop	{r3, r4, r5, pc}
 80040e8:	20012fcc 	.word	0x20012fcc

080040ec <_write_r>:
 80040ec:	b538      	push	{r3, r4, r5, lr}
 80040ee:	4d07      	ldr	r5, [pc, #28]	@ (800410c <_write_r+0x20>)
 80040f0:	4604      	mov	r4, r0
 80040f2:	4608      	mov	r0, r1
 80040f4:	4611      	mov	r1, r2
 80040f6:	2200      	movs	r2, #0
 80040f8:	602a      	str	r2, [r5, #0]
 80040fa:	461a      	mov	r2, r3
 80040fc:	f7fc faab 	bl	8000656 <_write>
 8004100:	1c43      	adds	r3, r0, #1
 8004102:	d102      	bne.n	800410a <_write_r+0x1e>
 8004104:	682b      	ldr	r3, [r5, #0]
 8004106:	b103      	cbz	r3, 800410a <_write_r+0x1e>
 8004108:	6023      	str	r3, [r4, #0]
 800410a:	bd38      	pop	{r3, r4, r5, pc}
 800410c:	20012fcc 	.word	0x20012fcc

08004110 <__errno>:
 8004110:	4b01      	ldr	r3, [pc, #4]	@ (8004118 <__errno+0x8>)
 8004112:	6818      	ldr	r0, [r3, #0]
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	2000001c 	.word	0x2000001c

0800411c <__libc_init_array>:
 800411c:	b570      	push	{r4, r5, r6, lr}
 800411e:	4d0d      	ldr	r5, [pc, #52]	@ (8004154 <__libc_init_array+0x38>)
 8004120:	4c0d      	ldr	r4, [pc, #52]	@ (8004158 <__libc_init_array+0x3c>)
 8004122:	1b64      	subs	r4, r4, r5
 8004124:	10a4      	asrs	r4, r4, #2
 8004126:	2600      	movs	r6, #0
 8004128:	42a6      	cmp	r6, r4
 800412a:	d109      	bne.n	8004140 <__libc_init_array+0x24>
 800412c:	4d0b      	ldr	r5, [pc, #44]	@ (800415c <__libc_init_array+0x40>)
 800412e:	4c0c      	ldr	r4, [pc, #48]	@ (8004160 <__libc_init_array+0x44>)
 8004130:	f000 fdc4 	bl	8004cbc <_init>
 8004134:	1b64      	subs	r4, r4, r5
 8004136:	10a4      	asrs	r4, r4, #2
 8004138:	2600      	movs	r6, #0
 800413a:	42a6      	cmp	r6, r4
 800413c:	d105      	bne.n	800414a <__libc_init_array+0x2e>
 800413e:	bd70      	pop	{r4, r5, r6, pc}
 8004140:	f855 3b04 	ldr.w	r3, [r5], #4
 8004144:	4798      	blx	r3
 8004146:	3601      	adds	r6, #1
 8004148:	e7ee      	b.n	8004128 <__libc_init_array+0xc>
 800414a:	f855 3b04 	ldr.w	r3, [r5], #4
 800414e:	4798      	blx	r3
 8004150:	3601      	adds	r6, #1
 8004152:	e7f2      	b.n	800413a <__libc_init_array+0x1e>
 8004154:	08004d74 	.word	0x08004d74
 8004158:	08004d74 	.word	0x08004d74
 800415c:	08004d74 	.word	0x08004d74
 8004160:	08004d78 	.word	0x08004d78

08004164 <__retarget_lock_init_recursive>:
 8004164:	4770      	bx	lr

08004166 <__retarget_lock_acquire_recursive>:
 8004166:	4770      	bx	lr

08004168 <__retarget_lock_release_recursive>:
 8004168:	4770      	bx	lr

0800416a <memcpy>:
 800416a:	440a      	add	r2, r1
 800416c:	4291      	cmp	r1, r2
 800416e:	f100 33ff 	add.w	r3, r0, #4294967295
 8004172:	d100      	bne.n	8004176 <memcpy+0xc>
 8004174:	4770      	bx	lr
 8004176:	b510      	push	{r4, lr}
 8004178:	f811 4b01 	ldrb.w	r4, [r1], #1
 800417c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004180:	4291      	cmp	r1, r2
 8004182:	d1f9      	bne.n	8004178 <memcpy+0xe>
 8004184:	bd10      	pop	{r4, pc}
	...

08004188 <_free_r>:
 8004188:	b538      	push	{r3, r4, r5, lr}
 800418a:	4605      	mov	r5, r0
 800418c:	2900      	cmp	r1, #0
 800418e:	d041      	beq.n	8004214 <_free_r+0x8c>
 8004190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004194:	1f0c      	subs	r4, r1, #4
 8004196:	2b00      	cmp	r3, #0
 8004198:	bfb8      	it	lt
 800419a:	18e4      	addlt	r4, r4, r3
 800419c:	f000 f8e0 	bl	8004360 <__malloc_lock>
 80041a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004218 <_free_r+0x90>)
 80041a2:	6813      	ldr	r3, [r2, #0]
 80041a4:	b933      	cbnz	r3, 80041b4 <_free_r+0x2c>
 80041a6:	6063      	str	r3, [r4, #4]
 80041a8:	6014      	str	r4, [r2, #0]
 80041aa:	4628      	mov	r0, r5
 80041ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041b0:	f000 b8dc 	b.w	800436c <__malloc_unlock>
 80041b4:	42a3      	cmp	r3, r4
 80041b6:	d908      	bls.n	80041ca <_free_r+0x42>
 80041b8:	6820      	ldr	r0, [r4, #0]
 80041ba:	1821      	adds	r1, r4, r0
 80041bc:	428b      	cmp	r3, r1
 80041be:	bf01      	itttt	eq
 80041c0:	6819      	ldreq	r1, [r3, #0]
 80041c2:	685b      	ldreq	r3, [r3, #4]
 80041c4:	1809      	addeq	r1, r1, r0
 80041c6:	6021      	streq	r1, [r4, #0]
 80041c8:	e7ed      	b.n	80041a6 <_free_r+0x1e>
 80041ca:	461a      	mov	r2, r3
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	b10b      	cbz	r3, 80041d4 <_free_r+0x4c>
 80041d0:	42a3      	cmp	r3, r4
 80041d2:	d9fa      	bls.n	80041ca <_free_r+0x42>
 80041d4:	6811      	ldr	r1, [r2, #0]
 80041d6:	1850      	adds	r0, r2, r1
 80041d8:	42a0      	cmp	r0, r4
 80041da:	d10b      	bne.n	80041f4 <_free_r+0x6c>
 80041dc:	6820      	ldr	r0, [r4, #0]
 80041de:	4401      	add	r1, r0
 80041e0:	1850      	adds	r0, r2, r1
 80041e2:	4283      	cmp	r3, r0
 80041e4:	6011      	str	r1, [r2, #0]
 80041e6:	d1e0      	bne.n	80041aa <_free_r+0x22>
 80041e8:	6818      	ldr	r0, [r3, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	6053      	str	r3, [r2, #4]
 80041ee:	4408      	add	r0, r1
 80041f0:	6010      	str	r0, [r2, #0]
 80041f2:	e7da      	b.n	80041aa <_free_r+0x22>
 80041f4:	d902      	bls.n	80041fc <_free_r+0x74>
 80041f6:	230c      	movs	r3, #12
 80041f8:	602b      	str	r3, [r5, #0]
 80041fa:	e7d6      	b.n	80041aa <_free_r+0x22>
 80041fc:	6820      	ldr	r0, [r4, #0]
 80041fe:	1821      	adds	r1, r4, r0
 8004200:	428b      	cmp	r3, r1
 8004202:	bf04      	itt	eq
 8004204:	6819      	ldreq	r1, [r3, #0]
 8004206:	685b      	ldreq	r3, [r3, #4]
 8004208:	6063      	str	r3, [r4, #4]
 800420a:	bf04      	itt	eq
 800420c:	1809      	addeq	r1, r1, r0
 800420e:	6021      	streq	r1, [r4, #0]
 8004210:	6054      	str	r4, [r2, #4]
 8004212:	e7ca      	b.n	80041aa <_free_r+0x22>
 8004214:	bd38      	pop	{r3, r4, r5, pc}
 8004216:	bf00      	nop
 8004218:	20012fd8 	.word	0x20012fd8

0800421c <sbrk_aligned>:
 800421c:	b570      	push	{r4, r5, r6, lr}
 800421e:	4e0f      	ldr	r6, [pc, #60]	@ (800425c <sbrk_aligned+0x40>)
 8004220:	460c      	mov	r4, r1
 8004222:	6831      	ldr	r1, [r6, #0]
 8004224:	4605      	mov	r5, r0
 8004226:	b911      	cbnz	r1, 800422e <sbrk_aligned+0x12>
 8004228:	f000 fcb4 	bl	8004b94 <_sbrk_r>
 800422c:	6030      	str	r0, [r6, #0]
 800422e:	4621      	mov	r1, r4
 8004230:	4628      	mov	r0, r5
 8004232:	f000 fcaf 	bl	8004b94 <_sbrk_r>
 8004236:	1c43      	adds	r3, r0, #1
 8004238:	d103      	bne.n	8004242 <sbrk_aligned+0x26>
 800423a:	f04f 34ff 	mov.w	r4, #4294967295
 800423e:	4620      	mov	r0, r4
 8004240:	bd70      	pop	{r4, r5, r6, pc}
 8004242:	1cc4      	adds	r4, r0, #3
 8004244:	f024 0403 	bic.w	r4, r4, #3
 8004248:	42a0      	cmp	r0, r4
 800424a:	d0f8      	beq.n	800423e <sbrk_aligned+0x22>
 800424c:	1a21      	subs	r1, r4, r0
 800424e:	4628      	mov	r0, r5
 8004250:	f000 fca0 	bl	8004b94 <_sbrk_r>
 8004254:	3001      	adds	r0, #1
 8004256:	d1f2      	bne.n	800423e <sbrk_aligned+0x22>
 8004258:	e7ef      	b.n	800423a <sbrk_aligned+0x1e>
 800425a:	bf00      	nop
 800425c:	20012fd4 	.word	0x20012fd4

08004260 <_malloc_r>:
 8004260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004264:	1ccd      	adds	r5, r1, #3
 8004266:	f025 0503 	bic.w	r5, r5, #3
 800426a:	3508      	adds	r5, #8
 800426c:	2d0c      	cmp	r5, #12
 800426e:	bf38      	it	cc
 8004270:	250c      	movcc	r5, #12
 8004272:	2d00      	cmp	r5, #0
 8004274:	4606      	mov	r6, r0
 8004276:	db01      	blt.n	800427c <_malloc_r+0x1c>
 8004278:	42a9      	cmp	r1, r5
 800427a:	d904      	bls.n	8004286 <_malloc_r+0x26>
 800427c:	230c      	movs	r3, #12
 800427e:	6033      	str	r3, [r6, #0]
 8004280:	2000      	movs	r0, #0
 8004282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004286:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800435c <_malloc_r+0xfc>
 800428a:	f000 f869 	bl	8004360 <__malloc_lock>
 800428e:	f8d8 3000 	ldr.w	r3, [r8]
 8004292:	461c      	mov	r4, r3
 8004294:	bb44      	cbnz	r4, 80042e8 <_malloc_r+0x88>
 8004296:	4629      	mov	r1, r5
 8004298:	4630      	mov	r0, r6
 800429a:	f7ff ffbf 	bl	800421c <sbrk_aligned>
 800429e:	1c43      	adds	r3, r0, #1
 80042a0:	4604      	mov	r4, r0
 80042a2:	d158      	bne.n	8004356 <_malloc_r+0xf6>
 80042a4:	f8d8 4000 	ldr.w	r4, [r8]
 80042a8:	4627      	mov	r7, r4
 80042aa:	2f00      	cmp	r7, #0
 80042ac:	d143      	bne.n	8004336 <_malloc_r+0xd6>
 80042ae:	2c00      	cmp	r4, #0
 80042b0:	d04b      	beq.n	800434a <_malloc_r+0xea>
 80042b2:	6823      	ldr	r3, [r4, #0]
 80042b4:	4639      	mov	r1, r7
 80042b6:	4630      	mov	r0, r6
 80042b8:	eb04 0903 	add.w	r9, r4, r3
 80042bc:	f000 fc6a 	bl	8004b94 <_sbrk_r>
 80042c0:	4581      	cmp	r9, r0
 80042c2:	d142      	bne.n	800434a <_malloc_r+0xea>
 80042c4:	6821      	ldr	r1, [r4, #0]
 80042c6:	1a6d      	subs	r5, r5, r1
 80042c8:	4629      	mov	r1, r5
 80042ca:	4630      	mov	r0, r6
 80042cc:	f7ff ffa6 	bl	800421c <sbrk_aligned>
 80042d0:	3001      	adds	r0, #1
 80042d2:	d03a      	beq.n	800434a <_malloc_r+0xea>
 80042d4:	6823      	ldr	r3, [r4, #0]
 80042d6:	442b      	add	r3, r5
 80042d8:	6023      	str	r3, [r4, #0]
 80042da:	f8d8 3000 	ldr.w	r3, [r8]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	bb62      	cbnz	r2, 800433c <_malloc_r+0xdc>
 80042e2:	f8c8 7000 	str.w	r7, [r8]
 80042e6:	e00f      	b.n	8004308 <_malloc_r+0xa8>
 80042e8:	6822      	ldr	r2, [r4, #0]
 80042ea:	1b52      	subs	r2, r2, r5
 80042ec:	d420      	bmi.n	8004330 <_malloc_r+0xd0>
 80042ee:	2a0b      	cmp	r2, #11
 80042f0:	d917      	bls.n	8004322 <_malloc_r+0xc2>
 80042f2:	1961      	adds	r1, r4, r5
 80042f4:	42a3      	cmp	r3, r4
 80042f6:	6025      	str	r5, [r4, #0]
 80042f8:	bf18      	it	ne
 80042fa:	6059      	strne	r1, [r3, #4]
 80042fc:	6863      	ldr	r3, [r4, #4]
 80042fe:	bf08      	it	eq
 8004300:	f8c8 1000 	streq.w	r1, [r8]
 8004304:	5162      	str	r2, [r4, r5]
 8004306:	604b      	str	r3, [r1, #4]
 8004308:	4630      	mov	r0, r6
 800430a:	f000 f82f 	bl	800436c <__malloc_unlock>
 800430e:	f104 000b 	add.w	r0, r4, #11
 8004312:	1d23      	adds	r3, r4, #4
 8004314:	f020 0007 	bic.w	r0, r0, #7
 8004318:	1ac2      	subs	r2, r0, r3
 800431a:	bf1c      	itt	ne
 800431c:	1a1b      	subne	r3, r3, r0
 800431e:	50a3      	strne	r3, [r4, r2]
 8004320:	e7af      	b.n	8004282 <_malloc_r+0x22>
 8004322:	6862      	ldr	r2, [r4, #4]
 8004324:	42a3      	cmp	r3, r4
 8004326:	bf0c      	ite	eq
 8004328:	f8c8 2000 	streq.w	r2, [r8]
 800432c:	605a      	strne	r2, [r3, #4]
 800432e:	e7eb      	b.n	8004308 <_malloc_r+0xa8>
 8004330:	4623      	mov	r3, r4
 8004332:	6864      	ldr	r4, [r4, #4]
 8004334:	e7ae      	b.n	8004294 <_malloc_r+0x34>
 8004336:	463c      	mov	r4, r7
 8004338:	687f      	ldr	r7, [r7, #4]
 800433a:	e7b6      	b.n	80042aa <_malloc_r+0x4a>
 800433c:	461a      	mov	r2, r3
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	42a3      	cmp	r3, r4
 8004342:	d1fb      	bne.n	800433c <_malloc_r+0xdc>
 8004344:	2300      	movs	r3, #0
 8004346:	6053      	str	r3, [r2, #4]
 8004348:	e7de      	b.n	8004308 <_malloc_r+0xa8>
 800434a:	230c      	movs	r3, #12
 800434c:	6033      	str	r3, [r6, #0]
 800434e:	4630      	mov	r0, r6
 8004350:	f000 f80c 	bl	800436c <__malloc_unlock>
 8004354:	e794      	b.n	8004280 <_malloc_r+0x20>
 8004356:	6005      	str	r5, [r0, #0]
 8004358:	e7d6      	b.n	8004308 <_malloc_r+0xa8>
 800435a:	bf00      	nop
 800435c:	20012fd8 	.word	0x20012fd8

08004360 <__malloc_lock>:
 8004360:	4801      	ldr	r0, [pc, #4]	@ (8004368 <__malloc_lock+0x8>)
 8004362:	f7ff bf00 	b.w	8004166 <__retarget_lock_acquire_recursive>
 8004366:	bf00      	nop
 8004368:	20012fd0 	.word	0x20012fd0

0800436c <__malloc_unlock>:
 800436c:	4801      	ldr	r0, [pc, #4]	@ (8004374 <__malloc_unlock+0x8>)
 800436e:	f7ff befb 	b.w	8004168 <__retarget_lock_release_recursive>
 8004372:	bf00      	nop
 8004374:	20012fd0 	.word	0x20012fd0

08004378 <__sfputc_r>:
 8004378:	6893      	ldr	r3, [r2, #8]
 800437a:	3b01      	subs	r3, #1
 800437c:	2b00      	cmp	r3, #0
 800437e:	b410      	push	{r4}
 8004380:	6093      	str	r3, [r2, #8]
 8004382:	da08      	bge.n	8004396 <__sfputc_r+0x1e>
 8004384:	6994      	ldr	r4, [r2, #24]
 8004386:	42a3      	cmp	r3, r4
 8004388:	db01      	blt.n	800438e <__sfputc_r+0x16>
 800438a:	290a      	cmp	r1, #10
 800438c:	d103      	bne.n	8004396 <__sfputc_r+0x1e>
 800438e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004392:	f000 bb6b 	b.w	8004a6c <__swbuf_r>
 8004396:	6813      	ldr	r3, [r2, #0]
 8004398:	1c58      	adds	r0, r3, #1
 800439a:	6010      	str	r0, [r2, #0]
 800439c:	7019      	strb	r1, [r3, #0]
 800439e:	4608      	mov	r0, r1
 80043a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <__sfputs_r>:
 80043a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a8:	4606      	mov	r6, r0
 80043aa:	460f      	mov	r7, r1
 80043ac:	4614      	mov	r4, r2
 80043ae:	18d5      	adds	r5, r2, r3
 80043b0:	42ac      	cmp	r4, r5
 80043b2:	d101      	bne.n	80043b8 <__sfputs_r+0x12>
 80043b4:	2000      	movs	r0, #0
 80043b6:	e007      	b.n	80043c8 <__sfputs_r+0x22>
 80043b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043bc:	463a      	mov	r2, r7
 80043be:	4630      	mov	r0, r6
 80043c0:	f7ff ffda 	bl	8004378 <__sfputc_r>
 80043c4:	1c43      	adds	r3, r0, #1
 80043c6:	d1f3      	bne.n	80043b0 <__sfputs_r+0xa>
 80043c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043cc <_vfiprintf_r>:
 80043cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043d0:	460d      	mov	r5, r1
 80043d2:	b09d      	sub	sp, #116	@ 0x74
 80043d4:	4614      	mov	r4, r2
 80043d6:	4698      	mov	r8, r3
 80043d8:	4606      	mov	r6, r0
 80043da:	b118      	cbz	r0, 80043e4 <_vfiprintf_r+0x18>
 80043dc:	6a03      	ldr	r3, [r0, #32]
 80043de:	b90b      	cbnz	r3, 80043e4 <_vfiprintf_r+0x18>
 80043e0:	f7ff fdbc 	bl	8003f5c <__sinit>
 80043e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80043e6:	07d9      	lsls	r1, r3, #31
 80043e8:	d405      	bmi.n	80043f6 <_vfiprintf_r+0x2a>
 80043ea:	89ab      	ldrh	r3, [r5, #12]
 80043ec:	059a      	lsls	r2, r3, #22
 80043ee:	d402      	bmi.n	80043f6 <_vfiprintf_r+0x2a>
 80043f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80043f2:	f7ff feb8 	bl	8004166 <__retarget_lock_acquire_recursive>
 80043f6:	89ab      	ldrh	r3, [r5, #12]
 80043f8:	071b      	lsls	r3, r3, #28
 80043fa:	d501      	bpl.n	8004400 <_vfiprintf_r+0x34>
 80043fc:	692b      	ldr	r3, [r5, #16]
 80043fe:	b99b      	cbnz	r3, 8004428 <_vfiprintf_r+0x5c>
 8004400:	4629      	mov	r1, r5
 8004402:	4630      	mov	r0, r6
 8004404:	f000 fb70 	bl	8004ae8 <__swsetup_r>
 8004408:	b170      	cbz	r0, 8004428 <_vfiprintf_r+0x5c>
 800440a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800440c:	07dc      	lsls	r4, r3, #31
 800440e:	d504      	bpl.n	800441a <_vfiprintf_r+0x4e>
 8004410:	f04f 30ff 	mov.w	r0, #4294967295
 8004414:	b01d      	add	sp, #116	@ 0x74
 8004416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800441a:	89ab      	ldrh	r3, [r5, #12]
 800441c:	0598      	lsls	r0, r3, #22
 800441e:	d4f7      	bmi.n	8004410 <_vfiprintf_r+0x44>
 8004420:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004422:	f7ff fea1 	bl	8004168 <__retarget_lock_release_recursive>
 8004426:	e7f3      	b.n	8004410 <_vfiprintf_r+0x44>
 8004428:	2300      	movs	r3, #0
 800442a:	9309      	str	r3, [sp, #36]	@ 0x24
 800442c:	2320      	movs	r3, #32
 800442e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004432:	f8cd 800c 	str.w	r8, [sp, #12]
 8004436:	2330      	movs	r3, #48	@ 0x30
 8004438:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80045e8 <_vfiprintf_r+0x21c>
 800443c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004440:	f04f 0901 	mov.w	r9, #1
 8004444:	4623      	mov	r3, r4
 8004446:	469a      	mov	sl, r3
 8004448:	f813 2b01 	ldrb.w	r2, [r3], #1
 800444c:	b10a      	cbz	r2, 8004452 <_vfiprintf_r+0x86>
 800444e:	2a25      	cmp	r2, #37	@ 0x25
 8004450:	d1f9      	bne.n	8004446 <_vfiprintf_r+0x7a>
 8004452:	ebba 0b04 	subs.w	fp, sl, r4
 8004456:	d00b      	beq.n	8004470 <_vfiprintf_r+0xa4>
 8004458:	465b      	mov	r3, fp
 800445a:	4622      	mov	r2, r4
 800445c:	4629      	mov	r1, r5
 800445e:	4630      	mov	r0, r6
 8004460:	f7ff ffa1 	bl	80043a6 <__sfputs_r>
 8004464:	3001      	adds	r0, #1
 8004466:	f000 80a7 	beq.w	80045b8 <_vfiprintf_r+0x1ec>
 800446a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800446c:	445a      	add	r2, fp
 800446e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004470:	f89a 3000 	ldrb.w	r3, [sl]
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 809f 	beq.w	80045b8 <_vfiprintf_r+0x1ec>
 800447a:	2300      	movs	r3, #0
 800447c:	f04f 32ff 	mov.w	r2, #4294967295
 8004480:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004484:	f10a 0a01 	add.w	sl, sl, #1
 8004488:	9304      	str	r3, [sp, #16]
 800448a:	9307      	str	r3, [sp, #28]
 800448c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004490:	931a      	str	r3, [sp, #104]	@ 0x68
 8004492:	4654      	mov	r4, sl
 8004494:	2205      	movs	r2, #5
 8004496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800449a:	4853      	ldr	r0, [pc, #332]	@ (80045e8 <_vfiprintf_r+0x21c>)
 800449c:	f7fb fea0 	bl	80001e0 <memchr>
 80044a0:	9a04      	ldr	r2, [sp, #16]
 80044a2:	b9d8      	cbnz	r0, 80044dc <_vfiprintf_r+0x110>
 80044a4:	06d1      	lsls	r1, r2, #27
 80044a6:	bf44      	itt	mi
 80044a8:	2320      	movmi	r3, #32
 80044aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044ae:	0713      	lsls	r3, r2, #28
 80044b0:	bf44      	itt	mi
 80044b2:	232b      	movmi	r3, #43	@ 0x2b
 80044b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044b8:	f89a 3000 	ldrb.w	r3, [sl]
 80044bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80044be:	d015      	beq.n	80044ec <_vfiprintf_r+0x120>
 80044c0:	9a07      	ldr	r2, [sp, #28]
 80044c2:	4654      	mov	r4, sl
 80044c4:	2000      	movs	r0, #0
 80044c6:	f04f 0c0a 	mov.w	ip, #10
 80044ca:	4621      	mov	r1, r4
 80044cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044d0:	3b30      	subs	r3, #48	@ 0x30
 80044d2:	2b09      	cmp	r3, #9
 80044d4:	d94b      	bls.n	800456e <_vfiprintf_r+0x1a2>
 80044d6:	b1b0      	cbz	r0, 8004506 <_vfiprintf_r+0x13a>
 80044d8:	9207      	str	r2, [sp, #28]
 80044da:	e014      	b.n	8004506 <_vfiprintf_r+0x13a>
 80044dc:	eba0 0308 	sub.w	r3, r0, r8
 80044e0:	fa09 f303 	lsl.w	r3, r9, r3
 80044e4:	4313      	orrs	r3, r2
 80044e6:	9304      	str	r3, [sp, #16]
 80044e8:	46a2      	mov	sl, r4
 80044ea:	e7d2      	b.n	8004492 <_vfiprintf_r+0xc6>
 80044ec:	9b03      	ldr	r3, [sp, #12]
 80044ee:	1d19      	adds	r1, r3, #4
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	9103      	str	r1, [sp, #12]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	bfbb      	ittet	lt
 80044f8:	425b      	neglt	r3, r3
 80044fa:	f042 0202 	orrlt.w	r2, r2, #2
 80044fe:	9307      	strge	r3, [sp, #28]
 8004500:	9307      	strlt	r3, [sp, #28]
 8004502:	bfb8      	it	lt
 8004504:	9204      	strlt	r2, [sp, #16]
 8004506:	7823      	ldrb	r3, [r4, #0]
 8004508:	2b2e      	cmp	r3, #46	@ 0x2e
 800450a:	d10a      	bne.n	8004522 <_vfiprintf_r+0x156>
 800450c:	7863      	ldrb	r3, [r4, #1]
 800450e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004510:	d132      	bne.n	8004578 <_vfiprintf_r+0x1ac>
 8004512:	9b03      	ldr	r3, [sp, #12]
 8004514:	1d1a      	adds	r2, r3, #4
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	9203      	str	r2, [sp, #12]
 800451a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800451e:	3402      	adds	r4, #2
 8004520:	9305      	str	r3, [sp, #20]
 8004522:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80045f8 <_vfiprintf_r+0x22c>
 8004526:	7821      	ldrb	r1, [r4, #0]
 8004528:	2203      	movs	r2, #3
 800452a:	4650      	mov	r0, sl
 800452c:	f7fb fe58 	bl	80001e0 <memchr>
 8004530:	b138      	cbz	r0, 8004542 <_vfiprintf_r+0x176>
 8004532:	9b04      	ldr	r3, [sp, #16]
 8004534:	eba0 000a 	sub.w	r0, r0, sl
 8004538:	2240      	movs	r2, #64	@ 0x40
 800453a:	4082      	lsls	r2, r0
 800453c:	4313      	orrs	r3, r2
 800453e:	3401      	adds	r4, #1
 8004540:	9304      	str	r3, [sp, #16]
 8004542:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004546:	4829      	ldr	r0, [pc, #164]	@ (80045ec <_vfiprintf_r+0x220>)
 8004548:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800454c:	2206      	movs	r2, #6
 800454e:	f7fb fe47 	bl	80001e0 <memchr>
 8004552:	2800      	cmp	r0, #0
 8004554:	d03f      	beq.n	80045d6 <_vfiprintf_r+0x20a>
 8004556:	4b26      	ldr	r3, [pc, #152]	@ (80045f0 <_vfiprintf_r+0x224>)
 8004558:	bb1b      	cbnz	r3, 80045a2 <_vfiprintf_r+0x1d6>
 800455a:	9b03      	ldr	r3, [sp, #12]
 800455c:	3307      	adds	r3, #7
 800455e:	f023 0307 	bic.w	r3, r3, #7
 8004562:	3308      	adds	r3, #8
 8004564:	9303      	str	r3, [sp, #12]
 8004566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004568:	443b      	add	r3, r7
 800456a:	9309      	str	r3, [sp, #36]	@ 0x24
 800456c:	e76a      	b.n	8004444 <_vfiprintf_r+0x78>
 800456e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004572:	460c      	mov	r4, r1
 8004574:	2001      	movs	r0, #1
 8004576:	e7a8      	b.n	80044ca <_vfiprintf_r+0xfe>
 8004578:	2300      	movs	r3, #0
 800457a:	3401      	adds	r4, #1
 800457c:	9305      	str	r3, [sp, #20]
 800457e:	4619      	mov	r1, r3
 8004580:	f04f 0c0a 	mov.w	ip, #10
 8004584:	4620      	mov	r0, r4
 8004586:	f810 2b01 	ldrb.w	r2, [r0], #1
 800458a:	3a30      	subs	r2, #48	@ 0x30
 800458c:	2a09      	cmp	r2, #9
 800458e:	d903      	bls.n	8004598 <_vfiprintf_r+0x1cc>
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0c6      	beq.n	8004522 <_vfiprintf_r+0x156>
 8004594:	9105      	str	r1, [sp, #20]
 8004596:	e7c4      	b.n	8004522 <_vfiprintf_r+0x156>
 8004598:	fb0c 2101 	mla	r1, ip, r1, r2
 800459c:	4604      	mov	r4, r0
 800459e:	2301      	movs	r3, #1
 80045a0:	e7f0      	b.n	8004584 <_vfiprintf_r+0x1b8>
 80045a2:	ab03      	add	r3, sp, #12
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	462a      	mov	r2, r5
 80045a8:	4b12      	ldr	r3, [pc, #72]	@ (80045f4 <_vfiprintf_r+0x228>)
 80045aa:	a904      	add	r1, sp, #16
 80045ac:	4630      	mov	r0, r6
 80045ae:	f3af 8000 	nop.w
 80045b2:	4607      	mov	r7, r0
 80045b4:	1c78      	adds	r0, r7, #1
 80045b6:	d1d6      	bne.n	8004566 <_vfiprintf_r+0x19a>
 80045b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80045ba:	07d9      	lsls	r1, r3, #31
 80045bc:	d405      	bmi.n	80045ca <_vfiprintf_r+0x1fe>
 80045be:	89ab      	ldrh	r3, [r5, #12]
 80045c0:	059a      	lsls	r2, r3, #22
 80045c2:	d402      	bmi.n	80045ca <_vfiprintf_r+0x1fe>
 80045c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80045c6:	f7ff fdcf 	bl	8004168 <__retarget_lock_release_recursive>
 80045ca:	89ab      	ldrh	r3, [r5, #12]
 80045cc:	065b      	lsls	r3, r3, #25
 80045ce:	f53f af1f 	bmi.w	8004410 <_vfiprintf_r+0x44>
 80045d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80045d4:	e71e      	b.n	8004414 <_vfiprintf_r+0x48>
 80045d6:	ab03      	add	r3, sp, #12
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	462a      	mov	r2, r5
 80045dc:	4b05      	ldr	r3, [pc, #20]	@ (80045f4 <_vfiprintf_r+0x228>)
 80045de:	a904      	add	r1, sp, #16
 80045e0:	4630      	mov	r0, r6
 80045e2:	f000 f879 	bl	80046d8 <_printf_i>
 80045e6:	e7e4      	b.n	80045b2 <_vfiprintf_r+0x1e6>
 80045e8:	08004d38 	.word	0x08004d38
 80045ec:	08004d42 	.word	0x08004d42
 80045f0:	00000000 	.word	0x00000000
 80045f4:	080043a7 	.word	0x080043a7
 80045f8:	08004d3e 	.word	0x08004d3e

080045fc <_printf_common>:
 80045fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004600:	4616      	mov	r6, r2
 8004602:	4698      	mov	r8, r3
 8004604:	688a      	ldr	r2, [r1, #8]
 8004606:	690b      	ldr	r3, [r1, #16]
 8004608:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800460c:	4293      	cmp	r3, r2
 800460e:	bfb8      	it	lt
 8004610:	4613      	movlt	r3, r2
 8004612:	6033      	str	r3, [r6, #0]
 8004614:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004618:	4607      	mov	r7, r0
 800461a:	460c      	mov	r4, r1
 800461c:	b10a      	cbz	r2, 8004622 <_printf_common+0x26>
 800461e:	3301      	adds	r3, #1
 8004620:	6033      	str	r3, [r6, #0]
 8004622:	6823      	ldr	r3, [r4, #0]
 8004624:	0699      	lsls	r1, r3, #26
 8004626:	bf42      	ittt	mi
 8004628:	6833      	ldrmi	r3, [r6, #0]
 800462a:	3302      	addmi	r3, #2
 800462c:	6033      	strmi	r3, [r6, #0]
 800462e:	6825      	ldr	r5, [r4, #0]
 8004630:	f015 0506 	ands.w	r5, r5, #6
 8004634:	d106      	bne.n	8004644 <_printf_common+0x48>
 8004636:	f104 0a19 	add.w	sl, r4, #25
 800463a:	68e3      	ldr	r3, [r4, #12]
 800463c:	6832      	ldr	r2, [r6, #0]
 800463e:	1a9b      	subs	r3, r3, r2
 8004640:	42ab      	cmp	r3, r5
 8004642:	dc26      	bgt.n	8004692 <_printf_common+0x96>
 8004644:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004648:	6822      	ldr	r2, [r4, #0]
 800464a:	3b00      	subs	r3, #0
 800464c:	bf18      	it	ne
 800464e:	2301      	movne	r3, #1
 8004650:	0692      	lsls	r2, r2, #26
 8004652:	d42b      	bmi.n	80046ac <_printf_common+0xb0>
 8004654:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004658:	4641      	mov	r1, r8
 800465a:	4638      	mov	r0, r7
 800465c:	47c8      	blx	r9
 800465e:	3001      	adds	r0, #1
 8004660:	d01e      	beq.n	80046a0 <_printf_common+0xa4>
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	6922      	ldr	r2, [r4, #16]
 8004666:	f003 0306 	and.w	r3, r3, #6
 800466a:	2b04      	cmp	r3, #4
 800466c:	bf02      	ittt	eq
 800466e:	68e5      	ldreq	r5, [r4, #12]
 8004670:	6833      	ldreq	r3, [r6, #0]
 8004672:	1aed      	subeq	r5, r5, r3
 8004674:	68a3      	ldr	r3, [r4, #8]
 8004676:	bf0c      	ite	eq
 8004678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800467c:	2500      	movne	r5, #0
 800467e:	4293      	cmp	r3, r2
 8004680:	bfc4      	itt	gt
 8004682:	1a9b      	subgt	r3, r3, r2
 8004684:	18ed      	addgt	r5, r5, r3
 8004686:	2600      	movs	r6, #0
 8004688:	341a      	adds	r4, #26
 800468a:	42b5      	cmp	r5, r6
 800468c:	d11a      	bne.n	80046c4 <_printf_common+0xc8>
 800468e:	2000      	movs	r0, #0
 8004690:	e008      	b.n	80046a4 <_printf_common+0xa8>
 8004692:	2301      	movs	r3, #1
 8004694:	4652      	mov	r2, sl
 8004696:	4641      	mov	r1, r8
 8004698:	4638      	mov	r0, r7
 800469a:	47c8      	blx	r9
 800469c:	3001      	adds	r0, #1
 800469e:	d103      	bne.n	80046a8 <_printf_common+0xac>
 80046a0:	f04f 30ff 	mov.w	r0, #4294967295
 80046a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046a8:	3501      	adds	r5, #1
 80046aa:	e7c6      	b.n	800463a <_printf_common+0x3e>
 80046ac:	18e1      	adds	r1, r4, r3
 80046ae:	1c5a      	adds	r2, r3, #1
 80046b0:	2030      	movs	r0, #48	@ 0x30
 80046b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80046b6:	4422      	add	r2, r4
 80046b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80046bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80046c0:	3302      	adds	r3, #2
 80046c2:	e7c7      	b.n	8004654 <_printf_common+0x58>
 80046c4:	2301      	movs	r3, #1
 80046c6:	4622      	mov	r2, r4
 80046c8:	4641      	mov	r1, r8
 80046ca:	4638      	mov	r0, r7
 80046cc:	47c8      	blx	r9
 80046ce:	3001      	adds	r0, #1
 80046d0:	d0e6      	beq.n	80046a0 <_printf_common+0xa4>
 80046d2:	3601      	adds	r6, #1
 80046d4:	e7d9      	b.n	800468a <_printf_common+0x8e>
	...

080046d8 <_printf_i>:
 80046d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046dc:	7e0f      	ldrb	r7, [r1, #24]
 80046de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80046e0:	2f78      	cmp	r7, #120	@ 0x78
 80046e2:	4691      	mov	r9, r2
 80046e4:	4680      	mov	r8, r0
 80046e6:	460c      	mov	r4, r1
 80046e8:	469a      	mov	sl, r3
 80046ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80046ee:	d807      	bhi.n	8004700 <_printf_i+0x28>
 80046f0:	2f62      	cmp	r7, #98	@ 0x62
 80046f2:	d80a      	bhi.n	800470a <_printf_i+0x32>
 80046f4:	2f00      	cmp	r7, #0
 80046f6:	f000 80d1 	beq.w	800489c <_printf_i+0x1c4>
 80046fa:	2f58      	cmp	r7, #88	@ 0x58
 80046fc:	f000 80b8 	beq.w	8004870 <_printf_i+0x198>
 8004700:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004704:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004708:	e03a      	b.n	8004780 <_printf_i+0xa8>
 800470a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800470e:	2b15      	cmp	r3, #21
 8004710:	d8f6      	bhi.n	8004700 <_printf_i+0x28>
 8004712:	a101      	add	r1, pc, #4	@ (adr r1, 8004718 <_printf_i+0x40>)
 8004714:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004718:	08004771 	.word	0x08004771
 800471c:	08004785 	.word	0x08004785
 8004720:	08004701 	.word	0x08004701
 8004724:	08004701 	.word	0x08004701
 8004728:	08004701 	.word	0x08004701
 800472c:	08004701 	.word	0x08004701
 8004730:	08004785 	.word	0x08004785
 8004734:	08004701 	.word	0x08004701
 8004738:	08004701 	.word	0x08004701
 800473c:	08004701 	.word	0x08004701
 8004740:	08004701 	.word	0x08004701
 8004744:	08004883 	.word	0x08004883
 8004748:	080047af 	.word	0x080047af
 800474c:	0800483d 	.word	0x0800483d
 8004750:	08004701 	.word	0x08004701
 8004754:	08004701 	.word	0x08004701
 8004758:	080048a5 	.word	0x080048a5
 800475c:	08004701 	.word	0x08004701
 8004760:	080047af 	.word	0x080047af
 8004764:	08004701 	.word	0x08004701
 8004768:	08004701 	.word	0x08004701
 800476c:	08004845 	.word	0x08004845
 8004770:	6833      	ldr	r3, [r6, #0]
 8004772:	1d1a      	adds	r2, r3, #4
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6032      	str	r2, [r6, #0]
 8004778:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800477c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004780:	2301      	movs	r3, #1
 8004782:	e09c      	b.n	80048be <_printf_i+0x1e6>
 8004784:	6833      	ldr	r3, [r6, #0]
 8004786:	6820      	ldr	r0, [r4, #0]
 8004788:	1d19      	adds	r1, r3, #4
 800478a:	6031      	str	r1, [r6, #0]
 800478c:	0606      	lsls	r6, r0, #24
 800478e:	d501      	bpl.n	8004794 <_printf_i+0xbc>
 8004790:	681d      	ldr	r5, [r3, #0]
 8004792:	e003      	b.n	800479c <_printf_i+0xc4>
 8004794:	0645      	lsls	r5, r0, #25
 8004796:	d5fb      	bpl.n	8004790 <_printf_i+0xb8>
 8004798:	f9b3 5000 	ldrsh.w	r5, [r3]
 800479c:	2d00      	cmp	r5, #0
 800479e:	da03      	bge.n	80047a8 <_printf_i+0xd0>
 80047a0:	232d      	movs	r3, #45	@ 0x2d
 80047a2:	426d      	negs	r5, r5
 80047a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047a8:	4858      	ldr	r0, [pc, #352]	@ (800490c <_printf_i+0x234>)
 80047aa:	230a      	movs	r3, #10
 80047ac:	e011      	b.n	80047d2 <_printf_i+0xfa>
 80047ae:	6821      	ldr	r1, [r4, #0]
 80047b0:	6833      	ldr	r3, [r6, #0]
 80047b2:	0608      	lsls	r0, r1, #24
 80047b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80047b8:	d402      	bmi.n	80047c0 <_printf_i+0xe8>
 80047ba:	0649      	lsls	r1, r1, #25
 80047bc:	bf48      	it	mi
 80047be:	b2ad      	uxthmi	r5, r5
 80047c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80047c2:	4852      	ldr	r0, [pc, #328]	@ (800490c <_printf_i+0x234>)
 80047c4:	6033      	str	r3, [r6, #0]
 80047c6:	bf14      	ite	ne
 80047c8:	230a      	movne	r3, #10
 80047ca:	2308      	moveq	r3, #8
 80047cc:	2100      	movs	r1, #0
 80047ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80047d2:	6866      	ldr	r6, [r4, #4]
 80047d4:	60a6      	str	r6, [r4, #8]
 80047d6:	2e00      	cmp	r6, #0
 80047d8:	db05      	blt.n	80047e6 <_printf_i+0x10e>
 80047da:	6821      	ldr	r1, [r4, #0]
 80047dc:	432e      	orrs	r6, r5
 80047de:	f021 0104 	bic.w	r1, r1, #4
 80047e2:	6021      	str	r1, [r4, #0]
 80047e4:	d04b      	beq.n	800487e <_printf_i+0x1a6>
 80047e6:	4616      	mov	r6, r2
 80047e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80047ec:	fb03 5711 	mls	r7, r3, r1, r5
 80047f0:	5dc7      	ldrb	r7, [r0, r7]
 80047f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047f6:	462f      	mov	r7, r5
 80047f8:	42bb      	cmp	r3, r7
 80047fa:	460d      	mov	r5, r1
 80047fc:	d9f4      	bls.n	80047e8 <_printf_i+0x110>
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d10b      	bne.n	800481a <_printf_i+0x142>
 8004802:	6823      	ldr	r3, [r4, #0]
 8004804:	07df      	lsls	r7, r3, #31
 8004806:	d508      	bpl.n	800481a <_printf_i+0x142>
 8004808:	6923      	ldr	r3, [r4, #16]
 800480a:	6861      	ldr	r1, [r4, #4]
 800480c:	4299      	cmp	r1, r3
 800480e:	bfde      	ittt	le
 8004810:	2330      	movle	r3, #48	@ 0x30
 8004812:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004816:	f106 36ff 	addle.w	r6, r6, #4294967295
 800481a:	1b92      	subs	r2, r2, r6
 800481c:	6122      	str	r2, [r4, #16]
 800481e:	f8cd a000 	str.w	sl, [sp]
 8004822:	464b      	mov	r3, r9
 8004824:	aa03      	add	r2, sp, #12
 8004826:	4621      	mov	r1, r4
 8004828:	4640      	mov	r0, r8
 800482a:	f7ff fee7 	bl	80045fc <_printf_common>
 800482e:	3001      	adds	r0, #1
 8004830:	d14a      	bne.n	80048c8 <_printf_i+0x1f0>
 8004832:	f04f 30ff 	mov.w	r0, #4294967295
 8004836:	b004      	add	sp, #16
 8004838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800483c:	6823      	ldr	r3, [r4, #0]
 800483e:	f043 0320 	orr.w	r3, r3, #32
 8004842:	6023      	str	r3, [r4, #0]
 8004844:	4832      	ldr	r0, [pc, #200]	@ (8004910 <_printf_i+0x238>)
 8004846:	2778      	movs	r7, #120	@ 0x78
 8004848:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800484c:	6823      	ldr	r3, [r4, #0]
 800484e:	6831      	ldr	r1, [r6, #0]
 8004850:	061f      	lsls	r7, r3, #24
 8004852:	f851 5b04 	ldr.w	r5, [r1], #4
 8004856:	d402      	bmi.n	800485e <_printf_i+0x186>
 8004858:	065f      	lsls	r7, r3, #25
 800485a:	bf48      	it	mi
 800485c:	b2ad      	uxthmi	r5, r5
 800485e:	6031      	str	r1, [r6, #0]
 8004860:	07d9      	lsls	r1, r3, #31
 8004862:	bf44      	itt	mi
 8004864:	f043 0320 	orrmi.w	r3, r3, #32
 8004868:	6023      	strmi	r3, [r4, #0]
 800486a:	b11d      	cbz	r5, 8004874 <_printf_i+0x19c>
 800486c:	2310      	movs	r3, #16
 800486e:	e7ad      	b.n	80047cc <_printf_i+0xf4>
 8004870:	4826      	ldr	r0, [pc, #152]	@ (800490c <_printf_i+0x234>)
 8004872:	e7e9      	b.n	8004848 <_printf_i+0x170>
 8004874:	6823      	ldr	r3, [r4, #0]
 8004876:	f023 0320 	bic.w	r3, r3, #32
 800487a:	6023      	str	r3, [r4, #0]
 800487c:	e7f6      	b.n	800486c <_printf_i+0x194>
 800487e:	4616      	mov	r6, r2
 8004880:	e7bd      	b.n	80047fe <_printf_i+0x126>
 8004882:	6833      	ldr	r3, [r6, #0]
 8004884:	6825      	ldr	r5, [r4, #0]
 8004886:	6961      	ldr	r1, [r4, #20]
 8004888:	1d18      	adds	r0, r3, #4
 800488a:	6030      	str	r0, [r6, #0]
 800488c:	062e      	lsls	r6, r5, #24
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	d501      	bpl.n	8004896 <_printf_i+0x1be>
 8004892:	6019      	str	r1, [r3, #0]
 8004894:	e002      	b.n	800489c <_printf_i+0x1c4>
 8004896:	0668      	lsls	r0, r5, #25
 8004898:	d5fb      	bpl.n	8004892 <_printf_i+0x1ba>
 800489a:	8019      	strh	r1, [r3, #0]
 800489c:	2300      	movs	r3, #0
 800489e:	6123      	str	r3, [r4, #16]
 80048a0:	4616      	mov	r6, r2
 80048a2:	e7bc      	b.n	800481e <_printf_i+0x146>
 80048a4:	6833      	ldr	r3, [r6, #0]
 80048a6:	1d1a      	adds	r2, r3, #4
 80048a8:	6032      	str	r2, [r6, #0]
 80048aa:	681e      	ldr	r6, [r3, #0]
 80048ac:	6862      	ldr	r2, [r4, #4]
 80048ae:	2100      	movs	r1, #0
 80048b0:	4630      	mov	r0, r6
 80048b2:	f7fb fc95 	bl	80001e0 <memchr>
 80048b6:	b108      	cbz	r0, 80048bc <_printf_i+0x1e4>
 80048b8:	1b80      	subs	r0, r0, r6
 80048ba:	6060      	str	r0, [r4, #4]
 80048bc:	6863      	ldr	r3, [r4, #4]
 80048be:	6123      	str	r3, [r4, #16]
 80048c0:	2300      	movs	r3, #0
 80048c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048c6:	e7aa      	b.n	800481e <_printf_i+0x146>
 80048c8:	6923      	ldr	r3, [r4, #16]
 80048ca:	4632      	mov	r2, r6
 80048cc:	4649      	mov	r1, r9
 80048ce:	4640      	mov	r0, r8
 80048d0:	47d0      	blx	sl
 80048d2:	3001      	adds	r0, #1
 80048d4:	d0ad      	beq.n	8004832 <_printf_i+0x15a>
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	079b      	lsls	r3, r3, #30
 80048da:	d413      	bmi.n	8004904 <_printf_i+0x22c>
 80048dc:	68e0      	ldr	r0, [r4, #12]
 80048de:	9b03      	ldr	r3, [sp, #12]
 80048e0:	4298      	cmp	r0, r3
 80048e2:	bfb8      	it	lt
 80048e4:	4618      	movlt	r0, r3
 80048e6:	e7a6      	b.n	8004836 <_printf_i+0x15e>
 80048e8:	2301      	movs	r3, #1
 80048ea:	4632      	mov	r2, r6
 80048ec:	4649      	mov	r1, r9
 80048ee:	4640      	mov	r0, r8
 80048f0:	47d0      	blx	sl
 80048f2:	3001      	adds	r0, #1
 80048f4:	d09d      	beq.n	8004832 <_printf_i+0x15a>
 80048f6:	3501      	adds	r5, #1
 80048f8:	68e3      	ldr	r3, [r4, #12]
 80048fa:	9903      	ldr	r1, [sp, #12]
 80048fc:	1a5b      	subs	r3, r3, r1
 80048fe:	42ab      	cmp	r3, r5
 8004900:	dcf2      	bgt.n	80048e8 <_printf_i+0x210>
 8004902:	e7eb      	b.n	80048dc <_printf_i+0x204>
 8004904:	2500      	movs	r5, #0
 8004906:	f104 0619 	add.w	r6, r4, #25
 800490a:	e7f5      	b.n	80048f8 <_printf_i+0x220>
 800490c:	08004d49 	.word	0x08004d49
 8004910:	08004d5a 	.word	0x08004d5a

08004914 <__sflush_r>:
 8004914:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800491c:	0716      	lsls	r6, r2, #28
 800491e:	4605      	mov	r5, r0
 8004920:	460c      	mov	r4, r1
 8004922:	d454      	bmi.n	80049ce <__sflush_r+0xba>
 8004924:	684b      	ldr	r3, [r1, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	dc02      	bgt.n	8004930 <__sflush_r+0x1c>
 800492a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800492c:	2b00      	cmp	r3, #0
 800492e:	dd48      	ble.n	80049c2 <__sflush_r+0xae>
 8004930:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004932:	2e00      	cmp	r6, #0
 8004934:	d045      	beq.n	80049c2 <__sflush_r+0xae>
 8004936:	2300      	movs	r3, #0
 8004938:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800493c:	682f      	ldr	r7, [r5, #0]
 800493e:	6a21      	ldr	r1, [r4, #32]
 8004940:	602b      	str	r3, [r5, #0]
 8004942:	d030      	beq.n	80049a6 <__sflush_r+0x92>
 8004944:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004946:	89a3      	ldrh	r3, [r4, #12]
 8004948:	0759      	lsls	r1, r3, #29
 800494a:	d505      	bpl.n	8004958 <__sflush_r+0x44>
 800494c:	6863      	ldr	r3, [r4, #4]
 800494e:	1ad2      	subs	r2, r2, r3
 8004950:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004952:	b10b      	cbz	r3, 8004958 <__sflush_r+0x44>
 8004954:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004956:	1ad2      	subs	r2, r2, r3
 8004958:	2300      	movs	r3, #0
 800495a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800495c:	6a21      	ldr	r1, [r4, #32]
 800495e:	4628      	mov	r0, r5
 8004960:	47b0      	blx	r6
 8004962:	1c43      	adds	r3, r0, #1
 8004964:	89a3      	ldrh	r3, [r4, #12]
 8004966:	d106      	bne.n	8004976 <__sflush_r+0x62>
 8004968:	6829      	ldr	r1, [r5, #0]
 800496a:	291d      	cmp	r1, #29
 800496c:	d82b      	bhi.n	80049c6 <__sflush_r+0xb2>
 800496e:	4a2a      	ldr	r2, [pc, #168]	@ (8004a18 <__sflush_r+0x104>)
 8004970:	40ca      	lsrs	r2, r1
 8004972:	07d6      	lsls	r6, r2, #31
 8004974:	d527      	bpl.n	80049c6 <__sflush_r+0xb2>
 8004976:	2200      	movs	r2, #0
 8004978:	6062      	str	r2, [r4, #4]
 800497a:	04d9      	lsls	r1, r3, #19
 800497c:	6922      	ldr	r2, [r4, #16]
 800497e:	6022      	str	r2, [r4, #0]
 8004980:	d504      	bpl.n	800498c <__sflush_r+0x78>
 8004982:	1c42      	adds	r2, r0, #1
 8004984:	d101      	bne.n	800498a <__sflush_r+0x76>
 8004986:	682b      	ldr	r3, [r5, #0]
 8004988:	b903      	cbnz	r3, 800498c <__sflush_r+0x78>
 800498a:	6560      	str	r0, [r4, #84]	@ 0x54
 800498c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800498e:	602f      	str	r7, [r5, #0]
 8004990:	b1b9      	cbz	r1, 80049c2 <__sflush_r+0xae>
 8004992:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004996:	4299      	cmp	r1, r3
 8004998:	d002      	beq.n	80049a0 <__sflush_r+0x8c>
 800499a:	4628      	mov	r0, r5
 800499c:	f7ff fbf4 	bl	8004188 <_free_r>
 80049a0:	2300      	movs	r3, #0
 80049a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80049a4:	e00d      	b.n	80049c2 <__sflush_r+0xae>
 80049a6:	2301      	movs	r3, #1
 80049a8:	4628      	mov	r0, r5
 80049aa:	47b0      	blx	r6
 80049ac:	4602      	mov	r2, r0
 80049ae:	1c50      	adds	r0, r2, #1
 80049b0:	d1c9      	bne.n	8004946 <__sflush_r+0x32>
 80049b2:	682b      	ldr	r3, [r5, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0c6      	beq.n	8004946 <__sflush_r+0x32>
 80049b8:	2b1d      	cmp	r3, #29
 80049ba:	d001      	beq.n	80049c0 <__sflush_r+0xac>
 80049bc:	2b16      	cmp	r3, #22
 80049be:	d11e      	bne.n	80049fe <__sflush_r+0xea>
 80049c0:	602f      	str	r7, [r5, #0]
 80049c2:	2000      	movs	r0, #0
 80049c4:	e022      	b.n	8004a0c <__sflush_r+0xf8>
 80049c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049ca:	b21b      	sxth	r3, r3
 80049cc:	e01b      	b.n	8004a06 <__sflush_r+0xf2>
 80049ce:	690f      	ldr	r7, [r1, #16]
 80049d0:	2f00      	cmp	r7, #0
 80049d2:	d0f6      	beq.n	80049c2 <__sflush_r+0xae>
 80049d4:	0793      	lsls	r3, r2, #30
 80049d6:	680e      	ldr	r6, [r1, #0]
 80049d8:	bf08      	it	eq
 80049da:	694b      	ldreq	r3, [r1, #20]
 80049dc:	600f      	str	r7, [r1, #0]
 80049de:	bf18      	it	ne
 80049e0:	2300      	movne	r3, #0
 80049e2:	eba6 0807 	sub.w	r8, r6, r7
 80049e6:	608b      	str	r3, [r1, #8]
 80049e8:	f1b8 0f00 	cmp.w	r8, #0
 80049ec:	dde9      	ble.n	80049c2 <__sflush_r+0xae>
 80049ee:	6a21      	ldr	r1, [r4, #32]
 80049f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80049f2:	4643      	mov	r3, r8
 80049f4:	463a      	mov	r2, r7
 80049f6:	4628      	mov	r0, r5
 80049f8:	47b0      	blx	r6
 80049fa:	2800      	cmp	r0, #0
 80049fc:	dc08      	bgt.n	8004a10 <__sflush_r+0xfc>
 80049fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a06:	81a3      	strh	r3, [r4, #12]
 8004a08:	f04f 30ff 	mov.w	r0, #4294967295
 8004a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a10:	4407      	add	r7, r0
 8004a12:	eba8 0800 	sub.w	r8, r8, r0
 8004a16:	e7e7      	b.n	80049e8 <__sflush_r+0xd4>
 8004a18:	20400001 	.word	0x20400001

08004a1c <_fflush_r>:
 8004a1c:	b538      	push	{r3, r4, r5, lr}
 8004a1e:	690b      	ldr	r3, [r1, #16]
 8004a20:	4605      	mov	r5, r0
 8004a22:	460c      	mov	r4, r1
 8004a24:	b913      	cbnz	r3, 8004a2c <_fflush_r+0x10>
 8004a26:	2500      	movs	r5, #0
 8004a28:	4628      	mov	r0, r5
 8004a2a:	bd38      	pop	{r3, r4, r5, pc}
 8004a2c:	b118      	cbz	r0, 8004a36 <_fflush_r+0x1a>
 8004a2e:	6a03      	ldr	r3, [r0, #32]
 8004a30:	b90b      	cbnz	r3, 8004a36 <_fflush_r+0x1a>
 8004a32:	f7ff fa93 	bl	8003f5c <__sinit>
 8004a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0f3      	beq.n	8004a26 <_fflush_r+0xa>
 8004a3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a40:	07d0      	lsls	r0, r2, #31
 8004a42:	d404      	bmi.n	8004a4e <_fflush_r+0x32>
 8004a44:	0599      	lsls	r1, r3, #22
 8004a46:	d402      	bmi.n	8004a4e <_fflush_r+0x32>
 8004a48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a4a:	f7ff fb8c 	bl	8004166 <__retarget_lock_acquire_recursive>
 8004a4e:	4628      	mov	r0, r5
 8004a50:	4621      	mov	r1, r4
 8004a52:	f7ff ff5f 	bl	8004914 <__sflush_r>
 8004a56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a58:	07da      	lsls	r2, r3, #31
 8004a5a:	4605      	mov	r5, r0
 8004a5c:	d4e4      	bmi.n	8004a28 <_fflush_r+0xc>
 8004a5e:	89a3      	ldrh	r3, [r4, #12]
 8004a60:	059b      	lsls	r3, r3, #22
 8004a62:	d4e1      	bmi.n	8004a28 <_fflush_r+0xc>
 8004a64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a66:	f7ff fb7f 	bl	8004168 <__retarget_lock_release_recursive>
 8004a6a:	e7dd      	b.n	8004a28 <_fflush_r+0xc>

08004a6c <__swbuf_r>:
 8004a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a6e:	460e      	mov	r6, r1
 8004a70:	4614      	mov	r4, r2
 8004a72:	4605      	mov	r5, r0
 8004a74:	b118      	cbz	r0, 8004a7e <__swbuf_r+0x12>
 8004a76:	6a03      	ldr	r3, [r0, #32]
 8004a78:	b90b      	cbnz	r3, 8004a7e <__swbuf_r+0x12>
 8004a7a:	f7ff fa6f 	bl	8003f5c <__sinit>
 8004a7e:	69a3      	ldr	r3, [r4, #24]
 8004a80:	60a3      	str	r3, [r4, #8]
 8004a82:	89a3      	ldrh	r3, [r4, #12]
 8004a84:	071a      	lsls	r2, r3, #28
 8004a86:	d501      	bpl.n	8004a8c <__swbuf_r+0x20>
 8004a88:	6923      	ldr	r3, [r4, #16]
 8004a8a:	b943      	cbnz	r3, 8004a9e <__swbuf_r+0x32>
 8004a8c:	4621      	mov	r1, r4
 8004a8e:	4628      	mov	r0, r5
 8004a90:	f000 f82a 	bl	8004ae8 <__swsetup_r>
 8004a94:	b118      	cbz	r0, 8004a9e <__swbuf_r+0x32>
 8004a96:	f04f 37ff 	mov.w	r7, #4294967295
 8004a9a:	4638      	mov	r0, r7
 8004a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	6922      	ldr	r2, [r4, #16]
 8004aa2:	1a98      	subs	r0, r3, r2
 8004aa4:	6963      	ldr	r3, [r4, #20]
 8004aa6:	b2f6      	uxtb	r6, r6
 8004aa8:	4283      	cmp	r3, r0
 8004aaa:	4637      	mov	r7, r6
 8004aac:	dc05      	bgt.n	8004aba <__swbuf_r+0x4e>
 8004aae:	4621      	mov	r1, r4
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	f7ff ffb3 	bl	8004a1c <_fflush_r>
 8004ab6:	2800      	cmp	r0, #0
 8004ab8:	d1ed      	bne.n	8004a96 <__swbuf_r+0x2a>
 8004aba:	68a3      	ldr	r3, [r4, #8]
 8004abc:	3b01      	subs	r3, #1
 8004abe:	60a3      	str	r3, [r4, #8]
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	1c5a      	adds	r2, r3, #1
 8004ac4:	6022      	str	r2, [r4, #0]
 8004ac6:	701e      	strb	r6, [r3, #0]
 8004ac8:	6962      	ldr	r2, [r4, #20]
 8004aca:	1c43      	adds	r3, r0, #1
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d004      	beq.n	8004ada <__swbuf_r+0x6e>
 8004ad0:	89a3      	ldrh	r3, [r4, #12]
 8004ad2:	07db      	lsls	r3, r3, #31
 8004ad4:	d5e1      	bpl.n	8004a9a <__swbuf_r+0x2e>
 8004ad6:	2e0a      	cmp	r6, #10
 8004ad8:	d1df      	bne.n	8004a9a <__swbuf_r+0x2e>
 8004ada:	4621      	mov	r1, r4
 8004adc:	4628      	mov	r0, r5
 8004ade:	f7ff ff9d 	bl	8004a1c <_fflush_r>
 8004ae2:	2800      	cmp	r0, #0
 8004ae4:	d0d9      	beq.n	8004a9a <__swbuf_r+0x2e>
 8004ae6:	e7d6      	b.n	8004a96 <__swbuf_r+0x2a>

08004ae8 <__swsetup_r>:
 8004ae8:	b538      	push	{r3, r4, r5, lr}
 8004aea:	4b29      	ldr	r3, [pc, #164]	@ (8004b90 <__swsetup_r+0xa8>)
 8004aec:	4605      	mov	r5, r0
 8004aee:	6818      	ldr	r0, [r3, #0]
 8004af0:	460c      	mov	r4, r1
 8004af2:	b118      	cbz	r0, 8004afc <__swsetup_r+0x14>
 8004af4:	6a03      	ldr	r3, [r0, #32]
 8004af6:	b90b      	cbnz	r3, 8004afc <__swsetup_r+0x14>
 8004af8:	f7ff fa30 	bl	8003f5c <__sinit>
 8004afc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b00:	0719      	lsls	r1, r3, #28
 8004b02:	d422      	bmi.n	8004b4a <__swsetup_r+0x62>
 8004b04:	06da      	lsls	r2, r3, #27
 8004b06:	d407      	bmi.n	8004b18 <__swsetup_r+0x30>
 8004b08:	2209      	movs	r2, #9
 8004b0a:	602a      	str	r2, [r5, #0]
 8004b0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b10:	81a3      	strh	r3, [r4, #12]
 8004b12:	f04f 30ff 	mov.w	r0, #4294967295
 8004b16:	e033      	b.n	8004b80 <__swsetup_r+0x98>
 8004b18:	0758      	lsls	r0, r3, #29
 8004b1a:	d512      	bpl.n	8004b42 <__swsetup_r+0x5a>
 8004b1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b1e:	b141      	cbz	r1, 8004b32 <__swsetup_r+0x4a>
 8004b20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b24:	4299      	cmp	r1, r3
 8004b26:	d002      	beq.n	8004b2e <__swsetup_r+0x46>
 8004b28:	4628      	mov	r0, r5
 8004b2a:	f7ff fb2d 	bl	8004188 <_free_r>
 8004b2e:	2300      	movs	r3, #0
 8004b30:	6363      	str	r3, [r4, #52]	@ 0x34
 8004b32:	89a3      	ldrh	r3, [r4, #12]
 8004b34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004b38:	81a3      	strh	r3, [r4, #12]
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	6063      	str	r3, [r4, #4]
 8004b3e:	6923      	ldr	r3, [r4, #16]
 8004b40:	6023      	str	r3, [r4, #0]
 8004b42:	89a3      	ldrh	r3, [r4, #12]
 8004b44:	f043 0308 	orr.w	r3, r3, #8
 8004b48:	81a3      	strh	r3, [r4, #12]
 8004b4a:	6923      	ldr	r3, [r4, #16]
 8004b4c:	b94b      	cbnz	r3, 8004b62 <__swsetup_r+0x7a>
 8004b4e:	89a3      	ldrh	r3, [r4, #12]
 8004b50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004b54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b58:	d003      	beq.n	8004b62 <__swsetup_r+0x7a>
 8004b5a:	4621      	mov	r1, r4
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	f000 f84f 	bl	8004c00 <__smakebuf_r>
 8004b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b66:	f013 0201 	ands.w	r2, r3, #1
 8004b6a:	d00a      	beq.n	8004b82 <__swsetup_r+0x9a>
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	60a2      	str	r2, [r4, #8]
 8004b70:	6962      	ldr	r2, [r4, #20]
 8004b72:	4252      	negs	r2, r2
 8004b74:	61a2      	str	r2, [r4, #24]
 8004b76:	6922      	ldr	r2, [r4, #16]
 8004b78:	b942      	cbnz	r2, 8004b8c <__swsetup_r+0xa4>
 8004b7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004b7e:	d1c5      	bne.n	8004b0c <__swsetup_r+0x24>
 8004b80:	bd38      	pop	{r3, r4, r5, pc}
 8004b82:	0799      	lsls	r1, r3, #30
 8004b84:	bf58      	it	pl
 8004b86:	6962      	ldrpl	r2, [r4, #20]
 8004b88:	60a2      	str	r2, [r4, #8]
 8004b8a:	e7f4      	b.n	8004b76 <__swsetup_r+0x8e>
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	e7f7      	b.n	8004b80 <__swsetup_r+0x98>
 8004b90:	2000001c 	.word	0x2000001c

08004b94 <_sbrk_r>:
 8004b94:	b538      	push	{r3, r4, r5, lr}
 8004b96:	4d06      	ldr	r5, [pc, #24]	@ (8004bb0 <_sbrk_r+0x1c>)
 8004b98:	2300      	movs	r3, #0
 8004b9a:	4604      	mov	r4, r0
 8004b9c:	4608      	mov	r0, r1
 8004b9e:	602b      	str	r3, [r5, #0]
 8004ba0:	f7fb fdaa 	bl	80006f8 <_sbrk>
 8004ba4:	1c43      	adds	r3, r0, #1
 8004ba6:	d102      	bne.n	8004bae <_sbrk_r+0x1a>
 8004ba8:	682b      	ldr	r3, [r5, #0]
 8004baa:	b103      	cbz	r3, 8004bae <_sbrk_r+0x1a>
 8004bac:	6023      	str	r3, [r4, #0]
 8004bae:	bd38      	pop	{r3, r4, r5, pc}
 8004bb0:	20012fcc 	.word	0x20012fcc

08004bb4 <__swhatbuf_r>:
 8004bb4:	b570      	push	{r4, r5, r6, lr}
 8004bb6:	460c      	mov	r4, r1
 8004bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bbc:	2900      	cmp	r1, #0
 8004bbe:	b096      	sub	sp, #88	@ 0x58
 8004bc0:	4615      	mov	r5, r2
 8004bc2:	461e      	mov	r6, r3
 8004bc4:	da0d      	bge.n	8004be2 <__swhatbuf_r+0x2e>
 8004bc6:	89a3      	ldrh	r3, [r4, #12]
 8004bc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004bcc:	f04f 0100 	mov.w	r1, #0
 8004bd0:	bf14      	ite	ne
 8004bd2:	2340      	movne	r3, #64	@ 0x40
 8004bd4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004bd8:	2000      	movs	r0, #0
 8004bda:	6031      	str	r1, [r6, #0]
 8004bdc:	602b      	str	r3, [r5, #0]
 8004bde:	b016      	add	sp, #88	@ 0x58
 8004be0:	bd70      	pop	{r4, r5, r6, pc}
 8004be2:	466a      	mov	r2, sp
 8004be4:	f000 f848 	bl	8004c78 <_fstat_r>
 8004be8:	2800      	cmp	r0, #0
 8004bea:	dbec      	blt.n	8004bc6 <__swhatbuf_r+0x12>
 8004bec:	9901      	ldr	r1, [sp, #4]
 8004bee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004bf2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004bf6:	4259      	negs	r1, r3
 8004bf8:	4159      	adcs	r1, r3
 8004bfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004bfe:	e7eb      	b.n	8004bd8 <__swhatbuf_r+0x24>

08004c00 <__smakebuf_r>:
 8004c00:	898b      	ldrh	r3, [r1, #12]
 8004c02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c04:	079d      	lsls	r5, r3, #30
 8004c06:	4606      	mov	r6, r0
 8004c08:	460c      	mov	r4, r1
 8004c0a:	d507      	bpl.n	8004c1c <__smakebuf_r+0x1c>
 8004c0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004c10:	6023      	str	r3, [r4, #0]
 8004c12:	6123      	str	r3, [r4, #16]
 8004c14:	2301      	movs	r3, #1
 8004c16:	6163      	str	r3, [r4, #20]
 8004c18:	b003      	add	sp, #12
 8004c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c1c:	ab01      	add	r3, sp, #4
 8004c1e:	466a      	mov	r2, sp
 8004c20:	f7ff ffc8 	bl	8004bb4 <__swhatbuf_r>
 8004c24:	9f00      	ldr	r7, [sp, #0]
 8004c26:	4605      	mov	r5, r0
 8004c28:	4639      	mov	r1, r7
 8004c2a:	4630      	mov	r0, r6
 8004c2c:	f7ff fb18 	bl	8004260 <_malloc_r>
 8004c30:	b948      	cbnz	r0, 8004c46 <__smakebuf_r+0x46>
 8004c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c36:	059a      	lsls	r2, r3, #22
 8004c38:	d4ee      	bmi.n	8004c18 <__smakebuf_r+0x18>
 8004c3a:	f023 0303 	bic.w	r3, r3, #3
 8004c3e:	f043 0302 	orr.w	r3, r3, #2
 8004c42:	81a3      	strh	r3, [r4, #12]
 8004c44:	e7e2      	b.n	8004c0c <__smakebuf_r+0xc>
 8004c46:	89a3      	ldrh	r3, [r4, #12]
 8004c48:	6020      	str	r0, [r4, #0]
 8004c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c4e:	81a3      	strh	r3, [r4, #12]
 8004c50:	9b01      	ldr	r3, [sp, #4]
 8004c52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004c56:	b15b      	cbz	r3, 8004c70 <__smakebuf_r+0x70>
 8004c58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c5c:	4630      	mov	r0, r6
 8004c5e:	f000 f81d 	bl	8004c9c <_isatty_r>
 8004c62:	b128      	cbz	r0, 8004c70 <__smakebuf_r+0x70>
 8004c64:	89a3      	ldrh	r3, [r4, #12]
 8004c66:	f023 0303 	bic.w	r3, r3, #3
 8004c6a:	f043 0301 	orr.w	r3, r3, #1
 8004c6e:	81a3      	strh	r3, [r4, #12]
 8004c70:	89a3      	ldrh	r3, [r4, #12]
 8004c72:	431d      	orrs	r5, r3
 8004c74:	81a5      	strh	r5, [r4, #12]
 8004c76:	e7cf      	b.n	8004c18 <__smakebuf_r+0x18>

08004c78 <_fstat_r>:
 8004c78:	b538      	push	{r3, r4, r5, lr}
 8004c7a:	4d07      	ldr	r5, [pc, #28]	@ (8004c98 <_fstat_r+0x20>)
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	4604      	mov	r4, r0
 8004c80:	4608      	mov	r0, r1
 8004c82:	4611      	mov	r1, r2
 8004c84:	602b      	str	r3, [r5, #0]
 8004c86:	f7fb fd0e 	bl	80006a6 <_fstat>
 8004c8a:	1c43      	adds	r3, r0, #1
 8004c8c:	d102      	bne.n	8004c94 <_fstat_r+0x1c>
 8004c8e:	682b      	ldr	r3, [r5, #0]
 8004c90:	b103      	cbz	r3, 8004c94 <_fstat_r+0x1c>
 8004c92:	6023      	str	r3, [r4, #0]
 8004c94:	bd38      	pop	{r3, r4, r5, pc}
 8004c96:	bf00      	nop
 8004c98:	20012fcc 	.word	0x20012fcc

08004c9c <_isatty_r>:
 8004c9c:	b538      	push	{r3, r4, r5, lr}
 8004c9e:	4d06      	ldr	r5, [pc, #24]	@ (8004cb8 <_isatty_r+0x1c>)
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	4608      	mov	r0, r1
 8004ca6:	602b      	str	r3, [r5, #0]
 8004ca8:	f7fb fd0d 	bl	80006c6 <_isatty>
 8004cac:	1c43      	adds	r3, r0, #1
 8004cae:	d102      	bne.n	8004cb6 <_isatty_r+0x1a>
 8004cb0:	682b      	ldr	r3, [r5, #0]
 8004cb2:	b103      	cbz	r3, 8004cb6 <_isatty_r+0x1a>
 8004cb4:	6023      	str	r3, [r4, #0]
 8004cb6:	bd38      	pop	{r3, r4, r5, pc}
 8004cb8:	20012fcc 	.word	0x20012fcc

08004cbc <_init>:
 8004cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cbe:	bf00      	nop
 8004cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cc2:	bc08      	pop	{r3}
 8004cc4:	469e      	mov	lr, r3
 8004cc6:	4770      	bx	lr

08004cc8 <_fini>:
 8004cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cca:	bf00      	nop
 8004ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cce:	bc08      	pop	{r3}
 8004cd0:	469e      	mov	lr, r3
 8004cd2:	4770      	bx	lr
