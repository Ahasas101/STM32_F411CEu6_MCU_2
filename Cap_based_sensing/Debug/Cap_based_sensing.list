
Cap_based_sensing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c74  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08004e14  08004e14  00005e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004eb4  08004eb4  0000606c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004eb4  08004eb4  00005eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ebc  08004ebc  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ebc  08004ebc  00005ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ec0  08004ec0  00005ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004ec4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012f70  2000006c  08004f30  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012fdc  08004f30  00006fdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a574  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fc6  00000000  00000000  00010610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  000125d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000080a  00000000  00000000  00013080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a02  00000000  00000000  0001388a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bcd0  00000000  00000000  0002c28c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ff05  00000000  00000000  00037f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7e61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003238  00000000  00000000  000d7ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000db0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004dfc 	.word	0x08004dfc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08004dfc 	.word	0x08004dfc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:

void GpioCapInit(void);


int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b088      	sub	sp, #32
 8000284:	af02      	add	r7, sp, #8
	HAL_Init();
 8000286:	f000 fae1 	bl	800084c <HAL_Init>
	GpioSwoInit();
 800028a:	f000 f893 	bl	80003b4 <GpioSwoInit>
	AdcInit();
 800028e:	f000 f8b9 	bl	8000404 <AdcInit>
	printf("Hello");
 8000292:	4839      	ldr	r0, [pc, #228]	@ (8000378 <main+0xf8>)
 8000294:	f003 ff38 	bl	8004108 <iprintf>

	BaseType_t status;

	status = xTaskCreate(CapChargeTaskHandler, "CapChargeTask", 200, NULL, 4, &CapChargeHandle);
 8000298:	4b38      	ldr	r3, [pc, #224]	@ (800037c <main+0xfc>)
 800029a:	9301      	str	r3, [sp, #4]
 800029c:	2304      	movs	r3, #4
 800029e:	9300      	str	r3, [sp, #0]
 80002a0:	2300      	movs	r3, #0
 80002a2:	22c8      	movs	r2, #200	@ 0xc8
 80002a4:	4936      	ldr	r1, [pc, #216]	@ (8000380 <main+0x100>)
 80002a6:	4837      	ldr	r0, [pc, #220]	@ (8000384 <main+0x104>)
 80002a8:	f001 fd72 	bl	8001d90 <xTaskCreate>
 80002ac:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 80002ae:	697b      	ldr	r3, [r7, #20]
 80002b0:	2b01      	cmp	r3, #1
 80002b2:	d00b      	beq.n	80002cc <main+0x4c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80002b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80002b8:	f383 8811 	msr	BASEPRI, r3
 80002bc:	f3bf 8f6f 	isb	sy
 80002c0:	f3bf 8f4f 	dsb	sy
 80002c4:	613b      	str	r3, [r7, #16]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80002c6:	bf00      	nop
 80002c8:	bf00      	nop
 80002ca:	e7fd      	b.n	80002c8 <main+0x48>

	status = xTaskCreate(AdcReadTaskHandler, "AdcReadTask", 200, NULL, 2, &AdcReadHandle);
 80002cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000388 <main+0x108>)
 80002ce:	9301      	str	r3, [sp, #4]
 80002d0:	2302      	movs	r3, #2
 80002d2:	9300      	str	r3, [sp, #0]
 80002d4:	2300      	movs	r3, #0
 80002d6:	22c8      	movs	r2, #200	@ 0xc8
 80002d8:	492c      	ldr	r1, [pc, #176]	@ (800038c <main+0x10c>)
 80002da:	482d      	ldr	r0, [pc, #180]	@ (8000390 <main+0x110>)
 80002dc:	f001 fd58 	bl	8001d90 <xTaskCreate>
 80002e0:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 80002e2:	697b      	ldr	r3, [r7, #20]
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d00b      	beq.n	8000300 <main+0x80>
    __asm volatile
 80002e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80002ec:	f383 8811 	msr	BASEPRI, r3
 80002f0:	f3bf 8f6f 	isb	sy
 80002f4:	f3bf 8f4f 	dsb	sy
 80002f8:	60fb      	str	r3, [r7, #12]
}
 80002fa:	bf00      	nop
 80002fc:	bf00      	nop
 80002fe:	e7fd      	b.n	80002fc <main+0x7c>

	status = xTaskCreate(CapDischargeTaskHandler, "CapDischargeTask", 200, NULL, 2, &CapDischargeHandle);
 8000300:	4b24      	ldr	r3, [pc, #144]	@ (8000394 <main+0x114>)
 8000302:	9301      	str	r3, [sp, #4]
 8000304:	2302      	movs	r3, #2
 8000306:	9300      	str	r3, [sp, #0]
 8000308:	2300      	movs	r3, #0
 800030a:	22c8      	movs	r2, #200	@ 0xc8
 800030c:	4922      	ldr	r1, [pc, #136]	@ (8000398 <main+0x118>)
 800030e:	4823      	ldr	r0, [pc, #140]	@ (800039c <main+0x11c>)
 8000310:	f001 fd3e 	bl	8001d90 <xTaskCreate>
 8000314:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 8000316:	697b      	ldr	r3, [r7, #20]
 8000318:	2b01      	cmp	r3, #1
 800031a:	d00b      	beq.n	8000334 <main+0xb4>
    __asm volatile
 800031c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000320:	f383 8811 	msr	BASEPRI, r3
 8000324:	f3bf 8f6f 	isb	sy
 8000328:	f3bf 8f4f 	dsb	sy
 800032c:	60bb      	str	r3, [r7, #8]
}
 800032e:	bf00      	nop
 8000330:	bf00      	nop
 8000332:	e7fd      	b.n	8000330 <main+0xb0>

	status = xTaskCreate(LcdPrintTaskHandler, "LcdPrintTask", 200, NULL, 2, &LcdPrintHandle);
 8000334:	4b1a      	ldr	r3, [pc, #104]	@ (80003a0 <main+0x120>)
 8000336:	9301      	str	r3, [sp, #4]
 8000338:	2302      	movs	r3, #2
 800033a:	9300      	str	r3, [sp, #0]
 800033c:	2300      	movs	r3, #0
 800033e:	22c8      	movs	r2, #200	@ 0xc8
 8000340:	4918      	ldr	r1, [pc, #96]	@ (80003a4 <main+0x124>)
 8000342:	4819      	ldr	r0, [pc, #100]	@ (80003a8 <main+0x128>)
 8000344:	f001 fd24 	bl	8001d90 <xTaskCreate>
 8000348:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 800034a:	697b      	ldr	r3, [r7, #20]
 800034c:	2b01      	cmp	r3, #1
 800034e:	d00b      	beq.n	8000368 <main+0xe8>
    __asm volatile
 8000350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000354:	f383 8811 	msr	BASEPRI, r3
 8000358:	f3bf 8f6f 	isb	sy
 800035c:	f3bf 8f4f 	dsb	sy
 8000360:	607b      	str	r3, [r7, #4]
}
 8000362:	bf00      	nop
 8000364:	bf00      	nop
 8000366:	e7fd      	b.n	8000364 <main+0xe4>

	vTaskStartScheduler();
 8000368:	f001 fede 	bl	8002128 <vTaskStartScheduler>

	return 0;
 800036c:	2300      	movs	r3, #0
}
 800036e:	4618      	mov	r0, r3
 8000370:	3718      	adds	r7, #24
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	08004e14 	.word	0x08004e14
 800037c:	200000d4 	.word	0x200000d4
 8000380:	08004e1c 	.word	0x08004e1c
 8000384:	080004a9 	.word	0x080004a9
 8000388:	200000d8 	.word	0x200000d8
 800038c:	08004e2c 	.word	0x08004e2c
 8000390:	080004e1 	.word	0x080004e1
 8000394:	200000dc 	.word	0x200000dc
 8000398:	08004e38 	.word	0x08004e38
 800039c:	0800055d 	.word	0x0800055d
 80003a0:	200000e0 	.word	0x200000e0
 80003a4:	08004e4c 	.word	0x08004e4c
 80003a8:	080005a5 	.word	0x080005a5

080003ac <Error_Handler>:

void  Error_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
	while(1);
 80003b0:	bf00      	nop
 80003b2:	e7fd      	b.n	80003b0 <Error_Handler+0x4>

080003b4 <GpioSwoInit>:
{

}

void GpioSwoInit(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80003ba:	2300      	movs	r3, #0
 80003bc:	603b      	str	r3, [r7, #0]
 80003be:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <GpioSwoInit+0x48>)
 80003c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c2:	4a0e      	ldr	r2, [pc, #56]	@ (80003fc <GpioSwoInit+0x48>)
 80003c4:	f043 0302 	orr.w	r3, r3, #2
 80003c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80003ca:	4b0c      	ldr	r3, [pc, #48]	@ (80003fc <GpioSwoInit+0x48>)
 80003cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ce:	f003 0302 	and.w	r3, r3, #2
 80003d2:	603b      	str	r3, [r7, #0]
 80003d4:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef gpio_swo;
	gpio_swo.Mode = GPIO_MODE_AF_PP;
 80003d6:	2302      	movs	r3, #2
 80003d8:	60bb      	str	r3, [r7, #8]
	gpio_swo.Pin = GPIO_PIN_3;
 80003da:	2308      	movs	r3, #8
 80003dc:	607b      	str	r3, [r7, #4]
	gpio_swo.Alternate = GPIO_AF0_SWJ;
 80003de:	2300      	movs	r3, #0
 80003e0:	617b      	str	r3, [r7, #20]
	gpio_swo.Pull = GPIO_NOPULL;
 80003e2:	2300      	movs	r3, #0
 80003e4:	60fb      	str	r3, [r7, #12]
	gpio_swo.Speed = GPIO_SPEED_FREQ_LOW;
 80003e6:	2300      	movs	r3, #0
 80003e8:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &gpio_swo);
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	4619      	mov	r1, r3
 80003ee:	4804      	ldr	r0, [pc, #16]	@ (8000400 <GpioSwoInit+0x4c>)
 80003f0:	f000 ff6c 	bl	80012cc <HAL_GPIO_Init>
}
 80003f4:	bf00      	nop
 80003f6:	3718      	adds	r7, #24
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	40023800 	.word	0x40023800
 8000400:	40020400 	.word	0x40020400

08000404 <AdcInit>:
	gpio_cap.Speed = GPIO_SPEED_FREQ_MEDIUM;
	HAL_GPIO_Init(GPIOA, &gpio_cap);
}

void AdcInit(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b08a      	sub	sp, #40	@ 0x28
 8000408:	af00      	add	r7, sp, #0
	__HAL_RCC_ADC1_CLK_ENABLE();
 800040a:	2300      	movs	r3, #0
 800040c:	603b      	str	r3, [r7, #0]
 800040e:	4b22      	ldr	r3, [pc, #136]	@ (8000498 <AdcInit+0x94>)
 8000410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000412:	4a21      	ldr	r2, [pc, #132]	@ (8000498 <AdcInit+0x94>)
 8000414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000418:	6453      	str	r3, [r2, #68]	@ 0x44
 800041a:	4b1f      	ldr	r3, [pc, #124]	@ (8000498 <AdcInit+0x94>)
 800041c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800041e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000422:	603b      	str	r3, [r7, #0]
 8000424:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef gpio_adc;
	gpio_adc.Mode = GPIO_MODE_ANALOG;
 8000426:	2303      	movs	r3, #3
 8000428:	61bb      	str	r3, [r7, #24]
	gpio_adc.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800042a:	2301      	movs	r3, #1
 800042c:	623b      	str	r3, [r7, #32]
	gpio_adc.Pin = GPIO_PIN_1;
 800042e:	2302      	movs	r3, #2
 8000430:	617b      	str	r3, [r7, #20]
	gpio_adc.Pull = GPIO_NOPULL;
 8000432:	2300      	movs	r3, #0
 8000434:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &gpio_adc);
 8000436:	f107 0314 	add.w	r3, r7, #20
 800043a:	4619      	mov	r1, r3
 800043c:	4817      	ldr	r0, [pc, #92]	@ (800049c <AdcInit+0x98>)
 800043e:	f000 ff45 	bl	80012cc <HAL_GPIO_Init>


	adc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000442:	4b17      	ldr	r3, [pc, #92]	@ (80004a0 <AdcInit+0x9c>)
 8000444:	2200      	movs	r2, #0
 8000446:	605a      	str	r2, [r3, #4]
	adc.Init.Resolution = ADC_RESOLUTION_12B;
 8000448:	4b15      	ldr	r3, [pc, #84]	@ (80004a0 <AdcInit+0x9c>)
 800044a:	2200      	movs	r2, #0
 800044c:	609a      	str	r2, [r3, #8]
	adc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800044e:	4b14      	ldr	r3, [pc, #80]	@ (80004a0 <AdcInit+0x9c>)
 8000450:	2200      	movs	r2, #0
 8000452:	60da      	str	r2, [r3, #12]
	adc.Init.ContinuousConvMode = DISABLE;
 8000454:	4b12      	ldr	r3, [pc, #72]	@ (80004a0 <AdcInit+0x9c>)
 8000456:	2200      	movs	r2, #0
 8000458:	761a      	strb	r2, [r3, #24]
	adc.Instance = ADC1;
 800045a:	4b11      	ldr	r3, [pc, #68]	@ (80004a0 <AdcInit+0x9c>)
 800045c:	4a11      	ldr	r2, [pc, #68]	@ (80004a4 <AdcInit+0xa0>)
 800045e:	601a      	str	r2, [r3, #0]
	if(HAL_ADC_Init(&adc) != HAL_OK) Error_Handler();
 8000460:	480f      	ldr	r0, [pc, #60]	@ (80004a0 <AdcInit+0x9c>)
 8000462:	f000 fa51 	bl	8000908 <HAL_ADC_Init>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <AdcInit+0x6c>
 800046c:	f7ff ff9e 	bl	80003ac <Error_Handler>

	ADC_ChannelConfTypeDef cnl;
	cnl.Channel = ADC_CHANNEL_1;
 8000470:	2301      	movs	r3, #1
 8000472:	607b      	str	r3, [r7, #4]
	cnl.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000474:	2301      	movs	r3, #1
 8000476:	60fb      	str	r3, [r7, #12]
	cnl.Rank = 1;
 8000478:	2301      	movs	r3, #1
 800047a:	60bb      	str	r3, [r7, #8]
	if(HAL_ADC_ConfigChannel(&adc, &cnl) != HAL_OK) Error_Handler();
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	4619      	mov	r1, r3
 8000480:	4807      	ldr	r0, [pc, #28]	@ (80004a0 <AdcInit+0x9c>)
 8000482:	f000 fc0f 	bl	8000ca4 <HAL_ADC_ConfigChannel>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <AdcInit+0x8c>
 800048c:	f7ff ff8e 	bl	80003ac <Error_Handler>


}
 8000490:	bf00      	nop
 8000492:	3728      	adds	r7, #40	@ 0x28
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	40023800 	.word	0x40023800
 800049c:	40020000 	.word	0x40020000
 80004a0:	20000088 	.word	0x20000088
 80004a4:	40012000 	.word	0x40012000

080004a8 <CapChargeTaskHandler>:

void CapChargeTaskHandler(void* parameters)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af02      	add	r7, sp, #8
 80004ae:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80004b0:	2201      	movs	r2, #1
 80004b2:	2101      	movs	r1, #1
 80004b4:	4808      	ldr	r0, [pc, #32]	@ (80004d8 <CapChargeTaskHandler+0x30>)
 80004b6:	f001 f88d 	bl	80015d4 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(1000));
 80004ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004be:	f001 fdb3 	bl	8002028 <vTaskDelay>
		xTaskNotify(AdcReadHandle, 0, eNoAction);
 80004c2:	4b06      	ldr	r3, [pc, #24]	@ (80004dc <CapChargeTaskHandler+0x34>)
 80004c4:	6818      	ldr	r0, [r3, #0]
 80004c6:	2300      	movs	r3, #0
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	2300      	movs	r3, #0
 80004cc:	2200      	movs	r2, #0
 80004ce:	2100      	movs	r1, #0
 80004d0:	f002 fc3e 	bl	8002d50 <xTaskGenericNotify>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80004d4:	bf00      	nop
 80004d6:	e7eb      	b.n	80004b0 <CapChargeTaskHandler+0x8>
 80004d8:	40020000 	.word	0x40020000
 80004dc:	200000d8 	.word	0x200000d8

080004e0 <AdcReadTaskHandler>:
	}
}

void AdcReadTaskHandler(void* parameters)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af02      	add	r7, sp, #8
 80004e6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80004e8:	f04f 33ff 	mov.w	r3, #4294967295
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2300      	movs	r3, #0
 80004f0:	2200      	movs	r2, #0
 80004f2:	2100      	movs	r1, #0
 80004f4:	2000      	movs	r0, #0
 80004f6:	f002 fb99 	bl	8002c2c <xTaskGenericNotifyWait>
		if(HAL_ADC_Start(&adc) != HAL_OK) Error_Handler();
 80004fa:	4815      	ldr	r0, [pc, #84]	@ (8000550 <AdcReadTaskHandler+0x70>)
 80004fc:	f000 fa52 	bl	80009a4 <HAL_ADC_Start>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <AdcReadTaskHandler+0x2a>
 8000506:	f7ff ff51 	bl	80003ac <Error_Handler>
		if(HAL_ADC_PollForConversion(&adc, HAL_MAX_DELAY) != HAL_OK) Error_Handler();
 800050a:	f04f 31ff 	mov.w	r1, #4294967295
 800050e:	4810      	ldr	r0, [pc, #64]	@ (8000550 <AdcReadTaskHandler+0x70>)
 8000510:	f000 fb2f 	bl	8000b72 <HAL_ADC_PollForConversion>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <AdcReadTaskHandler+0x3e>
 800051a:	f7ff ff47 	bl	80003ac <Error_Handler>
		val = HAL_ADC_GetValue(&adc);
 800051e:	480c      	ldr	r0, [pc, #48]	@ (8000550 <AdcReadTaskHandler+0x70>)
 8000520:	f000 fbb2 	bl	8000c88 <HAL_ADC_GetValue>
 8000524:	4603      	mov	r3, r0
 8000526:	4a0b      	ldr	r2, [pc, #44]	@ (8000554 <AdcReadTaskHandler+0x74>)
 8000528:	6013      	str	r3, [r2, #0]
		if(HAL_ADC_Stop(&adc) != HAL_OK) Error_Handler();
 800052a:	4809      	ldr	r0, [pc, #36]	@ (8000550 <AdcReadTaskHandler+0x70>)
 800052c:	f000 faee 	bl	8000b0c <HAL_ADC_Stop>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <AdcReadTaskHandler+0x5a>
 8000536:	f7ff ff39 	bl	80003ac <Error_Handler>
		xTaskNotify(LcdPrintHandle, 0, eNoAction);
 800053a:	4b07      	ldr	r3, [pc, #28]	@ (8000558 <AdcReadTaskHandler+0x78>)
 800053c:	6818      	ldr	r0, [r3, #0]
 800053e:	2300      	movs	r3, #0
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	2300      	movs	r3, #0
 8000544:	2200      	movs	r2, #0
 8000546:	2100      	movs	r1, #0
 8000548:	f002 fc02 	bl	8002d50 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800054c:	e7cc      	b.n	80004e8 <AdcReadTaskHandler+0x8>
 800054e:	bf00      	nop
 8000550:	20000088 	.word	0x20000088
 8000554:	200000d0 	.word	0x200000d0
 8000558:	200000e0 	.word	0x200000e0

0800055c <CapDischargeTaskHandler>:


}

void CapDischargeTaskHandler(void* parameters)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af02      	add	r7, sp, #8
 8000562:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000564:	f04f 33ff 	mov.w	r3, #4294967295
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	2300      	movs	r3, #0
 800056c:	2200      	movs	r2, #0
 800056e:	2100      	movs	r1, #0
 8000570:	2000      	movs	r0, #0
 8000572:	f002 fb5b 	bl	8002c2c <xTaskGenericNotifyWait>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	2101      	movs	r1, #1
 800057a:	4808      	ldr	r0, [pc, #32]	@ (800059c <CapDischargeTaskHandler+0x40>)
 800057c:	f001 f82a 	bl	80015d4 <HAL_GPIO_WritePin>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8000580:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000584:	f001 fd50 	bl	8002028 <vTaskDelay>
		taskYIELD();
 8000588:	4b05      	ldr	r3, [pc, #20]	@ (80005a0 <CapDischargeTaskHandler+0x44>)
 800058a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	f3bf 8f4f 	dsb	sy
 8000594:	f3bf 8f6f 	isb	sy
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000598:	bf00      	nop
 800059a:	e7e3      	b.n	8000564 <CapDischargeTaskHandler+0x8>
 800059c:	40020000 	.word	0x40020000
 80005a0:	e000ed04 	.word	0xe000ed04

080005a4 <LcdPrintTaskHandler>:
	}
}

void LcdPrintTaskHandler(void* parameters)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af02      	add	r7, sp, #8
 80005aa:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80005ac:	f04f 33ff 	mov.w	r3, #4294967295
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2300      	movs	r3, #0
 80005b4:	2200      	movs	r2, #0
 80005b6:	2100      	movs	r1, #0
 80005b8:	2000      	movs	r0, #0
 80005ba:	f002 fb37 	bl	8002c2c <xTaskGenericNotifyWait>
		printf("%lu \n",val);
 80005be:	4b08      	ldr	r3, [pc, #32]	@ (80005e0 <LcdPrintTaskHandler+0x3c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4619      	mov	r1, r3
 80005c4:	4807      	ldr	r0, [pc, #28]	@ (80005e4 <LcdPrintTaskHandler+0x40>)
 80005c6:	f003 fd9f 	bl	8004108 <iprintf>
		xTaskNotify(CapDischargeHandle, 0, eNoAction);
 80005ca:	4b07      	ldr	r3, [pc, #28]	@ (80005e8 <LcdPrintTaskHandler+0x44>)
 80005cc:	6818      	ldr	r0, [r3, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	2200      	movs	r2, #0
 80005d6:	2100      	movs	r1, #0
 80005d8:	f002 fbba 	bl	8002d50 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80005dc:	bf00      	nop
 80005de:	e7e5      	b.n	80005ac <LcdPrintTaskHandler+0x8>
 80005e0:	200000d0 	.word	0x200000d0
 80005e4:	08004e5c 	.word	0x08004e5c
 80005e8:	200000dc 	.word	0x200000dc

080005ec <HAL_MspInit>:
//}



void HAL_MspInit(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0



  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	4b10      	ldr	r3, [pc, #64]	@ (8000638 <HAL_MspInit+0x4c>)
 80005f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000638 <HAL_MspInit+0x4c>)
 80005fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000600:	6453      	str	r3, [r2, #68]	@ 0x44
 8000602:	4b0d      	ldr	r3, [pc, #52]	@ (8000638 <HAL_MspInit+0x4c>)
 8000604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000606:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <HAL_MspInit+0x4c>)
 8000614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000616:	4a08      	ldr	r2, [pc, #32]	@ (8000638 <HAL_MspInit+0x4c>)
 8000618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061c:	6413      	str	r3, [r2, #64]	@ 0x40
 800061e:	4b06      	ldr	r3, [pc, #24]	@ (8000638 <HAL_MspInit+0x4c>)
 8000620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	683b      	ldr	r3, [r7, #0]

}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40023800 	.word	0x40023800

0800063c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000646:	4b0f      	ldr	r3, [pc, #60]	@ (8000684 <ITM_SendChar+0x48>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a0e      	ldr	r2, [pc, #56]	@ (8000684 <ITM_SendChar+0x48>)
 800064c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000650:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000652:	4b0d      	ldr	r3, [pc, #52]	@ (8000688 <ITM_SendChar+0x4c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a0c      	ldr	r2, [pc, #48]	@ (8000688 <ITM_SendChar+0x4c>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800065e:	bf00      	nop
 8000660:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	2b00      	cmp	r3, #0
 800066c:	d0f8      	beq.n	8000660 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800066e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	6013      	str	r3, [r2, #0]
}
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000edfc 	.word	0xe000edfc
 8000688:	e0000e00 	.word	0xe0000e00

0800068c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
 800069c:	e00a      	b.n	80006b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800069e:	f3af 8000 	nop.w
 80006a2:	4601      	mov	r1, r0
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	1c5a      	adds	r2, r3, #1
 80006a8:	60ba      	str	r2, [r7, #8]
 80006aa:	b2ca      	uxtb	r2, r1
 80006ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	3301      	adds	r3, #1
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	697a      	ldr	r2, [r7, #20]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	dbf0      	blt.n	800069e <_read+0x12>
  }

  return len;
 80006bc:	687b      	ldr	r3, [r7, #4]
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3718      	adds	r7, #24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b086      	sub	sp, #24
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	60f8      	str	r0, [r7, #12]
 80006ce:	60b9      	str	r1, [r7, #8]
 80006d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
 80006d6:	e009      	b.n	80006ec <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	1c5a      	adds	r2, r3, #1
 80006dc:	60ba      	str	r2, [r7, #8]
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff ffab 	bl	800063c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	3301      	adds	r3, #1
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	697a      	ldr	r2, [r7, #20]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	dbf1      	blt.n	80006d8 <_write+0x12>
  }
  return len;
 80006f4:	687b      	ldr	r3, [r7, #4]
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3718      	adds	r7, #24
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <_close>:

int _close(int file)
{
 80006fe:	b480      	push	{r7}
 8000700:	b083      	sub	sp, #12
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000706:	f04f 33ff 	mov.w	r3, #4294967295
}
 800070a:	4618      	mov	r0, r3
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr

08000716 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000716:	b480      	push	{r7}
 8000718:	b083      	sub	sp, #12
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
 800071e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000726:	605a      	str	r2, [r3, #4]
  return 0;
 8000728:	2300      	movs	r3, #0
}
 800072a:	4618      	mov	r0, r3
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <_isatty>:

int _isatty(int file)
{
 8000736:	b480      	push	{r7}
 8000738:	b083      	sub	sp, #12
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800073e:	2301      	movs	r3, #1
}
 8000740:	4618      	mov	r0, r3
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000758:	2300      	movs	r3, #0
}
 800075a:	4618      	mov	r0, r3
 800075c:	3714      	adds	r7, #20
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
	...

08000768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000770:	4a14      	ldr	r2, [pc, #80]	@ (80007c4 <_sbrk+0x5c>)
 8000772:	4b15      	ldr	r3, [pc, #84]	@ (80007c8 <_sbrk+0x60>)
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800077c:	4b13      	ldr	r3, [pc, #76]	@ (80007cc <_sbrk+0x64>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d102      	bne.n	800078a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000784:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <_sbrk+0x64>)
 8000786:	4a12      	ldr	r2, [pc, #72]	@ (80007d0 <_sbrk+0x68>)
 8000788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800078a:	4b10      	ldr	r3, [pc, #64]	@ (80007cc <_sbrk+0x64>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4413      	add	r3, r2
 8000792:	693a      	ldr	r2, [r7, #16]
 8000794:	429a      	cmp	r2, r3
 8000796:	d207      	bcs.n	80007a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000798:	f003 fd5a 	bl	8004250 <__errno>
 800079c:	4603      	mov	r3, r0
 800079e:	220c      	movs	r2, #12
 80007a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295
 80007a6:	e009      	b.n	80007bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007a8:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <_sbrk+0x64>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ae:	4b07      	ldr	r3, [pc, #28]	@ (80007cc <_sbrk+0x64>)
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4413      	add	r3, r2
 80007b6:	4a05      	ldr	r2, [pc, #20]	@ (80007cc <_sbrk+0x64>)
 80007b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007ba:	68fb      	ldr	r3, [r7, #12]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3718      	adds	r7, #24
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20020000 	.word	0x20020000
 80007c8:	00000400 	.word	0x00000400
 80007cc:	200000e4 	.word	0x200000e4
 80007d0:	20012fe0 	.word	0x20012fe0

080007d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007d8:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <SystemInit+0x20>)
 80007da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007de:	4a05      	ldr	r2, [pc, #20]	@ (80007f4 <SystemInit+0x20>)
 80007e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80007f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000830 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007fc:	f7ff ffea 	bl	80007d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000800:	480c      	ldr	r0, [pc, #48]	@ (8000834 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000802:	490d      	ldr	r1, [pc, #52]	@ (8000838 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000804:	4a0d      	ldr	r2, [pc, #52]	@ (800083c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000808:	e002      	b.n	8000810 <LoopCopyDataInit>

0800080a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800080a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800080c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080e:	3304      	adds	r3, #4

08000810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000814:	d3f9      	bcc.n	800080a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000816:	4a0a      	ldr	r2, [pc, #40]	@ (8000840 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000818:	4c0a      	ldr	r4, [pc, #40]	@ (8000844 <LoopFillZerobss+0x22>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800081c:	e001      	b.n	8000822 <LoopFillZerobss>

0800081e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000820:	3204      	adds	r2, #4

08000822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000824:	d3fb      	bcc.n	800081e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000826:	f003 fd19 	bl	800425c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800082a:	f7ff fd29 	bl	8000280 <main>
  bx  lr    
 800082e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000830:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000838:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800083c:	08004ec4 	.word	0x08004ec4
  ldr r2, =_sbss
 8000840:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000844:	20012fdc 	.word	0x20012fdc

08000848 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000848:	e7fe      	b.n	8000848 <ADC_IRQHandler>
	...

0800084c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000850:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <HAL_Init+0x40>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a0d      	ldr	r2, [pc, #52]	@ (800088c <HAL_Init+0x40>)
 8000856:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800085a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800085c:	4b0b      	ldr	r3, [pc, #44]	@ (800088c <HAL_Init+0x40>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a0a      	ldr	r2, [pc, #40]	@ (800088c <HAL_Init+0x40>)
 8000862:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000866:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000868:	4b08      	ldr	r3, [pc, #32]	@ (800088c <HAL_Init+0x40>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a07      	ldr	r2, [pc, #28]	@ (800088c <HAL_Init+0x40>)
 800086e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000872:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000874:	2003      	movs	r0, #3
 8000876:	f000 fcf5 	bl	8001264 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800087a:	200f      	movs	r0, #15
 800087c:	f000 f808 	bl	8000890 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000880:	f7ff feb4 	bl	80005ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023c00 	.word	0x40023c00

08000890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000898:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <HAL_InitTick+0x54>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4b12      	ldr	r3, [pc, #72]	@ (80008e8 <HAL_InitTick+0x58>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	4619      	mov	r1, r3
 80008a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 fcff 	bl	80012b2 <HAL_SYSTICK_Config>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ba:	2301      	movs	r3, #1
 80008bc:	e00e      	b.n	80008dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2b0f      	cmp	r3, #15
 80008c2:	d80a      	bhi.n	80008da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c4:	2200      	movs	r2, #0
 80008c6:	6879      	ldr	r1, [r7, #4]
 80008c8:	f04f 30ff 	mov.w	r0, #4294967295
 80008cc:	f000 fcd5 	bl	800127a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008d0:	4a06      	ldr	r2, [pc, #24]	@ (80008ec <HAL_InitTick+0x5c>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008d6:	2300      	movs	r3, #0
 80008d8:	e000      	b.n	80008dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000000 	.word	0x20000000
 80008e8:	20000008 	.word	0x20000008
 80008ec:	20000004 	.word	0x20000004

080008f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  return uwTick;
 80008f4:	4b03      	ldr	r3, [pc, #12]	@ (8000904 <HAL_GetTick+0x14>)
 80008f6:	681b      	ldr	r3, [r3, #0]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	200000e8 	.word	0x200000e8

08000908 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000910:	2300      	movs	r3, #0
 8000912:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d101      	bne.n	800091e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
 800091c:	e033      	b.n	8000986 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000922:	2b00      	cmp	r3, #0
 8000924:	d109      	bne.n	800093a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f000 f831 	bl	800098e <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2200      	movs	r2, #0
 8000930:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2200      	movs	r2, #0
 8000936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093e:	f003 0310 	and.w	r3, r3, #16
 8000942:	2b00      	cmp	r3, #0
 8000944:	d118      	bne.n	8000978 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800094e:	f023 0302 	bic.w	r3, r3, #2
 8000952:	f043 0202 	orr.w	r2, r3, #2
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f000 fad4 	bl	8000f08 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2200      	movs	r2, #0
 8000964:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096a:	f023 0303 	bic.w	r3, r3, #3
 800096e:	f043 0201 	orr.w	r2, r3, #1
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	641a      	str	r2, [r3, #64]	@ 0x40
 8000976:	e001      	b.n	800097c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000978:	2301      	movs	r3, #1
 800097a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2200      	movs	r2, #0
 8000980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000984:	7bfb      	ldrb	r3, [r7, #15]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <HAL_ADC_MspInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
 800098e:	b480      	push	{r7}
 8000990:	b083      	sub	sp, #12
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
	...

080009a4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d101      	bne.n	80009be <HAL_ADC_Start+0x1a>
 80009ba:	2302      	movs	r3, #2
 80009bc:	e097      	b.n	8000aee <HAL_ADC_Start+0x14a>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2201      	movs	r2, #1
 80009c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	f003 0301 	and.w	r3, r3, #1
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d018      	beq.n	8000a06 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	689a      	ldr	r2, [r3, #8]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f042 0201 	orr.w	r2, r2, #1
 80009e2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80009e4:	4b45      	ldr	r3, [pc, #276]	@ (8000afc <HAL_ADC_Start+0x158>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a45      	ldr	r2, [pc, #276]	@ (8000b00 <HAL_ADC_Start+0x15c>)
 80009ea:	fba2 2303 	umull	r2, r3, r2, r3
 80009ee:	0c9a      	lsrs	r2, r3, #18
 80009f0:	4613      	mov	r3, r2
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	4413      	add	r3, r2
 80009f6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80009f8:	e002      	b.n	8000a00 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	3b01      	subs	r3, #1
 80009fe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d1f9      	bne.n	80009fa <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	f003 0301 	and.w	r3, r3, #1
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d15f      	bne.n	8000ad4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a18:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000a1c:	f023 0301 	bic.w	r3, r3, #1
 8000a20:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d007      	beq.n	8000a46 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000a3e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000a52:	d106      	bne.n	8000a62 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a58:	f023 0206 	bic.w	r2, r3, #6
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	645a      	str	r2, [r3, #68]	@ 0x44
 8000a60:	e002      	b.n	8000a68 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2200      	movs	r2, #0
 8000a66:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000a70:	4b24      	ldr	r3, [pc, #144]	@ (8000b04 <HAL_ADC_Start+0x160>)
 8000a72:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000a7c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	f003 031f 	and.w	r3, r3, #31
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d10f      	bne.n	8000aaa <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d129      	bne.n	8000aec <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	689a      	ldr	r2, [r3, #8]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	e020      	b.n	8000aec <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a16      	ldr	r2, [pc, #88]	@ (8000b08 <HAL_ADC_Start+0x164>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d11b      	bne.n	8000aec <HAL_ADC_Start+0x148>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d114      	bne.n	8000aec <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	689a      	ldr	r2, [r3, #8]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	e00b      	b.n	8000aec <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad8:	f043 0210 	orr.w	r2, r3, #16
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae4:	f043 0201 	orr.w	r2, r3, #1
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000000 	.word	0x20000000
 8000b00:	431bde83 	.word	0x431bde83
 8000b04:	40012300 	.word	0x40012300
 8000b08:	40012000 	.word	0x40012000

08000b0c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d101      	bne.n	8000b22 <HAL_ADC_Stop+0x16>
 8000b1e:	2302      	movs	r3, #2
 8000b20:	e021      	b.n	8000b66 <HAL_ADC_Stop+0x5a>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2201      	movs	r2, #1
 8000b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	689a      	ldr	r2, [r3, #8]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f022 0201 	bic.w	r2, r2, #1
 8000b38:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	f003 0301 	and.w	r3, r3, #1
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d109      	bne.n	8000b5c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000b50:	f023 0301 	bic.w	r3, r3, #1
 8000b54:	f043 0201 	orr.w	r2, r3, #1
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b084      	sub	sp, #16
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
 8000b7a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b8e:	d113      	bne.n	8000bb8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000b9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b9e:	d10b      	bne.n	8000bb8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba4:	f043 0220 	orr.w	r2, r3, #32
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e063      	b.n	8000c80 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bb8:	f7ff fe9a 	bl	80008f0 <HAL_GetTick>
 8000bbc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000bbe:	e021      	b.n	8000c04 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc6:	d01d      	beq.n	8000c04 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d007      	beq.n	8000bde <HAL_ADC_PollForConversion+0x6c>
 8000bce:	f7ff fe8f 	bl	80008f0 <HAL_GetTick>
 8000bd2:	4602      	mov	r2, r0
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	1ad3      	subs	r3, r2, r3
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d212      	bcs.n	8000c04 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f003 0302 	and.w	r3, r3, #2
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d00b      	beq.n	8000c04 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf0:	f043 0204 	orr.w	r2, r3, #4
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8000c00:	2303      	movs	r3, #3
 8000c02:	e03d      	b.n	8000c80 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d1d6      	bne.n	8000bc0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f06f 0212 	mvn.w	r2, #18
 8000c1a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c20:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d123      	bne.n	8000c7e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d11f      	bne.n	8000c7e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c44:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d006      	beq.n	8000c5a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d111      	bne.n	8000c7e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d105      	bne.n	8000c7e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c76:	f043 0201 	orr.w	r2, r3, #1
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
	...

08000ca4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d101      	bne.n	8000cc0 <HAL_ADC_ConfigChannel+0x1c>
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	e113      	b.n	8000ee8 <HAL_ADC_ConfigChannel+0x244>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b09      	cmp	r3, #9
 8000cce:	d925      	bls.n	8000d1c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	68d9      	ldr	r1, [r3, #12]
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4613      	mov	r3, r2
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	4413      	add	r3, r2
 8000ce4:	3b1e      	subs	r3, #30
 8000ce6:	2207      	movs	r2, #7
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43da      	mvns	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	400a      	ands	r2, r1
 8000cf4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	68d9      	ldr	r1, [r3, #12]
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	689a      	ldr	r2, [r3, #8]
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	4618      	mov	r0, r3
 8000d08:	4603      	mov	r3, r0
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	4403      	add	r3, r0
 8000d0e:	3b1e      	subs	r3, #30
 8000d10:	409a      	lsls	r2, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	430a      	orrs	r2, r1
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	e022      	b.n	8000d62 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	6919      	ldr	r1, [r3, #16]
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	4413      	add	r3, r2
 8000d30:	2207      	movs	r2, #7
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43da      	mvns	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	400a      	ands	r2, r1
 8000d3e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	6919      	ldr	r1, [r3, #16]
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	689a      	ldr	r2, [r3, #8]
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	4618      	mov	r0, r3
 8000d52:	4603      	mov	r3, r0
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	4403      	add	r3, r0
 8000d58:	409a      	lsls	r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	2b06      	cmp	r3, #6
 8000d68:	d824      	bhi.n	8000db4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685a      	ldr	r2, [r3, #4]
 8000d74:	4613      	mov	r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	4413      	add	r3, r2
 8000d7a:	3b05      	subs	r3, #5
 8000d7c:	221f      	movs	r2, #31
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43da      	mvns	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	400a      	ands	r2, r1
 8000d8a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	4618      	mov	r0, r3
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685a      	ldr	r2, [r3, #4]
 8000d9e:	4613      	mov	r3, r2
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	4413      	add	r3, r2
 8000da4:	3b05      	subs	r3, #5
 8000da6:	fa00 f203 	lsl.w	r2, r0, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	430a      	orrs	r2, r1
 8000db0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000db2:	e04c      	b.n	8000e4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	2b0c      	cmp	r3, #12
 8000dba:	d824      	bhi.n	8000e06 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685a      	ldr	r2, [r3, #4]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	4413      	add	r3, r2
 8000dcc:	3b23      	subs	r3, #35	@ 0x23
 8000dce:	221f      	movs	r2, #31
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43da      	mvns	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	400a      	ands	r2, r1
 8000ddc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	4618      	mov	r0, r3
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685a      	ldr	r2, [r3, #4]
 8000df0:	4613      	mov	r3, r2
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	4413      	add	r3, r2
 8000df6:	3b23      	subs	r3, #35	@ 0x23
 8000df8:	fa00 f203 	lsl.w	r2, r0, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	430a      	orrs	r2, r1
 8000e02:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e04:	e023      	b.n	8000e4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685a      	ldr	r2, [r3, #4]
 8000e10:	4613      	mov	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	3b41      	subs	r3, #65	@ 0x41
 8000e18:	221f      	movs	r2, #31
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43da      	mvns	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	400a      	ands	r2, r1
 8000e26:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	4618      	mov	r0, r3
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	4413      	add	r3, r2
 8000e40:	3b41      	subs	r3, #65	@ 0x41
 8000e42:	fa00 f203 	lsl.w	r2, r0, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e4e:	4b29      	ldr	r3, [pc, #164]	@ (8000ef4 <HAL_ADC_ConfigChannel+0x250>)
 8000e50:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a28      	ldr	r2, [pc, #160]	@ (8000ef8 <HAL_ADC_ConfigChannel+0x254>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d10f      	bne.n	8000e7c <HAL_ADC_ConfigChannel+0x1d8>
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b12      	cmp	r3, #18
 8000e62:	d10b      	bne.n	8000e7c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a1d      	ldr	r2, [pc, #116]	@ (8000ef8 <HAL_ADC_ConfigChannel+0x254>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d12b      	bne.n	8000ede <HAL_ADC_ConfigChannel+0x23a>
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000efc <HAL_ADC_ConfigChannel+0x258>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d003      	beq.n	8000e98 <HAL_ADC_ConfigChannel+0x1f4>
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b11      	cmp	r3, #17
 8000e96:	d122      	bne.n	8000ede <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a11      	ldr	r2, [pc, #68]	@ (8000efc <HAL_ADC_ConfigChannel+0x258>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d111      	bne.n	8000ede <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000eba:	4b11      	ldr	r3, [pc, #68]	@ (8000f00 <HAL_ADC_ConfigChannel+0x25c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a11      	ldr	r2, [pc, #68]	@ (8000f04 <HAL_ADC_ConfigChannel+0x260>)
 8000ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec4:	0c9a      	lsrs	r2, r3, #18
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000ed0:	e002      	b.n	8000ed8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1f9      	bne.n	8000ed2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	40012300 	.word	0x40012300
 8000ef8:	40012000 	.word	0x40012000
 8000efc:	10000012 	.word	0x10000012
 8000f00:	20000000 	.word	0x20000000
 8000f04:	431bde83 	.word	0x431bde83

08000f08 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f10:	4b79      	ldr	r3, [pc, #484]	@ (80010f8 <ADC_Init+0x1f0>)
 8000f12:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	685a      	ldr	r2, [r3, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	6859      	ldr	r1, [r3, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	691b      	ldr	r3, [r3, #16]
 8000f48:	021a      	lsls	r2, r3, #8
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	685a      	ldr	r2, [r3, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8000f60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	6859      	ldr	r1, [r3, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689a      	ldr	r2, [r3, #8]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	430a      	orrs	r2, r1
 8000f72:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	689a      	ldr	r2, [r3, #8]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000f82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	6899      	ldr	r1, [r3, #8]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68da      	ldr	r2, [r3, #12]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	430a      	orrs	r2, r1
 8000f94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f9a:	4a58      	ldr	r2, [pc, #352]	@ (80010fc <ADC_Init+0x1f4>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d022      	beq.n	8000fe6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000fae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6899      	ldr	r1, [r3, #8]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000fd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	6899      	ldr	r1, [r3, #8]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	e00f      	b.n	8001006 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000ff4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001004:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f022 0202 	bic.w	r2, r2, #2
 8001014:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6899      	ldr	r1, [r3, #8]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	7e1b      	ldrb	r3, [r3, #24]
 8001020:	005a      	lsls	r2, r3, #1
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	430a      	orrs	r2, r1
 8001028:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d01b      	beq.n	800106c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	685a      	ldr	r2, [r3, #4]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001042:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001052:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	6859      	ldr	r1, [r3, #4]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800105e:	3b01      	subs	r3, #1
 8001060:	035a      	lsls	r2, r3, #13
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	430a      	orrs	r2, r1
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	e007      	b.n	800107c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800107a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800108a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	3b01      	subs	r3, #1
 8001098:	051a      	lsls	r2, r3, #20
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	430a      	orrs	r2, r1
 80010a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80010b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	6899      	ldr	r1, [r3, #8]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80010be:	025a      	lsls	r2, r3, #9
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	430a      	orrs	r2, r1
 80010c6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80010d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	6899      	ldr	r1, [r3, #8]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	029a      	lsls	r2, r3, #10
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	430a      	orrs	r2, r1
 80010ea:	609a      	str	r2, [r3, #8]
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	40012300 	.word	0x40012300
 80010fc:	0f000001 	.word	0x0f000001

08001100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001110:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800111c:	4013      	ands	r3, r2
 800111e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001128:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800112c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001132:	4a04      	ldr	r2, [pc, #16]	@ (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	60d3      	str	r3, [r2, #12]
}
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800114c:	4b04      	ldr	r3, [pc, #16]	@ (8001160 <__NVIC_GetPriorityGrouping+0x18>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	0a1b      	lsrs	r3, r3, #8
 8001152:	f003 0307 	and.w	r3, r3, #7
}
 8001156:	4618      	mov	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	db0a      	blt.n	800118e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	b2da      	uxtb	r2, r3
 800117c:	490c      	ldr	r1, [pc, #48]	@ (80011b0 <__NVIC_SetPriority+0x4c>)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	0112      	lsls	r2, r2, #4
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	440b      	add	r3, r1
 8001188:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800118c:	e00a      	b.n	80011a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4908      	ldr	r1, [pc, #32]	@ (80011b4 <__NVIC_SetPriority+0x50>)
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	3b04      	subs	r3, #4
 800119c:	0112      	lsls	r2, r2, #4
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	440b      	add	r3, r1
 80011a2:	761a      	strb	r2, [r3, #24]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000e100 	.word	0xe000e100
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b089      	sub	sp, #36	@ 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f1c3 0307 	rsb	r3, r3, #7
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	bf28      	it	cs
 80011d6:	2304      	movcs	r3, #4
 80011d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3304      	adds	r3, #4
 80011de:	2b06      	cmp	r3, #6
 80011e0:	d902      	bls.n	80011e8 <NVIC_EncodePriority+0x30>
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3b03      	subs	r3, #3
 80011e6:	e000      	b.n	80011ea <NVIC_EncodePriority+0x32>
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	f04f 32ff 	mov.w	r2, #4294967295
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43da      	mvns	r2, r3
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	401a      	ands	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001200:	f04f 31ff 	mov.w	r1, #4294967295
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	fa01 f303 	lsl.w	r3, r1, r3
 800120a:	43d9      	mvns	r1, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	4313      	orrs	r3, r2
         );
}
 8001212:	4618      	mov	r0, r3
 8001214:	3724      	adds	r7, #36	@ 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001230:	d301      	bcc.n	8001236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001232:	2301      	movs	r3, #1
 8001234:	e00f      	b.n	8001256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001236:	4a0a      	ldr	r2, [pc, #40]	@ (8001260 <SysTick_Config+0x40>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123e:	210f      	movs	r1, #15
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f7ff ff8e 	bl	8001164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001248:	4b05      	ldr	r3, [pc, #20]	@ (8001260 <SysTick_Config+0x40>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124e:	4b04      	ldr	r3, [pc, #16]	@ (8001260 <SysTick_Config+0x40>)
 8001250:	2207      	movs	r2, #7
 8001252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	e000e010 	.word	0xe000e010

08001264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ff47 	bl	8001100 <__NVIC_SetPriorityGrouping>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127a:	b580      	push	{r7, lr}
 800127c:	b086      	sub	sp, #24
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800128c:	f7ff ff5c 	bl	8001148 <__NVIC_GetPriorityGrouping>
 8001290:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	68b9      	ldr	r1, [r7, #8]
 8001296:	6978      	ldr	r0, [r7, #20]
 8001298:	f7ff ff8e 	bl	80011b8 <NVIC_EncodePriority>
 800129c:	4602      	mov	r2, r0
 800129e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff5d 	bl	8001164 <__NVIC_SetPriority>
}
 80012aa:	bf00      	nop
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ffb0 	bl	8001220 <SysTick_Config>
 80012c0:	4603      	mov	r3, r0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b089      	sub	sp, #36	@ 0x24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012de:	2300      	movs	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
 80012e6:	e159      	b.n	800159c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012e8:	2201      	movs	r2, #1
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	429a      	cmp	r2, r3
 8001302:	f040 8148 	bne.w	8001596 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	2b01      	cmp	r3, #1
 8001310:	d005      	beq.n	800131e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800131a:	2b02      	cmp	r3, #2
 800131c:	d130      	bne.n	8001380 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	2203      	movs	r2, #3
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	68da      	ldr	r2, [r3, #12]
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001354:	2201      	movs	r2, #1
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	091b      	lsrs	r3, r3, #4
 800136a:	f003 0201 	and.w	r2, r3, #1
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	2b03      	cmp	r3, #3
 800138a:	d017      	beq.n	80013bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	2203      	movs	r2, #3
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d123      	bne.n	8001410 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	08da      	lsrs	r2, r3, #3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3208      	adds	r2, #8
 80013d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	220f      	movs	r2, #15
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	691a      	ldr	r2, [r3, #16]
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	08da      	lsrs	r2, r3, #3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3208      	adds	r2, #8
 800140a:	69b9      	ldr	r1, [r7, #24]
 800140c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 0203 	and.w	r2, r3, #3
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 80a2 	beq.w	8001596 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b57      	ldr	r3, [pc, #348]	@ (80015b4 <HAL_GPIO_Init+0x2e8>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145a:	4a56      	ldr	r2, [pc, #344]	@ (80015b4 <HAL_GPIO_Init+0x2e8>)
 800145c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001460:	6453      	str	r3, [r2, #68]	@ 0x44
 8001462:	4b54      	ldr	r3, [pc, #336]	@ (80015b4 <HAL_GPIO_Init+0x2e8>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001466:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800146e:	4a52      	ldr	r2, [pc, #328]	@ (80015b8 <HAL_GPIO_Init+0x2ec>)
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	089b      	lsrs	r3, r3, #2
 8001474:	3302      	adds	r3, #2
 8001476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	220f      	movs	r2, #15
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a49      	ldr	r2, [pc, #292]	@ (80015bc <HAL_GPIO_Init+0x2f0>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d019      	beq.n	80014ce <HAL_GPIO_Init+0x202>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a48      	ldr	r2, [pc, #288]	@ (80015c0 <HAL_GPIO_Init+0x2f4>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d013      	beq.n	80014ca <HAL_GPIO_Init+0x1fe>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a47      	ldr	r2, [pc, #284]	@ (80015c4 <HAL_GPIO_Init+0x2f8>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d00d      	beq.n	80014c6 <HAL_GPIO_Init+0x1fa>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a46      	ldr	r2, [pc, #280]	@ (80015c8 <HAL_GPIO_Init+0x2fc>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d007      	beq.n	80014c2 <HAL_GPIO_Init+0x1f6>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a45      	ldr	r2, [pc, #276]	@ (80015cc <HAL_GPIO_Init+0x300>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d101      	bne.n	80014be <HAL_GPIO_Init+0x1f2>
 80014ba:	2304      	movs	r3, #4
 80014bc:	e008      	b.n	80014d0 <HAL_GPIO_Init+0x204>
 80014be:	2307      	movs	r3, #7
 80014c0:	e006      	b.n	80014d0 <HAL_GPIO_Init+0x204>
 80014c2:	2303      	movs	r3, #3
 80014c4:	e004      	b.n	80014d0 <HAL_GPIO_Init+0x204>
 80014c6:	2302      	movs	r3, #2
 80014c8:	e002      	b.n	80014d0 <HAL_GPIO_Init+0x204>
 80014ca:	2301      	movs	r3, #1
 80014cc:	e000      	b.n	80014d0 <HAL_GPIO_Init+0x204>
 80014ce:	2300      	movs	r3, #0
 80014d0:	69fa      	ldr	r2, [r7, #28]
 80014d2:	f002 0203 	and.w	r2, r2, #3
 80014d6:	0092      	lsls	r2, r2, #2
 80014d8:	4093      	lsls	r3, r2
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014e0:	4935      	ldr	r1, [pc, #212]	@ (80015b8 <HAL_GPIO_Init+0x2ec>)
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	089b      	lsrs	r3, r3, #2
 80014e6:	3302      	adds	r3, #2
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ee:	4b38      	ldr	r3, [pc, #224]	@ (80015d0 <HAL_GPIO_Init+0x304>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	43db      	mvns	r3, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4013      	ands	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001512:	4a2f      	ldr	r2, [pc, #188]	@ (80015d0 <HAL_GPIO_Init+0x304>)
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001518:	4b2d      	ldr	r3, [pc, #180]	@ (80015d0 <HAL_GPIO_Init+0x304>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800153c:	4a24      	ldr	r2, [pc, #144]	@ (80015d0 <HAL_GPIO_Init+0x304>)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001542:	4b23      	ldr	r3, [pc, #140]	@ (80015d0 <HAL_GPIO_Init+0x304>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	43db      	mvns	r3, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4013      	ands	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001566:	4a1a      	ldr	r2, [pc, #104]	@ (80015d0 <HAL_GPIO_Init+0x304>)
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800156c:	4b18      	ldr	r3, [pc, #96]	@ (80015d0 <HAL_GPIO_Init+0x304>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	43db      	mvns	r3, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4013      	ands	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001590:	4a0f      	ldr	r2, [pc, #60]	@ (80015d0 <HAL_GPIO_Init+0x304>)
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3301      	adds	r3, #1
 800159a:	61fb      	str	r3, [r7, #28]
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	2b0f      	cmp	r3, #15
 80015a0:	f67f aea2 	bls.w	80012e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015a4:	bf00      	nop
 80015a6:	bf00      	nop
 80015a8:	3724      	adds	r7, #36	@ 0x24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40013800 	.word	0x40013800
 80015bc:	40020000 	.word	0x40020000
 80015c0:	40020400 	.word	0x40020400
 80015c4:	40020800 	.word	0x40020800
 80015c8:	40020c00 	.word	0x40020c00
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40013c00 	.word	0x40013c00

080015d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	807b      	strh	r3, [r7, #2]
 80015e0:	4613      	mov	r3, r2
 80015e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015e4:	787b      	ldrb	r3, [r7, #1]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ea:	887a      	ldrh	r2, [r7, #2]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015f0:	e003      	b.n	80015fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015f2:	887b      	ldrh	r3, [r7, #2]
 80015f4:	041a      	lsls	r2, r3, #16
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	619a      	str	r2, [r3, #24]
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f103 0208 	add.w	r2, r3, #8
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f04f 32ff 	mov.w	r2, #4294967295
 800161e:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f103 0208 	add.w	r2, r3, #8
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f103 0208 	add.w	r2, r3, #8
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001676:	d103      	bne.n	8001680 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	e00c      	b.n	800169a <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3308      	adds	r3, #8
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	e002      	b.n	800168e <vListInsert+0x2e>
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68ba      	ldr	r2, [r7, #8]
 8001696:	429a      	cmp	r2, r3
 8001698:	d2f6      	bcs.n	8001688 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	1c5a      	adds	r2, r3, #1
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 80016c6:	bf00      	nop
 80016c8:	3714      	adds	r7, #20
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80016d2:	b480      	push	{r7}
 80016d4:	b085      	sub	sp, #20
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6892      	ldr	r2, [r2, #8]
 80016e8:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	6852      	ldr	r2, [r2, #4]
 80016f2:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d103      	bne.n	8001706 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	1e5a      	subs	r2, r3, #1
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001732:	2301      	movs	r3, #1
 8001734:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d10b      	bne.n	8001758 <xQueueGenericReset+0x30>
    __asm volatile
 8001740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001744:	f383 8811 	msr	BASEPRI, r3
 8001748:	f3bf 8f6f 	isb	sy
 800174c:	f3bf 8f4f 	dsb	sy
 8001750:	60fb      	str	r3, [r7, #12]
}
 8001752:	bf00      	nop
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d05d      	beq.n	800181a <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8001762:	2b00      	cmp	r3, #0
 8001764:	d059      	beq.n	800181a <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800176e:	2100      	movs	r1, #0
 8001770:	fba3 2302 	umull	r2, r3, r3, r2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d000      	beq.n	800177a <xQueueGenericReset+0x52>
 8001778:	2101      	movs	r1, #1
 800177a:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800177c:	2b00      	cmp	r3, #0
 800177e:	d14c      	bne.n	800181a <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8001780:	f002 f8a0 	bl	80038c4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800178c:	6939      	ldr	r1, [r7, #16]
 800178e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001790:	fb01 f303 	mul.w	r3, r1, r3
 8001794:	441a      	add	r2, r3
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	2200      	movs	r2, #0
 800179e:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017b0:	3b01      	subs	r3, #1
 80017b2:	6939      	ldr	r1, [r7, #16]
 80017b4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80017b6:	fb01 f303 	mul.w	r3, r1, r3
 80017ba:	441a      	add	r2, r3
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	22ff      	movs	r2, #255	@ 0xff
 80017c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	22ff      	movs	r2, #255	@ 0xff
 80017cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d114      	bne.n	8001800 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d01a      	beq.n	8001814 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	3310      	adds	r3, #16
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 ffee 	bl	80027c4 <xTaskRemoveFromEventList>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d012      	beq.n	8001814 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80017ee:	4b16      	ldr	r3, [pc, #88]	@ (8001848 <xQueueGenericReset+0x120>)
 80017f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	f3bf 8f4f 	dsb	sy
 80017fa:	f3bf 8f6f 	isb	sy
 80017fe:	e009      	b.n	8001814 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	3310      	adds	r3, #16
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fefe 	bl	8001606 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	3324      	adds	r3, #36	@ 0x24
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fef9 	bl	8001606 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001814:	f002 f888 	bl	8003928 <vPortExitCritical>
 8001818:	e001      	b.n	800181e <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10b      	bne.n	800183c <xQueueGenericReset+0x114>
    __asm volatile
 8001824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001828:	f383 8811 	msr	BASEPRI, r3
 800182c:	f3bf 8f6f 	isb	sy
 8001830:	f3bf 8f4f 	dsb	sy
 8001834:	60bb      	str	r3, [r7, #8]
}
 8001836:	bf00      	nop
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 800183c:	697b      	ldr	r3, [r7, #20]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	e000ed04 	.word	0xe000ed04

0800184c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800184c:	b580      	push	{r7, lr}
 800184e:	b08a      	sub	sp, #40	@ 0x28
 8001850:	af02      	add	r7, sp, #8
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	4613      	mov	r3, r2
 8001858:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d02e      	beq.n	80018c2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001864:	2100      	movs	r1, #0
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	fba3 2302 	umull	r2, r3, r3, r2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d000      	beq.n	8001874 <xQueueGenericCreate+0x28>
 8001872:	2101      	movs	r1, #1
 8001874:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001876:	2b00      	cmp	r3, #0
 8001878:	d123      	bne.n	80018c2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	68ba      	ldr	r2, [r7, #8]
 800187e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001882:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8001886:	d81c      	bhi.n	80018c2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	fb02 f303 	mul.w	r3, r2, r3
 8001890:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	3350      	adds	r3, #80	@ 0x50
 8001896:	4618      	mov	r0, r3
 8001898:	f002 f8f8 	bl	8003a8c <pvPortMalloc>
 800189c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d01d      	beq.n	80018e0 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	3350      	adds	r3, #80	@ 0x50
 80018ac:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80018ae:	79fa      	ldrb	r2, [r7, #7]
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	4613      	mov	r3, r2
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	68b9      	ldr	r1, [r7, #8]
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f000 f815 	bl	80018ea <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80018c0:	e00e      	b.n	80018e0 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d10b      	bne.n	80018e0 <xQueueGenericCreate+0x94>
    __asm volatile
 80018c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018cc:	f383 8811 	msr	BASEPRI, r3
 80018d0:	f3bf 8f6f 	isb	sy
 80018d4:	f3bf 8f4f 	dsb	sy
 80018d8:	613b      	str	r3, [r7, #16]
}
 80018da:	bf00      	nop
 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 80018e0:	69fb      	ldr	r3, [r7, #28]
    }
 80018e2:	4618      	mov	r0, r3
 80018e4:	3720      	adds	r7, #32
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b084      	sub	sp, #16
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	60f8      	str	r0, [r7, #12]
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	607a      	str	r2, [r7, #4]
 80018f6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d103      	bne.n	8001906 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	e002      	b.n	800190c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	68ba      	ldr	r2, [r7, #8]
 8001916:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001918:	2101      	movs	r1, #1
 800191a:	69b8      	ldr	r0, [r7, #24]
 800191c:	f7ff ff04 	bl	8001728 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	78fa      	ldrb	r2, [r7, #3]
 8001924:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001928:	bf00      	nop
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08c      	sub	sp, #48	@ 0x30
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800193c:	2300      	movs	r3, #0
 800193e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10b      	bne.n	8001962 <xQueueReceive+0x32>
    __asm volatile
 800194a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800194e:	f383 8811 	msr	BASEPRI, r3
 8001952:	f3bf 8f6f 	isb	sy
 8001956:	f3bf 8f4f 	dsb	sy
 800195a:	623b      	str	r3, [r7, #32]
}
 800195c:	bf00      	nop
 800195e:	bf00      	nop
 8001960:	e7fd      	b.n	800195e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d103      	bne.n	8001970 <xQueueReceive+0x40>
 8001968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800196a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <xQueueReceive+0x44>
 8001970:	2301      	movs	r3, #1
 8001972:	e000      	b.n	8001976 <xQueueReceive+0x46>
 8001974:	2300      	movs	r3, #0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10b      	bne.n	8001992 <xQueueReceive+0x62>
    __asm volatile
 800197a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800197e:	f383 8811 	msr	BASEPRI, r3
 8001982:	f3bf 8f6f 	isb	sy
 8001986:	f3bf 8f4f 	dsb	sy
 800198a:	61fb      	str	r3, [r7, #28]
}
 800198c:	bf00      	nop
 800198e:	bf00      	nop
 8001990:	e7fd      	b.n	800198e <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001992:	f001 f92d 	bl	8002bf0 <xTaskGetSchedulerState>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d102      	bne.n	80019a2 <xQueueReceive+0x72>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <xQueueReceive+0x76>
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <xQueueReceive+0x78>
 80019a6:	2300      	movs	r3, #0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10b      	bne.n	80019c4 <xQueueReceive+0x94>
    __asm volatile
 80019ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019b0:	f383 8811 	msr	BASEPRI, r3
 80019b4:	f3bf 8f6f 	isb	sy
 80019b8:	f3bf 8f4f 	dsb	sy
 80019bc:	61bb      	str	r3, [r7, #24]
}
 80019be:	bf00      	nop
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80019c4:	f001 ff7e 	bl	80038c4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80019c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019cc:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80019ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d01f      	beq.n	8001a14 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80019d4:	68b9      	ldr	r1, [r7, #8]
 80019d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80019d8:	f000 f88c 	bl	8001af4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80019dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019de:	1e5a      	subs	r2, r3, #1
 80019e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019e2:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80019e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d00f      	beq.n	8001a0c <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80019ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ee:	3310      	adds	r3, #16
 80019f0:	4618      	mov	r0, r3
 80019f2:	f000 fee7 	bl	80027c4 <xTaskRemoveFromEventList>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d007      	beq.n	8001a0c <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80019fc:	4b3c      	ldr	r3, [pc, #240]	@ (8001af0 <xQueueReceive+0x1c0>)
 80019fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	f3bf 8f4f 	dsb	sy
 8001a08:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001a0c:	f001 ff8c 	bl	8003928 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e069      	b.n	8001ae8 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d103      	bne.n	8001a22 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001a1a:	f001 ff85 	bl	8003928 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e062      	b.n	8001ae8 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d106      	bne.n	8001a36 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001a28:	f107 0310 	add.w	r3, r7, #16
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f000 ffa3 	bl	8002978 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001a32:	2301      	movs	r3, #1
 8001a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001a36:	f001 ff77 	bl	8003928 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001a3a:	f000 fbb9 	bl	80021b0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001a3e:	f001 ff41 	bl	80038c4 <vPortEnterCritical>
 8001a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001a48:	b25b      	sxtb	r3, r3
 8001a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a4e:	d103      	bne.n	8001a58 <xQueueReceive+0x128>
 8001a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001a5e:	b25b      	sxtb	r3, r3
 8001a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a64:	d103      	bne.n	8001a6e <xQueueReceive+0x13e>
 8001a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001a6e:	f001 ff5b 	bl	8003928 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001a72:	1d3a      	adds	r2, r7, #4
 8001a74:	f107 0310 	add.w	r3, r7, #16
 8001a78:	4611      	mov	r1, r2
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 ff92 	bl	80029a4 <xTaskCheckForTimeOut>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d123      	bne.n	8001ace <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001a86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001a88:	f000 f8ac 	bl	8001be4 <prvIsQueueEmpty>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d017      	beq.n	8001ac2 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a94:	3324      	adds	r3, #36	@ 0x24
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	4611      	mov	r1, r2
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 fe26 	bl	80026ec <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001aa0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001aa2:	f000 f84d 	bl	8001b40 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001aa6:	f000 fb91 	bl	80021cc <xTaskResumeAll>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d189      	bne.n	80019c4 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8001af0 <xQueueReceive+0x1c0>)
 8001ab2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	f3bf 8f4f 	dsb	sy
 8001abc:	f3bf 8f6f 	isb	sy
 8001ac0:	e780      	b.n	80019c4 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001ac2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001ac4:	f000 f83c 	bl	8001b40 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001ac8:	f000 fb80 	bl	80021cc <xTaskResumeAll>
 8001acc:	e77a      	b.n	80019c4 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001ace:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001ad0:	f000 f836 	bl	8001b40 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001ad4:	f000 fb7a 	bl	80021cc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001ad8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001ada:	f000 f883 	bl	8001be4 <prvIsQueueEmpty>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f43f af6f 	beq.w	80019c4 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8001ae6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3730      	adds	r7, #48	@ 0x30
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	e000ed04 	.word	0xe000ed04

08001af4 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d018      	beq.n	8001b38 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	441a      	add	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d303      	bcc.n	8001b28 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68d9      	ldr	r1, [r3, #12]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b30:	461a      	mov	r2, r3
 8001b32:	6838      	ldr	r0, [r7, #0]
 8001b34:	f002 fbb9 	bl	80042aa <memcpy>
    }
}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001b48:	f001 febc 	bl	80038c4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001b52:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001b54:	e011      	b.n	8001b7a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d012      	beq.n	8001b84 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3324      	adds	r3, #36	@ 0x24
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 fe2e 	bl	80027c4 <xTaskRemoveFromEventList>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8001b6e:	f000 ff81 	bl	8002a74 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	3b01      	subs	r3, #1
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	dce9      	bgt.n	8001b56 <prvUnlockQueue+0x16>
 8001b82:	e000      	b.n	8001b86 <prvUnlockQueue+0x46>
                    break;
 8001b84:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	22ff      	movs	r2, #255	@ 0xff
 8001b8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8001b8e:	f001 fecb 	bl	8003928 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001b92:	f001 fe97 	bl	80038c4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001b9c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001b9e:	e011      	b.n	8001bc4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d012      	beq.n	8001bce <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3310      	adds	r3, #16
 8001bac:	4618      	mov	r0, r3
 8001bae:	f000 fe09 	bl	80027c4 <xTaskRemoveFromEventList>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001bb8:	f000 ff5c 	bl	8002a74 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001bbc:	7bbb      	ldrb	r3, [r7, #14]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001bc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	dce9      	bgt.n	8001ba0 <prvUnlockQueue+0x60>
 8001bcc:	e000      	b.n	8001bd0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001bce:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	22ff      	movs	r2, #255	@ 0xff
 8001bd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8001bd8:	f001 fea6 	bl	8003928 <vPortExitCritical>
}
 8001bdc:	bf00      	nop
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001bec:	f001 fe6a 	bl	80038c4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d102      	bne.n	8001bfe <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	e001      	b.n	8001c02 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001c02:	f001 fe91 	bl	8003928 <vPortExitCritical>

    return xReturn;
 8001c06:	68fb      	ldr	r3, [r7, #12]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8001c10:	b480      	push	{r7}
 8001c12:	b087      	sub	sp, #28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10b      	bne.n	8001c3c <vQueueAddToRegistry+0x2c>
    __asm volatile
 8001c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c28:	f383 8811 	msr	BASEPRI, r3
 8001c2c:	f3bf 8f6f 	isb	sy
 8001c30:	f3bf 8f4f 	dsb	sy
 8001c34:	60fb      	str	r3, [r7, #12]
}
 8001c36:	bf00      	nop
 8001c38:	bf00      	nop
 8001c3a:	e7fd      	b.n	8001c38 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d024      	beq.n	8001c8c <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	e01e      	b.n	8001c86 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001c48:	4a18      	ldr	r2, [pc, #96]	@ (8001cac <vQueueAddToRegistry+0x9c>)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	4413      	add	r3, r2
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d105      	bne.n	8001c64 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	4a13      	ldr	r2, [pc, #76]	@ (8001cac <vQueueAddToRegistry+0x9c>)
 8001c5e:	4413      	add	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
                    break;
 8001c62:	e013      	b.n	8001c8c <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10a      	bne.n	8001c80 <vQueueAddToRegistry+0x70>
 8001c6a:	4a10      	ldr	r2, [pc, #64]	@ (8001cac <vQueueAddToRegistry+0x9c>)
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d104      	bne.n	8001c80 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	4a0c      	ldr	r2, [pc, #48]	@ (8001cac <vQueueAddToRegistry+0x9c>)
 8001c7c:	4413      	add	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	3301      	adds	r3, #1
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	2b07      	cmp	r3, #7
 8001c8a:	d9dd      	bls.n	8001c48 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d005      	beq.n	8001c9e <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 8001c9e:	bf00      	nop
 8001ca0:	371c      	adds	r7, #28
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	200000ec 	.word	0x200000ec

08001cb0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001cc0:	f001 fe00 	bl	80038c4 <vPortEnterCritical>
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001cca:	b25b      	sxtb	r3, r3
 8001ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd0:	d103      	bne.n	8001cda <vQueueWaitForMessageRestricted+0x2a>
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001ce0:	b25b      	sxtb	r3, r3
 8001ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce6:	d103      	bne.n	8001cf0 <vQueueWaitForMessageRestricted+0x40>
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001cf0:	f001 fe1a 	bl	8003928 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d106      	bne.n	8001d0a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	3324      	adds	r3, #36	@ 0x24
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	68b9      	ldr	r1, [r7, #8]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 fd17 	bl	8002738 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001d0a:	6978      	ldr	r0, [r7, #20]
 8001d0c:	f7ff ff18 	bl	8001b40 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 8001d10:	bf00      	nop
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08a      	sub	sp, #40	@ 0x28
 8001d1c:	af04      	add	r7, sp, #16
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
 8001d24:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f001 feae 	bl	8003a8c <pvPortMalloc>
 8001d30:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d013      	beq.n	8001d60 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8001d38:	2058      	movs	r0, #88	@ 0x58
 8001d3a:	f001 fea7 	bl	8003a8c <pvPortMalloc>
 8001d3e:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d008      	beq.n	8001d58 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001d46:	2258      	movs	r2, #88	@ 0x58
 8001d48:	2100      	movs	r1, #0
 8001d4a:	6978      	ldr	r0, [r7, #20]
 8001d4c:	f002 fa31 	bl	80041b2 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d56:	e005      	b.n	8001d64 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001d58:	6938      	ldr	r0, [r7, #16]
 8001d5a:	f001 ffc9 	bl	8003cf0 <vPortFree>
 8001d5e:	e001      	b.n	8001d64 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00d      	beq.n	8001d86 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	9303      	str	r3, [sp, #12]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	9302      	str	r3, [sp, #8]
 8001d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d74:	9301      	str	r3, [sp, #4]
 8001d76:	6a3b      	ldr	r3, [r7, #32]
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	68b9      	ldr	r1, [r7, #8]
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f000 f828 	bl	8001dd6 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8001d86:	697b      	ldr	r3, [r7, #20]
    }
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b088      	sub	sp, #32
 8001d94:	af02      	add	r7, sp, #8
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
 8001d9c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da0:	9301      	str	r3, [sp, #4]
 8001da2:	6a3b      	ldr	r3, [r7, #32]
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	68b9      	ldr	r1, [r7, #8]
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f7ff ffb3 	bl	8001d18 <prvCreateTask>
 8001db2:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d005      	beq.n	8001dc6 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8001dba:	6938      	ldr	r0, [r7, #16]
 8001dbc:	f000 f89c 	bl	8001ef8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	e002      	b.n	8001dcc <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dca:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8001dcc:	697b      	ldr	r3, [r7, #20]
    }
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b088      	sub	sp, #32
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	60f8      	str	r0, [r7, #12]
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	607a      	str	r2, [r7, #4]
 8001de2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8001de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001de6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	461a      	mov	r2, r3
 8001dee:	21a5      	movs	r1, #165	@ 0xa5
 8001df0:	f002 f9df 	bl	80041b2 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8001df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001df6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	f023 0307 	bic.w	r3, r3, #7
 8001e0c:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00b      	beq.n	8001e30 <prvInitialiseNewTask+0x5a>
    __asm volatile
 8001e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e1c:	f383 8811 	msr	BASEPRI, r3
 8001e20:	f3bf 8f6f 	isb	sy
 8001e24:	f3bf 8f4f 	dsb	sy
 8001e28:	617b      	str	r3, [r7, #20]
}
 8001e2a:	bf00      	nop
 8001e2c:	bf00      	nop
 8001e2e:	e7fd      	b.n	8001e2c <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d01e      	beq.n	8001e74 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
 8001e3a:	e012      	b.n	8001e62 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001e3c:	68ba      	ldr	r2, [r7, #8]
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	4413      	add	r3, r2
 8001e42:	7819      	ldrb	r1, [r3, #0]
 8001e44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	4413      	add	r3, r2
 8001e4a:	3334      	adds	r3, #52	@ 0x34
 8001e4c:	460a      	mov	r2, r1
 8001e4e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001e50:	68ba      	ldr	r2, [r7, #8]
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	4413      	add	r3, r2
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d006      	beq.n	8001e6a <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	61fb      	str	r3, [r7, #28]
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	2b09      	cmp	r3, #9
 8001e66:	d9e9      	bls.n	8001e3c <prvInitialiseNewTask+0x66>
 8001e68:	e000      	b.n	8001e6c <prvInitialiseNewTask+0x96>
            {
                break;
 8001e6a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8001e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d90b      	bls.n	8001e92 <prvInitialiseNewTask+0xbc>
    __asm volatile
 8001e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e7e:	f383 8811 	msr	BASEPRI, r3
 8001e82:	f3bf 8f6f 	isb	sy
 8001e86:	f3bf 8f4f 	dsb	sy
 8001e8a:	613b      	str	r3, [r7, #16]
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	e7fd      	b.n	8001e8e <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d901      	bls.n	8001e9c <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001e98:	2304      	movs	r3, #4
 8001e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ea0:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ea4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ea6:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eaa:	3304      	adds	r3, #4
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fbca 	bl	8001646 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eb4:	3318      	adds	r3, #24
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fbc5 	bl	8001646 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ebe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ec0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8001ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ec4:	f1c3 0205 	rsb	r2, r3, #5
 8001ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eca:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ece:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ed0:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	68f9      	ldr	r1, [r7, #12]
 8001ed6:	69b8      	ldr	r0, [r7, #24]
 8001ed8:	f001 fb76 	bl	80035c8 <pxPortInitialiseStack>
 8001edc:	4602      	mov	r2, r0
 8001ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ee0:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8001ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001eec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001eee:	bf00      	nop
 8001ef0:	3720      	adds	r7, #32
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8001f00:	f001 fce0 	bl	80038c4 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8001f04:	4b41      	ldr	r3, [pc, #260]	@ (800200c <prvAddNewTaskToReadyList+0x114>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	4a40      	ldr	r2, [pc, #256]	@ (800200c <prvAddNewTaskToReadyList+0x114>)
 8001f0c:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8001f0e:	4b40      	ldr	r3, [pc, #256]	@ (8002010 <prvAddNewTaskToReadyList+0x118>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d109      	bne.n	8001f2a <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8001f16:	4a3e      	ldr	r2, [pc, #248]	@ (8002010 <prvAddNewTaskToReadyList+0x118>)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001f1c:	4b3b      	ldr	r3, [pc, #236]	@ (800200c <prvAddNewTaskToReadyList+0x114>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d110      	bne.n	8001f46 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8001f24:	f000 fdca 	bl	8002abc <prvInitialiseTaskLists>
 8001f28:	e00d      	b.n	8001f46 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8001f2a:	4b3a      	ldr	r3, [pc, #232]	@ (8002014 <prvAddNewTaskToReadyList+0x11c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d109      	bne.n	8001f46 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001f32:	4b37      	ldr	r3, [pc, #220]	@ (8002010 <prvAddNewTaskToReadyList+0x118>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d802      	bhi.n	8001f46 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8001f40:	4a33      	ldr	r2, [pc, #204]	@ (8002010 <prvAddNewTaskToReadyList+0x118>)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8001f46:	4b34      	ldr	r3, [pc, #208]	@ (8002018 <prvAddNewTaskToReadyList+0x120>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	4a32      	ldr	r2, [pc, #200]	@ (8002018 <prvAddNewTaskToReadyList+0x120>)
 8001f4e:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001f50:	4b31      	ldr	r3, [pc, #196]	@ (8002018 <prvAddNewTaskToReadyList+0x120>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	409a      	lsls	r2, r3
 8001f60:	4b2e      	ldr	r3, [pc, #184]	@ (800201c <prvAddNewTaskToReadyList+0x124>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	4a2d      	ldr	r2, [pc, #180]	@ (800201c <prvAddNewTaskToReadyList+0x124>)
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f6e:	492c      	ldr	r1, [pc, #176]	@ (8002020 <prvAddNewTaskToReadyList+0x128>)
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	3304      	adds	r3, #4
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	3204      	adds	r2, #4
 8001f96:	605a      	str	r2, [r3, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	1d1a      	adds	r2, r3, #4
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4a1c      	ldr	r2, [pc, #112]	@ (8002020 <prvAddNewTaskToReadyList+0x128>)
 8001fae:	441a      	add	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	615a      	str	r2, [r3, #20]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fb8:	4919      	ldr	r1, [pc, #100]	@ (8002020 <prvAddNewTaskToReadyList+0x128>)
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001fca:	1c59      	adds	r1, r3, #1
 8001fcc:	4814      	ldr	r0, [pc, #80]	@ (8002020 <prvAddNewTaskToReadyList+0x128>)
 8001fce:	4613      	mov	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4403      	add	r3, r0
 8001fd8:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8001fda:	f001 fca5 	bl	8003928 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8001fde:	4b0d      	ldr	r3, [pc, #52]	@ (8002014 <prvAddNewTaskToReadyList+0x11c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00e      	beq.n	8002004 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8002010 <prvAddNewTaskToReadyList+0x118>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d207      	bcs.n	8002004 <prvAddNewTaskToReadyList+0x10c>
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8002024 <prvAddNewTaskToReadyList+0x12c>)
 8001ff6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	f3bf 8f4f 	dsb	sy
 8002000:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002004:	bf00      	nop
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	20000204 	.word	0x20000204
 8002010:	2000012c 	.word	0x2000012c
 8002014:	20000210 	.word	0x20000210
 8002018:	20000220 	.word	0x20000220
 800201c:	2000020c 	.word	0x2000020c
 8002020:	20000130 	.word	0x20000130
 8002024:	e000ed04 	.word	0xe000ed04

08002028 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d018      	beq.n	800206c <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 800203a:	f000 f8b9 	bl	80021b0 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 800203e:	4b13      	ldr	r3, [pc, #76]	@ (800208c <vTaskDelay+0x64>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d00b      	beq.n	800205e <vTaskDelay+0x36>
    __asm volatile
 8002046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800204a:	f383 8811 	msr	BASEPRI, r3
 800204e:	f3bf 8f6f 	isb	sy
 8002052:	f3bf 8f4f 	dsb	sy
 8002056:	60bb      	str	r3, [r7, #8]
}
 8002058:	bf00      	nop
 800205a:	bf00      	nop
 800205c:	e7fd      	b.n	800205a <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800205e:	2100      	movs	r1, #0
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 ff9d 	bl	8002fa0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002066:	f000 f8b1 	bl	80021cc <xTaskResumeAll>
 800206a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d107      	bne.n	8002082 <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 8002072:	4b07      	ldr	r3, [pc, #28]	@ (8002090 <vTaskDelay+0x68>)
 8002074:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	f3bf 8f4f 	dsb	sy
 800207e:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	2000022c 	.word	0x2000022c
 8002090:	e000ed04 	.word	0xe000ed04

08002094 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08a      	sub	sp, #40	@ 0x28
 8002098:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 800209a:	2301      	movs	r3, #1
 800209c:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	e011      	b.n	80020cc <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80020a8:	4a1c      	ldr	r2, [pc, #112]	@ (800211c <prvCreateIdleTasks+0x88>)
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	4413      	add	r3, r2
 80020ae:	7819      	ldrb	r1, [r3, #0]
 80020b0:	1d3a      	adds	r2, r7, #4
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	4413      	add	r3, r2
 80020b6:	460a      	mov	r2, r1
 80020b8:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80020ba:	1d3a      	adds	r2, r7, #4
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	4413      	add	r3, r2
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d006      	beq.n	80020d4 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	3301      	adds	r3, #1
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	2b09      	cmp	r3, #9
 80020d0:	ddea      	ble.n	80020a8 <prvCreateIdleTasks+0x14>
 80020d2:	e000      	b.n	80020d6 <prvCreateIdleTasks+0x42>
        {
            break;
 80020d4:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80020d6:	2300      	movs	r3, #0
 80020d8:	61bb      	str	r3, [r7, #24]
 80020da:	e015      	b.n	8002108 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 80020dc:	4b10      	ldr	r3, [pc, #64]	@ (8002120 <prvCreateIdleTasks+0x8c>)
 80020de:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4a0f      	ldr	r2, [pc, #60]	@ (8002124 <prvCreateIdleTasks+0x90>)
 80020e6:	4413      	add	r3, r2
 80020e8:	1d39      	adds	r1, r7, #4
 80020ea:	9301      	str	r3, [sp, #4]
 80020ec:	2300      	movs	r3, #0
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	2300      	movs	r3, #0
 80020f2:	2282      	movs	r2, #130	@ 0x82
 80020f4:	6938      	ldr	r0, [r7, #16]
 80020f6:	f7ff fe4b 	bl	8001d90 <xTaskCreate>
 80020fa:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d006      	beq.n	8002110 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	3301      	adds	r3, #1
 8002106:	61bb      	str	r3, [r7, #24]
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	2b00      	cmp	r3, #0
 800210c:	dde6      	ble.n	80020dc <prvCreateIdleTasks+0x48>
 800210e:	e000      	b.n	8002112 <prvCreateIdleTasks+0x7e>
        {
            break;
 8002110:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8002112:	69fb      	ldr	r3, [r7, #28]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3720      	adds	r7, #32
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	08004e64 	.word	0x08004e64
 8002120:	08002a8d 	.word	0x08002a8d
 8002124:	20000228 	.word	0x20000228

08002128 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 800212e:	f7ff ffb1 	bl	8002094 <prvCreateIdleTasks>
 8002132:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d102      	bne.n	8002140 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 800213a:	f000 ffb3 	bl	80030a4 <xTimerCreateTimerTask>
 800213e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d116      	bne.n	8002174 <vTaskStartScheduler+0x4c>
    __asm volatile
 8002146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800214a:	f383 8811 	msr	BASEPRI, r3
 800214e:	f3bf 8f6f 	isb	sy
 8002152:	f3bf 8f4f 	dsb	sy
 8002156:	60bb      	str	r3, [r7, #8]
}
 8002158:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800215a:	4b11      	ldr	r3, [pc, #68]	@ (80021a0 <vTaskStartScheduler+0x78>)
 800215c:	f04f 32ff 	mov.w	r2, #4294967295
 8002160:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002162:	4b10      	ldr	r3, [pc, #64]	@ (80021a4 <vTaskStartScheduler+0x7c>)
 8002164:	2201      	movs	r2, #1
 8002166:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002168:	4b0f      	ldr	r3, [pc, #60]	@ (80021a8 <vTaskStartScheduler+0x80>)
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 800216e:	f001 fab9 	bl	80036e4 <xPortStartScheduler>
 8002172:	e00f      	b.n	8002194 <vTaskStartScheduler+0x6c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217a:	d10b      	bne.n	8002194 <vTaskStartScheduler+0x6c>
    __asm volatile
 800217c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002180:	f383 8811 	msr	BASEPRI, r3
 8002184:	f3bf 8f6f 	isb	sy
 8002188:	f3bf 8f4f 	dsb	sy
 800218c:	607b      	str	r3, [r7, #4]
}
 800218e:	bf00      	nop
 8002190:	bf00      	nop
 8002192:	e7fd      	b.n	8002190 <vTaskStartScheduler+0x68>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002194:	4b05      	ldr	r3, [pc, #20]	@ (80021ac <vTaskStartScheduler+0x84>)
 8002196:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8002198:	bf00      	nop
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20000224 	.word	0x20000224
 80021a4:	20000210 	.word	0x20000210
 80021a8:	20000208 	.word	0x20000208
 80021ac:	08004e7c 	.word	0x08004e7c

080021b0 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 80021b4:	4b04      	ldr	r3, [pc, #16]	@ (80021c8 <vTaskSuspendAll+0x18>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	3301      	adds	r3, #1
 80021ba:	4a03      	ldr	r2, [pc, #12]	@ (80021c8 <vTaskSuspendAll+0x18>)
 80021bc:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 80021be:	bf00      	nop
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	2000022c 	.word	0x2000022c

080021cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80021da:	f001 fb73 	bl	80038c4 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80021de:	2300      	movs	r3, #0
 80021e0:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80021e2:	4b75      	ldr	r3, [pc, #468]	@ (80023b8 <xTaskResumeAll+0x1ec>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10b      	bne.n	8002202 <xTaskResumeAll+0x36>
    __asm volatile
 80021ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021ee:	f383 8811 	msr	BASEPRI, r3
 80021f2:	f3bf 8f6f 	isb	sy
 80021f6:	f3bf 8f4f 	dsb	sy
 80021fa:	603b      	str	r3, [r7, #0]
}
 80021fc:	bf00      	nop
 80021fe:	bf00      	nop
 8002200:	e7fd      	b.n	80021fe <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8002202:	4b6d      	ldr	r3, [pc, #436]	@ (80023b8 <xTaskResumeAll+0x1ec>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	3b01      	subs	r3, #1
 8002208:	4a6b      	ldr	r2, [pc, #428]	@ (80023b8 <xTaskResumeAll+0x1ec>)
 800220a:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800220c:	4b6a      	ldr	r3, [pc, #424]	@ (80023b8 <xTaskResumeAll+0x1ec>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	f040 80ca 	bne.w	80023aa <xTaskResumeAll+0x1de>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002216:	4b69      	ldr	r3, [pc, #420]	@ (80023bc <xTaskResumeAll+0x1f0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 80c5 	beq.w	80023aa <xTaskResumeAll+0x1de>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002220:	e08e      	b.n	8002340 <xTaskResumeAll+0x174>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002222:	4b67      	ldr	r3, [pc, #412]	@ (80023c0 <xTaskResumeAll+0x1f4>)
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	69fa      	ldr	r2, [r7, #28]
 8002236:	6a12      	ldr	r2, [r2, #32]
 8002238:	609a      	str	r2, [r3, #8]
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	69fa      	ldr	r2, [r7, #28]
 8002240:	69d2      	ldr	r2, [r2, #28]
 8002242:	605a      	str	r2, [r3, #4]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	3318      	adds	r3, #24
 800224c:	429a      	cmp	r2, r3
 800224e:	d103      	bne.n	8002258 <xTaskResumeAll+0x8c>
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	6a1a      	ldr	r2, [r3, #32]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	605a      	str	r2, [r3, #4]
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	2200      	movs	r2, #0
 800225c:	629a      	str	r2, [r3, #40]	@ 0x28
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	1e5a      	subs	r2, r3, #1
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	69fa      	ldr	r2, [r7, #28]
 8002274:	68d2      	ldr	r2, [r2, #12]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	69fa      	ldr	r2, [r7, #28]
 800227e:	6892      	ldr	r2, [r2, #8]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3304      	adds	r3, #4
 800228a:	429a      	cmp	r2, r3
 800228c:	d103      	bne.n	8002296 <xTaskResumeAll+0xca>
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	2200      	movs	r2, #0
 800229a:	615a      	str	r2, [r3, #20]
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	1e5a      	subs	r2, r3, #1
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022aa:	2201      	movs	r2, #1
 80022ac:	409a      	lsls	r2, r3
 80022ae:	4b45      	ldr	r3, [pc, #276]	@ (80023c4 <xTaskResumeAll+0x1f8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	4a43      	ldr	r2, [pc, #268]	@ (80023c4 <xTaskResumeAll+0x1f8>)
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022bc:	4942      	ldr	r1, [pc, #264]	@ (80023c8 <xTaskResumeAll+0x1fc>)
 80022be:	4613      	mov	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	3304      	adds	r3, #4
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	607b      	str	r3, [r7, #4]
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	60da      	str	r2, [r3, #12]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	69fa      	ldr	r2, [r7, #28]
 80022e2:	3204      	adds	r2, #4
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	1d1a      	adds	r2, r3, #4
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	609a      	str	r2, [r3, #8]
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4a33      	ldr	r2, [pc, #204]	@ (80023c8 <xTaskResumeAll+0x1fc>)
 80022fc:	441a      	add	r2, r3
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	615a      	str	r2, [r3, #20]
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002306:	4930      	ldr	r1, [pc, #192]	@ (80023c8 <xTaskResumeAll+0x1fc>)
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	69fa      	ldr	r2, [r7, #28]
 8002316:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002318:	1c59      	adds	r1, r3, #1
 800231a:	482b      	ldr	r0, [pc, #172]	@ (80023c8 <xTaskResumeAll+0x1fc>)
 800231c:	4613      	mov	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4403      	add	r3, r0
 8002326:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800232c:	4b27      	ldr	r3, [pc, #156]	@ (80023cc <xTaskResumeAll+0x200>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002332:	429a      	cmp	r2, r3
 8002334:	d904      	bls.n	8002340 <xTaskResumeAll+0x174>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8002336:	4a26      	ldr	r2, [pc, #152]	@ (80023d0 <xTaskResumeAll+0x204>)
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	2101      	movs	r1, #1
 800233c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002340:	4b1f      	ldr	r3, [pc, #124]	@ (80023c0 <xTaskResumeAll+0x1f4>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	f47f af6c 	bne.w	8002222 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <xTaskResumeAll+0x188>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8002350:	f000 fc32 	bl	8002bb8 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002354:	4b1f      	ldr	r3, [pc, #124]	@ (80023d4 <xTaskResumeAll+0x208>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d012      	beq.n	8002386 <xTaskResumeAll+0x1ba>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8002360:	f000 f84c 	bl	80023fc <xTaskIncrementTick>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d004      	beq.n	8002374 <xTaskResumeAll+0x1a8>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800236a:	4a19      	ldr	r2, [pc, #100]	@ (80023d0 <xTaskResumeAll+0x204>)
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	2101      	movs	r1, #1
 8002370:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	3b01      	subs	r3, #1
 8002378:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1ef      	bne.n	8002360 <xTaskResumeAll+0x194>

                            xPendedTicks = 0;
 8002380:	4b14      	ldr	r3, [pc, #80]	@ (80023d4 <xTaskResumeAll+0x208>)
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8002386:	4a12      	ldr	r2, [pc, #72]	@ (80023d0 <xTaskResumeAll+0x204>)
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00b      	beq.n	80023aa <xTaskResumeAll+0x1de>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002392:	2301      	movs	r3, #1
 8002394:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8002396:	4b0d      	ldr	r3, [pc, #52]	@ (80023cc <xTaskResumeAll+0x200>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4b0f      	ldr	r3, [pc, #60]	@ (80023d8 <xTaskResumeAll+0x20c>)
 800239c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	f3bf 8f4f 	dsb	sy
 80023a6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80023aa:	f001 fabd 	bl	8003928 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 80023ae:	69bb      	ldr	r3, [r7, #24]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3720      	adds	r7, #32
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	2000022c 	.word	0x2000022c
 80023bc:	20000204 	.word	0x20000204
 80023c0:	200001c4 	.word	0x200001c4
 80023c4:	2000020c 	.word	0x2000020c
 80023c8:	20000130 	.word	0x20000130
 80023cc:	2000012c 	.word	0x2000012c
 80023d0:	20000218 	.word	0x20000218
 80023d4:	20000214 	.word	0x20000214
 80023d8:	e000ed04 	.word	0xe000ed04

080023dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80023e2:	4b05      	ldr	r3, [pc, #20]	@ (80023f8 <xTaskGetTickCount+0x1c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 80023e8:	687b      	ldr	r3, [r7, #4]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	20000208 	.word	0x20000208

080023fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08a      	sub	sp, #40	@ 0x28
 8002400:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002402:	2300      	movs	r3, #0
 8002404:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002406:	4b7f      	ldr	r3, [pc, #508]	@ (8002604 <xTaskIncrementTick+0x208>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	f040 80ef 	bne.w	80025ee <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002410:	4b7d      	ldr	r3, [pc, #500]	@ (8002608 <xTaskIncrementTick+0x20c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	3301      	adds	r3, #1
 8002416:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002418:	4a7b      	ldr	r2, [pc, #492]	@ (8002608 <xTaskIncrementTick+0x20c>)
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800241e:	6a3b      	ldr	r3, [r7, #32]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d121      	bne.n	8002468 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002424:	4b79      	ldr	r3, [pc, #484]	@ (800260c <xTaskIncrementTick+0x210>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00b      	beq.n	8002446 <xTaskIncrementTick+0x4a>
    __asm volatile
 800242e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002432:	f383 8811 	msr	BASEPRI, r3
 8002436:	f3bf 8f6f 	isb	sy
 800243a:	f3bf 8f4f 	dsb	sy
 800243e:	607b      	str	r3, [r7, #4]
}
 8002440:	bf00      	nop
 8002442:	bf00      	nop
 8002444:	e7fd      	b.n	8002442 <xTaskIncrementTick+0x46>
 8002446:	4b71      	ldr	r3, [pc, #452]	@ (800260c <xTaskIncrementTick+0x210>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	61fb      	str	r3, [r7, #28]
 800244c:	4b70      	ldr	r3, [pc, #448]	@ (8002610 <xTaskIncrementTick+0x214>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a6e      	ldr	r2, [pc, #440]	@ (800260c <xTaskIncrementTick+0x210>)
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	4a6e      	ldr	r2, [pc, #440]	@ (8002610 <xTaskIncrementTick+0x214>)
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	4b6e      	ldr	r3, [pc, #440]	@ (8002614 <xTaskIncrementTick+0x218>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	3301      	adds	r3, #1
 8002460:	4a6c      	ldr	r2, [pc, #432]	@ (8002614 <xTaskIncrementTick+0x218>)
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	f000 fba8 	bl	8002bb8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002468:	4b6b      	ldr	r3, [pc, #428]	@ (8002618 <xTaskIncrementTick+0x21c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6a3a      	ldr	r2, [r7, #32]
 800246e:	429a      	cmp	r2, r3
 8002470:	f0c0 80a8 	bcc.w	80025c4 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002474:	4b65      	ldr	r3, [pc, #404]	@ (800260c <xTaskIncrementTick+0x210>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d104      	bne.n	8002488 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800247e:	4b66      	ldr	r3, [pc, #408]	@ (8002618 <xTaskIncrementTick+0x21c>)
 8002480:	f04f 32ff 	mov.w	r2, #4294967295
 8002484:	601a      	str	r2, [r3, #0]
                    break;
 8002486:	e09d      	b.n	80025c4 <xTaskIncrementTick+0x1c8>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002488:	4b60      	ldr	r3, [pc, #384]	@ (800260c <xTaskIncrementTick+0x210>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002498:	6a3a      	ldr	r2, [r7, #32]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	429a      	cmp	r2, r3
 800249e:	d203      	bcs.n	80024a8 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80024a0:	4a5d      	ldr	r2, [pc, #372]	@ (8002618 <xTaskIncrementTick+0x21c>)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	6013      	str	r3, [r2, #0]
                        break;
 80024a6:	e08d      	b.n	80025c4 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	68d2      	ldr	r2, [r2, #12]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	6892      	ldr	r2, [r2, #8]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	3304      	adds	r3, #4
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d103      	bne.n	80024d6 <xTaskIncrementTick+0xda>
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	2200      	movs	r2, #0
 80024da:	615a      	str	r2, [r3, #20]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	1e5a      	subs	r2, r3, #1
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d01e      	beq.n	800252c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	6a12      	ldr	r2, [r2, #32]
 80024fc:	609a      	str	r2, [r3, #8]
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	69d2      	ldr	r2, [r2, #28]
 8002506:	605a      	str	r2, [r3, #4]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	3318      	adds	r3, #24
 8002510:	429a      	cmp	r2, r3
 8002512:	d103      	bne.n	800251c <xTaskIncrementTick+0x120>
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	6a1a      	ldr	r2, [r3, #32]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	605a      	str	r2, [r3, #4]
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	2200      	movs	r2, #0
 8002520:	629a      	str	r2, [r3, #40]	@ 0x28
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	1e5a      	subs	r2, r3, #1
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002530:	2201      	movs	r2, #1
 8002532:	409a      	lsls	r2, r3
 8002534:	4b39      	ldr	r3, [pc, #228]	@ (800261c <xTaskIncrementTick+0x220>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4313      	orrs	r3, r2
 800253a:	4a38      	ldr	r2, [pc, #224]	@ (800261c <xTaskIncrementTick+0x220>)
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002542:	4937      	ldr	r1, [pc, #220]	@ (8002620 <xTaskIncrementTick+0x224>)
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	3304      	adds	r3, #4
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	609a      	str	r2, [r3, #8]
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	3204      	adds	r2, #4
 800256a:	605a      	str	r2, [r3, #4]
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	1d1a      	adds	r2, r3, #4
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002578:	4613      	mov	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4a27      	ldr	r2, [pc, #156]	@ (8002620 <xTaskIncrementTick+0x224>)
 8002582:	441a      	add	r2, r3
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	615a      	str	r2, [r3, #20]
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800258c:	4924      	ldr	r1, [pc, #144]	@ (8002620 <xTaskIncrementTick+0x224>)
 800258e:	4613      	mov	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	440b      	add	r3, r1
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800259e:	1c59      	adds	r1, r3, #1
 80025a0:	481f      	ldr	r0, [pc, #124]	@ (8002620 <xTaskIncrementTick+0x224>)
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4403      	add	r3, r0
 80025ac:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002624 <xTaskIncrementTick+0x228>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b8:	429a      	cmp	r2, r3
 80025ba:	f67f af5b 	bls.w	8002474 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 80025be:	2301      	movs	r3, #1
 80025c0:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80025c2:	e757      	b.n	8002474 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80025c4:	4b17      	ldr	r3, [pc, #92]	@ (8002624 <xTaskIncrementTick+0x228>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025ca:	4915      	ldr	r1, [pc, #84]	@ (8002620 <xTaskIncrementTick+0x224>)
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d901      	bls.n	80025e0 <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 80025dc:	2301      	movs	r3, #1
 80025de:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 80025e0:	4b11      	ldr	r3, [pc, #68]	@ (8002628 <xTaskIncrementTick+0x22c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d007      	beq.n	80025f8 <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 80025e8:	2301      	movs	r3, #1
 80025ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80025ec:	e004      	b.n	80025f8 <xTaskIncrementTick+0x1fc>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80025ee:	4b0f      	ldr	r3, [pc, #60]	@ (800262c <xTaskIncrementTick+0x230>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	3301      	adds	r3, #1
 80025f4:	4a0d      	ldr	r2, [pc, #52]	@ (800262c <xTaskIncrementTick+0x230>)
 80025f6:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 80025f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3728      	adds	r7, #40	@ 0x28
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	2000022c 	.word	0x2000022c
 8002608:	20000208 	.word	0x20000208
 800260c:	200001bc 	.word	0x200001bc
 8002610:	200001c0 	.word	0x200001c0
 8002614:	2000021c 	.word	0x2000021c
 8002618:	20000224 	.word	0x20000224
 800261c:	2000020c 	.word	0x2000020c
 8002620:	20000130 	.word	0x20000130
 8002624:	2000012c 	.word	0x2000012c
 8002628:	20000218 	.word	0x20000218
 800262c:	20000214 	.word	0x20000214

08002630 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8002630:	b480      	push	{r7}
 8002632:	b087      	sub	sp, #28
 8002634:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8002636:	4b28      	ldr	r3, [pc, #160]	@ (80026d8 <vTaskSwitchContext+0xa8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 800263e:	4b27      	ldr	r3, [pc, #156]	@ (80026dc <vTaskSwitchContext+0xac>)
 8002640:	2201      	movs	r2, #1
 8002642:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8002644:	e041      	b.n	80026ca <vTaskSwitchContext+0x9a>
            xYieldPendings[ 0 ] = pdFALSE;
 8002646:	4b25      	ldr	r3, [pc, #148]	@ (80026dc <vTaskSwitchContext+0xac>)
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 800264c:	4b24      	ldr	r3, [pc, #144]	@ (80026e0 <vTaskSwitchContext+0xb0>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	fab3 f383 	clz	r3, r3
 8002658:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 800265a:	7afb      	ldrb	r3, [r7, #11]
 800265c:	f1c3 031f 	rsb	r3, r3, #31
 8002660:	617b      	str	r3, [r7, #20]
 8002662:	4920      	ldr	r1, [pc, #128]	@ (80026e4 <vTaskSwitchContext+0xb4>)
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	4613      	mov	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	440b      	add	r3, r1
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10b      	bne.n	800268e <vTaskSwitchContext+0x5e>
    __asm volatile
 8002676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800267a:	f383 8811 	msr	BASEPRI, r3
 800267e:	f3bf 8f6f 	isb	sy
 8002682:	f3bf 8f4f 	dsb	sy
 8002686:	607b      	str	r3, [r7, #4]
}
 8002688:	bf00      	nop
 800268a:	bf00      	nop
 800268c:	e7fd      	b.n	800268a <vTaskSwitchContext+0x5a>
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4a12      	ldr	r2, [pc, #72]	@ (80026e4 <vTaskSwitchContext+0xb4>)
 800269a:	4413      	add	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	605a      	str	r2, [r3, #4]
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	3308      	adds	r3, #8
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d103      	bne.n	80026bc <vTaskSwitchContext+0x8c>
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	605a      	str	r2, [r3, #4]
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	4a09      	ldr	r2, [pc, #36]	@ (80026e8 <vTaskSwitchContext+0xb8>)
 80026c4:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80026c6:	4b08      	ldr	r3, [pc, #32]	@ (80026e8 <vTaskSwitchContext+0xb8>)
 80026c8:	681b      	ldr	r3, [r3, #0]
    }
 80026ca:	bf00      	nop
 80026cc:	371c      	adds	r7, #28
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	2000022c 	.word	0x2000022c
 80026dc:	20000218 	.word	0x20000218
 80026e0:	2000020c 	.word	0x2000020c
 80026e4:	20000130 	.word	0x20000130
 80026e8:	2000012c 	.word	0x2000012c

080026ec <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10b      	bne.n	8002714 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 80026fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002700:	f383 8811 	msr	BASEPRI, r3
 8002704:	f3bf 8f6f 	isb	sy
 8002708:	f3bf 8f4f 	dsb	sy
 800270c:	60fb      	str	r3, [r7, #12]
}
 800270e:	bf00      	nop
 8002710:	bf00      	nop
 8002712:	e7fd      	b.n	8002710 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002714:	4b07      	ldr	r3, [pc, #28]	@ (8002734 <vTaskPlaceOnEventList+0x48>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	3318      	adds	r3, #24
 800271a:	4619      	mov	r1, r3
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f7fe ff9f 	bl	8001660 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002722:	2101      	movs	r1, #1
 8002724:	6838      	ldr	r0, [r7, #0]
 8002726:	f000 fc3b 	bl	8002fa0 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 800272a:	bf00      	nop
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	2000012c 	.word	0x2000012c

08002738 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10b      	bne.n	8002762 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 800274a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800274e:	f383 8811 	msr	BASEPRI, r3
 8002752:	f3bf 8f6f 	isb	sy
 8002756:	f3bf 8f4f 	dsb	sy
 800275a:	613b      	str	r3, [r7, #16]
}
 800275c:	bf00      	nop
 800275e:	bf00      	nop
 8002760:	e7fd      	b.n	800275e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	4b15      	ldr	r3, [pc, #84]	@ (80027c0 <vTaskPlaceOnEventListRestricted+0x88>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	61da      	str	r2, [r3, #28]
 8002770:	4b13      	ldr	r3, [pc, #76]	@ (80027c0 <vTaskPlaceOnEventListRestricted+0x88>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	6892      	ldr	r2, [r2, #8]
 8002778:	621a      	str	r2, [r3, #32]
 800277a:	4b11      	ldr	r3, [pc, #68]	@ (80027c0 <vTaskPlaceOnEventListRestricted+0x88>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	3218      	adds	r2, #24
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	4b0e      	ldr	r3, [pc, #56]	@ (80027c0 <vTaskPlaceOnEventListRestricted+0x88>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f103 0218 	add.w	r2, r3, #24
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	609a      	str	r2, [r3, #8]
 8002792:	4b0b      	ldr	r3, [pc, #44]	@ (80027c0 <vTaskPlaceOnEventListRestricted+0x88>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	629a      	str	r2, [r3, #40]	@ 0x28
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 80027aa:	f04f 33ff 	mov.w	r3, #4294967295
 80027ae:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80027b0:	6879      	ldr	r1, [r7, #4]
 80027b2:	68b8      	ldr	r0, [r7, #8]
 80027b4:	f000 fbf4 	bl	8002fa0 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 80027b8:	bf00      	nop
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	2000012c 	.word	0x2000012c

080027c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80027c4:	b480      	push	{r7}
 80027c6:	b08b      	sub	sp, #44	@ 0x2c
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10b      	bne.n	80027f2 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 80027da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027de:	f383 8811 	msr	BASEPRI, r3
 80027e2:	f3bf 8f6f 	isb	sy
 80027e6:	f3bf 8f4f 	dsb	sy
 80027ea:	60fb      	str	r3, [r7, #12]
}
 80027ec:	bf00      	nop
 80027ee:	bf00      	nop
 80027f0:	e7fd      	b.n	80027ee <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f6:	61fb      	str	r3, [r7, #28]
 80027f8:	6a3b      	ldr	r3, [r7, #32]
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	6a3a      	ldr	r2, [r7, #32]
 80027fe:	6a12      	ldr	r2, [r2, #32]
 8002800:	609a      	str	r2, [r3, #8]
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	6a3a      	ldr	r2, [r7, #32]
 8002808:	69d2      	ldr	r2, [r2, #28]
 800280a:	605a      	str	r2, [r3, #4]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	3318      	adds	r3, #24
 8002814:	429a      	cmp	r2, r3
 8002816:	d103      	bne.n	8002820 <xTaskRemoveFromEventList+0x5c>
 8002818:	6a3b      	ldr	r3, [r7, #32]
 800281a:	6a1a      	ldr	r2, [r3, #32]
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	605a      	str	r2, [r3, #4]
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	2200      	movs	r2, #0
 8002824:	629a      	str	r2, [r3, #40]	@ 0x28
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	1e5a      	subs	r2, r3, #1
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002830:	4b4b      	ldr	r3, [pc, #300]	@ (8002960 <xTaskRemoveFromEventList+0x19c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d160      	bne.n	80028fa <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	617b      	str	r3, [r7, #20]
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	6a3a      	ldr	r2, [r7, #32]
 8002844:	68d2      	ldr	r2, [r2, #12]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	6a3b      	ldr	r3, [r7, #32]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	6a3a      	ldr	r2, [r7, #32]
 800284e:	6892      	ldr	r2, [r2, #8]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	6a3b      	ldr	r3, [r7, #32]
 8002858:	3304      	adds	r3, #4
 800285a:	429a      	cmp	r2, r3
 800285c:	d103      	bne.n	8002866 <xTaskRemoveFromEventList+0xa2>
 800285e:	6a3b      	ldr	r3, [r7, #32]
 8002860:	68da      	ldr	r2, [r3, #12]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	605a      	str	r2, [r3, #4]
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	2200      	movs	r2, #0
 800286a:	615a      	str	r2, [r3, #20]
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	1e5a      	subs	r2, r3, #1
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800287a:	2201      	movs	r2, #1
 800287c:	409a      	lsls	r2, r3
 800287e:	4b39      	ldr	r3, [pc, #228]	@ (8002964 <xTaskRemoveFromEventList+0x1a0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4313      	orrs	r3, r2
 8002884:	4a37      	ldr	r2, [pc, #220]	@ (8002964 <xTaskRemoveFromEventList+0x1a0>)
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800288c:	4936      	ldr	r1, [pc, #216]	@ (8002968 <xTaskRemoveFromEventList+0x1a4>)
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	3304      	adds	r3, #4
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	613b      	str	r3, [r7, #16]
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	6a3b      	ldr	r3, [r7, #32]
 80028aa:	60da      	str	r2, [r3, #12]
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	6a3a      	ldr	r2, [r7, #32]
 80028b2:	3204      	adds	r2, #4
 80028b4:	605a      	str	r2, [r3, #4]
 80028b6:	6a3b      	ldr	r3, [r7, #32]
 80028b8:	1d1a      	adds	r2, r3, #4
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	609a      	str	r2, [r3, #8]
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028c2:	4613      	mov	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4a27      	ldr	r2, [pc, #156]	@ (8002968 <xTaskRemoveFromEventList+0x1a4>)
 80028cc:	441a      	add	r2, r3
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	615a      	str	r2, [r3, #20]
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028d6:	4924      	ldr	r1, [pc, #144]	@ (8002968 <xTaskRemoveFromEventList+0x1a4>)
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6a3a      	ldr	r2, [r7, #32]
 80028e6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80028e8:	1c59      	adds	r1, r3, #1
 80028ea:	481f      	ldr	r0, [pc, #124]	@ (8002968 <xTaskRemoveFromEventList+0x1a4>)
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4403      	add	r3, r0
 80028f6:	6019      	str	r1, [r3, #0]
 80028f8:	e01b      	b.n	8002932 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80028fa:	4b1c      	ldr	r3, [pc, #112]	@ (800296c <xTaskRemoveFromEventList+0x1a8>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	61bb      	str	r3, [r7, #24]
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	61da      	str	r2, [r3, #28]
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	621a      	str	r2, [r3, #32]
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	6a3a      	ldr	r2, [r7, #32]
 8002914:	3218      	adds	r2, #24
 8002916:	605a      	str	r2, [r3, #4]
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	f103 0218 	add.w	r2, r3, #24
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	609a      	str	r2, [r3, #8]
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	4a11      	ldr	r2, [pc, #68]	@ (800296c <xTaskRemoveFromEventList+0x1a8>)
 8002926:	629a      	str	r2, [r3, #40]	@ 0x28
 8002928:	4b10      	ldr	r3, [pc, #64]	@ (800296c <xTaskRemoveFromEventList+0x1a8>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	3301      	adds	r3, #1
 800292e:	4a0f      	ldr	r2, [pc, #60]	@ (800296c <xTaskRemoveFromEventList+0x1a8>)
 8002930:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002936:	4b0e      	ldr	r3, [pc, #56]	@ (8002970 <xTaskRemoveFromEventList+0x1ac>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293c:	429a      	cmp	r2, r3
 800293e:	d905      	bls.n	800294c <xTaskRemoveFromEventList+0x188>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8002940:	2301      	movs	r3, #1
 8002942:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002944:	4b0b      	ldr	r3, [pc, #44]	@ (8002974 <xTaskRemoveFromEventList+0x1b0>)
 8002946:	2201      	movs	r2, #1
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	e001      	b.n	8002950 <xTaskRemoveFromEventList+0x18c>
        }
        else
        {
            xReturn = pdFALSE;
 800294c:	2300      	movs	r3, #0
 800294e:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8002950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002952:	4618      	mov	r0, r3
 8002954:	372c      	adds	r7, #44	@ 0x2c
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	2000022c 	.word	0x2000022c
 8002964:	2000020c 	.word	0x2000020c
 8002968:	20000130 	.word	0x20000130
 800296c:	200001c4 	.word	0x200001c4
 8002970:	2000012c 	.word	0x2000012c
 8002974:	20000218 	.word	0x20000218

08002978 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002980:	4b06      	ldr	r3, [pc, #24]	@ (800299c <vTaskInternalSetTimeOutState+0x24>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002988:	4b05      	ldr	r3, [pc, #20]	@ (80029a0 <vTaskInternalSetTimeOutState+0x28>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	2000021c 	.word	0x2000021c
 80029a0:	20000208 	.word	0x20000208

080029a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10b      	bne.n	80029cc <xTaskCheckForTimeOut+0x28>
    __asm volatile
 80029b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029b8:	f383 8811 	msr	BASEPRI, r3
 80029bc:	f3bf 8f6f 	isb	sy
 80029c0:	f3bf 8f4f 	dsb	sy
 80029c4:	613b      	str	r3, [r7, #16]
}
 80029c6:	bf00      	nop
 80029c8:	bf00      	nop
 80029ca:	e7fd      	b.n	80029c8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10b      	bne.n	80029ea <xTaskCheckForTimeOut+0x46>
    __asm volatile
 80029d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029d6:	f383 8811 	msr	BASEPRI, r3
 80029da:	f3bf 8f6f 	isb	sy
 80029de:	f3bf 8f4f 	dsb	sy
 80029e2:	60fb      	str	r3, [r7, #12]
}
 80029e4:	bf00      	nop
 80029e6:	bf00      	nop
 80029e8:	e7fd      	b.n	80029e6 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80029ea:	f000 ff6b 	bl	80038c4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80029ee:	4b1f      	ldr	r3, [pc, #124]	@ (8002a6c <xTaskCheckForTimeOut+0xc8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a06:	d102      	bne.n	8002a0e <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61fb      	str	r3, [r7, #28]
 8002a0c:	e026      	b.n	8002a5c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	4b17      	ldr	r3, [pc, #92]	@ (8002a70 <xTaskCheckForTimeOut+0xcc>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d00a      	beq.n	8002a30 <xTaskCheckForTimeOut+0x8c>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d305      	bcc.n	8002a30 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002a24:	2301      	movs	r3, #1
 8002a26:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	e015      	b.n	8002a5c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d20b      	bcs.n	8002a52 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	1ad2      	subs	r2, r2, r3
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff ff96 	bl	8002978 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	61fb      	str	r3, [r7, #28]
 8002a50:	e004      	b.n	8002a5c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002a5c:	f000 ff64 	bl	8003928 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8002a60:	69fb      	ldr	r3, [r7, #28]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3720      	adds	r7, #32
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000208 	.word	0x20000208
 8002a70:	2000021c 	.word	0x2000021c

08002a74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8002a78:	4b03      	ldr	r3, [pc, #12]	@ (8002a88 <vTaskMissedYield+0x14>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8002a7e:	bf00      	nop
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	20000218 	.word	0x20000218

08002a8c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002a94:	f000 f852 	bl	8002b3c <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8002a98:	4b06      	ldr	r3, [pc, #24]	@ (8002ab4 <prvIdleTask+0x28>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d9f9      	bls.n	8002a94 <prvIdleTask+0x8>
            {
                taskYIELD();
 8002aa0:	4b05      	ldr	r3, [pc, #20]	@ (8002ab8 <prvIdleTask+0x2c>)
 8002aa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	f3bf 8f4f 	dsb	sy
 8002aac:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002ab0:	e7f0      	b.n	8002a94 <prvIdleTask+0x8>
 8002ab2:	bf00      	nop
 8002ab4:	20000130 	.word	0x20000130
 8002ab8:	e000ed04 	.word	0xe000ed04

08002abc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	607b      	str	r3, [r7, #4]
 8002ac6:	e00c      	b.n	8002ae2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4a12      	ldr	r2, [pc, #72]	@ (8002b1c <prvInitialiseTaskLists+0x60>)
 8002ad4:	4413      	add	r3, r2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe fd95 	bl	8001606 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	607b      	str	r3, [r7, #4]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b04      	cmp	r3, #4
 8002ae6:	d9ef      	bls.n	8002ac8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002ae8:	480d      	ldr	r0, [pc, #52]	@ (8002b20 <prvInitialiseTaskLists+0x64>)
 8002aea:	f7fe fd8c 	bl	8001606 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002aee:	480d      	ldr	r0, [pc, #52]	@ (8002b24 <prvInitialiseTaskLists+0x68>)
 8002af0:	f7fe fd89 	bl	8001606 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002af4:	480c      	ldr	r0, [pc, #48]	@ (8002b28 <prvInitialiseTaskLists+0x6c>)
 8002af6:	f7fe fd86 	bl	8001606 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002afa:	480c      	ldr	r0, [pc, #48]	@ (8002b2c <prvInitialiseTaskLists+0x70>)
 8002afc:	f7fe fd83 	bl	8001606 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002b00:	480b      	ldr	r0, [pc, #44]	@ (8002b30 <prvInitialiseTaskLists+0x74>)
 8002b02:	f7fe fd80 	bl	8001606 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002b06:	4b0b      	ldr	r3, [pc, #44]	@ (8002b34 <prvInitialiseTaskLists+0x78>)
 8002b08:	4a05      	ldr	r2, [pc, #20]	@ (8002b20 <prvInitialiseTaskLists+0x64>)
 8002b0a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b38 <prvInitialiseTaskLists+0x7c>)
 8002b0e:	4a05      	ldr	r2, [pc, #20]	@ (8002b24 <prvInitialiseTaskLists+0x68>)
 8002b10:	601a      	str	r2, [r3, #0]
}
 8002b12:	bf00      	nop
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000130 	.word	0x20000130
 8002b20:	20000194 	.word	0x20000194
 8002b24:	200001a8 	.word	0x200001a8
 8002b28:	200001c4 	.word	0x200001c4
 8002b2c:	200001d8 	.word	0x200001d8
 8002b30:	200001f0 	.word	0x200001f0
 8002b34:	200001bc 	.word	0x200001bc
 8002b38:	200001c0 	.word	0x200001c0

08002b3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b42:	e019      	b.n	8002b78 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8002b44:	f000 febe 	bl	80038c4 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002b48:	4b10      	ldr	r3, [pc, #64]	@ (8002b8c <prvCheckTasksWaitingTermination+0x50>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3304      	adds	r3, #4
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fe fdbc 	bl	80016d2 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8002b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b90 <prvCheckTasksWaitingTermination+0x54>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	4a0b      	ldr	r2, [pc, #44]	@ (8002b90 <prvCheckTasksWaitingTermination+0x54>)
 8002b62:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8002b64:	4b0b      	ldr	r3, [pc, #44]	@ (8002b94 <prvCheckTasksWaitingTermination+0x58>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b94 <prvCheckTasksWaitingTermination+0x58>)
 8002b6c:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8002b6e:	f000 fedb 	bl	8003928 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f810 	bl	8002b98 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b78:	4b06      	ldr	r3, [pc, #24]	@ (8002b94 <prvCheckTasksWaitingTermination+0x58>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1e1      	bne.n	8002b44 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002b80:	bf00      	nop
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	200001d8 	.word	0x200001d8
 8002b90:	20000204 	.word	0x20000204
 8002b94:	200001ec 	.word	0x200001ec

08002b98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f001 f8a3 	bl	8003cf0 <vPortFree>
            vPortFree( pxTCB );
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f001 f8a0 	bl	8003cf0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002bb0:	bf00      	nop
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8002be8 <prvResetNextTaskUnblockTime+0x30>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d104      	bne.n	8002bd0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002bc6:	4b09      	ldr	r3, [pc, #36]	@ (8002bec <prvResetNextTaskUnblockTime+0x34>)
 8002bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bcc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002bce:	e005      	b.n	8002bdc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002bd0:	4b05      	ldr	r3, [pc, #20]	@ (8002be8 <prvResetNextTaskUnblockTime+0x30>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a04      	ldr	r2, [pc, #16]	@ (8002bec <prvResetNextTaskUnblockTime+0x34>)
 8002bda:	6013      	str	r3, [r2, #0]
}
 8002bdc:	bf00      	nop
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	200001bc 	.word	0x200001bc
 8002bec:	20000224 	.word	0x20000224

08002bf0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8002bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8002c24 <xTaskGetSchedulerState+0x34>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d102      	bne.n	8002c04 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	607b      	str	r3, [r7, #4]
 8002c02:	e008      	b.n	8002c16 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002c04:	4b08      	ldr	r3, [pc, #32]	@ (8002c28 <xTaskGetSchedulerState+0x38>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d102      	bne.n	8002c12 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	607b      	str	r3, [r7, #4]
 8002c10:	e001      	b.n	8002c16 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8002c12:	2300      	movs	r3, #0
 8002c14:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 8002c16:	687b      	ldr	r3, [r7, #4]
    }
 8002c18:	4618      	mov	r0, r3
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	20000210 	.word	0x20000210
 8002c28:	2000022c 	.word	0x2000022c

08002c2c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
 8002c38:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00b      	beq.n	8002c5c <xTaskGenericNotifyWait+0x30>
    __asm volatile
 8002c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c48:	f383 8811 	msr	BASEPRI, r3
 8002c4c:	f3bf 8f6f 	isb	sy
 8002c50:	f3bf 8f4f 	dsb	sy
 8002c54:	613b      	str	r3, [r7, #16]
}
 8002c56:	bf00      	nop
 8002c58:	bf00      	nop
 8002c5a:	e7fd      	b.n	8002c58 <xTaskGenericNotifyWait+0x2c>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8002c5c:	f7ff faa8 	bl	80021b0 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 8002c60:	f000 fe30 	bl	80038c4 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8002c64:	4b38      	ldr	r3, [pc, #224]	@ (8002d48 <xTaskGenericNotifyWait+0x11c>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3354      	adds	r3, #84	@ 0x54
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d018      	beq.n	8002ca8 <xTaskGenericNotifyWait+0x7c>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 8002c76:	4b34      	ldr	r3, [pc, #208]	@ (8002d48 <xTaskGenericNotifyWait+0x11c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	3214      	adds	r2, #20
 8002c7e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	43d2      	mvns	r2, r2
 8002c86:	4011      	ands	r1, r2
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	3214      	adds	r2, #20
 8002c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8002c90:	4b2d      	ldr	r3, [pc, #180]	@ (8002d48 <xTaskGenericNotifyWait+0x11c>)
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4413      	add	r3, r2
 8002c98:	3354      	adds	r3, #84	@ 0x54
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8002c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <xTaskGenericNotifyWait+0x7c>
                    {
                        xShouldBlock = pdTRUE;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8002ca8:	f000 fe3e 	bl	8003928 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d103      	bne.n	8002cba <xTaskGenericNotifyWait+0x8e>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002cb6:	f000 f973 	bl	8002fa0 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8002cba:	f7ff fa87 	bl	80021cc <xTaskResumeAll>
 8002cbe:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d10a      	bne.n	8002cdc <xTaskGenericNotifyWait+0xb0>
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d107      	bne.n	8002cdc <xTaskGenericNotifyWait+0xb0>
        {
            taskYIELD_WITHIN_API();
 8002ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8002d4c <xTaskGenericNotifyWait+0x120>)
 8002cce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	f3bf 8f4f 	dsb	sy
 8002cd8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8002cdc:	f000 fdf2 	bl	80038c4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d007      	beq.n	8002cf6 <xTaskGenericNotifyWait+0xca>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8002ce6:	4b18      	ldr	r3, [pc, #96]	@ (8002d48 <xTaskGenericNotifyWait+0x11c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	3214      	adds	r2, #20
 8002cee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8002cf6:	4b14      	ldr	r3, [pc, #80]	@ (8002d48 <xTaskGenericNotifyWait+0x11c>)
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	3354      	adds	r3, #84	@ 0x54
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d002      	beq.n	8002d0e <xTaskGenericNotifyWait+0xe2>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61fb      	str	r3, [r7, #28]
 8002d0c:	e00e      	b.n	8002d2c <xTaskGenericNotifyWait+0x100>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 8002d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d48 <xTaskGenericNotifyWait+0x11c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	3214      	adds	r2, #20
 8002d16:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	43d2      	mvns	r2, r2
 8002d1e:	4011      	ands	r1, r2
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	3214      	adds	r2, #20
 8002d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8002d2c:	4b06      	ldr	r3, [pc, #24]	@ (8002d48 <xTaskGenericNotifyWait+0x11c>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4413      	add	r3, r2
 8002d34:	3354      	adds	r3, #84	@ 0x54
 8002d36:	2200      	movs	r2, #0
 8002d38:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002d3a:	f000 fdf5 	bl	8003928 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );

        return xReturn;
 8002d3e:	69fb      	ldr	r3, [r7, #28]
    }
 8002d40:	4618      	mov	r0, r3
 8002d42:	3720      	adds	r7, #32
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	2000012c 	.word	0x2000012c
 8002d4c:	e000ed04 	.word	0xe000ed04

08002d50 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08e      	sub	sp, #56	@ 0x38
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
 8002d5c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00b      	beq.n	8002d80 <xTaskGenericNotify+0x30>
    __asm volatile
 8002d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d6c:	f383 8811 	msr	BASEPRI, r3
 8002d70:	f3bf 8f6f 	isb	sy
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	623b      	str	r3, [r7, #32]
}
 8002d7a:	bf00      	nop
 8002d7c:	bf00      	nop
 8002d7e:	e7fd      	b.n	8002d7c <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10b      	bne.n	8002d9e <xTaskGenericNotify+0x4e>
    __asm volatile
 8002d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d8a:	f383 8811 	msr	BASEPRI, r3
 8002d8e:	f3bf 8f6f 	isb	sy
 8002d92:	f3bf 8f4f 	dsb	sy
 8002d96:	61fb      	str	r3, [r7, #28]
}
 8002d98:	bf00      	nop
 8002d9a:	bf00      	nop
 8002d9c:	e7fd      	b.n	8002d9a <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 8002da2:	f000 fd8f 	bl	80038c4 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8002da6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d006      	beq.n	8002dba <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	3214      	adds	r2, #20
 8002db2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002db6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002db8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002dba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3354      	adds	r3, #84	@ 0x54
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002dc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	4413      	add	r3, r2
 8002dce:	3354      	adds	r3, #84	@ 0x54
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002dd4:	78fb      	ldrb	r3, [r7, #3]
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d83b      	bhi.n	8002e52 <xTaskGenericNotify+0x102>
 8002dda:	a201      	add	r2, pc, #4	@ (adr r2, 8002de0 <xTaskGenericNotify+0x90>)
 8002ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de0:	08002e73 	.word	0x08002e73
 8002de4:	08002df5 	.word	0x08002df5
 8002de8:	08002e11 	.word	0x08002e11
 8002dec:	08002e29 	.word	0x08002e29
 8002df0:	08002e37 	.word	0x08002e37
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	3214      	adds	r2, #20
 8002dfa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	ea42 0103 	orr.w	r1, r2, r3
 8002e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	3214      	adds	r2, #20
 8002e0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002e0e:	e033      	b.n	8002e78 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	3214      	adds	r2, #20
 8002e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e1a:	1c59      	adds	r1, r3, #1
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	3214      	adds	r2, #20
 8002e22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002e26:	e027      	b.n	8002e78 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	3214      	adds	r2, #20
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002e34:	e020      	b.n	8002e78 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002e36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d006      	beq.n	8002e4c <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	3214      	adds	r2, #20
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8002e4a:	e015      	b.n	8002e78 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 8002e50:	e012      	b.n	8002e78 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8002e52:	4b4e      	ldr	r3, [pc, #312]	@ (8002f8c <xTaskGenericNotify+0x23c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00d      	beq.n	8002e76 <xTaskGenericNotify+0x126>
    __asm volatile
 8002e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e5e:	f383 8811 	msr	BASEPRI, r3
 8002e62:	f3bf 8f6f 	isb	sy
 8002e66:	f3bf 8f4f 	dsb	sy
 8002e6a:	61bb      	str	r3, [r7, #24]
}
 8002e6c:	bf00      	nop
 8002e6e:	bf00      	nop
 8002e70:	e7fd      	b.n	8002e6e <xTaskGenericNotify+0x11e>
                    break;
 8002e72:	bf00      	nop
 8002e74:	e000      	b.n	8002e78 <xTaskGenericNotify+0x128>

                    break;
 8002e76:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002e78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d17e      	bne.n	8002f7e <xTaskGenericNotify+0x22e>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e8c:	68d2      	ldr	r2, [r2, #12]
 8002e8e:	609a      	str	r2, [r3, #8]
 8002e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e96:	6892      	ldr	r2, [r2, #8]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d103      	bne.n	8002eae <xTaskGenericNotify+0x15e>
 8002ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eac:	605a      	str	r2, [r3, #4]
 8002eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	615a      	str	r2, [r3, #20]
 8002eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	1e5a      	subs	r2, r3, #1
 8002eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ebc:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	409a      	lsls	r2, r3
 8002ec6:	4b32      	ldr	r3, [pc, #200]	@ (8002f90 <xTaskGenericNotify+0x240>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	4a30      	ldr	r2, [pc, #192]	@ (8002f90 <xTaskGenericNotify+0x240>)
 8002ece:	6013      	str	r3, [r2, #0]
 8002ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ed4:	492f      	ldr	r1, [pc, #188]	@ (8002f94 <xTaskGenericNotify+0x244>)
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef2:	60da      	str	r2, [r3, #12]
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002efa:	3204      	adds	r2, #4
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f00:	1d1a      	adds	r2, r3, #4
 8002f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f04:	609a      	str	r2, [r3, #8]
 8002f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4a20      	ldr	r2, [pc, #128]	@ (8002f94 <xTaskGenericNotify+0x244>)
 8002f14:	441a      	add	r2, r3
 8002f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f18:	615a      	str	r2, [r3, #20]
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f1e:	491d      	ldr	r1, [pc, #116]	@ (8002f94 <xTaskGenericNotify+0x244>)
 8002f20:	4613      	mov	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f2e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002f30:	1c59      	adds	r1, r3, #1
 8002f32:	4818      	ldr	r0, [pc, #96]	@ (8002f94 <xTaskGenericNotify+0x244>)
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4403      	add	r3, r0
 8002f3e:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00b      	beq.n	8002f60 <xTaskGenericNotify+0x210>
    __asm volatile
 8002f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f4c:	f383 8811 	msr	BASEPRI, r3
 8002f50:	f3bf 8f6f 	isb	sy
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	617b      	str	r3, [r7, #20]
}
 8002f5a:	bf00      	nop
 8002f5c:	bf00      	nop
 8002f5e:	e7fd      	b.n	8002f5c <xTaskGenericNotify+0x20c>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 8002f60:	4b0d      	ldr	r3, [pc, #52]	@ (8002f98 <xTaskGenericNotify+0x248>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d207      	bcs.n	8002f7e <xTaskGenericNotify+0x22e>
 8002f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f9c <xTaskGenericNotify+0x24c>)
 8002f70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	f3bf 8f4f 	dsb	sy
 8002f7a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002f7e:	f000 fcd3 	bl	8003928 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );

        return xReturn;
 8002f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8002f84:	4618      	mov	r0, r3
 8002f86:	3738      	adds	r7, #56	@ 0x38
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	20000208 	.word	0x20000208
 8002f90:	2000020c 	.word	0x2000020c
 8002f94:	20000130 	.word	0x20000130
 8002f98:	2000012c 	.word	0x2000012c
 8002f9c:	e000ed04 	.word	0xe000ed04

08002fa0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b088      	sub	sp, #32
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002faa:	4b37      	ldr	r3, [pc, #220]	@ (8003088 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8002fb0:	4b36      	ldr	r3, [pc, #216]	@ (800308c <prvAddCurrentTaskToDelayedList+0xec>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8002fb6:	4b36      	ldr	r3, [pc, #216]	@ (8003090 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002fbc:	4b35      	ldr	r3, [pc, #212]	@ (8003094 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fe fb85 	bl	80016d2 <uxListRemove>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10b      	bne.n	8002fe6 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002fce:	4b31      	ldr	r3, [pc, #196]	@ (8003094 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43da      	mvns	r2, r3
 8002fdc:	4b2e      	ldr	r3, [pc, #184]	@ (8003098 <prvAddCurrentTaskToDelayedList+0xf8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	4a2d      	ldr	r2, [pc, #180]	@ (8003098 <prvAddCurrentTaskToDelayedList+0xf8>)
 8002fe4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fec:	d124      	bne.n	8003038 <prvAddCurrentTaskToDelayedList+0x98>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d021      	beq.n	8003038 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ff4:	4b29      	ldr	r3, [pc, #164]	@ (800309c <prvAddCurrentTaskToDelayedList+0xfc>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	613b      	str	r3, [r7, #16]
 8002ffa:	4b26      	ldr	r3, [pc, #152]	@ (8003094 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	609a      	str	r2, [r3, #8]
 8003002:	4b24      	ldr	r3, [pc, #144]	@ (8003094 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	6892      	ldr	r2, [r2, #8]
 800300a:	60da      	str	r2, [r3, #12]
 800300c:	4b21      	ldr	r3, [pc, #132]	@ (8003094 <prvAddCurrentTaskToDelayedList+0xf4>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	3204      	adds	r2, #4
 8003016:	605a      	str	r2, [r3, #4]
 8003018:	4b1e      	ldr	r3, [pc, #120]	@ (8003094 <prvAddCurrentTaskToDelayedList+0xf4>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	1d1a      	adds	r2, r3, #4
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	609a      	str	r2, [r3, #8]
 8003022:	4b1c      	ldr	r3, [pc, #112]	@ (8003094 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a1d      	ldr	r2, [pc, #116]	@ (800309c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003028:	615a      	str	r2, [r3, #20]
 800302a:	4b1c      	ldr	r3, [pc, #112]	@ (800309c <prvAddCurrentTaskToDelayedList+0xfc>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	3301      	adds	r3, #1
 8003030:	4a1a      	ldr	r2, [pc, #104]	@ (800309c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003032:	6013      	str	r3, [r2, #0]
 8003034:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003036:	e022      	b.n	800307e <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003038:	69fa      	ldr	r2, [r7, #28]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4413      	add	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003040:	4b14      	ldr	r3, [pc, #80]	@ (8003094 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	429a      	cmp	r2, r3
 800304e:	d207      	bcs.n	8003060 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003050:	4b10      	ldr	r3, [pc, #64]	@ (8003094 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	3304      	adds	r3, #4
 8003056:	4619      	mov	r1, r3
 8003058:	6978      	ldr	r0, [r7, #20]
 800305a:	f7fe fb01 	bl	8001660 <vListInsert>
}
 800305e:	e00e      	b.n	800307e <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003060:	4b0c      	ldr	r3, [pc, #48]	@ (8003094 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	3304      	adds	r3, #4
 8003066:	4619      	mov	r1, r3
 8003068:	69b8      	ldr	r0, [r7, #24]
 800306a:	f7fe faf9 	bl	8001660 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800306e:	4b0c      	ldr	r3, [pc, #48]	@ (80030a0 <prvAddCurrentTaskToDelayedList+0x100>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	429a      	cmp	r2, r3
 8003076:	d202      	bcs.n	800307e <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8003078:	4a09      	ldr	r2, [pc, #36]	@ (80030a0 <prvAddCurrentTaskToDelayedList+0x100>)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6013      	str	r3, [r2, #0]
}
 800307e:	bf00      	nop
 8003080:	3720      	adds	r7, #32
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	20000208 	.word	0x20000208
 800308c:	200001bc 	.word	0x200001bc
 8003090:	200001c0 	.word	0x200001c0
 8003094:	2000012c 	.word	0x2000012c
 8003098:	2000020c 	.word	0x2000020c
 800309c:	200001f0 	.word	0x200001f0
 80030a0:	20000224 	.word	0x20000224

080030a4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80030aa:	2300      	movs	r3, #0
 80030ac:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80030ae:	f000 fa55 	bl	800355c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80030b2:	4b12      	ldr	r3, [pc, #72]	@ (80030fc <xTimerCreateTimerTask+0x58>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00b      	beq.n	80030d2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80030ba:	4b11      	ldr	r3, [pc, #68]	@ (8003100 <xTimerCreateTimerTask+0x5c>)
 80030bc:	9301      	str	r3, [sp, #4]
 80030be:	2302      	movs	r3, #2
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	2300      	movs	r3, #0
 80030c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80030c8:	490e      	ldr	r1, [pc, #56]	@ (8003104 <xTimerCreateTimerTask+0x60>)
 80030ca:	480f      	ldr	r0, [pc, #60]	@ (8003108 <xTimerCreateTimerTask+0x64>)
 80030cc:	f7fe fe60 	bl	8001d90 <xTaskCreate>
 80030d0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10b      	bne.n	80030f0 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 80030d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030dc:	f383 8811 	msr	BASEPRI, r3
 80030e0:	f3bf 8f6f 	isb	sy
 80030e4:	f3bf 8f4f 	dsb	sy
 80030e8:	603b      	str	r3, [r7, #0]
}
 80030ea:	bf00      	nop
 80030ec:	bf00      	nop
 80030ee:	e7fd      	b.n	80030ec <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 80030f0:	687b      	ldr	r3, [r7, #4]
    }
 80030f2:	4618      	mov	r0, r3
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	20000260 	.word	0x20000260
 8003100:	20000264 	.word	0x20000264
 8003104:	08004e6c 	.word	0x08004e6c
 8003108:	080031b1 	.word	0x080031b1

0800310c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003118:	e008      	b.n	800312c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	4413      	add	r3, r2
 8003122:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	699a      	ldr	r2, [r3, #24]
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	18d1      	adds	r1, r2, r3
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 f8df 	bl	80032fc <prvInsertTimerInActiveList>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1ea      	bne.n	800311a <prvReloadTimer+0xe>
        }
    }
 8003144:	bf00      	nop
 8003146:	bf00      	nop
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
	...

08003150 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800315a:	4b14      	ldr	r3, [pc, #80]	@ (80031ac <prvProcessExpiredTimer+0x5c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	3304      	adds	r3, #4
 8003168:	4618      	mov	r0, r3
 800316a:	f7fe fab2 	bl	80016d2 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f7ff ffc3 	bl	800310c <prvReloadTimer>
 8003186:	e008      	b.n	800319a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800318e:	f023 0301 	bic.w	r3, r3, #1
 8003192:	b2da      	uxtb	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	4798      	blx	r3
    }
 80031a2:	bf00      	nop
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	20000258 	.word	0x20000258

080031b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80031b8:	f107 0308 	add.w	r3, r7, #8
 80031bc:	4618      	mov	r0, r3
 80031be:	f000 f859 	bl	8003274 <prvGetNextExpireTime>
 80031c2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	4619      	mov	r1, r3
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 f805 	bl	80031d8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80031ce:	f000 f8d7 	bl	8003380 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80031d2:	bf00      	nop
 80031d4:	e7f0      	b.n	80031b8 <prvTimerTask+0x8>
	...

080031d8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80031e2:	f7fe ffe5 	bl	80021b0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80031e6:	f107 0308 	add.w	r3, r7, #8
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 f866 	bl	80032bc <prvSampleTimeNow>
 80031f0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d130      	bne.n	800325a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10a      	bne.n	8003214 <prvProcessTimerOrBlockTask+0x3c>
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	429a      	cmp	r2, r3
 8003204:	d806      	bhi.n	8003214 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003206:	f7fe ffe1 	bl	80021cc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800320a:	68f9      	ldr	r1, [r7, #12]
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff ff9f 	bl	8003150 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003212:	e024      	b.n	800325e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d008      	beq.n	800322c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800321a:	4b13      	ldr	r3, [pc, #76]	@ (8003268 <prvProcessTimerOrBlockTask+0x90>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <prvProcessTimerOrBlockTask+0x50>
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <prvProcessTimerOrBlockTask+0x52>
 8003228:	2300      	movs	r3, #0
 800322a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800322c:	4b0f      	ldr	r3, [pc, #60]	@ (800326c <prvProcessTimerOrBlockTask+0x94>)
 800322e:	6818      	ldr	r0, [r3, #0]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	4619      	mov	r1, r3
 800323a:	f7fe fd39 	bl	8001cb0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800323e:	f7fe ffc5 	bl	80021cc <xTaskResumeAll>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10a      	bne.n	800325e <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8003248:	4b09      	ldr	r3, [pc, #36]	@ (8003270 <prvProcessTimerOrBlockTask+0x98>)
 800324a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	f3bf 8f4f 	dsb	sy
 8003254:	f3bf 8f6f 	isb	sy
    }
 8003258:	e001      	b.n	800325e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800325a:	f7fe ffb7 	bl	80021cc <xTaskResumeAll>
    }
 800325e:	bf00      	nop
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	2000025c 	.word	0x2000025c
 800326c:	20000260 	.word	0x20000260
 8003270:	e000ed04 	.word	0xe000ed04

08003274 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800327c:	4b0e      	ldr	r3, [pc, #56]	@ (80032b8 <prvGetNextExpireTime+0x44>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <prvGetNextExpireTime+0x16>
 8003286:	2201      	movs	r2, #1
 8003288:	e000      	b.n	800328c <prvGetNextExpireTime+0x18>
 800328a:	2200      	movs	r2, #0
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d105      	bne.n	80032a4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003298:	4b07      	ldr	r3, [pc, #28]	@ (80032b8 <prvGetNextExpireTime+0x44>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	e001      	b.n	80032a8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80032a8:	68fb      	ldr	r3, [r7, #12]
    }
 80032aa:	4618      	mov	r0, r3
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	20000258 	.word	0x20000258

080032bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 80032c4:	f7ff f88a 	bl	80023dc <xTaskGetTickCount>
 80032c8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80032ca:	4b0b      	ldr	r3, [pc, #44]	@ (80032f8 <prvSampleTimeNow+0x3c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d205      	bcs.n	80032e0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80032d4:	f000 f91c 	bl	8003510 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	e002      	b.n	80032e6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80032e6:	4a04      	ldr	r2, [pc, #16]	@ (80032f8 <prvSampleTimeNow+0x3c>)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80032ec:	68fb      	ldr	r3, [r7, #12]
    }
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20000268 	.word	0x20000268

080032fc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
 8003308:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800330a:	2300      	movs	r3, #0
 800330c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	429a      	cmp	r2, r3
 8003320:	d812      	bhi.n	8003348 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	1ad2      	subs	r2, r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	429a      	cmp	r2, r3
 800332e:	d302      	bcc.n	8003336 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003330:	2301      	movs	r3, #1
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	e01b      	b.n	800336e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003336:	4b10      	ldr	r3, [pc, #64]	@ (8003378 <prvInsertTimerInActiveList+0x7c>)
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	3304      	adds	r3, #4
 800333e:	4619      	mov	r1, r3
 8003340:	4610      	mov	r0, r2
 8003342:	f7fe f98d 	bl	8001660 <vListInsert>
 8003346:	e012      	b.n	800336e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	429a      	cmp	r2, r3
 800334e:	d206      	bcs.n	800335e <prvInsertTimerInActiveList+0x62>
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	429a      	cmp	r2, r3
 8003356:	d302      	bcc.n	800335e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003358:	2301      	movs	r3, #1
 800335a:	617b      	str	r3, [r7, #20]
 800335c:	e007      	b.n	800336e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800335e:	4b07      	ldr	r3, [pc, #28]	@ (800337c <prvInsertTimerInActiveList+0x80>)
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	3304      	adds	r3, #4
 8003366:	4619      	mov	r1, r3
 8003368:	4610      	mov	r0, r2
 800336a:	f7fe f979 	bl	8001660 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800336e:	697b      	ldr	r3, [r7, #20]
    }
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	2000025c 	.word	0x2000025c
 800337c:	20000258 	.word	0x20000258

08003380 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003380:	b580      	push	{r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8003386:	f107 0308 	add.w	r3, r7, #8
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	605a      	str	r2, [r3, #4]
 8003390:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8003392:	e0a9      	b.n	80034e8 <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	f2c0 80a6 	blt.w	80034e8 <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d004      	beq.n	80033b2 <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	3304      	adds	r3, #4
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7fe f990 	bl	80016d2 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80033b2:	1d3b      	adds	r3, r7, #4
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff ff81 	bl	80032bc <prvSampleTimeNow>
 80033ba:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	3b01      	subs	r3, #1
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	f200 808e 	bhi.w	80034e2 <prvProcessReceivedCommands+0x162>
 80033c6:	a201      	add	r2, pc, #4	@ (adr r2, 80033cc <prvProcessReceivedCommands+0x4c>)
 80033c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033cc:	080033f1 	.word	0x080033f1
 80033d0:	080033f1 	.word	0x080033f1
 80033d4:	08003459 	.word	0x08003459
 80033d8:	0800346d 	.word	0x0800346d
 80033dc:	080034b9 	.word	0x080034b9
 80033e0:	080033f1 	.word	0x080033f1
 80033e4:	080033f1 	.word	0x080033f1
 80033e8:	08003459 	.word	0x08003459
 80033ec:	0800346d 	.word	0x0800346d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80033f6:	f043 0301 	orr.w	r3, r3, #1
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	18d1      	adds	r1, r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	69f8      	ldr	r0, [r7, #28]
 8003410:	f7ff ff74 	bl	80032fc <prvInsertTimerInActiveList>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d065      	beq.n	80034e6 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	d009      	beq.n	800343c <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	4413      	add	r3, r2
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4619      	mov	r1, r3
 8003434:	69f8      	ldr	r0, [r7, #28]
 8003436:	f7ff fe69 	bl	800310c <prvReloadTimer>
 800343a:	e008      	b.n	800344e <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003442:	f023 0301 	bic.w	r3, r3, #1
 8003446:	b2da      	uxtb	r2, r3
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	69f8      	ldr	r0, [r7, #28]
 8003454:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003456:	e046      	b.n	80034e6 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800345e:	f023 0301 	bic.w	r3, r3, #1
 8003462:	b2da      	uxtb	r2, r3
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800346a:	e03d      	b.n	80034e8 <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003472:	f043 0301 	orr.w	r3, r3, #1
 8003476:	b2da      	uxtb	r2, r3
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10b      	bne.n	80034a4 <prvProcessReceivedCommands+0x124>
    __asm volatile
 800348c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003490:	f383 8811 	msr	BASEPRI, r3
 8003494:	f3bf 8f6f 	isb	sy
 8003498:	f3bf 8f4f 	dsb	sy
 800349c:	617b      	str	r3, [r7, #20]
}
 800349e:	bf00      	nop
 80034a0:	bf00      	nop
 80034a2:	e7fd      	b.n	80034a0 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	699a      	ldr	r2, [r3, #24]
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	18d1      	adds	r1, r2, r3
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	69f8      	ldr	r0, [r7, #28]
 80034b2:	f7ff ff23 	bl	80032fc <prvInsertTimerInActiveList>
                        break;
 80034b6:	e017      	b.n	80034e8 <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d103      	bne.n	80034ce <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 80034c6:	69f8      	ldr	r0, [r7, #28]
 80034c8:	f000 fc12 	bl	8003cf0 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80034cc:	e00c      	b.n	80034e8 <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80034d4:	f023 0301 	bic.w	r3, r3, #1
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80034e0:	e002      	b.n	80034e8 <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 80034e2:	bf00      	nop
 80034e4:	e000      	b.n	80034e8 <prvProcessReceivedCommands+0x168>
                        break;
 80034e6:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80034e8:	4b08      	ldr	r3, [pc, #32]	@ (800350c <prvProcessReceivedCommands+0x18c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f107 0108 	add.w	r1, r7, #8
 80034f0:	2200      	movs	r2, #0
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fe fa1c 	bl	8001930 <xQueueReceive>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f47f af4a 	bne.w	8003394 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8003500:	bf00      	nop
 8003502:	bf00      	nop
 8003504:	3720      	adds	r7, #32
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	20000260 	.word	0x20000260

08003510 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003516:	e009      	b.n	800352c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003518:	4b0e      	ldr	r3, [pc, #56]	@ (8003554 <prvSwitchTimerLists+0x44>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003522:	f04f 31ff 	mov.w	r1, #4294967295
 8003526:	6838      	ldr	r0, [r7, #0]
 8003528:	f7ff fe12 	bl	8003150 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800352c:	4b09      	ldr	r3, [pc, #36]	@ (8003554 <prvSwitchTimerLists+0x44>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003536:	4b07      	ldr	r3, [pc, #28]	@ (8003554 <prvSwitchTimerLists+0x44>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800353c:	4b06      	ldr	r3, [pc, #24]	@ (8003558 <prvSwitchTimerLists+0x48>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a04      	ldr	r2, [pc, #16]	@ (8003554 <prvSwitchTimerLists+0x44>)
 8003542:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003544:	4a04      	ldr	r2, [pc, #16]	@ (8003558 <prvSwitchTimerLists+0x48>)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6013      	str	r3, [r2, #0]
    }
 800354a:	bf00      	nop
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	20000258 	.word	0x20000258
 8003558:	2000025c 	.word	0x2000025c

0800355c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003560:	f000 f9b0 	bl	80038c4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003564:	4b12      	ldr	r3, [pc, #72]	@ (80035b0 <prvCheckForValidListAndQueue+0x54>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d11d      	bne.n	80035a8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800356c:	4811      	ldr	r0, [pc, #68]	@ (80035b4 <prvCheckForValidListAndQueue+0x58>)
 800356e:	f7fe f84a 	bl	8001606 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003572:	4811      	ldr	r0, [pc, #68]	@ (80035b8 <prvCheckForValidListAndQueue+0x5c>)
 8003574:	f7fe f847 	bl	8001606 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003578:	4b10      	ldr	r3, [pc, #64]	@ (80035bc <prvCheckForValidListAndQueue+0x60>)
 800357a:	4a0e      	ldr	r2, [pc, #56]	@ (80035b4 <prvCheckForValidListAndQueue+0x58>)
 800357c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800357e:	4b10      	ldr	r3, [pc, #64]	@ (80035c0 <prvCheckForValidListAndQueue+0x64>)
 8003580:	4a0d      	ldr	r2, [pc, #52]	@ (80035b8 <prvCheckForValidListAndQueue+0x5c>)
 8003582:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8003584:	2200      	movs	r2, #0
 8003586:	210c      	movs	r1, #12
 8003588:	200a      	movs	r0, #10
 800358a:	f7fe f95f 	bl	800184c <xQueueGenericCreate>
 800358e:	4603      	mov	r3, r0
 8003590:	4a07      	ldr	r2, [pc, #28]	@ (80035b0 <prvCheckForValidListAndQueue+0x54>)
 8003592:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003594:	4b06      	ldr	r3, [pc, #24]	@ (80035b0 <prvCheckForValidListAndQueue+0x54>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d005      	beq.n	80035a8 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800359c:	4b04      	ldr	r3, [pc, #16]	@ (80035b0 <prvCheckForValidListAndQueue+0x54>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4908      	ldr	r1, [pc, #32]	@ (80035c4 <prvCheckForValidListAndQueue+0x68>)
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fe fb34 	bl	8001c10 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80035a8:	f000 f9be 	bl	8003928 <vPortExitCritical>
    }
 80035ac:	bf00      	nop
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	20000260 	.word	0x20000260
 80035b4:	20000230 	.word	0x20000230
 80035b8:	20000244 	.word	0x20000244
 80035bc:	20000258 	.word	0x20000258
 80035c0:	2000025c 	.word	0x2000025c
 80035c4:	08004e74 	.word	0x08004e74

080035c8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	3b04      	subs	r3, #4
 80035d8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80035e0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	3b04      	subs	r3, #4
 80035e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f023 0201 	bic.w	r2, r3, #1
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	3b04      	subs	r3, #4
 80035f6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80035f8:	4a0c      	ldr	r2, [pc, #48]	@ (800362c <pxPortInitialiseStack+0x64>)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	3b14      	subs	r3, #20
 8003602:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	3b04      	subs	r3, #4
 800360e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f06f 0202 	mvn.w	r2, #2
 8003616:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	3b20      	subs	r3, #32
 800361c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800361e:	68fb      	ldr	r3, [r7, #12]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	08003631 	.word	0x08003631

08003630 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003636:	2300      	movs	r3, #0
 8003638:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800363a:	4b13      	ldr	r3, [pc, #76]	@ (8003688 <prvTaskExitError+0x58>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003642:	d00b      	beq.n	800365c <prvTaskExitError+0x2c>
    __asm volatile
 8003644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003648:	f383 8811 	msr	BASEPRI, r3
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	60fb      	str	r3, [r7, #12]
}
 8003656:	bf00      	nop
 8003658:	bf00      	nop
 800365a:	e7fd      	b.n	8003658 <prvTaskExitError+0x28>
    __asm volatile
 800365c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003660:	f383 8811 	msr	BASEPRI, r3
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	60bb      	str	r3, [r7, #8]
}
 800366e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003670:	bf00      	nop
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0fc      	beq.n	8003672 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003678:	bf00      	nop
 800367a:	bf00      	nop
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	2000000c 	.word	0x2000000c
 800368c:	00000000 	.word	0x00000000

08003690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003690:	4b07      	ldr	r3, [pc, #28]	@ (80036b0 <pxCurrentTCBConst2>)
 8003692:	6819      	ldr	r1, [r3, #0]
 8003694:	6808      	ldr	r0, [r1, #0]
 8003696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800369a:	f380 8809 	msr	PSP, r0
 800369e:	f3bf 8f6f 	isb	sy
 80036a2:	f04f 0000 	mov.w	r0, #0
 80036a6:	f380 8811 	msr	BASEPRI, r0
 80036aa:	4770      	bx	lr
 80036ac:	f3af 8000 	nop.w

080036b0 <pxCurrentTCBConst2>:
 80036b0:	2000012c 	.word	0x2000012c
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 80036b4:	bf00      	nop
 80036b6:	bf00      	nop

080036b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80036b8:	4808      	ldr	r0, [pc, #32]	@ (80036dc <prvPortStartFirstTask+0x24>)
 80036ba:	6800      	ldr	r0, [r0, #0]
 80036bc:	6800      	ldr	r0, [r0, #0]
 80036be:	f380 8808 	msr	MSP, r0
 80036c2:	f04f 0000 	mov.w	r0, #0
 80036c6:	f380 8814 	msr	CONTROL, r0
 80036ca:	b662      	cpsie	i
 80036cc:	b661      	cpsie	f
 80036ce:	f3bf 8f4f 	dsb	sy
 80036d2:	f3bf 8f6f 	isb	sy
 80036d6:	df00      	svc	0
 80036d8:	bf00      	nop
 80036da:	0000      	.short	0x0000
 80036dc:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 80036e0:	bf00      	nop
 80036e2:	bf00      	nop

080036e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08c      	sub	sp, #48	@ 0x30
 80036e8:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80036ea:	4b69      	ldr	r3, [pc, #420]	@ (8003890 <xPortStartScheduler+0x1ac>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a69      	ldr	r2, [pc, #420]	@ (8003894 <xPortStartScheduler+0x1b0>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d10b      	bne.n	800370c <xPortStartScheduler+0x28>
    __asm volatile
 80036f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036f8:	f383 8811 	msr	BASEPRI, r3
 80036fc:	f3bf 8f6f 	isb	sy
 8003700:	f3bf 8f4f 	dsb	sy
 8003704:	623b      	str	r3, [r7, #32]
}
 8003706:	bf00      	nop
 8003708:	bf00      	nop
 800370a:	e7fd      	b.n	8003708 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800370c:	4b60      	ldr	r3, [pc, #384]	@ (8003890 <xPortStartScheduler+0x1ac>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a61      	ldr	r2, [pc, #388]	@ (8003898 <xPortStartScheduler+0x1b4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d10b      	bne.n	800372e <xPortStartScheduler+0x4a>
    __asm volatile
 8003716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800371a:	f383 8811 	msr	BASEPRI, r3
 800371e:	f3bf 8f6f 	isb	sy
 8003722:	f3bf 8f4f 	dsb	sy
 8003726:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003728:	bf00      	nop
 800372a:	bf00      	nop
 800372c:	e7fd      	b.n	800372a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800372e:	4b5b      	ldr	r3, [pc, #364]	@ (800389c <xPortStartScheduler+0x1b8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8003734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003736:	332c      	adds	r3, #44	@ 0x2c
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a59      	ldr	r2, [pc, #356]	@ (80038a0 <xPortStartScheduler+0x1bc>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d00b      	beq.n	8003758 <xPortStartScheduler+0x74>
    __asm volatile
 8003740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003744:	f383 8811 	msr	BASEPRI, r3
 8003748:	f3bf 8f6f 	isb	sy
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	61fb      	str	r3, [r7, #28]
}
 8003752:	bf00      	nop
 8003754:	bf00      	nop
 8003756:	e7fd      	b.n	8003754 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8003758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800375a:	3338      	adds	r3, #56	@ 0x38
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a51      	ldr	r2, [pc, #324]	@ (80038a4 <xPortStartScheduler+0x1c0>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d00b      	beq.n	800377c <xPortStartScheduler+0x98>
    __asm volatile
 8003764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003768:	f383 8811 	msr	BASEPRI, r3
 800376c:	f3bf 8f6f 	isb	sy
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	61bb      	str	r3, [r7, #24]
}
 8003776:	bf00      	nop
 8003778:	bf00      	nop
 800377a:	e7fd      	b.n	8003778 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800377c:	2300      	movs	r3, #0
 800377e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003780:	4b49      	ldr	r3, [pc, #292]	@ (80038a8 <xPortStartScheduler+0x1c4>)
 8003782:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8003784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	b2db      	uxtb	r3, r3
 800378a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800378c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800378e:	22ff      	movs	r2, #255	@ 0xff
 8003790:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	b2db      	uxtb	r3, r3
 8003798:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800379a:	79fb      	ldrb	r3, [r7, #7]
 800379c:	b2db      	uxtb	r3, r3
 800379e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	4b41      	ldr	r3, [pc, #260]	@ (80038ac <xPortStartScheduler+0x1c8>)
 80037a6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 80037a8:	4b40      	ldr	r3, [pc, #256]	@ (80038ac <xPortStartScheduler+0x1c8>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10b      	bne.n	80037c8 <xPortStartScheduler+0xe4>
    __asm volatile
 80037b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b4:	f383 8811 	msr	BASEPRI, r3
 80037b8:	f3bf 8f6f 	isb	sy
 80037bc:	f3bf 8f4f 	dsb	sy
 80037c0:	617b      	str	r3, [r7, #20]
}
 80037c2:	bf00      	nop
 80037c4:	bf00      	nop
 80037c6:	e7fd      	b.n	80037c4 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 80037c8:	79fb      	ldrb	r3, [r7, #7]
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	43db      	mvns	r3, r3
 80037ce:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d013      	beq.n	80037fe <xPortStartScheduler+0x11a>
    __asm volatile
 80037d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037da:	f383 8811 	msr	BASEPRI, r3
 80037de:	f3bf 8f6f 	isb	sy
 80037e2:	f3bf 8f4f 	dsb	sy
 80037e6:	613b      	str	r3, [r7, #16]
}
 80037e8:	bf00      	nop
 80037ea:	bf00      	nop
 80037ec:	e7fd      	b.n	80037ea <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	3301      	adds	r3, #1
 80037f2:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80037f4:	79fb      	ldrb	r3, [r7, #7]
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80037fe:	79fb      	ldrb	r3, [r7, #7]
 8003800:	b2db      	uxtb	r3, r3
 8003802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003806:	2b80      	cmp	r3, #128	@ 0x80
 8003808:	d0f1      	beq.n	80037ee <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2b08      	cmp	r3, #8
 800380e:	d103      	bne.n	8003818 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8003810:	4b27      	ldr	r3, [pc, #156]	@ (80038b0 <xPortStartScheduler+0x1cc>)
 8003812:	2200      	movs	r2, #0
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	e004      	b.n	8003822 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f1c3 0307 	rsb	r3, r3, #7
 800381e:	4a24      	ldr	r2, [pc, #144]	@ (80038b0 <xPortStartScheduler+0x1cc>)
 8003820:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003822:	4b23      	ldr	r3, [pc, #140]	@ (80038b0 <xPortStartScheduler+0x1cc>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	021b      	lsls	r3, r3, #8
 8003828:	4a21      	ldr	r2, [pc, #132]	@ (80038b0 <xPortStartScheduler+0x1cc>)
 800382a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800382c:	4b20      	ldr	r3, [pc, #128]	@ (80038b0 <xPortStartScheduler+0x1cc>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003834:	4a1e      	ldr	r2, [pc, #120]	@ (80038b0 <xPortStartScheduler+0x1cc>)
 8003836:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	b2da      	uxtb	r2, r3
 800383c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800383e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003840:	4b1c      	ldr	r3, [pc, #112]	@ (80038b4 <xPortStartScheduler+0x1d0>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a1b      	ldr	r2, [pc, #108]	@ (80038b4 <xPortStartScheduler+0x1d0>)
 8003846:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800384a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800384c:	4b19      	ldr	r3, [pc, #100]	@ (80038b4 <xPortStartScheduler+0x1d0>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a18      	ldr	r2, [pc, #96]	@ (80038b4 <xPortStartScheduler+0x1d0>)
 8003852:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003856:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8003858:	4b17      	ldr	r3, [pc, #92]	@ (80038b8 <xPortStartScheduler+0x1d4>)
 800385a:	2200      	movs	r2, #0
 800385c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800385e:	f000 f8e5 	bl	8003a2c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003862:	4b16      	ldr	r3, [pc, #88]	@ (80038bc <xPortStartScheduler+0x1d8>)
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003868:	f000 f904 	bl	8003a74 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800386c:	4b14      	ldr	r3, [pc, #80]	@ (80038c0 <xPortStartScheduler+0x1dc>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a13      	ldr	r2, [pc, #76]	@ (80038c0 <xPortStartScheduler+0x1dc>)
 8003872:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003876:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003878:	f7ff ff1e 	bl	80036b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800387c:	f7fe fed8 	bl	8002630 <vTaskSwitchContext>
    prvTaskExitError();
 8003880:	f7ff fed6 	bl	8003630 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3730      	adds	r7, #48	@ 0x30
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	e000ed00 	.word	0xe000ed00
 8003894:	410fc271 	.word	0x410fc271
 8003898:	410fc270 	.word	0x410fc270
 800389c:	e000ed08 	.word	0xe000ed08
 80038a0:	08003691 	.word	0x08003691
 80038a4:	08003981 	.word	0x08003981
 80038a8:	e000e400 	.word	0xe000e400
 80038ac:	2000026c 	.word	0x2000026c
 80038b0:	20000270 	.word	0x20000270
 80038b4:	e000ed20 	.word	0xe000ed20
 80038b8:	e000ed1c 	.word	0xe000ed1c
 80038bc:	2000000c 	.word	0x2000000c
 80038c0:	e000ef34 	.word	0xe000ef34

080038c4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
    __asm volatile
 80038ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ce:	f383 8811 	msr	BASEPRI, r3
 80038d2:	f3bf 8f6f 	isb	sy
 80038d6:	f3bf 8f4f 	dsb	sy
 80038da:	607b      	str	r3, [r7, #4]
}
 80038dc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80038de:	4b10      	ldr	r3, [pc, #64]	@ (8003920 <vPortEnterCritical+0x5c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	3301      	adds	r3, #1
 80038e4:	4a0e      	ldr	r2, [pc, #56]	@ (8003920 <vPortEnterCritical+0x5c>)
 80038e6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80038e8:	4b0d      	ldr	r3, [pc, #52]	@ (8003920 <vPortEnterCritical+0x5c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d110      	bne.n	8003912 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80038f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003924 <vPortEnterCritical+0x60>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00b      	beq.n	8003912 <vPortEnterCritical+0x4e>
    __asm volatile
 80038fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038fe:	f383 8811 	msr	BASEPRI, r3
 8003902:	f3bf 8f6f 	isb	sy
 8003906:	f3bf 8f4f 	dsb	sy
 800390a:	603b      	str	r3, [r7, #0]
}
 800390c:	bf00      	nop
 800390e:	bf00      	nop
 8003910:	e7fd      	b.n	800390e <vPortEnterCritical+0x4a>
    }
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	2000000c 	.word	0x2000000c
 8003924:	e000ed04 	.word	0xe000ed04

08003928 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800392e:	4b12      	ldr	r3, [pc, #72]	@ (8003978 <vPortExitCritical+0x50>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10b      	bne.n	800394e <vPortExitCritical+0x26>
    __asm volatile
 8003936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800393a:	f383 8811 	msr	BASEPRI, r3
 800393e:	f3bf 8f6f 	isb	sy
 8003942:	f3bf 8f4f 	dsb	sy
 8003946:	607b      	str	r3, [r7, #4]
}
 8003948:	bf00      	nop
 800394a:	bf00      	nop
 800394c:	e7fd      	b.n	800394a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800394e:	4b0a      	ldr	r3, [pc, #40]	@ (8003978 <vPortExitCritical+0x50>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	3b01      	subs	r3, #1
 8003954:	4a08      	ldr	r2, [pc, #32]	@ (8003978 <vPortExitCritical+0x50>)
 8003956:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003958:	4b07      	ldr	r3, [pc, #28]	@ (8003978 <vPortExitCritical+0x50>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d105      	bne.n	800396c <vPortExitCritical+0x44>
 8003960:	2300      	movs	r3, #0
 8003962:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800396a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	2000000c 	.word	0x2000000c
 800397c:	00000000 	.word	0x00000000

08003980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003980:	f3ef 8009 	mrs	r0, PSP
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	4b15      	ldr	r3, [pc, #84]	@ (80039e0 <pxCurrentTCBConst>)
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	f01e 0f10 	tst.w	lr, #16
 8003990:	bf08      	it	eq
 8003992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800399a:	6010      	str	r0, [r2, #0]
 800399c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80039a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80039a4:	f380 8811 	msr	BASEPRI, r0
 80039a8:	f3bf 8f4f 	dsb	sy
 80039ac:	f3bf 8f6f 	isb	sy
 80039b0:	f7fe fe3e 	bl	8002630 <vTaskSwitchContext>
 80039b4:	f04f 0000 	mov.w	r0, #0
 80039b8:	f380 8811 	msr	BASEPRI, r0
 80039bc:	bc09      	pop	{r0, r3}
 80039be:	6819      	ldr	r1, [r3, #0]
 80039c0:	6808      	ldr	r0, [r1, #0]
 80039c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039c6:	f01e 0f10 	tst.w	lr, #16
 80039ca:	bf08      	it	eq
 80039cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80039d0:	f380 8809 	msr	PSP, r0
 80039d4:	f3bf 8f6f 	isb	sy
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	f3af 8000 	nop.w

080039e0 <pxCurrentTCBConst>:
 80039e0:	2000012c 	.word	0x2000012c
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80039e4:	bf00      	nop
 80039e6:	bf00      	nop

080039e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
    __asm volatile
 80039ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	607b      	str	r3, [r7, #4]
}
 8003a00:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003a02:	f7fe fcfb 	bl	80023fc <xTaskIncrementTick>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003a0c:	4b06      	ldr	r3, [pc, #24]	@ (8003a28 <SysTick_Handler+0x40>)
 8003a0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	2300      	movs	r3, #0
 8003a16:	603b      	str	r3, [r7, #0]
    __asm volatile
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	f383 8811 	msr	BASEPRI, r3
}
 8003a1e:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8003a20:	bf00      	nop
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	e000ed04 	.word	0xe000ed04

08003a2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003a30:	4b0b      	ldr	r3, [pc, #44]	@ (8003a60 <vPortSetupTimerInterrupt+0x34>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003a36:	4b0b      	ldr	r3, [pc, #44]	@ (8003a64 <vPortSetupTimerInterrupt+0x38>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a68 <vPortSetupTimerInterrupt+0x3c>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a0a      	ldr	r2, [pc, #40]	@ (8003a6c <vPortSetupTimerInterrupt+0x40>)
 8003a42:	fba2 2303 	umull	r2, r3, r2, r3
 8003a46:	099b      	lsrs	r3, r3, #6
 8003a48:	4a09      	ldr	r2, [pc, #36]	@ (8003a70 <vPortSetupTimerInterrupt+0x44>)
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003a4e:	4b04      	ldr	r3, [pc, #16]	@ (8003a60 <vPortSetupTimerInterrupt+0x34>)
 8003a50:	2207      	movs	r2, #7
 8003a52:	601a      	str	r2, [r3, #0]
}
 8003a54:	bf00      	nop
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	e000e010 	.word	0xe000e010
 8003a64:	e000e018 	.word	0xe000e018
 8003a68:	20000000 	.word	0x20000000
 8003a6c:	10624dd3 	.word	0x10624dd3
 8003a70:	e000e014 	.word	0xe000e014

08003a74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003a74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003a84 <vPortEnableVFP+0x10>
 8003a78:	6801      	ldr	r1, [r0, #0]
 8003a7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003a7e:	6001      	str	r1, [r0, #0]
 8003a80:	4770      	bx	lr
 8003a82:	0000      	.short	0x0000
 8003a84:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8003a88:	bf00      	nop
 8003a8a:	bf00      	nop

08003a8c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b08e      	sub	sp, #56	@ 0x38
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d022      	beq.n	8003ae4 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8003a9e:	2308      	movs	r3, #8
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d81b      	bhi.n	8003ae0 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8003aa8:	2208      	movs	r2, #8
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4413      	add	r3, r2
 8003aae:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d014      	beq.n	8003ae4 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	f1c3 0308 	rsb	r3, r3, #8
 8003ac4:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d804      	bhi.n	8003ada <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad4:	4413      	add	r3, r2
 8003ad6:	607b      	str	r3, [r7, #4]
 8003ad8:	e004      	b.n	8003ae4 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	607b      	str	r3, [r7, #4]
 8003ade:	e001      	b.n	8003ae4 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8003ae4:	f7fe fb64 	bl	80021b0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003ae8:	4b7a      	ldr	r3, [pc, #488]	@ (8003cd4 <pvPortMalloc+0x248>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d101      	bne.n	8003af4 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8003af0:	f000 f974 	bl	8003ddc <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f2c0 80d3 	blt.w	8003ca2 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 80cf 	beq.w	8003ca2 <pvPortMalloc+0x216>
 8003b04:	4b74      	ldr	r3, [pc, #464]	@ (8003cd8 <pvPortMalloc+0x24c>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	f200 80c9 	bhi.w	8003ca2 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003b10:	4b72      	ldr	r3, [pc, #456]	@ (8003cdc <pvPortMalloc+0x250>)
 8003b12:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8003b14:	4b71      	ldr	r3, [pc, #452]	@ (8003cdc <pvPortMalloc+0x250>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8003b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b1c:	4a70      	ldr	r2, [pc, #448]	@ (8003ce0 <pvPortMalloc+0x254>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d305      	bcc.n	8003b2e <pvPortMalloc+0xa2>
 8003b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b24:	4a6f      	ldr	r2, [pc, #444]	@ (8003ce4 <pvPortMalloc+0x258>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d801      	bhi.n	8003b2e <pvPortMalloc+0xa2>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e000      	b.n	8003b30 <pvPortMalloc+0xa4>
 8003b2e:	2300      	movs	r3, #0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d129      	bne.n	8003b88 <pvPortMalloc+0xfc>
    __asm volatile
 8003b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b38:	f383 8811 	msr	BASEPRI, r3
 8003b3c:	f3bf 8f6f 	isb	sy
 8003b40:	f3bf 8f4f 	dsb	sy
 8003b44:	623b      	str	r3, [r7, #32]
}
 8003b46:	bf00      	nop
 8003b48:	bf00      	nop
 8003b4a:	e7fd      	b.n	8003b48 <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8003b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b4e:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8003b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8003b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b58:	4a61      	ldr	r2, [pc, #388]	@ (8003ce0 <pvPortMalloc+0x254>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d305      	bcc.n	8003b6a <pvPortMalloc+0xde>
 8003b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b60:	4a60      	ldr	r2, [pc, #384]	@ (8003ce4 <pvPortMalloc+0x258>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d801      	bhi.n	8003b6a <pvPortMalloc+0xde>
 8003b66:	2301      	movs	r3, #1
 8003b68:	e000      	b.n	8003b6c <pvPortMalloc+0xe0>
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10b      	bne.n	8003b88 <pvPortMalloc+0xfc>
    __asm volatile
 8003b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	61fb      	str	r3, [r7, #28]
}
 8003b82:	bf00      	nop
 8003b84:	bf00      	nop
 8003b86:	e7fd      	b.n	8003b84 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8003b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d903      	bls.n	8003b9a <pvPortMalloc+0x10e>
 8003b92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1d8      	bne.n	8003b4c <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003b9a:	4b4e      	ldr	r3, [pc, #312]	@ (8003cd4 <pvPortMalloc+0x248>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d07e      	beq.n	8003ca2 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2208      	movs	r2, #8
 8003baa:	4413      	add	r3, r2
 8003bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8003bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bb0:	4a4b      	ldr	r2, [pc, #300]	@ (8003ce0 <pvPortMalloc+0x254>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d305      	bcc.n	8003bc2 <pvPortMalloc+0x136>
 8003bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bb8:	4a4a      	ldr	r2, [pc, #296]	@ (8003ce4 <pvPortMalloc+0x258>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d801      	bhi.n	8003bc2 <pvPortMalloc+0x136>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e000      	b.n	8003bc4 <pvPortMalloc+0x138>
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10b      	bne.n	8003be0 <pvPortMalloc+0x154>
    __asm volatile
 8003bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bcc:	f383 8811 	msr	BASEPRI, r3
 8003bd0:	f3bf 8f6f 	isb	sy
 8003bd4:	f3bf 8f4f 	dsb	sy
 8003bd8:	61bb      	str	r3, [r7, #24]
}
 8003bda:	bf00      	nop
 8003bdc:	bf00      	nop
 8003bde:	e7fd      	b.n	8003bdc <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be6:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8003be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d90b      	bls.n	8003c0a <pvPortMalloc+0x17e>
    __asm volatile
 8003bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bf6:	f383 8811 	msr	BASEPRI, r3
 8003bfa:	f3bf 8f6f 	isb	sy
 8003bfe:	f3bf 8f4f 	dsb	sy
 8003c02:	617b      	str	r3, [r7, #20]
}
 8003c04:	bf00      	nop
 8003c06:	bf00      	nop
 8003c08:	e7fd      	b.n	8003c06 <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003c0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	1ad2      	subs	r2, r2, r3
 8003c12:	2308      	movs	r3, #8
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d924      	bls.n	8003c64 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003c1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4413      	add	r3, r2
 8003c20:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00b      	beq.n	8003c44 <pvPortMalloc+0x1b8>
    __asm volatile
 8003c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c30:	f383 8811 	msr	BASEPRI, r3
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	613b      	str	r3, [r7, #16]
}
 8003c3e:	bf00      	nop
 8003c40:	bf00      	nop
 8003c42:	e7fd      	b.n	8003c40 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	1ad2      	subs	r2, r2, r3
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8003c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5c:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8003c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c62:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c64:	4b1c      	ldr	r3, [pc, #112]	@ (8003cd8 <pvPortMalloc+0x24c>)
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	4a1a      	ldr	r2, [pc, #104]	@ (8003cd8 <pvPortMalloc+0x24c>)
 8003c70:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003c72:	4b19      	ldr	r3, [pc, #100]	@ (8003cd8 <pvPortMalloc+0x24c>)
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	4b1c      	ldr	r3, [pc, #112]	@ (8003ce8 <pvPortMalloc+0x25c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d203      	bcs.n	8003c86 <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003c7e:	4b16      	ldr	r3, [pc, #88]	@ (8003cd8 <pvPortMalloc+0x24c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a19      	ldr	r2, [pc, #100]	@ (8003ce8 <pvPortMalloc+0x25c>)
 8003c84:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c90:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003c98:	4b14      	ldr	r3, [pc, #80]	@ (8003cec <pvPortMalloc+0x260>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	4a13      	ldr	r2, [pc, #76]	@ (8003cec <pvPortMalloc+0x260>)
 8003ca0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003ca2:	f7fe fa93 	bl	80021cc <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00b      	beq.n	8003cc8 <pvPortMalloc+0x23c>
    __asm volatile
 8003cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb4:	f383 8811 	msr	BASEPRI, r3
 8003cb8:	f3bf 8f6f 	isb	sy
 8003cbc:	f3bf 8f4f 	dsb	sy
 8003cc0:	60fb      	str	r3, [r7, #12]
}
 8003cc2:	bf00      	nop
 8003cc4:	bf00      	nop
 8003cc6:	e7fd      	b.n	8003cc4 <pvPortMalloc+0x238>
    return pvReturn;
 8003cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3738      	adds	r7, #56	@ 0x38
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	20012e7c 	.word	0x20012e7c
 8003cd8:	20012e80 	.word	0x20012e80
 8003cdc:	20012e74 	.word	0x20012e74
 8003ce0:	20000274 	.word	0x20000274
 8003ce4:	20012e73 	.word	0x20012e73
 8003ce8:	20012e84 	.word	0x20012e84
 8003cec:	20012e88 	.word	0x20012e88

08003cf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b088      	sub	sp, #32
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d060      	beq.n	8003dc4 <vPortFree+0xd4>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003d02:	2308      	movs	r3, #8
 8003d04:	425b      	negs	r3, r3
 8003d06:	69fa      	ldr	r2, [r7, #28]
 8003d08:	4413      	add	r3, r2
 8003d0a:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	4a2e      	ldr	r2, [pc, #184]	@ (8003dcc <vPortFree+0xdc>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d305      	bcc.n	8003d24 <vPortFree+0x34>
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	4a2d      	ldr	r2, [pc, #180]	@ (8003dd0 <vPortFree+0xe0>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d801      	bhi.n	8003d24 <vPortFree+0x34>
 8003d20:	2301      	movs	r3, #1
 8003d22:	e000      	b.n	8003d26 <vPortFree+0x36>
 8003d24:	2300      	movs	r3, #0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10b      	bne.n	8003d42 <vPortFree+0x52>
    __asm volatile
 8003d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d2e:	f383 8811 	msr	BASEPRI, r3
 8003d32:	f3bf 8f6f 	isb	sy
 8003d36:	f3bf 8f4f 	dsb	sy
 8003d3a:	617b      	str	r3, [r7, #20]
}
 8003d3c:	bf00      	nop
 8003d3e:	bf00      	nop
 8003d40:	e7fd      	b.n	8003d3e <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	db0b      	blt.n	8003d62 <vPortFree+0x72>
    __asm volatile
 8003d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d4e:	f383 8811 	msr	BASEPRI, r3
 8003d52:	f3bf 8f6f 	isb	sy
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	613b      	str	r3, [r7, #16]
}
 8003d5c:	bf00      	nop
 8003d5e:	bf00      	nop
 8003d60:	e7fd      	b.n	8003d5e <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00b      	beq.n	8003d82 <vPortFree+0x92>
    __asm volatile
 8003d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d6e:	f383 8811 	msr	BASEPRI, r3
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	60fb      	str	r3, [r7, #12]
}
 8003d7c:	bf00      	nop
 8003d7e:	bf00      	nop
 8003d80:	e7fd      	b.n	8003d7e <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	da1c      	bge.n	8003dc4 <vPortFree+0xd4>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d118      	bne.n	8003dc4 <vPortFree+0xd4>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8003d9e:	f7fe fa07 	bl	80021b0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd4 <vPortFree+0xe4>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4413      	add	r3, r2
 8003dac:	4a09      	ldr	r2, [pc, #36]	@ (8003dd4 <vPortFree+0xe4>)
 8003dae:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003db0:	69b8      	ldr	r0, [r7, #24]
 8003db2:	f000 f86d 	bl	8003e90 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003db6:	4b08      	ldr	r3, [pc, #32]	@ (8003dd8 <vPortFree+0xe8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	4a06      	ldr	r2, [pc, #24]	@ (8003dd8 <vPortFree+0xe8>)
 8003dbe:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003dc0:	f7fe fa04 	bl	80021cc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003dc4:	bf00      	nop
 8003dc6:	3720      	adds	r7, #32
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	20000274 	.word	0x20000274
 8003dd0:	20012e73 	.word	0x20012e73
 8003dd4:	20012e80 	.word	0x20012e80
 8003dd8:	20012e8c 	.word	0x20012e8c

08003ddc <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003de2:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8003de6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003de8:	4b24      	ldr	r3, [pc, #144]	@ (8003e7c <prvHeapInit+0xa0>)
 8003dea:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00c      	beq.n	8003e10 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	3307      	adds	r3, #7
 8003dfa:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f023 0307 	bic.w	r3, r3, #7
 8003e02:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	4a1c      	ldr	r2, [pc, #112]	@ (8003e7c <prvHeapInit+0xa0>)
 8003e0c:	4413      	add	r3, r2
 8003e0e:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4a1b      	ldr	r2, [pc, #108]	@ (8003e80 <prvHeapInit+0xa4>)
 8003e14:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003e16:	4b1a      	ldr	r3, [pc, #104]	@ (8003e80 <prvHeapInit+0xa4>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	4413      	add	r3, r2
 8003e22:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8003e24:	2208      	movs	r2, #8
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	1a9b      	subs	r3, r3, r2
 8003e2a:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f023 0307 	bic.w	r3, r3, #7
 8003e32:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a13      	ldr	r2, [pc, #76]	@ (8003e84 <prvHeapInit+0xa8>)
 8003e38:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003e3a:	4b12      	ldr	r3, [pc, #72]	@ (8003e84 <prvHeapInit+0xa8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8003e42:	4b10      	ldr	r3, [pc, #64]	@ (8003e84 <prvHeapInit+0xa8>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2200      	movs	r2, #0
 8003e48:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	1ad2      	subs	r2, r2, r3
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003e58:	4b0a      	ldr	r3, [pc, #40]	@ (8003e84 <prvHeapInit+0xa8>)
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	4a08      	ldr	r2, [pc, #32]	@ (8003e88 <prvHeapInit+0xac>)
 8003e66:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	4a07      	ldr	r2, [pc, #28]	@ (8003e8c <prvHeapInit+0xb0>)
 8003e6e:	6013      	str	r3, [r2, #0]
}
 8003e70:	bf00      	nop
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	20000274 	.word	0x20000274
 8003e80:	20012e74 	.word	0x20012e74
 8003e84:	20012e7c 	.word	0x20012e7c
 8003e88:	20012e84 	.word	0x20012e84
 8003e8c:	20012e80 	.word	0x20012e80

08003e90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003e90:	b480      	push	{r7}
 8003e92:	b087      	sub	sp, #28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003e98:	4b36      	ldr	r3, [pc, #216]	@ (8003f74 <prvInsertBlockIntoFreeList+0xe4>)
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	e002      	b.n	8003ea4 <prvInsertBlockIntoFreeList+0x14>
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d8f7      	bhi.n	8003e9e <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	4a30      	ldr	r2, [pc, #192]	@ (8003f74 <prvInsertBlockIntoFreeList+0xe4>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d018      	beq.n	8003ee8 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	4a2f      	ldr	r2, [pc, #188]	@ (8003f78 <prvInsertBlockIntoFreeList+0xe8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d305      	bcc.n	8003eca <prvInsertBlockIntoFreeList+0x3a>
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	4a2e      	ldr	r2, [pc, #184]	@ (8003f7c <prvInsertBlockIntoFreeList+0xec>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d801      	bhi.n	8003eca <prvInsertBlockIntoFreeList+0x3a>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e000      	b.n	8003ecc <prvInsertBlockIntoFreeList+0x3c>
 8003eca:	2300      	movs	r3, #0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10b      	bne.n	8003ee8 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8003ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed4:	f383 8811 	msr	BASEPRI, r3
 8003ed8:	f3bf 8f6f 	isb	sy
 8003edc:	f3bf 8f4f 	dsb	sy
 8003ee0:	60fb      	str	r3, [r7, #12]
}
 8003ee2:	bf00      	nop
 8003ee4:	bf00      	nop
 8003ee6:	e7fd      	b.n	8003ee4 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d108      	bne.n	8003f0c <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	441a      	add	r2, r3
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	441a      	add	r2, r3
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d118      	bne.n	8003f52 <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	4b16      	ldr	r3, [pc, #88]	@ (8003f80 <prvInsertBlockIntoFreeList+0xf0>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d00d      	beq.n	8003f48 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	441a      	add	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	e008      	b.n	8003f5a <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003f48:	4b0d      	ldr	r3, [pc, #52]	@ (8003f80 <prvInsertBlockIntoFreeList+0xf0>)
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	e003      	b.n	8003f5a <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d002      	beq.n	8003f68 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003f68:	bf00      	nop
 8003f6a:	371c      	adds	r7, #28
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	20012e74 	.word	0x20012e74
 8003f78:	20000274 	.word	0x20000274
 8003f7c:	20012e73 	.word	0x20012e73
 8003f80:	20012e7c 	.word	0x20012e7c

08003f84 <std>:
 8003f84:	2300      	movs	r3, #0
 8003f86:	b510      	push	{r4, lr}
 8003f88:	4604      	mov	r4, r0
 8003f8a:	e9c0 3300 	strd	r3, r3, [r0]
 8003f8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f92:	6083      	str	r3, [r0, #8]
 8003f94:	8181      	strh	r1, [r0, #12]
 8003f96:	6643      	str	r3, [r0, #100]	@ 0x64
 8003f98:	81c2      	strh	r2, [r0, #14]
 8003f9a:	6183      	str	r3, [r0, #24]
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	2208      	movs	r2, #8
 8003fa0:	305c      	adds	r0, #92	@ 0x5c
 8003fa2:	f000 f906 	bl	80041b2 <memset>
 8003fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8003fdc <std+0x58>)
 8003fa8:	6263      	str	r3, [r4, #36]	@ 0x24
 8003faa:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe0 <std+0x5c>)
 8003fac:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003fae:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe4 <std+0x60>)
 8003fb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe8 <std+0x64>)
 8003fb4:	6323      	str	r3, [r4, #48]	@ 0x30
 8003fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8003fec <std+0x68>)
 8003fb8:	6224      	str	r4, [r4, #32]
 8003fba:	429c      	cmp	r4, r3
 8003fbc:	d006      	beq.n	8003fcc <std+0x48>
 8003fbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003fc2:	4294      	cmp	r4, r2
 8003fc4:	d002      	beq.n	8003fcc <std+0x48>
 8003fc6:	33d0      	adds	r3, #208	@ 0xd0
 8003fc8:	429c      	cmp	r4, r3
 8003fca:	d105      	bne.n	8003fd8 <std+0x54>
 8003fcc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fd4:	f000 b966 	b.w	80042a4 <__retarget_lock_init_recursive>
 8003fd8:	bd10      	pop	{r4, pc}
 8003fda:	bf00      	nop
 8003fdc:	0800412d 	.word	0x0800412d
 8003fe0:	0800414f 	.word	0x0800414f
 8003fe4:	08004187 	.word	0x08004187
 8003fe8:	080041ab 	.word	0x080041ab
 8003fec:	20012e90 	.word	0x20012e90

08003ff0 <stdio_exit_handler>:
 8003ff0:	4a02      	ldr	r2, [pc, #8]	@ (8003ffc <stdio_exit_handler+0xc>)
 8003ff2:	4903      	ldr	r1, [pc, #12]	@ (8004000 <stdio_exit_handler+0x10>)
 8003ff4:	4803      	ldr	r0, [pc, #12]	@ (8004004 <stdio_exit_handler+0x14>)
 8003ff6:	f000 b869 	b.w	80040cc <_fwalk_sglue>
 8003ffa:	bf00      	nop
 8003ffc:	20000010 	.word	0x20000010
 8004000:	08004b5d 	.word	0x08004b5d
 8004004:	20000020 	.word	0x20000020

08004008 <cleanup_stdio>:
 8004008:	6841      	ldr	r1, [r0, #4]
 800400a:	4b0c      	ldr	r3, [pc, #48]	@ (800403c <cleanup_stdio+0x34>)
 800400c:	4299      	cmp	r1, r3
 800400e:	b510      	push	{r4, lr}
 8004010:	4604      	mov	r4, r0
 8004012:	d001      	beq.n	8004018 <cleanup_stdio+0x10>
 8004014:	f000 fda2 	bl	8004b5c <_fflush_r>
 8004018:	68a1      	ldr	r1, [r4, #8]
 800401a:	4b09      	ldr	r3, [pc, #36]	@ (8004040 <cleanup_stdio+0x38>)
 800401c:	4299      	cmp	r1, r3
 800401e:	d002      	beq.n	8004026 <cleanup_stdio+0x1e>
 8004020:	4620      	mov	r0, r4
 8004022:	f000 fd9b 	bl	8004b5c <_fflush_r>
 8004026:	68e1      	ldr	r1, [r4, #12]
 8004028:	4b06      	ldr	r3, [pc, #24]	@ (8004044 <cleanup_stdio+0x3c>)
 800402a:	4299      	cmp	r1, r3
 800402c:	d004      	beq.n	8004038 <cleanup_stdio+0x30>
 800402e:	4620      	mov	r0, r4
 8004030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004034:	f000 bd92 	b.w	8004b5c <_fflush_r>
 8004038:	bd10      	pop	{r4, pc}
 800403a:	bf00      	nop
 800403c:	20012e90 	.word	0x20012e90
 8004040:	20012ef8 	.word	0x20012ef8
 8004044:	20012f60 	.word	0x20012f60

08004048 <global_stdio_init.part.0>:
 8004048:	b510      	push	{r4, lr}
 800404a:	4b0b      	ldr	r3, [pc, #44]	@ (8004078 <global_stdio_init.part.0+0x30>)
 800404c:	4c0b      	ldr	r4, [pc, #44]	@ (800407c <global_stdio_init.part.0+0x34>)
 800404e:	4a0c      	ldr	r2, [pc, #48]	@ (8004080 <global_stdio_init.part.0+0x38>)
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	4620      	mov	r0, r4
 8004054:	2200      	movs	r2, #0
 8004056:	2104      	movs	r1, #4
 8004058:	f7ff ff94 	bl	8003f84 <std>
 800405c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004060:	2201      	movs	r2, #1
 8004062:	2109      	movs	r1, #9
 8004064:	f7ff ff8e 	bl	8003f84 <std>
 8004068:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800406c:	2202      	movs	r2, #2
 800406e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004072:	2112      	movs	r1, #18
 8004074:	f7ff bf86 	b.w	8003f84 <std>
 8004078:	20012fc8 	.word	0x20012fc8
 800407c:	20012e90 	.word	0x20012e90
 8004080:	08003ff1 	.word	0x08003ff1

08004084 <__sfp_lock_acquire>:
 8004084:	4801      	ldr	r0, [pc, #4]	@ (800408c <__sfp_lock_acquire+0x8>)
 8004086:	f000 b90e 	b.w	80042a6 <__retarget_lock_acquire_recursive>
 800408a:	bf00      	nop
 800408c:	20012fd1 	.word	0x20012fd1

08004090 <__sfp_lock_release>:
 8004090:	4801      	ldr	r0, [pc, #4]	@ (8004098 <__sfp_lock_release+0x8>)
 8004092:	f000 b909 	b.w	80042a8 <__retarget_lock_release_recursive>
 8004096:	bf00      	nop
 8004098:	20012fd1 	.word	0x20012fd1

0800409c <__sinit>:
 800409c:	b510      	push	{r4, lr}
 800409e:	4604      	mov	r4, r0
 80040a0:	f7ff fff0 	bl	8004084 <__sfp_lock_acquire>
 80040a4:	6a23      	ldr	r3, [r4, #32]
 80040a6:	b11b      	cbz	r3, 80040b0 <__sinit+0x14>
 80040a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040ac:	f7ff bff0 	b.w	8004090 <__sfp_lock_release>
 80040b0:	4b04      	ldr	r3, [pc, #16]	@ (80040c4 <__sinit+0x28>)
 80040b2:	6223      	str	r3, [r4, #32]
 80040b4:	4b04      	ldr	r3, [pc, #16]	@ (80040c8 <__sinit+0x2c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1f5      	bne.n	80040a8 <__sinit+0xc>
 80040bc:	f7ff ffc4 	bl	8004048 <global_stdio_init.part.0>
 80040c0:	e7f2      	b.n	80040a8 <__sinit+0xc>
 80040c2:	bf00      	nop
 80040c4:	08004009 	.word	0x08004009
 80040c8:	20012fc8 	.word	0x20012fc8

080040cc <_fwalk_sglue>:
 80040cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040d0:	4607      	mov	r7, r0
 80040d2:	4688      	mov	r8, r1
 80040d4:	4614      	mov	r4, r2
 80040d6:	2600      	movs	r6, #0
 80040d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80040dc:	f1b9 0901 	subs.w	r9, r9, #1
 80040e0:	d505      	bpl.n	80040ee <_fwalk_sglue+0x22>
 80040e2:	6824      	ldr	r4, [r4, #0]
 80040e4:	2c00      	cmp	r4, #0
 80040e6:	d1f7      	bne.n	80040d8 <_fwalk_sglue+0xc>
 80040e8:	4630      	mov	r0, r6
 80040ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040ee:	89ab      	ldrh	r3, [r5, #12]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d907      	bls.n	8004104 <_fwalk_sglue+0x38>
 80040f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80040f8:	3301      	adds	r3, #1
 80040fa:	d003      	beq.n	8004104 <_fwalk_sglue+0x38>
 80040fc:	4629      	mov	r1, r5
 80040fe:	4638      	mov	r0, r7
 8004100:	47c0      	blx	r8
 8004102:	4306      	orrs	r6, r0
 8004104:	3568      	adds	r5, #104	@ 0x68
 8004106:	e7e9      	b.n	80040dc <_fwalk_sglue+0x10>

08004108 <iprintf>:
 8004108:	b40f      	push	{r0, r1, r2, r3}
 800410a:	b507      	push	{r0, r1, r2, lr}
 800410c:	4906      	ldr	r1, [pc, #24]	@ (8004128 <iprintf+0x20>)
 800410e:	ab04      	add	r3, sp, #16
 8004110:	6808      	ldr	r0, [r1, #0]
 8004112:	f853 2b04 	ldr.w	r2, [r3], #4
 8004116:	6881      	ldr	r1, [r0, #8]
 8004118:	9301      	str	r3, [sp, #4]
 800411a:	f000 f9f7 	bl	800450c <_vfiprintf_r>
 800411e:	b003      	add	sp, #12
 8004120:	f85d eb04 	ldr.w	lr, [sp], #4
 8004124:	b004      	add	sp, #16
 8004126:	4770      	bx	lr
 8004128:	2000001c 	.word	0x2000001c

0800412c <__sread>:
 800412c:	b510      	push	{r4, lr}
 800412e:	460c      	mov	r4, r1
 8004130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004134:	f000 f868 	bl	8004208 <_read_r>
 8004138:	2800      	cmp	r0, #0
 800413a:	bfab      	itete	ge
 800413c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800413e:	89a3      	ldrhlt	r3, [r4, #12]
 8004140:	181b      	addge	r3, r3, r0
 8004142:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004146:	bfac      	ite	ge
 8004148:	6563      	strge	r3, [r4, #84]	@ 0x54
 800414a:	81a3      	strhlt	r3, [r4, #12]
 800414c:	bd10      	pop	{r4, pc}

0800414e <__swrite>:
 800414e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004152:	461f      	mov	r7, r3
 8004154:	898b      	ldrh	r3, [r1, #12]
 8004156:	05db      	lsls	r3, r3, #23
 8004158:	4605      	mov	r5, r0
 800415a:	460c      	mov	r4, r1
 800415c:	4616      	mov	r6, r2
 800415e:	d505      	bpl.n	800416c <__swrite+0x1e>
 8004160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004164:	2302      	movs	r3, #2
 8004166:	2200      	movs	r2, #0
 8004168:	f000 f83c 	bl	80041e4 <_lseek_r>
 800416c:	89a3      	ldrh	r3, [r4, #12]
 800416e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004172:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004176:	81a3      	strh	r3, [r4, #12]
 8004178:	4632      	mov	r2, r6
 800417a:	463b      	mov	r3, r7
 800417c:	4628      	mov	r0, r5
 800417e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004182:	f000 b853 	b.w	800422c <_write_r>

08004186 <__sseek>:
 8004186:	b510      	push	{r4, lr}
 8004188:	460c      	mov	r4, r1
 800418a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800418e:	f000 f829 	bl	80041e4 <_lseek_r>
 8004192:	1c43      	adds	r3, r0, #1
 8004194:	89a3      	ldrh	r3, [r4, #12]
 8004196:	bf15      	itete	ne
 8004198:	6560      	strne	r0, [r4, #84]	@ 0x54
 800419a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800419e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80041a2:	81a3      	strheq	r3, [r4, #12]
 80041a4:	bf18      	it	ne
 80041a6:	81a3      	strhne	r3, [r4, #12]
 80041a8:	bd10      	pop	{r4, pc}

080041aa <__sclose>:
 80041aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041ae:	f000 b809 	b.w	80041c4 <_close_r>

080041b2 <memset>:
 80041b2:	4402      	add	r2, r0
 80041b4:	4603      	mov	r3, r0
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d100      	bne.n	80041bc <memset+0xa>
 80041ba:	4770      	bx	lr
 80041bc:	f803 1b01 	strb.w	r1, [r3], #1
 80041c0:	e7f9      	b.n	80041b6 <memset+0x4>
	...

080041c4 <_close_r>:
 80041c4:	b538      	push	{r3, r4, r5, lr}
 80041c6:	4d06      	ldr	r5, [pc, #24]	@ (80041e0 <_close_r+0x1c>)
 80041c8:	2300      	movs	r3, #0
 80041ca:	4604      	mov	r4, r0
 80041cc:	4608      	mov	r0, r1
 80041ce:	602b      	str	r3, [r5, #0]
 80041d0:	f7fc fa95 	bl	80006fe <_close>
 80041d4:	1c43      	adds	r3, r0, #1
 80041d6:	d102      	bne.n	80041de <_close_r+0x1a>
 80041d8:	682b      	ldr	r3, [r5, #0]
 80041da:	b103      	cbz	r3, 80041de <_close_r+0x1a>
 80041dc:	6023      	str	r3, [r4, #0]
 80041de:	bd38      	pop	{r3, r4, r5, pc}
 80041e0:	20012fcc 	.word	0x20012fcc

080041e4 <_lseek_r>:
 80041e4:	b538      	push	{r3, r4, r5, lr}
 80041e6:	4d07      	ldr	r5, [pc, #28]	@ (8004204 <_lseek_r+0x20>)
 80041e8:	4604      	mov	r4, r0
 80041ea:	4608      	mov	r0, r1
 80041ec:	4611      	mov	r1, r2
 80041ee:	2200      	movs	r2, #0
 80041f0:	602a      	str	r2, [r5, #0]
 80041f2:	461a      	mov	r2, r3
 80041f4:	f7fc faaa 	bl	800074c <_lseek>
 80041f8:	1c43      	adds	r3, r0, #1
 80041fa:	d102      	bne.n	8004202 <_lseek_r+0x1e>
 80041fc:	682b      	ldr	r3, [r5, #0]
 80041fe:	b103      	cbz	r3, 8004202 <_lseek_r+0x1e>
 8004200:	6023      	str	r3, [r4, #0]
 8004202:	bd38      	pop	{r3, r4, r5, pc}
 8004204:	20012fcc 	.word	0x20012fcc

08004208 <_read_r>:
 8004208:	b538      	push	{r3, r4, r5, lr}
 800420a:	4d07      	ldr	r5, [pc, #28]	@ (8004228 <_read_r+0x20>)
 800420c:	4604      	mov	r4, r0
 800420e:	4608      	mov	r0, r1
 8004210:	4611      	mov	r1, r2
 8004212:	2200      	movs	r2, #0
 8004214:	602a      	str	r2, [r5, #0]
 8004216:	461a      	mov	r2, r3
 8004218:	f7fc fa38 	bl	800068c <_read>
 800421c:	1c43      	adds	r3, r0, #1
 800421e:	d102      	bne.n	8004226 <_read_r+0x1e>
 8004220:	682b      	ldr	r3, [r5, #0]
 8004222:	b103      	cbz	r3, 8004226 <_read_r+0x1e>
 8004224:	6023      	str	r3, [r4, #0]
 8004226:	bd38      	pop	{r3, r4, r5, pc}
 8004228:	20012fcc 	.word	0x20012fcc

0800422c <_write_r>:
 800422c:	b538      	push	{r3, r4, r5, lr}
 800422e:	4d07      	ldr	r5, [pc, #28]	@ (800424c <_write_r+0x20>)
 8004230:	4604      	mov	r4, r0
 8004232:	4608      	mov	r0, r1
 8004234:	4611      	mov	r1, r2
 8004236:	2200      	movs	r2, #0
 8004238:	602a      	str	r2, [r5, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	f7fc fa43 	bl	80006c6 <_write>
 8004240:	1c43      	adds	r3, r0, #1
 8004242:	d102      	bne.n	800424a <_write_r+0x1e>
 8004244:	682b      	ldr	r3, [r5, #0]
 8004246:	b103      	cbz	r3, 800424a <_write_r+0x1e>
 8004248:	6023      	str	r3, [r4, #0]
 800424a:	bd38      	pop	{r3, r4, r5, pc}
 800424c:	20012fcc 	.word	0x20012fcc

08004250 <__errno>:
 8004250:	4b01      	ldr	r3, [pc, #4]	@ (8004258 <__errno+0x8>)
 8004252:	6818      	ldr	r0, [r3, #0]
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	2000001c 	.word	0x2000001c

0800425c <__libc_init_array>:
 800425c:	b570      	push	{r4, r5, r6, lr}
 800425e:	4d0d      	ldr	r5, [pc, #52]	@ (8004294 <__libc_init_array+0x38>)
 8004260:	4c0d      	ldr	r4, [pc, #52]	@ (8004298 <__libc_init_array+0x3c>)
 8004262:	1b64      	subs	r4, r4, r5
 8004264:	10a4      	asrs	r4, r4, #2
 8004266:	2600      	movs	r6, #0
 8004268:	42a6      	cmp	r6, r4
 800426a:	d109      	bne.n	8004280 <__libc_init_array+0x24>
 800426c:	4d0b      	ldr	r5, [pc, #44]	@ (800429c <__libc_init_array+0x40>)
 800426e:	4c0c      	ldr	r4, [pc, #48]	@ (80042a0 <__libc_init_array+0x44>)
 8004270:	f000 fdc4 	bl	8004dfc <_init>
 8004274:	1b64      	subs	r4, r4, r5
 8004276:	10a4      	asrs	r4, r4, #2
 8004278:	2600      	movs	r6, #0
 800427a:	42a6      	cmp	r6, r4
 800427c:	d105      	bne.n	800428a <__libc_init_array+0x2e>
 800427e:	bd70      	pop	{r4, r5, r6, pc}
 8004280:	f855 3b04 	ldr.w	r3, [r5], #4
 8004284:	4798      	blx	r3
 8004286:	3601      	adds	r6, #1
 8004288:	e7ee      	b.n	8004268 <__libc_init_array+0xc>
 800428a:	f855 3b04 	ldr.w	r3, [r5], #4
 800428e:	4798      	blx	r3
 8004290:	3601      	adds	r6, #1
 8004292:	e7f2      	b.n	800427a <__libc_init_array+0x1e>
 8004294:	08004ebc 	.word	0x08004ebc
 8004298:	08004ebc 	.word	0x08004ebc
 800429c:	08004ebc 	.word	0x08004ebc
 80042a0:	08004ec0 	.word	0x08004ec0

080042a4 <__retarget_lock_init_recursive>:
 80042a4:	4770      	bx	lr

080042a6 <__retarget_lock_acquire_recursive>:
 80042a6:	4770      	bx	lr

080042a8 <__retarget_lock_release_recursive>:
 80042a8:	4770      	bx	lr

080042aa <memcpy>:
 80042aa:	440a      	add	r2, r1
 80042ac:	4291      	cmp	r1, r2
 80042ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80042b2:	d100      	bne.n	80042b6 <memcpy+0xc>
 80042b4:	4770      	bx	lr
 80042b6:	b510      	push	{r4, lr}
 80042b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042c0:	4291      	cmp	r1, r2
 80042c2:	d1f9      	bne.n	80042b8 <memcpy+0xe>
 80042c4:	bd10      	pop	{r4, pc}
	...

080042c8 <_free_r>:
 80042c8:	b538      	push	{r3, r4, r5, lr}
 80042ca:	4605      	mov	r5, r0
 80042cc:	2900      	cmp	r1, #0
 80042ce:	d041      	beq.n	8004354 <_free_r+0x8c>
 80042d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042d4:	1f0c      	subs	r4, r1, #4
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	bfb8      	it	lt
 80042da:	18e4      	addlt	r4, r4, r3
 80042dc:	f000 f8e0 	bl	80044a0 <__malloc_lock>
 80042e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004358 <_free_r+0x90>)
 80042e2:	6813      	ldr	r3, [r2, #0]
 80042e4:	b933      	cbnz	r3, 80042f4 <_free_r+0x2c>
 80042e6:	6063      	str	r3, [r4, #4]
 80042e8:	6014      	str	r4, [r2, #0]
 80042ea:	4628      	mov	r0, r5
 80042ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042f0:	f000 b8dc 	b.w	80044ac <__malloc_unlock>
 80042f4:	42a3      	cmp	r3, r4
 80042f6:	d908      	bls.n	800430a <_free_r+0x42>
 80042f8:	6820      	ldr	r0, [r4, #0]
 80042fa:	1821      	adds	r1, r4, r0
 80042fc:	428b      	cmp	r3, r1
 80042fe:	bf01      	itttt	eq
 8004300:	6819      	ldreq	r1, [r3, #0]
 8004302:	685b      	ldreq	r3, [r3, #4]
 8004304:	1809      	addeq	r1, r1, r0
 8004306:	6021      	streq	r1, [r4, #0]
 8004308:	e7ed      	b.n	80042e6 <_free_r+0x1e>
 800430a:	461a      	mov	r2, r3
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	b10b      	cbz	r3, 8004314 <_free_r+0x4c>
 8004310:	42a3      	cmp	r3, r4
 8004312:	d9fa      	bls.n	800430a <_free_r+0x42>
 8004314:	6811      	ldr	r1, [r2, #0]
 8004316:	1850      	adds	r0, r2, r1
 8004318:	42a0      	cmp	r0, r4
 800431a:	d10b      	bne.n	8004334 <_free_r+0x6c>
 800431c:	6820      	ldr	r0, [r4, #0]
 800431e:	4401      	add	r1, r0
 8004320:	1850      	adds	r0, r2, r1
 8004322:	4283      	cmp	r3, r0
 8004324:	6011      	str	r1, [r2, #0]
 8004326:	d1e0      	bne.n	80042ea <_free_r+0x22>
 8004328:	6818      	ldr	r0, [r3, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	6053      	str	r3, [r2, #4]
 800432e:	4408      	add	r0, r1
 8004330:	6010      	str	r0, [r2, #0]
 8004332:	e7da      	b.n	80042ea <_free_r+0x22>
 8004334:	d902      	bls.n	800433c <_free_r+0x74>
 8004336:	230c      	movs	r3, #12
 8004338:	602b      	str	r3, [r5, #0]
 800433a:	e7d6      	b.n	80042ea <_free_r+0x22>
 800433c:	6820      	ldr	r0, [r4, #0]
 800433e:	1821      	adds	r1, r4, r0
 8004340:	428b      	cmp	r3, r1
 8004342:	bf04      	itt	eq
 8004344:	6819      	ldreq	r1, [r3, #0]
 8004346:	685b      	ldreq	r3, [r3, #4]
 8004348:	6063      	str	r3, [r4, #4]
 800434a:	bf04      	itt	eq
 800434c:	1809      	addeq	r1, r1, r0
 800434e:	6021      	streq	r1, [r4, #0]
 8004350:	6054      	str	r4, [r2, #4]
 8004352:	e7ca      	b.n	80042ea <_free_r+0x22>
 8004354:	bd38      	pop	{r3, r4, r5, pc}
 8004356:	bf00      	nop
 8004358:	20012fd8 	.word	0x20012fd8

0800435c <sbrk_aligned>:
 800435c:	b570      	push	{r4, r5, r6, lr}
 800435e:	4e0f      	ldr	r6, [pc, #60]	@ (800439c <sbrk_aligned+0x40>)
 8004360:	460c      	mov	r4, r1
 8004362:	6831      	ldr	r1, [r6, #0]
 8004364:	4605      	mov	r5, r0
 8004366:	b911      	cbnz	r1, 800436e <sbrk_aligned+0x12>
 8004368:	f000 fcb4 	bl	8004cd4 <_sbrk_r>
 800436c:	6030      	str	r0, [r6, #0]
 800436e:	4621      	mov	r1, r4
 8004370:	4628      	mov	r0, r5
 8004372:	f000 fcaf 	bl	8004cd4 <_sbrk_r>
 8004376:	1c43      	adds	r3, r0, #1
 8004378:	d103      	bne.n	8004382 <sbrk_aligned+0x26>
 800437a:	f04f 34ff 	mov.w	r4, #4294967295
 800437e:	4620      	mov	r0, r4
 8004380:	bd70      	pop	{r4, r5, r6, pc}
 8004382:	1cc4      	adds	r4, r0, #3
 8004384:	f024 0403 	bic.w	r4, r4, #3
 8004388:	42a0      	cmp	r0, r4
 800438a:	d0f8      	beq.n	800437e <sbrk_aligned+0x22>
 800438c:	1a21      	subs	r1, r4, r0
 800438e:	4628      	mov	r0, r5
 8004390:	f000 fca0 	bl	8004cd4 <_sbrk_r>
 8004394:	3001      	adds	r0, #1
 8004396:	d1f2      	bne.n	800437e <sbrk_aligned+0x22>
 8004398:	e7ef      	b.n	800437a <sbrk_aligned+0x1e>
 800439a:	bf00      	nop
 800439c:	20012fd4 	.word	0x20012fd4

080043a0 <_malloc_r>:
 80043a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043a4:	1ccd      	adds	r5, r1, #3
 80043a6:	f025 0503 	bic.w	r5, r5, #3
 80043aa:	3508      	adds	r5, #8
 80043ac:	2d0c      	cmp	r5, #12
 80043ae:	bf38      	it	cc
 80043b0:	250c      	movcc	r5, #12
 80043b2:	2d00      	cmp	r5, #0
 80043b4:	4606      	mov	r6, r0
 80043b6:	db01      	blt.n	80043bc <_malloc_r+0x1c>
 80043b8:	42a9      	cmp	r1, r5
 80043ba:	d904      	bls.n	80043c6 <_malloc_r+0x26>
 80043bc:	230c      	movs	r3, #12
 80043be:	6033      	str	r3, [r6, #0]
 80043c0:	2000      	movs	r0, #0
 80043c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800449c <_malloc_r+0xfc>
 80043ca:	f000 f869 	bl	80044a0 <__malloc_lock>
 80043ce:	f8d8 3000 	ldr.w	r3, [r8]
 80043d2:	461c      	mov	r4, r3
 80043d4:	bb44      	cbnz	r4, 8004428 <_malloc_r+0x88>
 80043d6:	4629      	mov	r1, r5
 80043d8:	4630      	mov	r0, r6
 80043da:	f7ff ffbf 	bl	800435c <sbrk_aligned>
 80043de:	1c43      	adds	r3, r0, #1
 80043e0:	4604      	mov	r4, r0
 80043e2:	d158      	bne.n	8004496 <_malloc_r+0xf6>
 80043e4:	f8d8 4000 	ldr.w	r4, [r8]
 80043e8:	4627      	mov	r7, r4
 80043ea:	2f00      	cmp	r7, #0
 80043ec:	d143      	bne.n	8004476 <_malloc_r+0xd6>
 80043ee:	2c00      	cmp	r4, #0
 80043f0:	d04b      	beq.n	800448a <_malloc_r+0xea>
 80043f2:	6823      	ldr	r3, [r4, #0]
 80043f4:	4639      	mov	r1, r7
 80043f6:	4630      	mov	r0, r6
 80043f8:	eb04 0903 	add.w	r9, r4, r3
 80043fc:	f000 fc6a 	bl	8004cd4 <_sbrk_r>
 8004400:	4581      	cmp	r9, r0
 8004402:	d142      	bne.n	800448a <_malloc_r+0xea>
 8004404:	6821      	ldr	r1, [r4, #0]
 8004406:	1a6d      	subs	r5, r5, r1
 8004408:	4629      	mov	r1, r5
 800440a:	4630      	mov	r0, r6
 800440c:	f7ff ffa6 	bl	800435c <sbrk_aligned>
 8004410:	3001      	adds	r0, #1
 8004412:	d03a      	beq.n	800448a <_malloc_r+0xea>
 8004414:	6823      	ldr	r3, [r4, #0]
 8004416:	442b      	add	r3, r5
 8004418:	6023      	str	r3, [r4, #0]
 800441a:	f8d8 3000 	ldr.w	r3, [r8]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	bb62      	cbnz	r2, 800447c <_malloc_r+0xdc>
 8004422:	f8c8 7000 	str.w	r7, [r8]
 8004426:	e00f      	b.n	8004448 <_malloc_r+0xa8>
 8004428:	6822      	ldr	r2, [r4, #0]
 800442a:	1b52      	subs	r2, r2, r5
 800442c:	d420      	bmi.n	8004470 <_malloc_r+0xd0>
 800442e:	2a0b      	cmp	r2, #11
 8004430:	d917      	bls.n	8004462 <_malloc_r+0xc2>
 8004432:	1961      	adds	r1, r4, r5
 8004434:	42a3      	cmp	r3, r4
 8004436:	6025      	str	r5, [r4, #0]
 8004438:	bf18      	it	ne
 800443a:	6059      	strne	r1, [r3, #4]
 800443c:	6863      	ldr	r3, [r4, #4]
 800443e:	bf08      	it	eq
 8004440:	f8c8 1000 	streq.w	r1, [r8]
 8004444:	5162      	str	r2, [r4, r5]
 8004446:	604b      	str	r3, [r1, #4]
 8004448:	4630      	mov	r0, r6
 800444a:	f000 f82f 	bl	80044ac <__malloc_unlock>
 800444e:	f104 000b 	add.w	r0, r4, #11
 8004452:	1d23      	adds	r3, r4, #4
 8004454:	f020 0007 	bic.w	r0, r0, #7
 8004458:	1ac2      	subs	r2, r0, r3
 800445a:	bf1c      	itt	ne
 800445c:	1a1b      	subne	r3, r3, r0
 800445e:	50a3      	strne	r3, [r4, r2]
 8004460:	e7af      	b.n	80043c2 <_malloc_r+0x22>
 8004462:	6862      	ldr	r2, [r4, #4]
 8004464:	42a3      	cmp	r3, r4
 8004466:	bf0c      	ite	eq
 8004468:	f8c8 2000 	streq.w	r2, [r8]
 800446c:	605a      	strne	r2, [r3, #4]
 800446e:	e7eb      	b.n	8004448 <_malloc_r+0xa8>
 8004470:	4623      	mov	r3, r4
 8004472:	6864      	ldr	r4, [r4, #4]
 8004474:	e7ae      	b.n	80043d4 <_malloc_r+0x34>
 8004476:	463c      	mov	r4, r7
 8004478:	687f      	ldr	r7, [r7, #4]
 800447a:	e7b6      	b.n	80043ea <_malloc_r+0x4a>
 800447c:	461a      	mov	r2, r3
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	42a3      	cmp	r3, r4
 8004482:	d1fb      	bne.n	800447c <_malloc_r+0xdc>
 8004484:	2300      	movs	r3, #0
 8004486:	6053      	str	r3, [r2, #4]
 8004488:	e7de      	b.n	8004448 <_malloc_r+0xa8>
 800448a:	230c      	movs	r3, #12
 800448c:	6033      	str	r3, [r6, #0]
 800448e:	4630      	mov	r0, r6
 8004490:	f000 f80c 	bl	80044ac <__malloc_unlock>
 8004494:	e794      	b.n	80043c0 <_malloc_r+0x20>
 8004496:	6005      	str	r5, [r0, #0]
 8004498:	e7d6      	b.n	8004448 <_malloc_r+0xa8>
 800449a:	bf00      	nop
 800449c:	20012fd8 	.word	0x20012fd8

080044a0 <__malloc_lock>:
 80044a0:	4801      	ldr	r0, [pc, #4]	@ (80044a8 <__malloc_lock+0x8>)
 80044a2:	f7ff bf00 	b.w	80042a6 <__retarget_lock_acquire_recursive>
 80044a6:	bf00      	nop
 80044a8:	20012fd0 	.word	0x20012fd0

080044ac <__malloc_unlock>:
 80044ac:	4801      	ldr	r0, [pc, #4]	@ (80044b4 <__malloc_unlock+0x8>)
 80044ae:	f7ff befb 	b.w	80042a8 <__retarget_lock_release_recursive>
 80044b2:	bf00      	nop
 80044b4:	20012fd0 	.word	0x20012fd0

080044b8 <__sfputc_r>:
 80044b8:	6893      	ldr	r3, [r2, #8]
 80044ba:	3b01      	subs	r3, #1
 80044bc:	2b00      	cmp	r3, #0
 80044be:	b410      	push	{r4}
 80044c0:	6093      	str	r3, [r2, #8]
 80044c2:	da08      	bge.n	80044d6 <__sfputc_r+0x1e>
 80044c4:	6994      	ldr	r4, [r2, #24]
 80044c6:	42a3      	cmp	r3, r4
 80044c8:	db01      	blt.n	80044ce <__sfputc_r+0x16>
 80044ca:	290a      	cmp	r1, #10
 80044cc:	d103      	bne.n	80044d6 <__sfputc_r+0x1e>
 80044ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044d2:	f000 bb6b 	b.w	8004bac <__swbuf_r>
 80044d6:	6813      	ldr	r3, [r2, #0]
 80044d8:	1c58      	adds	r0, r3, #1
 80044da:	6010      	str	r0, [r2, #0]
 80044dc:	7019      	strb	r1, [r3, #0]
 80044de:	4608      	mov	r0, r1
 80044e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <__sfputs_r>:
 80044e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e8:	4606      	mov	r6, r0
 80044ea:	460f      	mov	r7, r1
 80044ec:	4614      	mov	r4, r2
 80044ee:	18d5      	adds	r5, r2, r3
 80044f0:	42ac      	cmp	r4, r5
 80044f2:	d101      	bne.n	80044f8 <__sfputs_r+0x12>
 80044f4:	2000      	movs	r0, #0
 80044f6:	e007      	b.n	8004508 <__sfputs_r+0x22>
 80044f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044fc:	463a      	mov	r2, r7
 80044fe:	4630      	mov	r0, r6
 8004500:	f7ff ffda 	bl	80044b8 <__sfputc_r>
 8004504:	1c43      	adds	r3, r0, #1
 8004506:	d1f3      	bne.n	80044f0 <__sfputs_r+0xa>
 8004508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800450c <_vfiprintf_r>:
 800450c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004510:	460d      	mov	r5, r1
 8004512:	b09d      	sub	sp, #116	@ 0x74
 8004514:	4614      	mov	r4, r2
 8004516:	4698      	mov	r8, r3
 8004518:	4606      	mov	r6, r0
 800451a:	b118      	cbz	r0, 8004524 <_vfiprintf_r+0x18>
 800451c:	6a03      	ldr	r3, [r0, #32]
 800451e:	b90b      	cbnz	r3, 8004524 <_vfiprintf_r+0x18>
 8004520:	f7ff fdbc 	bl	800409c <__sinit>
 8004524:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004526:	07d9      	lsls	r1, r3, #31
 8004528:	d405      	bmi.n	8004536 <_vfiprintf_r+0x2a>
 800452a:	89ab      	ldrh	r3, [r5, #12]
 800452c:	059a      	lsls	r2, r3, #22
 800452e:	d402      	bmi.n	8004536 <_vfiprintf_r+0x2a>
 8004530:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004532:	f7ff feb8 	bl	80042a6 <__retarget_lock_acquire_recursive>
 8004536:	89ab      	ldrh	r3, [r5, #12]
 8004538:	071b      	lsls	r3, r3, #28
 800453a:	d501      	bpl.n	8004540 <_vfiprintf_r+0x34>
 800453c:	692b      	ldr	r3, [r5, #16]
 800453e:	b99b      	cbnz	r3, 8004568 <_vfiprintf_r+0x5c>
 8004540:	4629      	mov	r1, r5
 8004542:	4630      	mov	r0, r6
 8004544:	f000 fb70 	bl	8004c28 <__swsetup_r>
 8004548:	b170      	cbz	r0, 8004568 <_vfiprintf_r+0x5c>
 800454a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800454c:	07dc      	lsls	r4, r3, #31
 800454e:	d504      	bpl.n	800455a <_vfiprintf_r+0x4e>
 8004550:	f04f 30ff 	mov.w	r0, #4294967295
 8004554:	b01d      	add	sp, #116	@ 0x74
 8004556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800455a:	89ab      	ldrh	r3, [r5, #12]
 800455c:	0598      	lsls	r0, r3, #22
 800455e:	d4f7      	bmi.n	8004550 <_vfiprintf_r+0x44>
 8004560:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004562:	f7ff fea1 	bl	80042a8 <__retarget_lock_release_recursive>
 8004566:	e7f3      	b.n	8004550 <_vfiprintf_r+0x44>
 8004568:	2300      	movs	r3, #0
 800456a:	9309      	str	r3, [sp, #36]	@ 0x24
 800456c:	2320      	movs	r3, #32
 800456e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004572:	f8cd 800c 	str.w	r8, [sp, #12]
 8004576:	2330      	movs	r3, #48	@ 0x30
 8004578:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004728 <_vfiprintf_r+0x21c>
 800457c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004580:	f04f 0901 	mov.w	r9, #1
 8004584:	4623      	mov	r3, r4
 8004586:	469a      	mov	sl, r3
 8004588:	f813 2b01 	ldrb.w	r2, [r3], #1
 800458c:	b10a      	cbz	r2, 8004592 <_vfiprintf_r+0x86>
 800458e:	2a25      	cmp	r2, #37	@ 0x25
 8004590:	d1f9      	bne.n	8004586 <_vfiprintf_r+0x7a>
 8004592:	ebba 0b04 	subs.w	fp, sl, r4
 8004596:	d00b      	beq.n	80045b0 <_vfiprintf_r+0xa4>
 8004598:	465b      	mov	r3, fp
 800459a:	4622      	mov	r2, r4
 800459c:	4629      	mov	r1, r5
 800459e:	4630      	mov	r0, r6
 80045a0:	f7ff ffa1 	bl	80044e6 <__sfputs_r>
 80045a4:	3001      	adds	r0, #1
 80045a6:	f000 80a7 	beq.w	80046f8 <_vfiprintf_r+0x1ec>
 80045aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80045ac:	445a      	add	r2, fp
 80045ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80045b0:	f89a 3000 	ldrb.w	r3, [sl]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 809f 	beq.w	80046f8 <_vfiprintf_r+0x1ec>
 80045ba:	2300      	movs	r3, #0
 80045bc:	f04f 32ff 	mov.w	r2, #4294967295
 80045c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045c4:	f10a 0a01 	add.w	sl, sl, #1
 80045c8:	9304      	str	r3, [sp, #16]
 80045ca:	9307      	str	r3, [sp, #28]
 80045cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80045d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80045d2:	4654      	mov	r4, sl
 80045d4:	2205      	movs	r2, #5
 80045d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045da:	4853      	ldr	r0, [pc, #332]	@ (8004728 <_vfiprintf_r+0x21c>)
 80045dc:	f7fb fe00 	bl	80001e0 <memchr>
 80045e0:	9a04      	ldr	r2, [sp, #16]
 80045e2:	b9d8      	cbnz	r0, 800461c <_vfiprintf_r+0x110>
 80045e4:	06d1      	lsls	r1, r2, #27
 80045e6:	bf44      	itt	mi
 80045e8:	2320      	movmi	r3, #32
 80045ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045ee:	0713      	lsls	r3, r2, #28
 80045f0:	bf44      	itt	mi
 80045f2:	232b      	movmi	r3, #43	@ 0x2b
 80045f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045f8:	f89a 3000 	ldrb.w	r3, [sl]
 80045fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80045fe:	d015      	beq.n	800462c <_vfiprintf_r+0x120>
 8004600:	9a07      	ldr	r2, [sp, #28]
 8004602:	4654      	mov	r4, sl
 8004604:	2000      	movs	r0, #0
 8004606:	f04f 0c0a 	mov.w	ip, #10
 800460a:	4621      	mov	r1, r4
 800460c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004610:	3b30      	subs	r3, #48	@ 0x30
 8004612:	2b09      	cmp	r3, #9
 8004614:	d94b      	bls.n	80046ae <_vfiprintf_r+0x1a2>
 8004616:	b1b0      	cbz	r0, 8004646 <_vfiprintf_r+0x13a>
 8004618:	9207      	str	r2, [sp, #28]
 800461a:	e014      	b.n	8004646 <_vfiprintf_r+0x13a>
 800461c:	eba0 0308 	sub.w	r3, r0, r8
 8004620:	fa09 f303 	lsl.w	r3, r9, r3
 8004624:	4313      	orrs	r3, r2
 8004626:	9304      	str	r3, [sp, #16]
 8004628:	46a2      	mov	sl, r4
 800462a:	e7d2      	b.n	80045d2 <_vfiprintf_r+0xc6>
 800462c:	9b03      	ldr	r3, [sp, #12]
 800462e:	1d19      	adds	r1, r3, #4
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	9103      	str	r1, [sp, #12]
 8004634:	2b00      	cmp	r3, #0
 8004636:	bfbb      	ittet	lt
 8004638:	425b      	neglt	r3, r3
 800463a:	f042 0202 	orrlt.w	r2, r2, #2
 800463e:	9307      	strge	r3, [sp, #28]
 8004640:	9307      	strlt	r3, [sp, #28]
 8004642:	bfb8      	it	lt
 8004644:	9204      	strlt	r2, [sp, #16]
 8004646:	7823      	ldrb	r3, [r4, #0]
 8004648:	2b2e      	cmp	r3, #46	@ 0x2e
 800464a:	d10a      	bne.n	8004662 <_vfiprintf_r+0x156>
 800464c:	7863      	ldrb	r3, [r4, #1]
 800464e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004650:	d132      	bne.n	80046b8 <_vfiprintf_r+0x1ac>
 8004652:	9b03      	ldr	r3, [sp, #12]
 8004654:	1d1a      	adds	r2, r3, #4
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	9203      	str	r2, [sp, #12]
 800465a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800465e:	3402      	adds	r4, #2
 8004660:	9305      	str	r3, [sp, #20]
 8004662:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004738 <_vfiprintf_r+0x22c>
 8004666:	7821      	ldrb	r1, [r4, #0]
 8004668:	2203      	movs	r2, #3
 800466a:	4650      	mov	r0, sl
 800466c:	f7fb fdb8 	bl	80001e0 <memchr>
 8004670:	b138      	cbz	r0, 8004682 <_vfiprintf_r+0x176>
 8004672:	9b04      	ldr	r3, [sp, #16]
 8004674:	eba0 000a 	sub.w	r0, r0, sl
 8004678:	2240      	movs	r2, #64	@ 0x40
 800467a:	4082      	lsls	r2, r0
 800467c:	4313      	orrs	r3, r2
 800467e:	3401      	adds	r4, #1
 8004680:	9304      	str	r3, [sp, #16]
 8004682:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004686:	4829      	ldr	r0, [pc, #164]	@ (800472c <_vfiprintf_r+0x220>)
 8004688:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800468c:	2206      	movs	r2, #6
 800468e:	f7fb fda7 	bl	80001e0 <memchr>
 8004692:	2800      	cmp	r0, #0
 8004694:	d03f      	beq.n	8004716 <_vfiprintf_r+0x20a>
 8004696:	4b26      	ldr	r3, [pc, #152]	@ (8004730 <_vfiprintf_r+0x224>)
 8004698:	bb1b      	cbnz	r3, 80046e2 <_vfiprintf_r+0x1d6>
 800469a:	9b03      	ldr	r3, [sp, #12]
 800469c:	3307      	adds	r3, #7
 800469e:	f023 0307 	bic.w	r3, r3, #7
 80046a2:	3308      	adds	r3, #8
 80046a4:	9303      	str	r3, [sp, #12]
 80046a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046a8:	443b      	add	r3, r7
 80046aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80046ac:	e76a      	b.n	8004584 <_vfiprintf_r+0x78>
 80046ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80046b2:	460c      	mov	r4, r1
 80046b4:	2001      	movs	r0, #1
 80046b6:	e7a8      	b.n	800460a <_vfiprintf_r+0xfe>
 80046b8:	2300      	movs	r3, #0
 80046ba:	3401      	adds	r4, #1
 80046bc:	9305      	str	r3, [sp, #20]
 80046be:	4619      	mov	r1, r3
 80046c0:	f04f 0c0a 	mov.w	ip, #10
 80046c4:	4620      	mov	r0, r4
 80046c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046ca:	3a30      	subs	r2, #48	@ 0x30
 80046cc:	2a09      	cmp	r2, #9
 80046ce:	d903      	bls.n	80046d8 <_vfiprintf_r+0x1cc>
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d0c6      	beq.n	8004662 <_vfiprintf_r+0x156>
 80046d4:	9105      	str	r1, [sp, #20]
 80046d6:	e7c4      	b.n	8004662 <_vfiprintf_r+0x156>
 80046d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80046dc:	4604      	mov	r4, r0
 80046de:	2301      	movs	r3, #1
 80046e0:	e7f0      	b.n	80046c4 <_vfiprintf_r+0x1b8>
 80046e2:	ab03      	add	r3, sp, #12
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	462a      	mov	r2, r5
 80046e8:	4b12      	ldr	r3, [pc, #72]	@ (8004734 <_vfiprintf_r+0x228>)
 80046ea:	a904      	add	r1, sp, #16
 80046ec:	4630      	mov	r0, r6
 80046ee:	f3af 8000 	nop.w
 80046f2:	4607      	mov	r7, r0
 80046f4:	1c78      	adds	r0, r7, #1
 80046f6:	d1d6      	bne.n	80046a6 <_vfiprintf_r+0x19a>
 80046f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80046fa:	07d9      	lsls	r1, r3, #31
 80046fc:	d405      	bmi.n	800470a <_vfiprintf_r+0x1fe>
 80046fe:	89ab      	ldrh	r3, [r5, #12]
 8004700:	059a      	lsls	r2, r3, #22
 8004702:	d402      	bmi.n	800470a <_vfiprintf_r+0x1fe>
 8004704:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004706:	f7ff fdcf 	bl	80042a8 <__retarget_lock_release_recursive>
 800470a:	89ab      	ldrh	r3, [r5, #12]
 800470c:	065b      	lsls	r3, r3, #25
 800470e:	f53f af1f 	bmi.w	8004550 <_vfiprintf_r+0x44>
 8004712:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004714:	e71e      	b.n	8004554 <_vfiprintf_r+0x48>
 8004716:	ab03      	add	r3, sp, #12
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	462a      	mov	r2, r5
 800471c:	4b05      	ldr	r3, [pc, #20]	@ (8004734 <_vfiprintf_r+0x228>)
 800471e:	a904      	add	r1, sp, #16
 8004720:	4630      	mov	r0, r6
 8004722:	f000 f879 	bl	8004818 <_printf_i>
 8004726:	e7e4      	b.n	80046f2 <_vfiprintf_r+0x1e6>
 8004728:	08004e80 	.word	0x08004e80
 800472c:	08004e8a 	.word	0x08004e8a
 8004730:	00000000 	.word	0x00000000
 8004734:	080044e7 	.word	0x080044e7
 8004738:	08004e86 	.word	0x08004e86

0800473c <_printf_common>:
 800473c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004740:	4616      	mov	r6, r2
 8004742:	4698      	mov	r8, r3
 8004744:	688a      	ldr	r2, [r1, #8]
 8004746:	690b      	ldr	r3, [r1, #16]
 8004748:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800474c:	4293      	cmp	r3, r2
 800474e:	bfb8      	it	lt
 8004750:	4613      	movlt	r3, r2
 8004752:	6033      	str	r3, [r6, #0]
 8004754:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004758:	4607      	mov	r7, r0
 800475a:	460c      	mov	r4, r1
 800475c:	b10a      	cbz	r2, 8004762 <_printf_common+0x26>
 800475e:	3301      	adds	r3, #1
 8004760:	6033      	str	r3, [r6, #0]
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	0699      	lsls	r1, r3, #26
 8004766:	bf42      	ittt	mi
 8004768:	6833      	ldrmi	r3, [r6, #0]
 800476a:	3302      	addmi	r3, #2
 800476c:	6033      	strmi	r3, [r6, #0]
 800476e:	6825      	ldr	r5, [r4, #0]
 8004770:	f015 0506 	ands.w	r5, r5, #6
 8004774:	d106      	bne.n	8004784 <_printf_common+0x48>
 8004776:	f104 0a19 	add.w	sl, r4, #25
 800477a:	68e3      	ldr	r3, [r4, #12]
 800477c:	6832      	ldr	r2, [r6, #0]
 800477e:	1a9b      	subs	r3, r3, r2
 8004780:	42ab      	cmp	r3, r5
 8004782:	dc26      	bgt.n	80047d2 <_printf_common+0x96>
 8004784:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004788:	6822      	ldr	r2, [r4, #0]
 800478a:	3b00      	subs	r3, #0
 800478c:	bf18      	it	ne
 800478e:	2301      	movne	r3, #1
 8004790:	0692      	lsls	r2, r2, #26
 8004792:	d42b      	bmi.n	80047ec <_printf_common+0xb0>
 8004794:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004798:	4641      	mov	r1, r8
 800479a:	4638      	mov	r0, r7
 800479c:	47c8      	blx	r9
 800479e:	3001      	adds	r0, #1
 80047a0:	d01e      	beq.n	80047e0 <_printf_common+0xa4>
 80047a2:	6823      	ldr	r3, [r4, #0]
 80047a4:	6922      	ldr	r2, [r4, #16]
 80047a6:	f003 0306 	and.w	r3, r3, #6
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	bf02      	ittt	eq
 80047ae:	68e5      	ldreq	r5, [r4, #12]
 80047b0:	6833      	ldreq	r3, [r6, #0]
 80047b2:	1aed      	subeq	r5, r5, r3
 80047b4:	68a3      	ldr	r3, [r4, #8]
 80047b6:	bf0c      	ite	eq
 80047b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047bc:	2500      	movne	r5, #0
 80047be:	4293      	cmp	r3, r2
 80047c0:	bfc4      	itt	gt
 80047c2:	1a9b      	subgt	r3, r3, r2
 80047c4:	18ed      	addgt	r5, r5, r3
 80047c6:	2600      	movs	r6, #0
 80047c8:	341a      	adds	r4, #26
 80047ca:	42b5      	cmp	r5, r6
 80047cc:	d11a      	bne.n	8004804 <_printf_common+0xc8>
 80047ce:	2000      	movs	r0, #0
 80047d0:	e008      	b.n	80047e4 <_printf_common+0xa8>
 80047d2:	2301      	movs	r3, #1
 80047d4:	4652      	mov	r2, sl
 80047d6:	4641      	mov	r1, r8
 80047d8:	4638      	mov	r0, r7
 80047da:	47c8      	blx	r9
 80047dc:	3001      	adds	r0, #1
 80047de:	d103      	bne.n	80047e8 <_printf_common+0xac>
 80047e0:	f04f 30ff 	mov.w	r0, #4294967295
 80047e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047e8:	3501      	adds	r5, #1
 80047ea:	e7c6      	b.n	800477a <_printf_common+0x3e>
 80047ec:	18e1      	adds	r1, r4, r3
 80047ee:	1c5a      	adds	r2, r3, #1
 80047f0:	2030      	movs	r0, #48	@ 0x30
 80047f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80047f6:	4422      	add	r2, r4
 80047f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80047fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004800:	3302      	adds	r3, #2
 8004802:	e7c7      	b.n	8004794 <_printf_common+0x58>
 8004804:	2301      	movs	r3, #1
 8004806:	4622      	mov	r2, r4
 8004808:	4641      	mov	r1, r8
 800480a:	4638      	mov	r0, r7
 800480c:	47c8      	blx	r9
 800480e:	3001      	adds	r0, #1
 8004810:	d0e6      	beq.n	80047e0 <_printf_common+0xa4>
 8004812:	3601      	adds	r6, #1
 8004814:	e7d9      	b.n	80047ca <_printf_common+0x8e>
	...

08004818 <_printf_i>:
 8004818:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800481c:	7e0f      	ldrb	r7, [r1, #24]
 800481e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004820:	2f78      	cmp	r7, #120	@ 0x78
 8004822:	4691      	mov	r9, r2
 8004824:	4680      	mov	r8, r0
 8004826:	460c      	mov	r4, r1
 8004828:	469a      	mov	sl, r3
 800482a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800482e:	d807      	bhi.n	8004840 <_printf_i+0x28>
 8004830:	2f62      	cmp	r7, #98	@ 0x62
 8004832:	d80a      	bhi.n	800484a <_printf_i+0x32>
 8004834:	2f00      	cmp	r7, #0
 8004836:	f000 80d1 	beq.w	80049dc <_printf_i+0x1c4>
 800483a:	2f58      	cmp	r7, #88	@ 0x58
 800483c:	f000 80b8 	beq.w	80049b0 <_printf_i+0x198>
 8004840:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004844:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004848:	e03a      	b.n	80048c0 <_printf_i+0xa8>
 800484a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800484e:	2b15      	cmp	r3, #21
 8004850:	d8f6      	bhi.n	8004840 <_printf_i+0x28>
 8004852:	a101      	add	r1, pc, #4	@ (adr r1, 8004858 <_printf_i+0x40>)
 8004854:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004858:	080048b1 	.word	0x080048b1
 800485c:	080048c5 	.word	0x080048c5
 8004860:	08004841 	.word	0x08004841
 8004864:	08004841 	.word	0x08004841
 8004868:	08004841 	.word	0x08004841
 800486c:	08004841 	.word	0x08004841
 8004870:	080048c5 	.word	0x080048c5
 8004874:	08004841 	.word	0x08004841
 8004878:	08004841 	.word	0x08004841
 800487c:	08004841 	.word	0x08004841
 8004880:	08004841 	.word	0x08004841
 8004884:	080049c3 	.word	0x080049c3
 8004888:	080048ef 	.word	0x080048ef
 800488c:	0800497d 	.word	0x0800497d
 8004890:	08004841 	.word	0x08004841
 8004894:	08004841 	.word	0x08004841
 8004898:	080049e5 	.word	0x080049e5
 800489c:	08004841 	.word	0x08004841
 80048a0:	080048ef 	.word	0x080048ef
 80048a4:	08004841 	.word	0x08004841
 80048a8:	08004841 	.word	0x08004841
 80048ac:	08004985 	.word	0x08004985
 80048b0:	6833      	ldr	r3, [r6, #0]
 80048b2:	1d1a      	adds	r2, r3, #4
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6032      	str	r2, [r6, #0]
 80048b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80048bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80048c0:	2301      	movs	r3, #1
 80048c2:	e09c      	b.n	80049fe <_printf_i+0x1e6>
 80048c4:	6833      	ldr	r3, [r6, #0]
 80048c6:	6820      	ldr	r0, [r4, #0]
 80048c8:	1d19      	adds	r1, r3, #4
 80048ca:	6031      	str	r1, [r6, #0]
 80048cc:	0606      	lsls	r6, r0, #24
 80048ce:	d501      	bpl.n	80048d4 <_printf_i+0xbc>
 80048d0:	681d      	ldr	r5, [r3, #0]
 80048d2:	e003      	b.n	80048dc <_printf_i+0xc4>
 80048d4:	0645      	lsls	r5, r0, #25
 80048d6:	d5fb      	bpl.n	80048d0 <_printf_i+0xb8>
 80048d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80048dc:	2d00      	cmp	r5, #0
 80048de:	da03      	bge.n	80048e8 <_printf_i+0xd0>
 80048e0:	232d      	movs	r3, #45	@ 0x2d
 80048e2:	426d      	negs	r5, r5
 80048e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048e8:	4858      	ldr	r0, [pc, #352]	@ (8004a4c <_printf_i+0x234>)
 80048ea:	230a      	movs	r3, #10
 80048ec:	e011      	b.n	8004912 <_printf_i+0xfa>
 80048ee:	6821      	ldr	r1, [r4, #0]
 80048f0:	6833      	ldr	r3, [r6, #0]
 80048f2:	0608      	lsls	r0, r1, #24
 80048f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80048f8:	d402      	bmi.n	8004900 <_printf_i+0xe8>
 80048fa:	0649      	lsls	r1, r1, #25
 80048fc:	bf48      	it	mi
 80048fe:	b2ad      	uxthmi	r5, r5
 8004900:	2f6f      	cmp	r7, #111	@ 0x6f
 8004902:	4852      	ldr	r0, [pc, #328]	@ (8004a4c <_printf_i+0x234>)
 8004904:	6033      	str	r3, [r6, #0]
 8004906:	bf14      	ite	ne
 8004908:	230a      	movne	r3, #10
 800490a:	2308      	moveq	r3, #8
 800490c:	2100      	movs	r1, #0
 800490e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004912:	6866      	ldr	r6, [r4, #4]
 8004914:	60a6      	str	r6, [r4, #8]
 8004916:	2e00      	cmp	r6, #0
 8004918:	db05      	blt.n	8004926 <_printf_i+0x10e>
 800491a:	6821      	ldr	r1, [r4, #0]
 800491c:	432e      	orrs	r6, r5
 800491e:	f021 0104 	bic.w	r1, r1, #4
 8004922:	6021      	str	r1, [r4, #0]
 8004924:	d04b      	beq.n	80049be <_printf_i+0x1a6>
 8004926:	4616      	mov	r6, r2
 8004928:	fbb5 f1f3 	udiv	r1, r5, r3
 800492c:	fb03 5711 	mls	r7, r3, r1, r5
 8004930:	5dc7      	ldrb	r7, [r0, r7]
 8004932:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004936:	462f      	mov	r7, r5
 8004938:	42bb      	cmp	r3, r7
 800493a:	460d      	mov	r5, r1
 800493c:	d9f4      	bls.n	8004928 <_printf_i+0x110>
 800493e:	2b08      	cmp	r3, #8
 8004940:	d10b      	bne.n	800495a <_printf_i+0x142>
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	07df      	lsls	r7, r3, #31
 8004946:	d508      	bpl.n	800495a <_printf_i+0x142>
 8004948:	6923      	ldr	r3, [r4, #16]
 800494a:	6861      	ldr	r1, [r4, #4]
 800494c:	4299      	cmp	r1, r3
 800494e:	bfde      	ittt	le
 8004950:	2330      	movle	r3, #48	@ 0x30
 8004952:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004956:	f106 36ff 	addle.w	r6, r6, #4294967295
 800495a:	1b92      	subs	r2, r2, r6
 800495c:	6122      	str	r2, [r4, #16]
 800495e:	f8cd a000 	str.w	sl, [sp]
 8004962:	464b      	mov	r3, r9
 8004964:	aa03      	add	r2, sp, #12
 8004966:	4621      	mov	r1, r4
 8004968:	4640      	mov	r0, r8
 800496a:	f7ff fee7 	bl	800473c <_printf_common>
 800496e:	3001      	adds	r0, #1
 8004970:	d14a      	bne.n	8004a08 <_printf_i+0x1f0>
 8004972:	f04f 30ff 	mov.w	r0, #4294967295
 8004976:	b004      	add	sp, #16
 8004978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800497c:	6823      	ldr	r3, [r4, #0]
 800497e:	f043 0320 	orr.w	r3, r3, #32
 8004982:	6023      	str	r3, [r4, #0]
 8004984:	4832      	ldr	r0, [pc, #200]	@ (8004a50 <_printf_i+0x238>)
 8004986:	2778      	movs	r7, #120	@ 0x78
 8004988:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800498c:	6823      	ldr	r3, [r4, #0]
 800498e:	6831      	ldr	r1, [r6, #0]
 8004990:	061f      	lsls	r7, r3, #24
 8004992:	f851 5b04 	ldr.w	r5, [r1], #4
 8004996:	d402      	bmi.n	800499e <_printf_i+0x186>
 8004998:	065f      	lsls	r7, r3, #25
 800499a:	bf48      	it	mi
 800499c:	b2ad      	uxthmi	r5, r5
 800499e:	6031      	str	r1, [r6, #0]
 80049a0:	07d9      	lsls	r1, r3, #31
 80049a2:	bf44      	itt	mi
 80049a4:	f043 0320 	orrmi.w	r3, r3, #32
 80049a8:	6023      	strmi	r3, [r4, #0]
 80049aa:	b11d      	cbz	r5, 80049b4 <_printf_i+0x19c>
 80049ac:	2310      	movs	r3, #16
 80049ae:	e7ad      	b.n	800490c <_printf_i+0xf4>
 80049b0:	4826      	ldr	r0, [pc, #152]	@ (8004a4c <_printf_i+0x234>)
 80049b2:	e7e9      	b.n	8004988 <_printf_i+0x170>
 80049b4:	6823      	ldr	r3, [r4, #0]
 80049b6:	f023 0320 	bic.w	r3, r3, #32
 80049ba:	6023      	str	r3, [r4, #0]
 80049bc:	e7f6      	b.n	80049ac <_printf_i+0x194>
 80049be:	4616      	mov	r6, r2
 80049c0:	e7bd      	b.n	800493e <_printf_i+0x126>
 80049c2:	6833      	ldr	r3, [r6, #0]
 80049c4:	6825      	ldr	r5, [r4, #0]
 80049c6:	6961      	ldr	r1, [r4, #20]
 80049c8:	1d18      	adds	r0, r3, #4
 80049ca:	6030      	str	r0, [r6, #0]
 80049cc:	062e      	lsls	r6, r5, #24
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	d501      	bpl.n	80049d6 <_printf_i+0x1be>
 80049d2:	6019      	str	r1, [r3, #0]
 80049d4:	e002      	b.n	80049dc <_printf_i+0x1c4>
 80049d6:	0668      	lsls	r0, r5, #25
 80049d8:	d5fb      	bpl.n	80049d2 <_printf_i+0x1ba>
 80049da:	8019      	strh	r1, [r3, #0]
 80049dc:	2300      	movs	r3, #0
 80049de:	6123      	str	r3, [r4, #16]
 80049e0:	4616      	mov	r6, r2
 80049e2:	e7bc      	b.n	800495e <_printf_i+0x146>
 80049e4:	6833      	ldr	r3, [r6, #0]
 80049e6:	1d1a      	adds	r2, r3, #4
 80049e8:	6032      	str	r2, [r6, #0]
 80049ea:	681e      	ldr	r6, [r3, #0]
 80049ec:	6862      	ldr	r2, [r4, #4]
 80049ee:	2100      	movs	r1, #0
 80049f0:	4630      	mov	r0, r6
 80049f2:	f7fb fbf5 	bl	80001e0 <memchr>
 80049f6:	b108      	cbz	r0, 80049fc <_printf_i+0x1e4>
 80049f8:	1b80      	subs	r0, r0, r6
 80049fa:	6060      	str	r0, [r4, #4]
 80049fc:	6863      	ldr	r3, [r4, #4]
 80049fe:	6123      	str	r3, [r4, #16]
 8004a00:	2300      	movs	r3, #0
 8004a02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a06:	e7aa      	b.n	800495e <_printf_i+0x146>
 8004a08:	6923      	ldr	r3, [r4, #16]
 8004a0a:	4632      	mov	r2, r6
 8004a0c:	4649      	mov	r1, r9
 8004a0e:	4640      	mov	r0, r8
 8004a10:	47d0      	blx	sl
 8004a12:	3001      	adds	r0, #1
 8004a14:	d0ad      	beq.n	8004972 <_printf_i+0x15a>
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	079b      	lsls	r3, r3, #30
 8004a1a:	d413      	bmi.n	8004a44 <_printf_i+0x22c>
 8004a1c:	68e0      	ldr	r0, [r4, #12]
 8004a1e:	9b03      	ldr	r3, [sp, #12]
 8004a20:	4298      	cmp	r0, r3
 8004a22:	bfb8      	it	lt
 8004a24:	4618      	movlt	r0, r3
 8004a26:	e7a6      	b.n	8004976 <_printf_i+0x15e>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	4632      	mov	r2, r6
 8004a2c:	4649      	mov	r1, r9
 8004a2e:	4640      	mov	r0, r8
 8004a30:	47d0      	blx	sl
 8004a32:	3001      	adds	r0, #1
 8004a34:	d09d      	beq.n	8004972 <_printf_i+0x15a>
 8004a36:	3501      	adds	r5, #1
 8004a38:	68e3      	ldr	r3, [r4, #12]
 8004a3a:	9903      	ldr	r1, [sp, #12]
 8004a3c:	1a5b      	subs	r3, r3, r1
 8004a3e:	42ab      	cmp	r3, r5
 8004a40:	dcf2      	bgt.n	8004a28 <_printf_i+0x210>
 8004a42:	e7eb      	b.n	8004a1c <_printf_i+0x204>
 8004a44:	2500      	movs	r5, #0
 8004a46:	f104 0619 	add.w	r6, r4, #25
 8004a4a:	e7f5      	b.n	8004a38 <_printf_i+0x220>
 8004a4c:	08004e91 	.word	0x08004e91
 8004a50:	08004ea2 	.word	0x08004ea2

08004a54 <__sflush_r>:
 8004a54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a5c:	0716      	lsls	r6, r2, #28
 8004a5e:	4605      	mov	r5, r0
 8004a60:	460c      	mov	r4, r1
 8004a62:	d454      	bmi.n	8004b0e <__sflush_r+0xba>
 8004a64:	684b      	ldr	r3, [r1, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	dc02      	bgt.n	8004a70 <__sflush_r+0x1c>
 8004a6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	dd48      	ble.n	8004b02 <__sflush_r+0xae>
 8004a70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a72:	2e00      	cmp	r6, #0
 8004a74:	d045      	beq.n	8004b02 <__sflush_r+0xae>
 8004a76:	2300      	movs	r3, #0
 8004a78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004a7c:	682f      	ldr	r7, [r5, #0]
 8004a7e:	6a21      	ldr	r1, [r4, #32]
 8004a80:	602b      	str	r3, [r5, #0]
 8004a82:	d030      	beq.n	8004ae6 <__sflush_r+0x92>
 8004a84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004a86:	89a3      	ldrh	r3, [r4, #12]
 8004a88:	0759      	lsls	r1, r3, #29
 8004a8a:	d505      	bpl.n	8004a98 <__sflush_r+0x44>
 8004a8c:	6863      	ldr	r3, [r4, #4]
 8004a8e:	1ad2      	subs	r2, r2, r3
 8004a90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004a92:	b10b      	cbz	r3, 8004a98 <__sflush_r+0x44>
 8004a94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a96:	1ad2      	subs	r2, r2, r3
 8004a98:	2300      	movs	r3, #0
 8004a9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a9c:	6a21      	ldr	r1, [r4, #32]
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	47b0      	blx	r6
 8004aa2:	1c43      	adds	r3, r0, #1
 8004aa4:	89a3      	ldrh	r3, [r4, #12]
 8004aa6:	d106      	bne.n	8004ab6 <__sflush_r+0x62>
 8004aa8:	6829      	ldr	r1, [r5, #0]
 8004aaa:	291d      	cmp	r1, #29
 8004aac:	d82b      	bhi.n	8004b06 <__sflush_r+0xb2>
 8004aae:	4a2a      	ldr	r2, [pc, #168]	@ (8004b58 <__sflush_r+0x104>)
 8004ab0:	40ca      	lsrs	r2, r1
 8004ab2:	07d6      	lsls	r6, r2, #31
 8004ab4:	d527      	bpl.n	8004b06 <__sflush_r+0xb2>
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	6062      	str	r2, [r4, #4]
 8004aba:	04d9      	lsls	r1, r3, #19
 8004abc:	6922      	ldr	r2, [r4, #16]
 8004abe:	6022      	str	r2, [r4, #0]
 8004ac0:	d504      	bpl.n	8004acc <__sflush_r+0x78>
 8004ac2:	1c42      	adds	r2, r0, #1
 8004ac4:	d101      	bne.n	8004aca <__sflush_r+0x76>
 8004ac6:	682b      	ldr	r3, [r5, #0]
 8004ac8:	b903      	cbnz	r3, 8004acc <__sflush_r+0x78>
 8004aca:	6560      	str	r0, [r4, #84]	@ 0x54
 8004acc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ace:	602f      	str	r7, [r5, #0]
 8004ad0:	b1b9      	cbz	r1, 8004b02 <__sflush_r+0xae>
 8004ad2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ad6:	4299      	cmp	r1, r3
 8004ad8:	d002      	beq.n	8004ae0 <__sflush_r+0x8c>
 8004ada:	4628      	mov	r0, r5
 8004adc:	f7ff fbf4 	bl	80042c8 <_free_r>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ae4:	e00d      	b.n	8004b02 <__sflush_r+0xae>
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	4628      	mov	r0, r5
 8004aea:	47b0      	blx	r6
 8004aec:	4602      	mov	r2, r0
 8004aee:	1c50      	adds	r0, r2, #1
 8004af0:	d1c9      	bne.n	8004a86 <__sflush_r+0x32>
 8004af2:	682b      	ldr	r3, [r5, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0c6      	beq.n	8004a86 <__sflush_r+0x32>
 8004af8:	2b1d      	cmp	r3, #29
 8004afa:	d001      	beq.n	8004b00 <__sflush_r+0xac>
 8004afc:	2b16      	cmp	r3, #22
 8004afe:	d11e      	bne.n	8004b3e <__sflush_r+0xea>
 8004b00:	602f      	str	r7, [r5, #0]
 8004b02:	2000      	movs	r0, #0
 8004b04:	e022      	b.n	8004b4c <__sflush_r+0xf8>
 8004b06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b0a:	b21b      	sxth	r3, r3
 8004b0c:	e01b      	b.n	8004b46 <__sflush_r+0xf2>
 8004b0e:	690f      	ldr	r7, [r1, #16]
 8004b10:	2f00      	cmp	r7, #0
 8004b12:	d0f6      	beq.n	8004b02 <__sflush_r+0xae>
 8004b14:	0793      	lsls	r3, r2, #30
 8004b16:	680e      	ldr	r6, [r1, #0]
 8004b18:	bf08      	it	eq
 8004b1a:	694b      	ldreq	r3, [r1, #20]
 8004b1c:	600f      	str	r7, [r1, #0]
 8004b1e:	bf18      	it	ne
 8004b20:	2300      	movne	r3, #0
 8004b22:	eba6 0807 	sub.w	r8, r6, r7
 8004b26:	608b      	str	r3, [r1, #8]
 8004b28:	f1b8 0f00 	cmp.w	r8, #0
 8004b2c:	dde9      	ble.n	8004b02 <__sflush_r+0xae>
 8004b2e:	6a21      	ldr	r1, [r4, #32]
 8004b30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004b32:	4643      	mov	r3, r8
 8004b34:	463a      	mov	r2, r7
 8004b36:	4628      	mov	r0, r5
 8004b38:	47b0      	blx	r6
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	dc08      	bgt.n	8004b50 <__sflush_r+0xfc>
 8004b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b46:	81a3      	strh	r3, [r4, #12]
 8004b48:	f04f 30ff 	mov.w	r0, #4294967295
 8004b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b50:	4407      	add	r7, r0
 8004b52:	eba8 0800 	sub.w	r8, r8, r0
 8004b56:	e7e7      	b.n	8004b28 <__sflush_r+0xd4>
 8004b58:	20400001 	.word	0x20400001

08004b5c <_fflush_r>:
 8004b5c:	b538      	push	{r3, r4, r5, lr}
 8004b5e:	690b      	ldr	r3, [r1, #16]
 8004b60:	4605      	mov	r5, r0
 8004b62:	460c      	mov	r4, r1
 8004b64:	b913      	cbnz	r3, 8004b6c <_fflush_r+0x10>
 8004b66:	2500      	movs	r5, #0
 8004b68:	4628      	mov	r0, r5
 8004b6a:	bd38      	pop	{r3, r4, r5, pc}
 8004b6c:	b118      	cbz	r0, 8004b76 <_fflush_r+0x1a>
 8004b6e:	6a03      	ldr	r3, [r0, #32]
 8004b70:	b90b      	cbnz	r3, 8004b76 <_fflush_r+0x1a>
 8004b72:	f7ff fa93 	bl	800409c <__sinit>
 8004b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d0f3      	beq.n	8004b66 <_fflush_r+0xa>
 8004b7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004b80:	07d0      	lsls	r0, r2, #31
 8004b82:	d404      	bmi.n	8004b8e <_fflush_r+0x32>
 8004b84:	0599      	lsls	r1, r3, #22
 8004b86:	d402      	bmi.n	8004b8e <_fflush_r+0x32>
 8004b88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b8a:	f7ff fb8c 	bl	80042a6 <__retarget_lock_acquire_recursive>
 8004b8e:	4628      	mov	r0, r5
 8004b90:	4621      	mov	r1, r4
 8004b92:	f7ff ff5f 	bl	8004a54 <__sflush_r>
 8004b96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b98:	07da      	lsls	r2, r3, #31
 8004b9a:	4605      	mov	r5, r0
 8004b9c:	d4e4      	bmi.n	8004b68 <_fflush_r+0xc>
 8004b9e:	89a3      	ldrh	r3, [r4, #12]
 8004ba0:	059b      	lsls	r3, r3, #22
 8004ba2:	d4e1      	bmi.n	8004b68 <_fflush_r+0xc>
 8004ba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ba6:	f7ff fb7f 	bl	80042a8 <__retarget_lock_release_recursive>
 8004baa:	e7dd      	b.n	8004b68 <_fflush_r+0xc>

08004bac <__swbuf_r>:
 8004bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bae:	460e      	mov	r6, r1
 8004bb0:	4614      	mov	r4, r2
 8004bb2:	4605      	mov	r5, r0
 8004bb4:	b118      	cbz	r0, 8004bbe <__swbuf_r+0x12>
 8004bb6:	6a03      	ldr	r3, [r0, #32]
 8004bb8:	b90b      	cbnz	r3, 8004bbe <__swbuf_r+0x12>
 8004bba:	f7ff fa6f 	bl	800409c <__sinit>
 8004bbe:	69a3      	ldr	r3, [r4, #24]
 8004bc0:	60a3      	str	r3, [r4, #8]
 8004bc2:	89a3      	ldrh	r3, [r4, #12]
 8004bc4:	071a      	lsls	r2, r3, #28
 8004bc6:	d501      	bpl.n	8004bcc <__swbuf_r+0x20>
 8004bc8:	6923      	ldr	r3, [r4, #16]
 8004bca:	b943      	cbnz	r3, 8004bde <__swbuf_r+0x32>
 8004bcc:	4621      	mov	r1, r4
 8004bce:	4628      	mov	r0, r5
 8004bd0:	f000 f82a 	bl	8004c28 <__swsetup_r>
 8004bd4:	b118      	cbz	r0, 8004bde <__swbuf_r+0x32>
 8004bd6:	f04f 37ff 	mov.w	r7, #4294967295
 8004bda:	4638      	mov	r0, r7
 8004bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	6922      	ldr	r2, [r4, #16]
 8004be2:	1a98      	subs	r0, r3, r2
 8004be4:	6963      	ldr	r3, [r4, #20]
 8004be6:	b2f6      	uxtb	r6, r6
 8004be8:	4283      	cmp	r3, r0
 8004bea:	4637      	mov	r7, r6
 8004bec:	dc05      	bgt.n	8004bfa <__swbuf_r+0x4e>
 8004bee:	4621      	mov	r1, r4
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	f7ff ffb3 	bl	8004b5c <_fflush_r>
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	d1ed      	bne.n	8004bd6 <__swbuf_r+0x2a>
 8004bfa:	68a3      	ldr	r3, [r4, #8]
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	60a3      	str	r3, [r4, #8]
 8004c00:	6823      	ldr	r3, [r4, #0]
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	6022      	str	r2, [r4, #0]
 8004c06:	701e      	strb	r6, [r3, #0]
 8004c08:	6962      	ldr	r2, [r4, #20]
 8004c0a:	1c43      	adds	r3, r0, #1
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d004      	beq.n	8004c1a <__swbuf_r+0x6e>
 8004c10:	89a3      	ldrh	r3, [r4, #12]
 8004c12:	07db      	lsls	r3, r3, #31
 8004c14:	d5e1      	bpl.n	8004bda <__swbuf_r+0x2e>
 8004c16:	2e0a      	cmp	r6, #10
 8004c18:	d1df      	bne.n	8004bda <__swbuf_r+0x2e>
 8004c1a:	4621      	mov	r1, r4
 8004c1c:	4628      	mov	r0, r5
 8004c1e:	f7ff ff9d 	bl	8004b5c <_fflush_r>
 8004c22:	2800      	cmp	r0, #0
 8004c24:	d0d9      	beq.n	8004bda <__swbuf_r+0x2e>
 8004c26:	e7d6      	b.n	8004bd6 <__swbuf_r+0x2a>

08004c28 <__swsetup_r>:
 8004c28:	b538      	push	{r3, r4, r5, lr}
 8004c2a:	4b29      	ldr	r3, [pc, #164]	@ (8004cd0 <__swsetup_r+0xa8>)
 8004c2c:	4605      	mov	r5, r0
 8004c2e:	6818      	ldr	r0, [r3, #0]
 8004c30:	460c      	mov	r4, r1
 8004c32:	b118      	cbz	r0, 8004c3c <__swsetup_r+0x14>
 8004c34:	6a03      	ldr	r3, [r0, #32]
 8004c36:	b90b      	cbnz	r3, 8004c3c <__swsetup_r+0x14>
 8004c38:	f7ff fa30 	bl	800409c <__sinit>
 8004c3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c40:	0719      	lsls	r1, r3, #28
 8004c42:	d422      	bmi.n	8004c8a <__swsetup_r+0x62>
 8004c44:	06da      	lsls	r2, r3, #27
 8004c46:	d407      	bmi.n	8004c58 <__swsetup_r+0x30>
 8004c48:	2209      	movs	r2, #9
 8004c4a:	602a      	str	r2, [r5, #0]
 8004c4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c50:	81a3      	strh	r3, [r4, #12]
 8004c52:	f04f 30ff 	mov.w	r0, #4294967295
 8004c56:	e033      	b.n	8004cc0 <__swsetup_r+0x98>
 8004c58:	0758      	lsls	r0, r3, #29
 8004c5a:	d512      	bpl.n	8004c82 <__swsetup_r+0x5a>
 8004c5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c5e:	b141      	cbz	r1, 8004c72 <__swsetup_r+0x4a>
 8004c60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c64:	4299      	cmp	r1, r3
 8004c66:	d002      	beq.n	8004c6e <__swsetup_r+0x46>
 8004c68:	4628      	mov	r0, r5
 8004c6a:	f7ff fb2d 	bl	80042c8 <_free_r>
 8004c6e:	2300      	movs	r3, #0
 8004c70:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c72:	89a3      	ldrh	r3, [r4, #12]
 8004c74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004c78:	81a3      	strh	r3, [r4, #12]
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	6063      	str	r3, [r4, #4]
 8004c7e:	6923      	ldr	r3, [r4, #16]
 8004c80:	6023      	str	r3, [r4, #0]
 8004c82:	89a3      	ldrh	r3, [r4, #12]
 8004c84:	f043 0308 	orr.w	r3, r3, #8
 8004c88:	81a3      	strh	r3, [r4, #12]
 8004c8a:	6923      	ldr	r3, [r4, #16]
 8004c8c:	b94b      	cbnz	r3, 8004ca2 <__swsetup_r+0x7a>
 8004c8e:	89a3      	ldrh	r3, [r4, #12]
 8004c90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004c94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c98:	d003      	beq.n	8004ca2 <__swsetup_r+0x7a>
 8004c9a:	4621      	mov	r1, r4
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	f000 f84f 	bl	8004d40 <__smakebuf_r>
 8004ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ca6:	f013 0201 	ands.w	r2, r3, #1
 8004caa:	d00a      	beq.n	8004cc2 <__swsetup_r+0x9a>
 8004cac:	2200      	movs	r2, #0
 8004cae:	60a2      	str	r2, [r4, #8]
 8004cb0:	6962      	ldr	r2, [r4, #20]
 8004cb2:	4252      	negs	r2, r2
 8004cb4:	61a2      	str	r2, [r4, #24]
 8004cb6:	6922      	ldr	r2, [r4, #16]
 8004cb8:	b942      	cbnz	r2, 8004ccc <__swsetup_r+0xa4>
 8004cba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004cbe:	d1c5      	bne.n	8004c4c <__swsetup_r+0x24>
 8004cc0:	bd38      	pop	{r3, r4, r5, pc}
 8004cc2:	0799      	lsls	r1, r3, #30
 8004cc4:	bf58      	it	pl
 8004cc6:	6962      	ldrpl	r2, [r4, #20]
 8004cc8:	60a2      	str	r2, [r4, #8]
 8004cca:	e7f4      	b.n	8004cb6 <__swsetup_r+0x8e>
 8004ccc:	2000      	movs	r0, #0
 8004cce:	e7f7      	b.n	8004cc0 <__swsetup_r+0x98>
 8004cd0:	2000001c 	.word	0x2000001c

08004cd4 <_sbrk_r>:
 8004cd4:	b538      	push	{r3, r4, r5, lr}
 8004cd6:	4d06      	ldr	r5, [pc, #24]	@ (8004cf0 <_sbrk_r+0x1c>)
 8004cd8:	2300      	movs	r3, #0
 8004cda:	4604      	mov	r4, r0
 8004cdc:	4608      	mov	r0, r1
 8004cde:	602b      	str	r3, [r5, #0]
 8004ce0:	f7fb fd42 	bl	8000768 <_sbrk>
 8004ce4:	1c43      	adds	r3, r0, #1
 8004ce6:	d102      	bne.n	8004cee <_sbrk_r+0x1a>
 8004ce8:	682b      	ldr	r3, [r5, #0]
 8004cea:	b103      	cbz	r3, 8004cee <_sbrk_r+0x1a>
 8004cec:	6023      	str	r3, [r4, #0]
 8004cee:	bd38      	pop	{r3, r4, r5, pc}
 8004cf0:	20012fcc 	.word	0x20012fcc

08004cf4 <__swhatbuf_r>:
 8004cf4:	b570      	push	{r4, r5, r6, lr}
 8004cf6:	460c      	mov	r4, r1
 8004cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cfc:	2900      	cmp	r1, #0
 8004cfe:	b096      	sub	sp, #88	@ 0x58
 8004d00:	4615      	mov	r5, r2
 8004d02:	461e      	mov	r6, r3
 8004d04:	da0d      	bge.n	8004d22 <__swhatbuf_r+0x2e>
 8004d06:	89a3      	ldrh	r3, [r4, #12]
 8004d08:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004d0c:	f04f 0100 	mov.w	r1, #0
 8004d10:	bf14      	ite	ne
 8004d12:	2340      	movne	r3, #64	@ 0x40
 8004d14:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004d18:	2000      	movs	r0, #0
 8004d1a:	6031      	str	r1, [r6, #0]
 8004d1c:	602b      	str	r3, [r5, #0]
 8004d1e:	b016      	add	sp, #88	@ 0x58
 8004d20:	bd70      	pop	{r4, r5, r6, pc}
 8004d22:	466a      	mov	r2, sp
 8004d24:	f000 f848 	bl	8004db8 <_fstat_r>
 8004d28:	2800      	cmp	r0, #0
 8004d2a:	dbec      	blt.n	8004d06 <__swhatbuf_r+0x12>
 8004d2c:	9901      	ldr	r1, [sp, #4]
 8004d2e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004d32:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004d36:	4259      	negs	r1, r3
 8004d38:	4159      	adcs	r1, r3
 8004d3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d3e:	e7eb      	b.n	8004d18 <__swhatbuf_r+0x24>

08004d40 <__smakebuf_r>:
 8004d40:	898b      	ldrh	r3, [r1, #12]
 8004d42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d44:	079d      	lsls	r5, r3, #30
 8004d46:	4606      	mov	r6, r0
 8004d48:	460c      	mov	r4, r1
 8004d4a:	d507      	bpl.n	8004d5c <__smakebuf_r+0x1c>
 8004d4c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004d50:	6023      	str	r3, [r4, #0]
 8004d52:	6123      	str	r3, [r4, #16]
 8004d54:	2301      	movs	r3, #1
 8004d56:	6163      	str	r3, [r4, #20]
 8004d58:	b003      	add	sp, #12
 8004d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d5c:	ab01      	add	r3, sp, #4
 8004d5e:	466a      	mov	r2, sp
 8004d60:	f7ff ffc8 	bl	8004cf4 <__swhatbuf_r>
 8004d64:	9f00      	ldr	r7, [sp, #0]
 8004d66:	4605      	mov	r5, r0
 8004d68:	4639      	mov	r1, r7
 8004d6a:	4630      	mov	r0, r6
 8004d6c:	f7ff fb18 	bl	80043a0 <_malloc_r>
 8004d70:	b948      	cbnz	r0, 8004d86 <__smakebuf_r+0x46>
 8004d72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d76:	059a      	lsls	r2, r3, #22
 8004d78:	d4ee      	bmi.n	8004d58 <__smakebuf_r+0x18>
 8004d7a:	f023 0303 	bic.w	r3, r3, #3
 8004d7e:	f043 0302 	orr.w	r3, r3, #2
 8004d82:	81a3      	strh	r3, [r4, #12]
 8004d84:	e7e2      	b.n	8004d4c <__smakebuf_r+0xc>
 8004d86:	89a3      	ldrh	r3, [r4, #12]
 8004d88:	6020      	str	r0, [r4, #0]
 8004d8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d8e:	81a3      	strh	r3, [r4, #12]
 8004d90:	9b01      	ldr	r3, [sp, #4]
 8004d92:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004d96:	b15b      	cbz	r3, 8004db0 <__smakebuf_r+0x70>
 8004d98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d9c:	4630      	mov	r0, r6
 8004d9e:	f000 f81d 	bl	8004ddc <_isatty_r>
 8004da2:	b128      	cbz	r0, 8004db0 <__smakebuf_r+0x70>
 8004da4:	89a3      	ldrh	r3, [r4, #12]
 8004da6:	f023 0303 	bic.w	r3, r3, #3
 8004daa:	f043 0301 	orr.w	r3, r3, #1
 8004dae:	81a3      	strh	r3, [r4, #12]
 8004db0:	89a3      	ldrh	r3, [r4, #12]
 8004db2:	431d      	orrs	r5, r3
 8004db4:	81a5      	strh	r5, [r4, #12]
 8004db6:	e7cf      	b.n	8004d58 <__smakebuf_r+0x18>

08004db8 <_fstat_r>:
 8004db8:	b538      	push	{r3, r4, r5, lr}
 8004dba:	4d07      	ldr	r5, [pc, #28]	@ (8004dd8 <_fstat_r+0x20>)
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	4604      	mov	r4, r0
 8004dc0:	4608      	mov	r0, r1
 8004dc2:	4611      	mov	r1, r2
 8004dc4:	602b      	str	r3, [r5, #0]
 8004dc6:	f7fb fca6 	bl	8000716 <_fstat>
 8004dca:	1c43      	adds	r3, r0, #1
 8004dcc:	d102      	bne.n	8004dd4 <_fstat_r+0x1c>
 8004dce:	682b      	ldr	r3, [r5, #0]
 8004dd0:	b103      	cbz	r3, 8004dd4 <_fstat_r+0x1c>
 8004dd2:	6023      	str	r3, [r4, #0]
 8004dd4:	bd38      	pop	{r3, r4, r5, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20012fcc 	.word	0x20012fcc

08004ddc <_isatty_r>:
 8004ddc:	b538      	push	{r3, r4, r5, lr}
 8004dde:	4d06      	ldr	r5, [pc, #24]	@ (8004df8 <_isatty_r+0x1c>)
 8004de0:	2300      	movs	r3, #0
 8004de2:	4604      	mov	r4, r0
 8004de4:	4608      	mov	r0, r1
 8004de6:	602b      	str	r3, [r5, #0]
 8004de8:	f7fb fca5 	bl	8000736 <_isatty>
 8004dec:	1c43      	adds	r3, r0, #1
 8004dee:	d102      	bne.n	8004df6 <_isatty_r+0x1a>
 8004df0:	682b      	ldr	r3, [r5, #0]
 8004df2:	b103      	cbz	r3, 8004df6 <_isatty_r+0x1a>
 8004df4:	6023      	str	r3, [r4, #0]
 8004df6:	bd38      	pop	{r3, r4, r5, pc}
 8004df8:	20012fcc 	.word	0x20012fcc

08004dfc <_init>:
 8004dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfe:	bf00      	nop
 8004e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e02:	bc08      	pop	{r3}
 8004e04:	469e      	mov	lr, r3
 8004e06:	4770      	bx	lr

08004e08 <_fini>:
 8004e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e0a:	bf00      	nop
 8004e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e0e:	bc08      	pop	{r3}
 8004e10:	469e      	mov	lr, r3
 8004e12:	4770      	bx	lr
