
MUC2_P1_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f44  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080020dc  080020dc  000030dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002110  08002110  00004010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002110  08002110  00003110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002118  08002118  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002118  08002118  00003118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800211c  0800211c  0000311c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002120  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000010  08002130  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002130  000040f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d16  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015ca  00000000  00000000  0000bd56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000680  00000000  00000000  0000d320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004f7  00000000  00000000  0000d9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000154b3  00000000  00000000  0000de97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008479  00000000  00000000  0002334a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085848  00000000  00000000  0002b7c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b100b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019b0  00000000  00000000  000b1050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000b2a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080020c4 	.word	0x080020c4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	080020c4 	.word	0x080020c4

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b988 	b.w	8000510 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	468e      	mov	lr, r1
 8000220:	4604      	mov	r4, r0
 8000222:	4688      	mov	r8, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14a      	bne.n	80002be <__udivmoddi4+0xa6>
 8000228:	428a      	cmp	r2, r1
 800022a:	4617      	mov	r7, r2
 800022c:	d962      	bls.n	80002f4 <__udivmoddi4+0xdc>
 800022e:	fab2 f682 	clz	r6, r2
 8000232:	b14e      	cbz	r6, 8000248 <__udivmoddi4+0x30>
 8000234:	f1c6 0320 	rsb	r3, r6, #32
 8000238:	fa01 f806 	lsl.w	r8, r1, r6
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	40b7      	lsls	r7, r6
 8000242:	ea43 0808 	orr.w	r8, r3, r8
 8000246:	40b4      	lsls	r4, r6
 8000248:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800024c:	fa1f fc87 	uxth.w	ip, r7
 8000250:	fbb8 f1fe 	udiv	r1, r8, lr
 8000254:	0c23      	lsrs	r3, r4, #16
 8000256:	fb0e 8811 	mls	r8, lr, r1, r8
 800025a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025e:	fb01 f20c 	mul.w	r2, r1, ip
 8000262:	429a      	cmp	r2, r3
 8000264:	d909      	bls.n	800027a <__udivmoddi4+0x62>
 8000266:	18fb      	adds	r3, r7, r3
 8000268:	f101 30ff 	add.w	r0, r1, #4294967295
 800026c:	f080 80ea 	bcs.w	8000444 <__udivmoddi4+0x22c>
 8000270:	429a      	cmp	r2, r3
 8000272:	f240 80e7 	bls.w	8000444 <__udivmoddi4+0x22c>
 8000276:	3902      	subs	r1, #2
 8000278:	443b      	add	r3, r7
 800027a:	1a9a      	subs	r2, r3, r2
 800027c:	b2a3      	uxth	r3, r4
 800027e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000282:	fb0e 2210 	mls	r2, lr, r0, r2
 8000286:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028a:	fb00 fc0c 	mul.w	ip, r0, ip
 800028e:	459c      	cmp	ip, r3
 8000290:	d909      	bls.n	80002a6 <__udivmoddi4+0x8e>
 8000292:	18fb      	adds	r3, r7, r3
 8000294:	f100 32ff 	add.w	r2, r0, #4294967295
 8000298:	f080 80d6 	bcs.w	8000448 <__udivmoddi4+0x230>
 800029c:	459c      	cmp	ip, r3
 800029e:	f240 80d3 	bls.w	8000448 <__udivmoddi4+0x230>
 80002a2:	443b      	add	r3, r7
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002aa:	eba3 030c 	sub.w	r3, r3, ip
 80002ae:	2100      	movs	r1, #0
 80002b0:	b11d      	cbz	r5, 80002ba <__udivmoddi4+0xa2>
 80002b2:	40f3      	lsrs	r3, r6
 80002b4:	2200      	movs	r2, #0
 80002b6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d905      	bls.n	80002ce <__udivmoddi4+0xb6>
 80002c2:	b10d      	cbz	r5, 80002c8 <__udivmoddi4+0xb0>
 80002c4:	e9c5 0100 	strd	r0, r1, [r5]
 80002c8:	2100      	movs	r1, #0
 80002ca:	4608      	mov	r0, r1
 80002cc:	e7f5      	b.n	80002ba <__udivmoddi4+0xa2>
 80002ce:	fab3 f183 	clz	r1, r3
 80002d2:	2900      	cmp	r1, #0
 80002d4:	d146      	bne.n	8000364 <__udivmoddi4+0x14c>
 80002d6:	4573      	cmp	r3, lr
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xc8>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 8105 	bhi.w	80004ea <__udivmoddi4+0x2d2>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4690      	mov	r8, r2
 80002ea:	2d00      	cmp	r5, #0
 80002ec:	d0e5      	beq.n	80002ba <__udivmoddi4+0xa2>
 80002ee:	e9c5 4800 	strd	r4, r8, [r5]
 80002f2:	e7e2      	b.n	80002ba <__udivmoddi4+0xa2>
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f000 8090 	beq.w	800041a <__udivmoddi4+0x202>
 80002fa:	fab2 f682 	clz	r6, r2
 80002fe:	2e00      	cmp	r6, #0
 8000300:	f040 80a4 	bne.w	800044c <__udivmoddi4+0x234>
 8000304:	1a8a      	subs	r2, r1, r2
 8000306:	0c03      	lsrs	r3, r0, #16
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	b280      	uxth	r0, r0
 800030e:	b2bc      	uxth	r4, r7
 8000310:	2101      	movs	r1, #1
 8000312:	fbb2 fcfe 	udiv	ip, r2, lr
 8000316:	fb0e 221c 	mls	r2, lr, ip, r2
 800031a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800031e:	fb04 f20c 	mul.w	r2, r4, ip
 8000322:	429a      	cmp	r2, r3
 8000324:	d907      	bls.n	8000336 <__udivmoddi4+0x11e>
 8000326:	18fb      	adds	r3, r7, r3
 8000328:	f10c 38ff 	add.w	r8, ip, #4294967295
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x11c>
 800032e:	429a      	cmp	r2, r3
 8000330:	f200 80e0 	bhi.w	80004f4 <__udivmoddi4+0x2dc>
 8000334:	46c4      	mov	ip, r8
 8000336:	1a9b      	subs	r3, r3, r2
 8000338:	fbb3 f2fe 	udiv	r2, r3, lr
 800033c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000340:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000344:	fb02 f404 	mul.w	r4, r2, r4
 8000348:	429c      	cmp	r4, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x144>
 800034c:	18fb      	adds	r3, r7, r3
 800034e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x142>
 8000354:	429c      	cmp	r4, r3
 8000356:	f200 80ca 	bhi.w	80004ee <__udivmoddi4+0x2d6>
 800035a:	4602      	mov	r2, r0
 800035c:	1b1b      	subs	r3, r3, r4
 800035e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0x98>
 8000364:	f1c1 0620 	rsb	r6, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 f706 	lsr.w	r7, r2, r6
 800036e:	431f      	orrs	r7, r3
 8000370:	fa0e f401 	lsl.w	r4, lr, r1
 8000374:	fa20 f306 	lsr.w	r3, r0, r6
 8000378:	fa2e fe06 	lsr.w	lr, lr, r6
 800037c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000380:	4323      	orrs	r3, r4
 8000382:	fa00 f801 	lsl.w	r8, r0, r1
 8000386:	fa1f fc87 	uxth.w	ip, r7
 800038a:	fbbe f0f9 	udiv	r0, lr, r9
 800038e:	0c1c      	lsrs	r4, r3, #16
 8000390:	fb09 ee10 	mls	lr, r9, r0, lr
 8000394:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000398:	fb00 fe0c 	mul.w	lr, r0, ip
 800039c:	45a6      	cmp	lr, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x1a0>
 80003a4:	193c      	adds	r4, r7, r4
 80003a6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003aa:	f080 809c 	bcs.w	80004e6 <__udivmoddi4+0x2ce>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f240 8099 	bls.w	80004e6 <__udivmoddi4+0x2ce>
 80003b4:	3802      	subs	r0, #2
 80003b6:	443c      	add	r4, r7
 80003b8:	eba4 040e 	sub.w	r4, r4, lr
 80003bc:	fa1f fe83 	uxth.w	lr, r3
 80003c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c4:	fb09 4413 	mls	r4, r9, r3, r4
 80003c8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003cc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d0:	45a4      	cmp	ip, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1ce>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003da:	f080 8082 	bcs.w	80004e2 <__udivmoddi4+0x2ca>
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d97f      	bls.n	80004e2 <__udivmoddi4+0x2ca>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f2:	4564      	cmp	r4, ip
 80003f4:	4673      	mov	r3, lr
 80003f6:	46e1      	mov	r9, ip
 80003f8:	d362      	bcc.n	80004c0 <__udivmoddi4+0x2a8>
 80003fa:	d05f      	beq.n	80004bc <__udivmoddi4+0x2a4>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x1fe>
 80003fe:	ebb8 0203 	subs.w	r2, r8, r3
 8000402:	eb64 0409 	sbc.w	r4, r4, r9
 8000406:	fa04 f606 	lsl.w	r6, r4, r6
 800040a:	fa22 f301 	lsr.w	r3, r2, r1
 800040e:	431e      	orrs	r6, r3
 8000410:	40cc      	lsrs	r4, r1
 8000412:	e9c5 6400 	strd	r6, r4, [r5]
 8000416:	2100      	movs	r1, #0
 8000418:	e74f      	b.n	80002ba <__udivmoddi4+0xa2>
 800041a:	fbb1 fcf2 	udiv	ip, r1, r2
 800041e:	0c01      	lsrs	r1, r0, #16
 8000420:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000424:	b280      	uxth	r0, r0
 8000426:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042a:	463b      	mov	r3, r7
 800042c:	4638      	mov	r0, r7
 800042e:	463c      	mov	r4, r7
 8000430:	46b8      	mov	r8, r7
 8000432:	46be      	mov	lr, r7
 8000434:	2620      	movs	r6, #32
 8000436:	fbb1 f1f7 	udiv	r1, r1, r7
 800043a:	eba2 0208 	sub.w	r2, r2, r8
 800043e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000442:	e766      	b.n	8000312 <__udivmoddi4+0xfa>
 8000444:	4601      	mov	r1, r0
 8000446:	e718      	b.n	800027a <__udivmoddi4+0x62>
 8000448:	4610      	mov	r0, r2
 800044a:	e72c      	b.n	80002a6 <__udivmoddi4+0x8e>
 800044c:	f1c6 0220 	rsb	r2, r6, #32
 8000450:	fa2e f302 	lsr.w	r3, lr, r2
 8000454:	40b7      	lsls	r7, r6
 8000456:	40b1      	lsls	r1, r6
 8000458:	fa20 f202 	lsr.w	r2, r0, r2
 800045c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000460:	430a      	orrs	r2, r1
 8000462:	fbb3 f8fe 	udiv	r8, r3, lr
 8000466:	b2bc      	uxth	r4, r7
 8000468:	fb0e 3318 	mls	r3, lr, r8, r3
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb08 f904 	mul.w	r9, r8, r4
 8000476:	40b0      	lsls	r0, r6
 8000478:	4589      	cmp	r9, r1
 800047a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800047e:	b280      	uxth	r0, r0
 8000480:	d93e      	bls.n	8000500 <__udivmoddi4+0x2e8>
 8000482:	1879      	adds	r1, r7, r1
 8000484:	f108 3cff 	add.w	ip, r8, #4294967295
 8000488:	d201      	bcs.n	800048e <__udivmoddi4+0x276>
 800048a:	4589      	cmp	r9, r1
 800048c:	d81f      	bhi.n	80004ce <__udivmoddi4+0x2b6>
 800048e:	eba1 0109 	sub.w	r1, r1, r9
 8000492:	fbb1 f9fe 	udiv	r9, r1, lr
 8000496:	fb09 f804 	mul.w	r8, r9, r4
 800049a:	fb0e 1119 	mls	r1, lr, r9, r1
 800049e:	b292      	uxth	r2, r2
 80004a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a4:	4542      	cmp	r2, r8
 80004a6:	d229      	bcs.n	80004fc <__udivmoddi4+0x2e4>
 80004a8:	18ba      	adds	r2, r7, r2
 80004aa:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ae:	d2c4      	bcs.n	800043a <__udivmoddi4+0x222>
 80004b0:	4542      	cmp	r2, r8
 80004b2:	d2c2      	bcs.n	800043a <__udivmoddi4+0x222>
 80004b4:	f1a9 0102 	sub.w	r1, r9, #2
 80004b8:	443a      	add	r2, r7
 80004ba:	e7be      	b.n	800043a <__udivmoddi4+0x222>
 80004bc:	45f0      	cmp	r8, lr
 80004be:	d29d      	bcs.n	80003fc <__udivmoddi4+0x1e4>
 80004c0:	ebbe 0302 	subs.w	r3, lr, r2
 80004c4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c8:	3801      	subs	r0, #1
 80004ca:	46e1      	mov	r9, ip
 80004cc:	e796      	b.n	80003fc <__udivmoddi4+0x1e4>
 80004ce:	eba7 0909 	sub.w	r9, r7, r9
 80004d2:	4449      	add	r1, r9
 80004d4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004dc:	fb09 f804 	mul.w	r8, r9, r4
 80004e0:	e7db      	b.n	800049a <__udivmoddi4+0x282>
 80004e2:	4673      	mov	r3, lr
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1ce>
 80004e6:	4650      	mov	r0, sl
 80004e8:	e766      	b.n	80003b8 <__udivmoddi4+0x1a0>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e6fd      	b.n	80002ea <__udivmoddi4+0xd2>
 80004ee:	443b      	add	r3, r7
 80004f0:	3a02      	subs	r2, #2
 80004f2:	e733      	b.n	800035c <__udivmoddi4+0x144>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	443b      	add	r3, r7
 80004fa:	e71c      	b.n	8000336 <__udivmoddi4+0x11e>
 80004fc:	4649      	mov	r1, r9
 80004fe:	e79c      	b.n	800043a <__udivmoddi4+0x222>
 8000500:	eba1 0109 	sub.w	r1, r1, r9
 8000504:	46c4      	mov	ip, r8
 8000506:	fbb1 f9fe 	udiv	r9, r1, lr
 800050a:	fb09 f804 	mul.w	r8, r9, r4
 800050e:	e7c4      	b.n	800049a <__udivmoddi4+0x282>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <SysTick_Handler>:
#include "stm32f4xx.h"

extern UART_HandleTypeDef huart2;

void SysTick_Handler( void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000518:	f000 f9bc 	bl	8000894 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 800051c:	f000 faeb 	bl	8000af6 <HAL_SYSTICK_IRQHandler>
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}

08000524 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 8000528:	4802      	ldr	r0, [pc, #8]	@ (8000534 <USART2_IRQHandler+0x10>)
 800052a:	f000 fe3b 	bl	80011a4 <HAL_UART_IRQHandler>
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	2000002c 	.word	0x2000002c

08000538 <main>:


char* user_data = "Testing for data transmission over UART...\r";

int main(void)
{
 8000538:	b598      	push	{r3, r4, r7, lr}
 800053a:	af00      	add	r7, sp, #0
	HAL_Init();
 800053c:	f000 f958 	bl	80007f0 <HAL_Init>
	SystemClockConfig();
 8000540:	f000 f82c 	bl	800059c <SystemClockConfig>
	UART2_init();
 8000544:	f000 f832 	bl	80005ac <UART2_init>
	HAL_UART_Transmit(&huart2, (uint8_t*)user_data, strlen(user_data), HAL_MAX_DELAY);
 8000548:	4b0f      	ldr	r3, [pc, #60]	@ (8000588 <main+0x50>)
 800054a:	681c      	ldr	r4, [r3, #0]
 800054c:	4b0e      	ldr	r3, [pc, #56]	@ (8000588 <main+0x50>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4618      	mov	r0, r3
 8000552:	f7ff fe41 	bl	80001d8 <strlen>
 8000556:	4603      	mov	r3, r0
 8000558:	b29a      	uxth	r2, r3
 800055a:	f04f 33ff 	mov.w	r3, #4294967295
 800055e:	4621      	mov	r1, r4
 8000560:	480a      	ldr	r0, [pc, #40]	@ (800058c <main+0x54>)
 8000562:	f000 fd6f 	bl	8001044 <HAL_UART_Transmit>
	data_buffer[count++] = '\r';
 8000566:	4b0a      	ldr	r3, [pc, #40]	@ (8000590 <main+0x58>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	1c5a      	adds	r2, r3, #1
 800056c:	b2d1      	uxtb	r1, r2
 800056e:	4a08      	ldr	r2, [pc, #32]	@ (8000590 <main+0x58>)
 8000570:	7011      	strb	r1, [r2, #0]
 8000572:	461a      	mov	r2, r3
 8000574:	4b07      	ldr	r3, [pc, #28]	@ (8000594 <main+0x5c>)
 8000576:	210d      	movs	r1, #13
 8000578:	5499      	strb	r1, [r3, r2]

	HAL_UART_Receive_IT(&huart2, &rec_data, 1);
 800057a:	2201      	movs	r2, #1
 800057c:	4906      	ldr	r1, [pc, #24]	@ (8000598 <main+0x60>)
 800057e:	4803      	ldr	r0, [pc, #12]	@ (800058c <main+0x54>)
 8000580:	f000 fdeb 	bl	800115a <HAL_UART_Receive_IT>
	while(1);
 8000584:	bf00      	nop
 8000586:	e7fd      	b.n	8000584 <main+0x4c>
 8000588:	20000000 	.word	0x20000000
 800058c:	2000002c 	.word	0x2000002c
 8000590:	200000dc 	.word	0x200000dc
 8000594:	20000078 	.word	0x20000078
 8000598:	20000074 	.word	0x20000074

0800059c <SystemClockConfig>:

}

void SystemClockConfig(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0

}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
	...

080005ac <UART2_init>:

void UART2_init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80005b0:	4b0f      	ldr	r3, [pc, #60]	@ (80005f0 <UART2_init+0x44>)
 80005b2:	4a10      	ldr	r2, [pc, #64]	@ (80005f4 <UART2_init+0x48>)
 80005b4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80005b6:	4b0e      	ldr	r3, [pc, #56]	@ (80005f0 <UART2_init+0x44>)
 80005b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005bc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005be:	4b0c      	ldr	r3, [pc, #48]	@ (80005f0 <UART2_init+0x44>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80005c4:	4b0a      	ldr	r3, [pc, #40]	@ (80005f0 <UART2_init+0x44>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80005ca:	4b09      	ldr	r3, [pc, #36]	@ (80005f0 <UART2_init+0x44>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d0:	4b07      	ldr	r3, [pc, #28]	@ (80005f0 <UART2_init+0x44>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80005d6:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <UART2_init+0x44>)
 80005d8:	220c      	movs	r2, #12
 80005da:	615a      	str	r2, [r3, #20]
	if(HAL_UART_Init(&huart2) != HAL_OK)
 80005dc:	4804      	ldr	r0, [pc, #16]	@ (80005f0 <UART2_init+0x44>)
 80005de:	f000 fce1 	bl	8000fa4 <HAL_UART_Init>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <UART2_init+0x40>
	{
		Error_Handler();
 80005e8:	f000 f806 	bl	80005f8 <Error_Handler>
	}


}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	2000002c 	.word	0x2000002c
 80005f4:	40004400 	.word	0x40004400

080005f8 <Error_Handler>:

void Error_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
	while(1);
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <Error_Handler+0x4>

08000600 <convert_to_capital>:
}

uint8_t convert_to_capital(uint8_t data)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
	if(data >= 'a' && data <= 'z')
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	2b60      	cmp	r3, #96	@ 0x60
 800060e:	d906      	bls.n	800061e <convert_to_capital+0x1e>
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	2b7a      	cmp	r3, #122	@ 0x7a
 8000614:	d803      	bhi.n	800061e <convert_to_capital+0x1e>
	{
		return (data - ('a' - 'A'));
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	3b20      	subs	r3, #32
 800061a:	b2db      	uxtb	r3, r3
 800061c:	e000      	b.n	8000620 <convert_to_capital+0x20>
	}
	return data;
 800061e:	79fb      	ldrb	r3, [r7, #7]
}
 8000620:	4618      	mov	r0, r3
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	if(rec_data == '\n')
 8000634:	4b18      	ldr	r3, [pc, #96]	@ (8000698 <HAL_UART_RxCpltCallback+0x6c>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b0a      	cmp	r3, #10
 800063a:	d113      	bne.n	8000664 <HAL_UART_RxCpltCallback+0x38>
	{
		data_buffer[count++] = '\r';
 800063c:	4b17      	ldr	r3, [pc, #92]	@ (800069c <HAL_UART_RxCpltCallback+0x70>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	1c5a      	adds	r2, r3, #1
 8000642:	b2d1      	uxtb	r1, r2
 8000644:	4a15      	ldr	r2, [pc, #84]	@ (800069c <HAL_UART_RxCpltCallback+0x70>)
 8000646:	7011      	strb	r1, [r2, #0]
 8000648:	461a      	mov	r2, r3
 800064a:	4b15      	ldr	r3, [pc, #84]	@ (80006a0 <HAL_UART_RxCpltCallback+0x74>)
 800064c:	210d      	movs	r1, #13
 800064e:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart2, data_buffer, count, HAL_MAX_DELAY);
 8000650:	4b12      	ldr	r3, [pc, #72]	@ (800069c <HAL_UART_RxCpltCallback+0x70>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	461a      	mov	r2, r3
 8000656:	f04f 33ff 	mov.w	r3, #4294967295
 800065a:	4911      	ldr	r1, [pc, #68]	@ (80006a0 <HAL_UART_RxCpltCallback+0x74>)
 800065c:	4811      	ldr	r0, [pc, #68]	@ (80006a4 <HAL_UART_RxCpltCallback+0x78>)
 800065e:	f000 fcf1 	bl	8001044 <HAL_UART_Transmit>
	else
	{
		data_buffer[count++] = convert_to_capital(rec_data);
		HAL_UART_Receive_IT(&huart2, &rec_data, 1);
	}
}
 8000662:	e014      	b.n	800068e <HAL_UART_RxCpltCallback+0x62>
		data_buffer[count++] = convert_to_capital(rec_data);
 8000664:	4b0c      	ldr	r3, [pc, #48]	@ (8000698 <HAL_UART_RxCpltCallback+0x6c>)
 8000666:	781a      	ldrb	r2, [r3, #0]
 8000668:	4b0c      	ldr	r3, [pc, #48]	@ (800069c <HAL_UART_RxCpltCallback+0x70>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	1c59      	adds	r1, r3, #1
 800066e:	b2c8      	uxtb	r0, r1
 8000670:	490a      	ldr	r1, [pc, #40]	@ (800069c <HAL_UART_RxCpltCallback+0x70>)
 8000672:	7008      	strb	r0, [r1, #0]
 8000674:	461c      	mov	r4, r3
 8000676:	4610      	mov	r0, r2
 8000678:	f7ff ffc2 	bl	8000600 <convert_to_capital>
 800067c:	4603      	mov	r3, r0
 800067e:	461a      	mov	r2, r3
 8000680:	4b07      	ldr	r3, [pc, #28]	@ (80006a0 <HAL_UART_RxCpltCallback+0x74>)
 8000682:	551a      	strb	r2, [r3, r4]
		HAL_UART_Receive_IT(&huart2, &rec_data, 1);
 8000684:	2201      	movs	r2, #1
 8000686:	4904      	ldr	r1, [pc, #16]	@ (8000698 <HAL_UART_RxCpltCallback+0x6c>)
 8000688:	4806      	ldr	r0, [pc, #24]	@ (80006a4 <HAL_UART_RxCpltCallback+0x78>)
 800068a:	f000 fd66 	bl	800115a <HAL_UART_Receive_IT>
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	bd90      	pop	{r4, r7, pc}
 8000696:	bf00      	nop
 8000698:	20000074 	.word	0x20000074
 800069c:	200000dc 	.word	0x200000dc
 80006a0:	20000078 	.word	0x20000078
 80006a4:	2000002c 	.word	0x2000002c

080006a8 <HAL_MspInit>:
#include "stm32f4xx_hal.h"

GPIO_InitTypeDef gpio_uart;

void HAL_MspInit(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  // 1. Set the priority grouping for cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ac:	2003      	movs	r0, #3
 80006ae:	f000 f9e1 	bl	8000a74 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the processor exceptions
	SCB->SHCSR |= (0x7) << 16; // to enable the usage, memory and bus fault exception
 80006b2:	4b0d      	ldr	r3, [pc, #52]	@ (80006e8 <HAL_MspInit+0x40>)
 80006b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006b6:	4a0c      	ldr	r2, [pc, #48]	@ (80006e8 <HAL_MspInit+0x40>)
 80006b8:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80006bc:	6253      	str	r3, [r2, #36]	@ 0x24

	//3. Set the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	2100      	movs	r1, #0
 80006c2:	f06f 000b 	mvn.w	r0, #11
 80006c6:	f000 f9e0 	bl	8000a8a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2100      	movs	r1, #0
 80006ce:	f06f 000a 	mvn.w	r0, #10
 80006d2:	f000 f9da 	bl	8000a8a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	f06f 0009 	mvn.w	r0, #9
 80006de:	f000 f9d4 	bl	8000a8a <HAL_NVIC_SetPriority>
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  // 1. Enable the peripheral clock , the macros for hal layer starts with __HAL
	__HAL_RCC_USART2_CLK_ENABLE();
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	4b1c      	ldr	r3, [pc, #112]	@ (800076c <HAL_UART_MspInit+0x80>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fc:	4a1b      	ldr	r2, [pc, #108]	@ (800076c <HAL_UART_MspInit+0x80>)
 80006fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000702:	6413      	str	r3, [r2, #64]	@ 0x40
 8000704:	4b19      	ldr	r3, [pc, #100]	@ (800076c <HAL_UART_MspInit+0x80>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000708:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]

//2.Do the pin muxing configurations.
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000710:	2300      	movs	r3, #0
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	4b15      	ldr	r3, [pc, #84]	@ (800076c <HAL_UART_MspInit+0x80>)
 8000716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000718:	4a14      	ldr	r2, [pc, #80]	@ (800076c <HAL_UART_MspInit+0x80>)
 800071a:	f043 0301 	orr.w	r3, r3, #1
 800071e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000720:	4b12      	ldr	r3, [pc, #72]	@ (800076c <HAL_UART_MspInit+0x80>)
 8000722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000724:	f003 0301 	and.w	r3, r3, #1
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]

	gpio_uart.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 800072c:	4b10      	ldr	r3, [pc, #64]	@ (8000770 <HAL_UART_MspInit+0x84>)
 800072e:	220c      	movs	r2, #12
 8000730:	601a      	str	r2, [r3, #0]
	gpio_uart.Pull = GPIO_MODE_OUTPUT_PP;
 8000732:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <HAL_UART_MspInit+0x84>)
 8000734:	2201      	movs	r2, #1
 8000736:	609a      	str	r2, [r3, #8]
	gpio_uart.Speed = GPIO_SPEED_LOW;
 8000738:	4b0d      	ldr	r3, [pc, #52]	@ (8000770 <HAL_UART_MspInit+0x84>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
	gpio_uart.Alternate = GPIO_AF7_USART2;
 800073e:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <HAL_UART_MspInit+0x84>)
 8000740:	2207      	movs	r2, #7
 8000742:	611a      	str	r2, [r3, #16]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000744:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <HAL_UART_MspInit+0x84>)
 8000746:	2202      	movs	r2, #2
 8000748:	605a      	str	r2, [r3, #4]

	HAL_GPIO_Init(GPIOA,  &gpio_uart);
 800074a:	4909      	ldr	r1, [pc, #36]	@ (8000770 <HAL_UART_MspInit+0x84>)
 800074c:	4809      	ldr	r0, [pc, #36]	@ (8000774 <HAL_UART_MspInit+0x88>)
 800074e:	f000 fa71 	bl	8000c34 <HAL_GPIO_Init>

	//3.enable the irq and set the priority( nvic settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000752:	2026      	movs	r0, #38	@ 0x26
 8000754:	f000 f9b5 	bl	8000ac2 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8000758:	2200      	movs	r2, #0
 800075a:	210f      	movs	r1, #15
 800075c:	2026      	movs	r0, #38	@ 0x26
 800075e:	f000 f994 	bl	8000a8a <HAL_NVIC_SetPriority>
}
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	200000e0 	.word	0x200000e0
 8000774:	40020000 	.word	0x40020000

08000778 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800077c:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <SystemInit+0x20>)
 800077e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000782:	4a05      	ldr	r2, [pc, #20]	@ (8000798 <SystemInit+0x20>)
 8000784:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000788:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800079c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007a0:	f7ff ffea 	bl	8000778 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007a4:	480c      	ldr	r0, [pc, #48]	@ (80007d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007a6:	490d      	ldr	r1, [pc, #52]	@ (80007dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007a8:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007ac:	e002      	b.n	80007b4 <LoopCopyDataInit>

080007ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b2:	3304      	adds	r3, #4

080007b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b8:	d3f9      	bcc.n	80007ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ba:	4a0a      	ldr	r2, [pc, #40]	@ (80007e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007bc:	4c0a      	ldr	r4, [pc, #40]	@ (80007e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c0:	e001      	b.n	80007c6 <LoopFillZerobss>

080007c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c4:	3204      	adds	r2, #4

080007c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c8:	d3fb      	bcc.n	80007c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ca:	f001 fc57 	bl	800207c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007ce:	f7ff feb3 	bl	8000538 <main>
  bx  lr    
 80007d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80007d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007dc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80007e0:	08002120 	.word	0x08002120
  ldr r2, =_sbss
 80007e4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80007e8:	200000f8 	.word	0x200000f8

080007ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007ec:	e7fe      	b.n	80007ec <ADC_IRQHandler>
	...

080007f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <HAL_Init+0x40>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000830 <HAL_Init+0x40>)
 80007fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000800:	4b0b      	ldr	r3, [pc, #44]	@ (8000830 <HAL_Init+0x40>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a0a      	ldr	r2, [pc, #40]	@ (8000830 <HAL_Init+0x40>)
 8000806:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800080a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800080c:	4b08      	ldr	r3, [pc, #32]	@ (8000830 <HAL_Init+0x40>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a07      	ldr	r2, [pc, #28]	@ (8000830 <HAL_Init+0x40>)
 8000812:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000816:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000818:	2003      	movs	r0, #3
 800081a:	f000 f92b 	bl	8000a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800081e:	200f      	movs	r0, #15
 8000820:	f000 f808 	bl	8000834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000824:	f7ff ff40 	bl	80006a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000828:	2300      	movs	r3, #0
}
 800082a:	4618      	mov	r0, r3
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40023c00 	.word	0x40023c00

08000834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800083c:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <HAL_InitTick+0x54>)
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	4b12      	ldr	r3, [pc, #72]	@ (800088c <HAL_InitTick+0x58>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	4619      	mov	r1, r3
 8000846:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800084a:	fbb3 f3f1 	udiv	r3, r3, r1
 800084e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000852:	4618      	mov	r0, r3
 8000854:	f000 f943 	bl	8000ade <HAL_SYSTICK_Config>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800085e:	2301      	movs	r3, #1
 8000860:	e00e      	b.n	8000880 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2b0f      	cmp	r3, #15
 8000866:	d80a      	bhi.n	800087e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000868:	2200      	movs	r2, #0
 800086a:	6879      	ldr	r1, [r7, #4]
 800086c:	f04f 30ff 	mov.w	r0, #4294967295
 8000870:	f000 f90b 	bl	8000a8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000874:	4a06      	ldr	r2, [pc, #24]	@ (8000890 <HAL_InitTick+0x5c>)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800087a:	2300      	movs	r3, #0
 800087c:	e000      	b.n	8000880 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800087e:	2301      	movs	r3, #1
}
 8000880:	4618      	mov	r0, r3
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000004 	.word	0x20000004
 800088c:	2000000c 	.word	0x2000000c
 8000890:	20000008 	.word	0x20000008

08000894 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <HAL_IncTick+0x20>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	461a      	mov	r2, r3
 800089e:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <HAL_IncTick+0x24>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4413      	add	r3, r2
 80008a4:	4a04      	ldr	r2, [pc, #16]	@ (80008b8 <HAL_IncTick+0x24>)
 80008a6:	6013      	str	r3, [r2, #0]
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	2000000c 	.word	0x2000000c
 80008b8:	200000f4 	.word	0x200000f4

080008bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  return uwTick;
 80008c0:	4b03      	ldr	r3, [pc, #12]	@ (80008d0 <HAL_GetTick+0x14>)
 80008c2:	681b      	ldr	r3, [r3, #0]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	200000f4 	.word	0x200000f4

080008d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f003 0307 	and.w	r3, r3, #7
 80008e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <__NVIC_SetPriorityGrouping+0x44>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ea:	68ba      	ldr	r2, [r7, #8]
 80008ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008f0:	4013      	ands	r3, r2
 80008f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000900:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000906:	4a04      	ldr	r2, [pc, #16]	@ (8000918 <__NVIC_SetPriorityGrouping+0x44>)
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	60d3      	str	r3, [r2, #12]
}
 800090c:	bf00      	nop
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000920:	4b04      	ldr	r3, [pc, #16]	@ (8000934 <__NVIC_GetPriorityGrouping+0x18>)
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	0a1b      	lsrs	r3, r3, #8
 8000926:	f003 0307 	and.w	r3, r3, #7
}
 800092a:	4618      	mov	r0, r3
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000946:	2b00      	cmp	r3, #0
 8000948:	db0b      	blt.n	8000962 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	f003 021f 	and.w	r2, r3, #31
 8000950:	4907      	ldr	r1, [pc, #28]	@ (8000970 <__NVIC_EnableIRQ+0x38>)
 8000952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000956:	095b      	lsrs	r3, r3, #5
 8000958:	2001      	movs	r0, #1
 800095a:	fa00 f202 	lsl.w	r2, r0, r2
 800095e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000e100 	.word	0xe000e100

08000974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	6039      	str	r1, [r7, #0]
 800097e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000984:	2b00      	cmp	r3, #0
 8000986:	db0a      	blt.n	800099e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	b2da      	uxtb	r2, r3
 800098c:	490c      	ldr	r1, [pc, #48]	@ (80009c0 <__NVIC_SetPriority+0x4c>)
 800098e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000992:	0112      	lsls	r2, r2, #4
 8000994:	b2d2      	uxtb	r2, r2
 8000996:	440b      	add	r3, r1
 8000998:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800099c:	e00a      	b.n	80009b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4908      	ldr	r1, [pc, #32]	@ (80009c4 <__NVIC_SetPriority+0x50>)
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	f003 030f 	and.w	r3, r3, #15
 80009aa:	3b04      	subs	r3, #4
 80009ac:	0112      	lsls	r2, r2, #4
 80009ae:	b2d2      	uxtb	r2, r2
 80009b0:	440b      	add	r3, r1
 80009b2:	761a      	strb	r2, [r3, #24]
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	e000e100 	.word	0xe000e100
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b089      	sub	sp, #36	@ 0x24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	f1c3 0307 	rsb	r3, r3, #7
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	bf28      	it	cs
 80009e6:	2304      	movcs	r3, #4
 80009e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3304      	adds	r3, #4
 80009ee:	2b06      	cmp	r3, #6
 80009f0:	d902      	bls.n	80009f8 <NVIC_EncodePriority+0x30>
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	3b03      	subs	r3, #3
 80009f6:	e000      	b.n	80009fa <NVIC_EncodePriority+0x32>
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43da      	mvns	r2, r3
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a10:	f04f 31ff 	mov.w	r1, #4294967295
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1a:	43d9      	mvns	r1, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a20:	4313      	orrs	r3, r2
         );
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3724      	adds	r7, #36	@ 0x24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
	...

08000a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a40:	d301      	bcc.n	8000a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a42:	2301      	movs	r3, #1
 8000a44:	e00f      	b.n	8000a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a46:	4a0a      	ldr	r2, [pc, #40]	@ (8000a70 <SysTick_Config+0x40>)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a4e:	210f      	movs	r1, #15
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	f7ff ff8e 	bl	8000974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a58:	4b05      	ldr	r3, [pc, #20]	@ (8000a70 <SysTick_Config+0x40>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a5e:	4b04      	ldr	r3, [pc, #16]	@ (8000a70 <SysTick_Config+0x40>)
 8000a60:	2207      	movs	r2, #7
 8000a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	e000e010 	.word	0xe000e010

08000a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f7ff ff29 	bl	80008d4 <__NVIC_SetPriorityGrouping>
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b086      	sub	sp, #24
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	4603      	mov	r3, r0
 8000a92:	60b9      	str	r1, [r7, #8]
 8000a94:	607a      	str	r2, [r7, #4]
 8000a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a9c:	f7ff ff3e 	bl	800091c <__NVIC_GetPriorityGrouping>
 8000aa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	68b9      	ldr	r1, [r7, #8]
 8000aa6:	6978      	ldr	r0, [r7, #20]
 8000aa8:	f7ff ff8e 	bl	80009c8 <NVIC_EncodePriority>
 8000aac:	4602      	mov	r2, r0
 8000aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff ff5d 	bl	8000974 <__NVIC_SetPriority>
}
 8000aba:	bf00      	nop
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	4603      	mov	r3, r0
 8000aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff31 	bl	8000938 <__NVIC_EnableIRQ>
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff ffa2 	bl	8000a30 <SysTick_Config>
 8000aec:	4603      	mov	r3, r0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000afa:	f000 f802 	bl	8000b02 <HAL_SYSTICK_Callback>
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b1c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000b1e:	f7ff fecd 	bl	80008bc <HAL_GetTick>
 8000b22:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	d008      	beq.n	8000b42 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2280      	movs	r2, #128	@ 0x80
 8000b34:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e052      	b.n	8000be8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f022 0216 	bic.w	r2, r2, #22
 8000b50:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	695a      	ldr	r2, [r3, #20]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000b60:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d103      	bne.n	8000b72 <HAL_DMA_Abort+0x62>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d007      	beq.n	8000b82 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f022 0208 	bic.w	r2, r2, #8
 8000b80:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f022 0201 	bic.w	r2, r2, #1
 8000b90:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000b92:	e013      	b.n	8000bbc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000b94:	f7ff fe92 	bl	80008bc <HAL_GetTick>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	2b05      	cmp	r3, #5
 8000ba0:	d90c      	bls.n	8000bbc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2220      	movs	r2, #32
 8000ba6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2203      	movs	r2, #3
 8000bac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	e015      	b.n	8000be8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d1e4      	bne.n	8000b94 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000bce:	223f      	movs	r2, #63	@ 0x3f
 8000bd0:	409a      	lsls	r2, r3
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2201      	movs	r2, #1
 8000bda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2200      	movs	r2, #0
 8000be2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000be6:	2300      	movs	r3, #0
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d004      	beq.n	8000c0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2280      	movs	r2, #128	@ 0x80
 8000c08:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e00c      	b.n	8000c28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2205      	movs	r2, #5
 8000c12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f022 0201 	bic.w	r2, r2, #1
 8000c24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000c26:	2300      	movs	r3, #0
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b089      	sub	sp, #36	@ 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
 8000c4e:	e159      	b.n	8000f04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c50:	2201      	movs	r2, #1
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	697a      	ldr	r2, [r7, #20]
 8000c60:	4013      	ands	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	f040 8148 	bne.w	8000efe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f003 0303 	and.w	r3, r3, #3
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d005      	beq.n	8000c86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d130      	bne.n	8000ce8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	2203      	movs	r2, #3
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43db      	mvns	r3, r3
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	68da      	ldr	r2, [r3, #12]
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	091b      	lsrs	r3, r3, #4
 8000cd2:	f003 0201 	and.w	r2, r3, #1
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f003 0303 	and.w	r3, r3, #3
 8000cf0:	2b03      	cmp	r3, #3
 8000cf2:	d017      	beq.n	8000d24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	2203      	movs	r2, #3
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	689a      	ldr	r2, [r3, #8]
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f003 0303 	and.w	r3, r3, #3
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d123      	bne.n	8000d78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	08da      	lsrs	r2, r3, #3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3208      	adds	r2, #8
 8000d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	f003 0307 	and.w	r3, r3, #7
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	220f      	movs	r2, #15
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	4013      	ands	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	691a      	ldr	r2, [r3, #16]
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	08da      	lsrs	r2, r3, #3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	3208      	adds	r2, #8
 8000d72:	69b9      	ldr	r1, [r7, #24]
 8000d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	2203      	movs	r2, #3
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 0203 	and.w	r2, r3, #3
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	f000 80a2 	beq.w	8000efe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	4b57      	ldr	r3, [pc, #348]	@ (8000f1c <HAL_GPIO_Init+0x2e8>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc2:	4a56      	ldr	r2, [pc, #344]	@ (8000f1c <HAL_GPIO_Init+0x2e8>)
 8000dc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dca:	4b54      	ldr	r3, [pc, #336]	@ (8000f1c <HAL_GPIO_Init+0x2e8>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dd6:	4a52      	ldr	r2, [pc, #328]	@ (8000f20 <HAL_GPIO_Init+0x2ec>)
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	089b      	lsrs	r3, r3, #2
 8000ddc:	3302      	adds	r3, #2
 8000dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f003 0303 	and.w	r3, r3, #3
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	220f      	movs	r2, #15
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4013      	ands	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a49      	ldr	r2, [pc, #292]	@ (8000f24 <HAL_GPIO_Init+0x2f0>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d019      	beq.n	8000e36 <HAL_GPIO_Init+0x202>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a48      	ldr	r2, [pc, #288]	@ (8000f28 <HAL_GPIO_Init+0x2f4>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d013      	beq.n	8000e32 <HAL_GPIO_Init+0x1fe>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a47      	ldr	r2, [pc, #284]	@ (8000f2c <HAL_GPIO_Init+0x2f8>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d00d      	beq.n	8000e2e <HAL_GPIO_Init+0x1fa>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a46      	ldr	r2, [pc, #280]	@ (8000f30 <HAL_GPIO_Init+0x2fc>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d007      	beq.n	8000e2a <HAL_GPIO_Init+0x1f6>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a45      	ldr	r2, [pc, #276]	@ (8000f34 <HAL_GPIO_Init+0x300>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d101      	bne.n	8000e26 <HAL_GPIO_Init+0x1f2>
 8000e22:	2304      	movs	r3, #4
 8000e24:	e008      	b.n	8000e38 <HAL_GPIO_Init+0x204>
 8000e26:	2307      	movs	r3, #7
 8000e28:	e006      	b.n	8000e38 <HAL_GPIO_Init+0x204>
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e004      	b.n	8000e38 <HAL_GPIO_Init+0x204>
 8000e2e:	2302      	movs	r3, #2
 8000e30:	e002      	b.n	8000e38 <HAL_GPIO_Init+0x204>
 8000e32:	2301      	movs	r3, #1
 8000e34:	e000      	b.n	8000e38 <HAL_GPIO_Init+0x204>
 8000e36:	2300      	movs	r3, #0
 8000e38:	69fa      	ldr	r2, [r7, #28]
 8000e3a:	f002 0203 	and.w	r2, r2, #3
 8000e3e:	0092      	lsls	r2, r2, #2
 8000e40:	4093      	lsls	r3, r2
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e48:	4935      	ldr	r1, [pc, #212]	@ (8000f20 <HAL_GPIO_Init+0x2ec>)
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	089b      	lsrs	r3, r3, #2
 8000e4e:	3302      	adds	r3, #2
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e56:	4b38      	ldr	r3, [pc, #224]	@ (8000f38 <HAL_GPIO_Init+0x304>)
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e7a:	4a2f      	ldr	r2, [pc, #188]	@ (8000f38 <HAL_GPIO_Init+0x304>)
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e80:	4b2d      	ldr	r3, [pc, #180]	@ (8000f38 <HAL_GPIO_Init+0x304>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ea4:	4a24      	ldr	r2, [pc, #144]	@ (8000f38 <HAL_GPIO_Init+0x304>)
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eaa:	4b23      	ldr	r3, [pc, #140]	@ (8000f38 <HAL_GPIO_Init+0x304>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ece:	4a1a      	ldr	r2, [pc, #104]	@ (8000f38 <HAL_GPIO_Init+0x304>)
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ed4:	4b18      	ldr	r3, [pc, #96]	@ (8000f38 <HAL_GPIO_Init+0x304>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ef8:	4a0f      	ldr	r2, [pc, #60]	@ (8000f38 <HAL_GPIO_Init+0x304>)
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3301      	adds	r3, #1
 8000f02:	61fb      	str	r3, [r7, #28]
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	2b0f      	cmp	r3, #15
 8000f08:	f67f aea2 	bls.w	8000c50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	bf00      	nop
 8000f10:	3724      	adds	r7, #36	@ 0x24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40013800 	.word	0x40013800
 8000f24:	40020000 	.word	0x40020000
 8000f28:	40020400 	.word	0x40020400
 8000f2c:	40020800 	.word	0x40020800
 8000f30:	40020c00 	.word	0x40020c00
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40013c00 	.word	0x40013c00

08000f3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000f40:	4b03      	ldr	r3, [pc, #12]	@ (8000f50 <HAL_RCC_GetHCLKFreq+0x14>)
 8000f42:	681b      	ldr	r3, [r3, #0]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000004 	.word	0x20000004

08000f54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000f58:	f7ff fff0 	bl	8000f3c <HAL_RCC_GetHCLKFreq>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	0a9b      	lsrs	r3, r3, #10
 8000f64:	f003 0307 	and.w	r3, r3, #7
 8000f68:	4903      	ldr	r1, [pc, #12]	@ (8000f78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000f6a:	5ccb      	ldrb	r3, [r1, r3]
 8000f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40023800 	.word	0x40023800
 8000f78:	08002108 	.word	0x08002108

08000f7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000f80:	f7ff ffdc 	bl	8000f3c <HAL_RCC_GetHCLKFreq>
 8000f84:	4602      	mov	r2, r0
 8000f86:	4b05      	ldr	r3, [pc, #20]	@ (8000f9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	0b5b      	lsrs	r3, r3, #13
 8000f8c:	f003 0307 	and.w	r3, r3, #7
 8000f90:	4903      	ldr	r1, [pc, #12]	@ (8000fa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f92:	5ccb      	ldrb	r3, [r1, r3]
 8000f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	08002108 	.word	0x08002108

08000fa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d101      	bne.n	8000fb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e042      	b.n	800103c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d106      	bne.n	8000fd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff fb8e 	bl	80006ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2224      	movs	r2, #36	@ 0x24
 8000fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	68da      	ldr	r2, [r3, #12]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000fe6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f000 fdd3 	bl	8001b94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	691a      	ldr	r2, [r3, #16]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8000ffc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	695a      	ldr	r2, [r3, #20]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800100c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	68da      	ldr	r2, [r3, #12]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800101c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2220      	movs	r2, #32
 8001028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2220      	movs	r2, #32
 8001030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	@ 0x28
 8001048:	af02      	add	r7, sp, #8
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	4613      	mov	r3, r2
 8001052:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b20      	cmp	r3, #32
 8001062:	d175      	bne.n	8001150 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d002      	beq.n	8001070 <HAL_UART_Transmit+0x2c>
 800106a:	88fb      	ldrh	r3, [r7, #6]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d101      	bne.n	8001074 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e06e      	b.n	8001152 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2200      	movs	r2, #0
 8001078:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2221      	movs	r2, #33	@ 0x21
 800107e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001082:	f7ff fc1b 	bl	80008bc <HAL_GetTick>
 8001086:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	88fa      	ldrh	r2, [r7, #6]
 800108c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	88fa      	ldrh	r2, [r7, #6]
 8001092:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800109c:	d108      	bne.n	80010b0 <HAL_UART_Transmit+0x6c>
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d104      	bne.n	80010b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	61bb      	str	r3, [r7, #24]
 80010ae:	e003      	b.n	80010b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80010b8:	e02e      	b.n	8001118 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	2200      	movs	r2, #0
 80010c2:	2180      	movs	r1, #128	@ 0x80
 80010c4:	68f8      	ldr	r0, [r7, #12]
 80010c6:	f000 fb37 	bl	8001738 <UART_WaitOnFlagUntilTimeout>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d005      	beq.n	80010dc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2220      	movs	r2, #32
 80010d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80010d8:	2303      	movs	r3, #3
 80010da:	e03a      	b.n	8001152 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d10b      	bne.n	80010fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	461a      	mov	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80010f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	3302      	adds	r3, #2
 80010f6:	61bb      	str	r3, [r7, #24]
 80010f8:	e007      	b.n	800110a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	781a      	ldrb	r2, [r3, #0]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	3301      	adds	r3, #1
 8001108:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800110e:	b29b      	uxth	r3, r3
 8001110:	3b01      	subs	r3, #1
 8001112:	b29a      	uxth	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800111c:	b29b      	uxth	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1cb      	bne.n	80010ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	2200      	movs	r2, #0
 800112a:	2140      	movs	r1, #64	@ 0x40
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f000 fb03 	bl	8001738 <UART_WaitOnFlagUntilTimeout>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d005      	beq.n	8001144 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2220      	movs	r2, #32
 800113c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001140:	2303      	movs	r3, #3
 8001142:	e006      	b.n	8001152 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2220      	movs	r2, #32
 8001148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800114c:	2300      	movs	r3, #0
 800114e:	e000      	b.n	8001152 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001150:	2302      	movs	r3, #2
  }
}
 8001152:	4618      	mov	r0, r3
 8001154:	3720      	adds	r7, #32
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b084      	sub	sp, #16
 800115e:	af00      	add	r7, sp, #0
 8001160:	60f8      	str	r0, [r7, #12]
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	4613      	mov	r3, r2
 8001166:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b20      	cmp	r3, #32
 8001172:	d112      	bne.n	800119a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d002      	beq.n	8001180 <HAL_UART_Receive_IT+0x26>
 800117a:	88fb      	ldrh	r3, [r7, #6]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d101      	bne.n	8001184 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e00b      	b.n	800119c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2200      	movs	r2, #0
 8001188:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800118a:	88fb      	ldrh	r3, [r7, #6]
 800118c:	461a      	mov	r2, r3
 800118e:	68b9      	ldr	r1, [r7, #8]
 8001190:	68f8      	ldr	r0, [r7, #12]
 8001192:	f000 fb2a 	bl	80017ea <UART_Start_Receive_IT>
 8001196:	4603      	mov	r3, r0
 8001198:	e000      	b.n	800119c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800119a:	2302      	movs	r3, #2
  }
}
 800119c:	4618      	mov	r0, r3
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b0ba      	sub	sp, #232	@ 0xe8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80011d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80011da:	f003 030f 	and.w	r3, r3, #15
 80011de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80011e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d10f      	bne.n	800120a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80011ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80011ee:	f003 0320 	and.w	r3, r3, #32
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d009      	beq.n	800120a <HAL_UART_IRQHandler+0x66>
 80011f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80011fa:	f003 0320 	and.w	r3, r3, #32
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 fc07 	bl	8001a16 <UART_Receive_IT>
      return;
 8001208:	e273      	b.n	80016f2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800120a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800120e:	2b00      	cmp	r3, #0
 8001210:	f000 80de 	beq.w	80013d0 <HAL_UART_IRQHandler+0x22c>
 8001214:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	2b00      	cmp	r3, #0
 800121e:	d106      	bne.n	800122e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001224:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001228:	2b00      	cmp	r3, #0
 800122a:	f000 80d1 	beq.w	80013d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800122e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00b      	beq.n	8001252 <HAL_UART_IRQHandler+0xae>
 800123a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800123e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001242:	2b00      	cmp	r3, #0
 8001244:	d005      	beq.n	8001252 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124a:	f043 0201 	orr.w	r2, r3, #1
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00b      	beq.n	8001276 <HAL_UART_IRQHandler+0xd2>
 800125e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d005      	beq.n	8001276 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126e:	f043 0202 	orr.w	r2, r3, #2
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00b      	beq.n	800129a <HAL_UART_IRQHandler+0xf6>
 8001282:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	2b00      	cmp	r3, #0
 800128c:	d005      	beq.n	800129a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001292:	f043 0204 	orr.w	r2, r3, #4
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800129a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d011      	beq.n	80012ca <HAL_UART_IRQHandler+0x126>
 80012a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80012aa:	f003 0320 	and.w	r3, r3, #32
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d105      	bne.n	80012be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80012b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d005      	beq.n	80012ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c2:	f043 0208 	orr.w	r2, r3, #8
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f000 820a 	beq.w	80016e8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80012d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80012d8:	f003 0320 	and.w	r3, r3, #32
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d008      	beq.n	80012f2 <HAL_UART_IRQHandler+0x14e>
 80012e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80012e4:	f003 0320 	and.w	r3, r3, #32
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d002      	beq.n	80012f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 fb92 	bl	8001a16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012fc:	2b40      	cmp	r3, #64	@ 0x40
 80012fe:	bf0c      	ite	eq
 8001300:	2301      	moveq	r3, #1
 8001302:	2300      	movne	r3, #0
 8001304:	b2db      	uxtb	r3, r3
 8001306:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130e:	f003 0308 	and.w	r3, r3, #8
 8001312:	2b00      	cmp	r3, #0
 8001314:	d103      	bne.n	800131e <HAL_UART_IRQHandler+0x17a>
 8001316:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800131a:	2b00      	cmp	r3, #0
 800131c:	d04f      	beq.n	80013be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f000 fa9d 	bl	800185e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800132e:	2b40      	cmp	r3, #64	@ 0x40
 8001330:	d141      	bne.n	80013b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	3314      	adds	r3, #20
 8001338:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800133c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001340:	e853 3f00 	ldrex	r3, [r3]
 8001344:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001348:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800134c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001350:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	3314      	adds	r3, #20
 800135a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800135e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001362:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001366:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800136a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800136e:	e841 2300 	strex	r3, r2, [r1]
 8001372:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001376:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1d9      	bne.n	8001332 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001382:	2b00      	cmp	r3, #0
 8001384:	d013      	beq.n	80013ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800138a:	4a8a      	ldr	r2, [pc, #552]	@ (80015b4 <HAL_UART_IRQHandler+0x410>)
 800138c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fc2c 	bl	8000bf0 <HAL_DMA_Abort_IT>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d016      	beq.n	80013cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80013a8:	4610      	mov	r0, r2
 80013aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80013ac:	e00e      	b.n	80013cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 f9ac 	bl	800170c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80013b4:	e00a      	b.n	80013cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f000 f9a8 	bl	800170c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80013bc:	e006      	b.n	80013cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 f9a4 	bl	800170c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80013ca:	e18d      	b.n	80016e8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80013cc:	bf00      	nop
    return;
 80013ce:	e18b      	b.n	80016e8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	f040 8167 	bne.w	80016a8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80013da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80013de:	f003 0310 	and.w	r3, r3, #16
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 8160 	beq.w	80016a8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80013e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80013ec:	f003 0310 	and.w	r3, r3, #16
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f000 8159 	beq.w	80016a8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001416:	2b40      	cmp	r3, #64	@ 0x40
 8001418:	f040 80ce 	bne.w	80015b8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001428:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800142c:	2b00      	cmp	r3, #0
 800142e:	f000 80a9 	beq.w	8001584 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001436:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800143a:	429a      	cmp	r2, r3
 800143c:	f080 80a2 	bcs.w	8001584 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001446:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001452:	f000 8088 	beq.w	8001566 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	330c      	adds	r3, #12
 800145c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001460:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001464:	e853 3f00 	ldrex	r3, [r3]
 8001468:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800146c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001470:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001474:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	330c      	adds	r3, #12
 800147e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001482:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001486:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800148a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800148e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001492:	e841 2300 	strex	r3, r2, [r1]
 8001496:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800149a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1d9      	bne.n	8001456 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	3314      	adds	r3, #20
 80014a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80014aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80014ac:	e853 3f00 	ldrex	r3, [r3]
 80014b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80014b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014b4:	f023 0301 	bic.w	r3, r3, #1
 80014b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	3314      	adds	r3, #20
 80014c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80014c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80014ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80014cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80014ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80014d2:	e841 2300 	strex	r3, r2, [r1]
 80014d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80014d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1e1      	bne.n	80014a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	3314      	adds	r3, #20
 80014e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80014e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80014e8:	e853 3f00 	ldrex	r3, [r3]
 80014ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80014ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80014f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	3314      	adds	r3, #20
 80014fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001502:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001504:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001506:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001508:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800150a:	e841 2300 	strex	r3, r2, [r1]
 800150e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001510:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1e3      	bne.n	80014de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2220      	movs	r2, #32
 800151a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	330c      	adds	r3, #12
 800152a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800152c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800152e:	e853 3f00 	ldrex	r3, [r3]
 8001532:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8001534:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001536:	f023 0310 	bic.w	r3, r3, #16
 800153a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	330c      	adds	r3, #12
 8001544:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001548:	65ba      	str	r2, [r7, #88]	@ 0x58
 800154a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800154c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800154e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001550:	e841 2300 	strex	r3, r2, [r1]
 8001554:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8001556:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1e3      	bne.n	8001524 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fad5 	bl	8000b10 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2202      	movs	r2, #2
 800156a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001574:	b29b      	uxth	r3, r3
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	b29b      	uxth	r3, r3
 800157a:	4619      	mov	r1, r3
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 f8cf 	bl	8001720 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8001582:	e0b3      	b.n	80016ec <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001588:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800158c:	429a      	cmp	r2, r3
 800158e:	f040 80ad 	bne.w	80016ec <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001596:	69db      	ldr	r3, [r3, #28]
 8001598:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800159c:	f040 80a6 	bne.w	80016ec <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2202      	movs	r2, #2
 80015a4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80015aa:	4619      	mov	r1, r3
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 f8b7 	bl	8001720 <HAL_UARTEx_RxEventCallback>
      return;
 80015b2:	e09b      	b.n	80016ec <HAL_UART_IRQHandler+0x548>
 80015b4:	08001925 	.word	0x08001925
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 808e 	beq.w	80016f0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80015d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 8089 	beq.w	80016f0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	330c      	adds	r3, #12
 80015e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015e8:	e853 3f00 	ldrex	r3, [r3]
 80015ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80015ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80015f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	330c      	adds	r3, #12
 80015fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8001602:	647a      	str	r2, [r7, #68]	@ 0x44
 8001604:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001606:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001608:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800160a:	e841 2300 	strex	r3, r2, [r1]
 800160e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001610:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1e3      	bne.n	80015de <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	3314      	adds	r3, #20
 800161c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800161e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001620:	e853 3f00 	ldrex	r3, [r3]
 8001624:	623b      	str	r3, [r7, #32]
   return(result);
 8001626:	6a3b      	ldr	r3, [r7, #32]
 8001628:	f023 0301 	bic.w	r3, r3, #1
 800162c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	3314      	adds	r3, #20
 8001636:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800163a:	633a      	str	r2, [r7, #48]	@ 0x30
 800163c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800163e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001640:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001642:	e841 2300 	strex	r3, r2, [r1]
 8001646:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1e3      	bne.n	8001616 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2220      	movs	r2, #32
 8001652:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	330c      	adds	r3, #12
 8001662:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	e853 3f00 	ldrex	r3, [r3]
 800166a:	60fb      	str	r3, [r7, #12]
   return(result);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f023 0310 	bic.w	r3, r3, #16
 8001672:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	330c      	adds	r3, #12
 800167c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8001680:	61fa      	str	r2, [r7, #28]
 8001682:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001684:	69b9      	ldr	r1, [r7, #24]
 8001686:	69fa      	ldr	r2, [r7, #28]
 8001688:	e841 2300 	strex	r3, r2, [r1]
 800168c:	617b      	str	r3, [r7, #20]
   return(result);
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1e3      	bne.n	800165c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2202      	movs	r2, #2
 8001698:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800169a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800169e:	4619      	mov	r1, r3
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 f83d 	bl	8001720 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80016a6:	e023      	b.n	80016f0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80016a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80016ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d009      	beq.n	80016c8 <HAL_UART_IRQHandler+0x524>
 80016b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80016b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 f940 	bl	8001946 <UART_Transmit_IT>
    return;
 80016c6:	e014      	b.n	80016f2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80016c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80016cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d00e      	beq.n	80016f2 <HAL_UART_IRQHandler+0x54e>
 80016d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80016d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d008      	beq.n	80016f2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 f980 	bl	80019e6 <UART_EndTransmit_IT>
    return;
 80016e6:	e004      	b.n	80016f2 <HAL_UART_IRQHandler+0x54e>
    return;
 80016e8:	bf00      	nop
 80016ea:	e002      	b.n	80016f2 <HAL_UART_IRQHandler+0x54e>
      return;
 80016ec:	bf00      	nop
 80016ee:	e000      	b.n	80016f2 <HAL_UART_IRQHandler+0x54e>
      return;
 80016f0:	bf00      	nop
  }
}
 80016f2:	37e8      	adds	r7, #232	@ 0xe8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	4613      	mov	r3, r2
 8001746:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001748:	e03b      	b.n	80017c2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001750:	d037      	beq.n	80017c2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001752:	f7ff f8b3 	bl	80008bc <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	6a3a      	ldr	r2, [r7, #32]
 800175e:	429a      	cmp	r2, r3
 8001760:	d302      	bcc.n	8001768 <UART_WaitOnFlagUntilTimeout+0x30>
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d101      	bne.n	800176c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e03a      	b.n	80017e2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	f003 0304 	and.w	r3, r3, #4
 8001776:	2b00      	cmp	r3, #0
 8001778:	d023      	beq.n	80017c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	2b80      	cmp	r3, #128	@ 0x80
 800177e:	d020      	beq.n	80017c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	2b40      	cmp	r3, #64	@ 0x40
 8001784:	d01d      	beq.n	80017c2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	2b08      	cmp	r3, #8
 8001792:	d116      	bne.n	80017c2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f000 f857 	bl	800185e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2208      	movs	r2, #8
 80017b4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e00f      	b.n	80017e2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	4013      	ands	r3, r2
 80017cc:	68ba      	ldr	r2, [r7, #8]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	bf0c      	ite	eq
 80017d2:	2301      	moveq	r3, #1
 80017d4:	2300      	movne	r3, #0
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	461a      	mov	r2, r3
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d0b4      	beq.n	800174a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b085      	sub	sp, #20
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	4613      	mov	r3, r2
 80017f6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	88fa      	ldrh	r2, [r7, #6]
 8001802:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	88fa      	ldrh	r2, [r7, #6]
 8001808:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2200      	movs	r2, #0
 800180e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2222      	movs	r2, #34	@ 0x22
 8001814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d007      	beq.n	8001830 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68da      	ldr	r2, [r3, #12]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800182e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	695a      	ldr	r2, [r3, #20]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0201 	orr.w	r2, r2, #1
 800183e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f042 0220 	orr.w	r2, r2, #32
 800184e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800185e:	b480      	push	{r7}
 8001860:	b095      	sub	sp, #84	@ 0x54
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	330c      	adds	r3, #12
 800186c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800186e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001870:	e853 3f00 	ldrex	r3, [r3]
 8001874:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001878:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800187c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	330c      	adds	r3, #12
 8001884:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001886:	643a      	str	r2, [r7, #64]	@ 0x40
 8001888:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800188a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800188c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800188e:	e841 2300 	strex	r3, r2, [r1]
 8001892:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1e5      	bne.n	8001866 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	3314      	adds	r3, #20
 80018a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018a2:	6a3b      	ldr	r3, [r7, #32]
 80018a4:	e853 3f00 	ldrex	r3, [r3]
 80018a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	f023 0301 	bic.w	r3, r3, #1
 80018b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	3314      	adds	r3, #20
 80018b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80018ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80018c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018c2:	e841 2300 	strex	r3, r2, [r1]
 80018c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80018c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1e5      	bne.n	800189a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d119      	bne.n	800190a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	330c      	adds	r3, #12
 80018dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	e853 3f00 	ldrex	r3, [r3]
 80018e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	f023 0310 	bic.w	r3, r3, #16
 80018ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	330c      	adds	r3, #12
 80018f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80018f6:	61ba      	str	r2, [r7, #24]
 80018f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018fa:	6979      	ldr	r1, [r7, #20]
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	e841 2300 	strex	r3, r2, [r1]
 8001902:	613b      	str	r3, [r7, #16]
   return(result);
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1e5      	bne.n	80018d6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2220      	movs	r2, #32
 800190e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001918:	bf00      	nop
 800191a:	3754      	adds	r7, #84	@ 0x54
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001930:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2200      	movs	r2, #0
 8001936:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f7ff fee7 	bl	800170c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001946:	b480      	push	{r7}
 8001948:	b085      	sub	sp, #20
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b21      	cmp	r3, #33	@ 0x21
 8001958:	d13e      	bne.n	80019d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001962:	d114      	bne.n	800198e <UART_Transmit_IT+0x48>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d110      	bne.n	800198e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001980:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	1c9a      	adds	r2, r3, #2
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	621a      	str	r2, [r3, #32]
 800198c:	e008      	b.n	80019a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	1c59      	adds	r1, r3, #1
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6211      	str	r1, [r2, #32]
 8001998:	781a      	ldrb	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	3b01      	subs	r3, #1
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	4619      	mov	r1, r3
 80019ae:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d10f      	bne.n	80019d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68da      	ldr	r2, [r3, #12]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	e000      	b.n	80019da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80019d8:	2302      	movs	r3, #2
  }
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68da      	ldr	r2, [r3, #12]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2220      	movs	r2, #32
 8001a02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff fe76 	bl	80016f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b08c      	sub	sp, #48	@ 0x30
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b22      	cmp	r3, #34	@ 0x22
 8001a30:	f040 80aa 	bne.w	8001b88 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a3c:	d115      	bne.n	8001a6a <UART_Receive_IT+0x54>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d111      	bne.n	8001a6a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a62:	1c9a      	adds	r2, r3, #2
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a68:	e024      	b.n	8001ab4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a78:	d007      	beq.n	8001a8a <UART_Receive_IT+0x74>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10a      	bne.n	8001a98 <UART_Receive_IT+0x82>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d106      	bne.n	8001a98 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a94:	701a      	strb	r2, [r3, #0]
 8001a96:	e008      	b.n	8001aaa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aa8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	3b01      	subs	r3, #1
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d15d      	bne.n	8001b84 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68da      	ldr	r2, [r3, #12]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0220 	bic.w	r2, r2, #32
 8001ad6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ae6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	695a      	ldr	r2, [r3, #20]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0201 	bic.w	r2, r2, #1
 8001af6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2220      	movs	r2, #32
 8001afc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d135      	bne.n	8001b7a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	330c      	adds	r3, #12
 8001b1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	e853 3f00 	ldrex	r3, [r3]
 8001b22:	613b      	str	r3, [r7, #16]
   return(result);
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	f023 0310 	bic.w	r3, r3, #16
 8001b2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	330c      	adds	r3, #12
 8001b32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b34:	623a      	str	r2, [r7, #32]
 8001b36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b38:	69f9      	ldr	r1, [r7, #28]
 8001b3a:	6a3a      	ldr	r2, [r7, #32]
 8001b3c:	e841 2300 	strex	r3, r2, [r1]
 8001b40:	61bb      	str	r3, [r7, #24]
   return(result);
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1e5      	bne.n	8001b14 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0310 	and.w	r3, r3, #16
 8001b52:	2b10      	cmp	r3, #16
 8001b54:	d10a      	bne.n	8001b6c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001b70:	4619      	mov	r1, r3
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff fdd4 	bl	8001720 <HAL_UARTEx_RxEventCallback>
 8001b78:	e002      	b.n	8001b80 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7fe fd56 	bl	800062c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	e002      	b.n	8001b8a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	e000      	b.n	8001b8a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8001b88:	2302      	movs	r3, #2
  }
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3730      	adds	r7, #48	@ 0x30
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b98:	b0c0      	sub	sp, #256	@ 0x100
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bb0:	68d9      	ldr	r1, [r3, #12]
 8001bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	ea40 0301 	orr.w	r3, r0, r1
 8001bbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001bec:	f021 010c 	bic.w	r1, r1, #12
 8001bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001bfa:	430b      	orrs	r3, r1
 8001bfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c0e:	6999      	ldr	r1, [r3, #24]
 8001c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	ea40 0301 	orr.w	r3, r0, r1
 8001c1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	4b8f      	ldr	r3, [pc, #572]	@ (8001e60 <UART_SetConfig+0x2cc>)
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d005      	beq.n	8001c34 <UART_SetConfig+0xa0>
 8001c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	4b8d      	ldr	r3, [pc, #564]	@ (8001e64 <UART_SetConfig+0x2d0>)
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d104      	bne.n	8001c3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c34:	f7ff f9a2 	bl	8000f7c <HAL_RCC_GetPCLK2Freq>
 8001c38:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001c3c:	e003      	b.n	8001c46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001c3e:	f7ff f989 	bl	8000f54 <HAL_RCC_GetPCLK1Freq>
 8001c42:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c50:	f040 810c 	bne.w	8001e6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001c5e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001c62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001c66:	4622      	mov	r2, r4
 8001c68:	462b      	mov	r3, r5
 8001c6a:	1891      	adds	r1, r2, r2
 8001c6c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001c6e:	415b      	adcs	r3, r3
 8001c70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001c76:	4621      	mov	r1, r4
 8001c78:	eb12 0801 	adds.w	r8, r2, r1
 8001c7c:	4629      	mov	r1, r5
 8001c7e:	eb43 0901 	adc.w	r9, r3, r1
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c96:	4690      	mov	r8, r2
 8001c98:	4699      	mov	r9, r3
 8001c9a:	4623      	mov	r3, r4
 8001c9c:	eb18 0303 	adds.w	r3, r8, r3
 8001ca0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001ca4:	462b      	mov	r3, r5
 8001ca6:	eb49 0303 	adc.w	r3, r9, r3
 8001caa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001cba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001cbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	18db      	adds	r3, r3, r3
 8001cc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8001cc8:	4613      	mov	r3, r2
 8001cca:	eb42 0303 	adc.w	r3, r2, r3
 8001cce:	657b      	str	r3, [r7, #84]	@ 0x54
 8001cd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001cd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001cd8:	f7fe fa86 	bl	80001e8 <__aeabi_uldivmod>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4b61      	ldr	r3, [pc, #388]	@ (8001e68 <UART_SetConfig+0x2d4>)
 8001ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8001ce6:	095b      	lsrs	r3, r3, #5
 8001ce8:	011c      	lsls	r4, r3, #4
 8001cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001cf4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001cf8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001cfc:	4642      	mov	r2, r8
 8001cfe:	464b      	mov	r3, r9
 8001d00:	1891      	adds	r1, r2, r2
 8001d02:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001d04:	415b      	adcs	r3, r3
 8001d06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001d0c:	4641      	mov	r1, r8
 8001d0e:	eb12 0a01 	adds.w	sl, r2, r1
 8001d12:	4649      	mov	r1, r9
 8001d14:	eb43 0b01 	adc.w	fp, r3, r1
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	f04f 0300 	mov.w	r3, #0
 8001d20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d2c:	4692      	mov	sl, r2
 8001d2e:	469b      	mov	fp, r3
 8001d30:	4643      	mov	r3, r8
 8001d32:	eb1a 0303 	adds.w	r3, sl, r3
 8001d36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001d3a:	464b      	mov	r3, r9
 8001d3c:	eb4b 0303 	adc.w	r3, fp, r3
 8001d40:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001d50:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001d54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	18db      	adds	r3, r3, r3
 8001d5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8001d5e:	4613      	mov	r3, r2
 8001d60:	eb42 0303 	adc.w	r3, r2, r3
 8001d64:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001d6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001d6e:	f7fe fa3b 	bl	80001e8 <__aeabi_uldivmod>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	4611      	mov	r1, r2
 8001d78:	4b3b      	ldr	r3, [pc, #236]	@ (8001e68 <UART_SetConfig+0x2d4>)
 8001d7a:	fba3 2301 	umull	r2, r3, r3, r1
 8001d7e:	095b      	lsrs	r3, r3, #5
 8001d80:	2264      	movs	r2, #100	@ 0x64
 8001d82:	fb02 f303 	mul.w	r3, r2, r3
 8001d86:	1acb      	subs	r3, r1, r3
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001d8e:	4b36      	ldr	r3, [pc, #216]	@ (8001e68 <UART_SetConfig+0x2d4>)
 8001d90:	fba3 2302 	umull	r2, r3, r3, r2
 8001d94:	095b      	lsrs	r3, r3, #5
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001d9c:	441c      	add	r4, r3
 8001d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001da2:	2200      	movs	r2, #0
 8001da4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001da8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001dac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001db0:	4642      	mov	r2, r8
 8001db2:	464b      	mov	r3, r9
 8001db4:	1891      	adds	r1, r2, r2
 8001db6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001db8:	415b      	adcs	r3, r3
 8001dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001dbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001dc0:	4641      	mov	r1, r8
 8001dc2:	1851      	adds	r1, r2, r1
 8001dc4:	6339      	str	r1, [r7, #48]	@ 0x30
 8001dc6:	4649      	mov	r1, r9
 8001dc8:	414b      	adcs	r3, r1
 8001dca:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	f04f 0300 	mov.w	r3, #0
 8001dd4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001dd8:	4659      	mov	r1, fp
 8001dda:	00cb      	lsls	r3, r1, #3
 8001ddc:	4651      	mov	r1, sl
 8001dde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001de2:	4651      	mov	r1, sl
 8001de4:	00ca      	lsls	r2, r1, #3
 8001de6:	4610      	mov	r0, r2
 8001de8:	4619      	mov	r1, r3
 8001dea:	4603      	mov	r3, r0
 8001dec:	4642      	mov	r2, r8
 8001dee:	189b      	adds	r3, r3, r2
 8001df0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001df4:	464b      	mov	r3, r9
 8001df6:	460a      	mov	r2, r1
 8001df8:	eb42 0303 	adc.w	r3, r2, r3
 8001dfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001e0c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001e10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001e14:	460b      	mov	r3, r1
 8001e16:	18db      	adds	r3, r3, r3
 8001e18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	eb42 0303 	adc.w	r3, r2, r3
 8001e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001e2a:	f7fe f9dd 	bl	80001e8 <__aeabi_uldivmod>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4b0d      	ldr	r3, [pc, #52]	@ (8001e68 <UART_SetConfig+0x2d4>)
 8001e34:	fba3 1302 	umull	r1, r3, r3, r2
 8001e38:	095b      	lsrs	r3, r3, #5
 8001e3a:	2164      	movs	r1, #100	@ 0x64
 8001e3c:	fb01 f303 	mul.w	r3, r1, r3
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	3332      	adds	r3, #50	@ 0x32
 8001e46:	4a08      	ldr	r2, [pc, #32]	@ (8001e68 <UART_SetConfig+0x2d4>)
 8001e48:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4c:	095b      	lsrs	r3, r3, #5
 8001e4e:	f003 0207 	and.w	r2, r3, #7
 8001e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4422      	add	r2, r4
 8001e5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001e5c:	e106      	b.n	800206c <UART_SetConfig+0x4d8>
 8001e5e:	bf00      	nop
 8001e60:	40011000 	.word	0x40011000
 8001e64:	40011400 	.word	0x40011400
 8001e68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e70:	2200      	movs	r2, #0
 8001e72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001e76:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001e7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001e7e:	4642      	mov	r2, r8
 8001e80:	464b      	mov	r3, r9
 8001e82:	1891      	adds	r1, r2, r2
 8001e84:	6239      	str	r1, [r7, #32]
 8001e86:	415b      	adcs	r3, r3
 8001e88:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e8e:	4641      	mov	r1, r8
 8001e90:	1854      	adds	r4, r2, r1
 8001e92:	4649      	mov	r1, r9
 8001e94:	eb43 0501 	adc.w	r5, r3, r1
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	f04f 0300 	mov.w	r3, #0
 8001ea0:	00eb      	lsls	r3, r5, #3
 8001ea2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ea6:	00e2      	lsls	r2, r4, #3
 8001ea8:	4614      	mov	r4, r2
 8001eaa:	461d      	mov	r5, r3
 8001eac:	4643      	mov	r3, r8
 8001eae:	18e3      	adds	r3, r4, r3
 8001eb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001eb4:	464b      	mov	r3, r9
 8001eb6:	eb45 0303 	adc.w	r3, r5, r3
 8001eba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001eca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	f04f 0300 	mov.w	r3, #0
 8001ed6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001eda:	4629      	mov	r1, r5
 8001edc:	008b      	lsls	r3, r1, #2
 8001ede:	4621      	mov	r1, r4
 8001ee0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001ee4:	4621      	mov	r1, r4
 8001ee6:	008a      	lsls	r2, r1, #2
 8001ee8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001eec:	f7fe f97c 	bl	80001e8 <__aeabi_uldivmod>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4b60      	ldr	r3, [pc, #384]	@ (8002078 <UART_SetConfig+0x4e4>)
 8001ef6:	fba3 2302 	umull	r2, r3, r3, r2
 8001efa:	095b      	lsrs	r3, r3, #5
 8001efc:	011c      	lsls	r4, r3, #4
 8001efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f02:	2200      	movs	r2, #0
 8001f04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001f08:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001f0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001f10:	4642      	mov	r2, r8
 8001f12:	464b      	mov	r3, r9
 8001f14:	1891      	adds	r1, r2, r2
 8001f16:	61b9      	str	r1, [r7, #24]
 8001f18:	415b      	adcs	r3, r3
 8001f1a:	61fb      	str	r3, [r7, #28]
 8001f1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f20:	4641      	mov	r1, r8
 8001f22:	1851      	adds	r1, r2, r1
 8001f24:	6139      	str	r1, [r7, #16]
 8001f26:	4649      	mov	r1, r9
 8001f28:	414b      	adcs	r3, r1
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	f04f 0300 	mov.w	r3, #0
 8001f34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f38:	4659      	mov	r1, fp
 8001f3a:	00cb      	lsls	r3, r1, #3
 8001f3c:	4651      	mov	r1, sl
 8001f3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f42:	4651      	mov	r1, sl
 8001f44:	00ca      	lsls	r2, r1, #3
 8001f46:	4610      	mov	r0, r2
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	4642      	mov	r2, r8
 8001f4e:	189b      	adds	r3, r3, r2
 8001f50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f54:	464b      	mov	r3, r9
 8001f56:	460a      	mov	r2, r1
 8001f58:	eb42 0303 	adc.w	r3, r2, r3
 8001f5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001f6a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	f04f 0300 	mov.w	r3, #0
 8001f74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001f78:	4649      	mov	r1, r9
 8001f7a:	008b      	lsls	r3, r1, #2
 8001f7c:	4641      	mov	r1, r8
 8001f7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f82:	4641      	mov	r1, r8
 8001f84:	008a      	lsls	r2, r1, #2
 8001f86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001f8a:	f7fe f92d 	bl	80001e8 <__aeabi_uldivmod>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	4611      	mov	r1, r2
 8001f94:	4b38      	ldr	r3, [pc, #224]	@ (8002078 <UART_SetConfig+0x4e4>)
 8001f96:	fba3 2301 	umull	r2, r3, r3, r1
 8001f9a:	095b      	lsrs	r3, r3, #5
 8001f9c:	2264      	movs	r2, #100	@ 0x64
 8001f9e:	fb02 f303 	mul.w	r3, r2, r3
 8001fa2:	1acb      	subs	r3, r1, r3
 8001fa4:	011b      	lsls	r3, r3, #4
 8001fa6:	3332      	adds	r3, #50	@ 0x32
 8001fa8:	4a33      	ldr	r2, [pc, #204]	@ (8002078 <UART_SetConfig+0x4e4>)
 8001faa:	fba2 2303 	umull	r2, r3, r2, r3
 8001fae:	095b      	lsrs	r3, r3, #5
 8001fb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fb4:	441c      	add	r4, r3
 8001fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001fba:	2200      	movs	r2, #0
 8001fbc:	673b      	str	r3, [r7, #112]	@ 0x70
 8001fbe:	677a      	str	r2, [r7, #116]	@ 0x74
 8001fc0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001fc4:	4642      	mov	r2, r8
 8001fc6:	464b      	mov	r3, r9
 8001fc8:	1891      	adds	r1, r2, r2
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	415b      	adcs	r3, r3
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fd4:	4641      	mov	r1, r8
 8001fd6:	1851      	adds	r1, r2, r1
 8001fd8:	6039      	str	r1, [r7, #0]
 8001fda:	4649      	mov	r1, r9
 8001fdc:	414b      	adcs	r3, r1
 8001fde:	607b      	str	r3, [r7, #4]
 8001fe0:	f04f 0200 	mov.w	r2, #0
 8001fe4:	f04f 0300 	mov.w	r3, #0
 8001fe8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001fec:	4659      	mov	r1, fp
 8001fee:	00cb      	lsls	r3, r1, #3
 8001ff0:	4651      	mov	r1, sl
 8001ff2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ff6:	4651      	mov	r1, sl
 8001ff8:	00ca      	lsls	r2, r1, #3
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4603      	mov	r3, r0
 8002000:	4642      	mov	r2, r8
 8002002:	189b      	adds	r3, r3, r2
 8002004:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002006:	464b      	mov	r3, r9
 8002008:	460a      	mov	r2, r1
 800200a:	eb42 0303 	adc.w	r3, r2, r3
 800200e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	663b      	str	r3, [r7, #96]	@ 0x60
 800201a:	667a      	str	r2, [r7, #100]	@ 0x64
 800201c:	f04f 0200 	mov.w	r2, #0
 8002020:	f04f 0300 	mov.w	r3, #0
 8002024:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002028:	4649      	mov	r1, r9
 800202a:	008b      	lsls	r3, r1, #2
 800202c:	4641      	mov	r1, r8
 800202e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002032:	4641      	mov	r1, r8
 8002034:	008a      	lsls	r2, r1, #2
 8002036:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800203a:	f7fe f8d5 	bl	80001e8 <__aeabi_uldivmod>
 800203e:	4602      	mov	r2, r0
 8002040:	460b      	mov	r3, r1
 8002042:	4b0d      	ldr	r3, [pc, #52]	@ (8002078 <UART_SetConfig+0x4e4>)
 8002044:	fba3 1302 	umull	r1, r3, r3, r2
 8002048:	095b      	lsrs	r3, r3, #5
 800204a:	2164      	movs	r1, #100	@ 0x64
 800204c:	fb01 f303 	mul.w	r3, r1, r3
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	011b      	lsls	r3, r3, #4
 8002054:	3332      	adds	r3, #50	@ 0x32
 8002056:	4a08      	ldr	r2, [pc, #32]	@ (8002078 <UART_SetConfig+0x4e4>)
 8002058:	fba2 2303 	umull	r2, r3, r2, r3
 800205c:	095b      	lsrs	r3, r3, #5
 800205e:	f003 020f 	and.w	r2, r3, #15
 8002062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4422      	add	r2, r4
 800206a:	609a      	str	r2, [r3, #8]
}
 800206c:	bf00      	nop
 800206e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002072:	46bd      	mov	sp, r7
 8002074:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002078:	51eb851f 	.word	0x51eb851f

0800207c <__libc_init_array>:
 800207c:	b570      	push	{r4, r5, r6, lr}
 800207e:	4d0d      	ldr	r5, [pc, #52]	@ (80020b4 <__libc_init_array+0x38>)
 8002080:	4c0d      	ldr	r4, [pc, #52]	@ (80020b8 <__libc_init_array+0x3c>)
 8002082:	1b64      	subs	r4, r4, r5
 8002084:	10a4      	asrs	r4, r4, #2
 8002086:	2600      	movs	r6, #0
 8002088:	42a6      	cmp	r6, r4
 800208a:	d109      	bne.n	80020a0 <__libc_init_array+0x24>
 800208c:	4d0b      	ldr	r5, [pc, #44]	@ (80020bc <__libc_init_array+0x40>)
 800208e:	4c0c      	ldr	r4, [pc, #48]	@ (80020c0 <__libc_init_array+0x44>)
 8002090:	f000 f818 	bl	80020c4 <_init>
 8002094:	1b64      	subs	r4, r4, r5
 8002096:	10a4      	asrs	r4, r4, #2
 8002098:	2600      	movs	r6, #0
 800209a:	42a6      	cmp	r6, r4
 800209c:	d105      	bne.n	80020aa <__libc_init_array+0x2e>
 800209e:	bd70      	pop	{r4, r5, r6, pc}
 80020a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80020a4:	4798      	blx	r3
 80020a6:	3601      	adds	r6, #1
 80020a8:	e7ee      	b.n	8002088 <__libc_init_array+0xc>
 80020aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80020ae:	4798      	blx	r3
 80020b0:	3601      	adds	r6, #1
 80020b2:	e7f2      	b.n	800209a <__libc_init_array+0x1e>
 80020b4:	08002118 	.word	0x08002118
 80020b8:	08002118 	.word	0x08002118
 80020bc:	08002118 	.word	0x08002118
 80020c0:	0800211c 	.word	0x0800211c

080020c4 <_init>:
 80020c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020c6:	bf00      	nop
 80020c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ca:	bc08      	pop	{r3}
 80020cc:	469e      	mov	lr, r3
 80020ce:	4770      	bx	lr

080020d0 <_fini>:
 80020d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020d2:	bf00      	nop
 80020d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020d6:	bc08      	pop	{r3}
 80020d8:	469e      	mov	lr, r3
 80020da:	4770      	bx	lr
