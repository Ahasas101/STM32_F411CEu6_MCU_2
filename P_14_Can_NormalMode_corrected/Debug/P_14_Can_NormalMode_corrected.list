
P_14_Can_NormalMode_corrected.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035dc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080036e8  080036e8  000046e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003758  08003758  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003758  08003758  00005068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003758  08003758  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003758  08003758  00004758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800375c  0800375c  0000475c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003760  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000068  080037c8  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  080037c8  00005268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a092  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b46  00000000  00000000  0000f123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  00010c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000089d  00000000  00000000  000117b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186bd  00000000  00000000  0001204d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc1a  00000000  00000000  0002a70a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c451  00000000  00000000  00036324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2775  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000364c  00000000  00000000  000c27b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000c5e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080036d0 	.word	0x080036d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080036d0 	.word	0x080036d0

0800014c <SysTick_Handler>:

extern CAN_HandleTypeDef can1;
extern TIM_HandleTypeDef tim2;

void SysTick_Handler(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000150:	f000 fc3e 	bl	80009d0 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000154:	f001 fba5 	bl	80018a2 <HAL_SYSTICK_IRQHandler>
}
 8000158:	bf00      	nop
 800015a:	bd80      	pop	{r7, pc}

0800015c <EXTI9_5_IRQHandler>:

// for button, when button is pressed the timer is started and button is on pin_no_8
void EXTI9_5_IRQHandler(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&tim2);
 8000160:	4804      	ldr	r0, [pc, #16]	@ (8000174 <EXTI9_5_IRQHandler+0x18>)
 8000162:	f002 f997 	bl	8002494 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000166:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800016a:	f001 fd43 	bl	8001bf4 <HAL_GPIO_EXTI_IRQHandler>
}
 800016e:	bf00      	nop
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	200000ac 	.word	0x200000ac

08000178 <TIM2_IRQHandler>:



void TIM2_IRQHandler(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&tim2);
 800017c:	4802      	ldr	r0, [pc, #8]	@ (8000188 <TIM2_IRQHandler+0x10>)
 800017e:	f002 f9db 	bl	8002538 <HAL_TIM_IRQHandler>
}
 8000182:	bf00      	nop
 8000184:	bd80      	pop	{r7, pc}
 8000186:	bf00      	nop
 8000188:	200000ac 	.word	0x200000ac

0800018c <USB_HP_CAN1_TX_IRQHandler>:

void USB_HP_CAN1_TX_IRQHandler(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&can1);
 8000190:	4802      	ldr	r0, [pc, #8]	@ (800019c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000192:	f001 f856 	bl	8001242 <HAL_CAN_IRQHandler>
}
 8000196:	bf00      	nop
 8000198:	bd80      	pop	{r7, pc}
 800019a:	bf00      	nop
 800019c:	20000084 	.word	0x20000084

080001a0 <USB_LP_CAN1_RX0_IRQHandler>:

void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&can1);
 80001a4:	4802      	ldr	r0, [pc, #8]	@ (80001b0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80001a6:	f001 f84c 	bl	8001242 <HAL_CAN_IRQHandler>
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	20000084 	.word	0x20000084

080001b4 <CAN1_RX1_IRQHandler>:


void CAN1_RX1_IRQHandler(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&can1);
 80001b8:	4802      	ldr	r0, [pc, #8]	@ (80001c4 <CAN1_RX1_IRQHandler+0x10>)
 80001ba:	f001 f842 	bl	8001242 <HAL_CAN_IRQHandler>
}
 80001be:	bf00      	nop
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	20000084 	.word	0x20000084

080001c8 <CAN1_SCE_IRQHandler>:

void CAN1_SCE_IRQHandler(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&can1);
 80001cc:	4802      	ldr	r0, [pc, #8]	@ (80001d8 <CAN1_SCE_IRQHandler+0x10>)
 80001ce:	f001 f838 	bl	8001242 <HAL_CAN_IRQHandler>
}
 80001d2:	bf00      	nop
 80001d4:	bd80      	pop	{r7, pc}
 80001d6:	bf00      	nop
 80001d8:	20000084 	.word	0x20000084

080001dc <main>:
TIM_HandleTypeDef tim2;
CAN_RxHeaderTypeDef RxHeader;


int main(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	HAL_Init();
 80001e0:	f000 fbaa 	bl	8000938 <HAL_Init>
	SysClk_config(); // we are using HSE here which is 8Mhz
 80001e4:	f000 f824 	bl	8000230 <SysClk_config>

	tim2_init();
 80001e8:	f000 f96c 	bl	80004c4 <tim2_init>
	gpio_init();
 80001ec:	f000 f858 	bl	80002a0 <gpio_init>
	CAN1_init();
 80001f0:	f000 f896 	bl	8000320 <CAN1_init>
	CAN1_Filter_init();
 80001f4:	f000 f8fa 	bl	80003ec <CAN1_Filter_init>



	// here the interrupts are enabled for can
	if(HAL_CAN_ActivateNotification(&can1, CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF) != HAL_OK)  Error_Handler();
 80001f8:	f240 4103 	movw	r1, #1027	@ 0x403
 80001fc:	480a      	ldr	r0, [pc, #40]	@ (8000228 <main+0x4c>)
 80001fe:	f000 fffb 	bl	80011f8 <HAL_CAN_ActivateNotification>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d001      	beq.n	800020c <main+0x30>
 8000208:	f000 fa54 	bl	80006b4 <Error_Handler>

	if(HAL_CAN_Start(&can1) != HAL_OK) Error_Handler();
 800020c:	4806      	ldr	r0, [pc, #24]	@ (8000228 <main+0x4c>)
 800020e:	f000 fdbf 	bl	8000d90 <HAL_CAN_Start>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d001      	beq.n	800021c <main+0x40>
 8000218:	f000 fa4c 	bl	80006b4 <Error_Handler>



	HAL_TIM_Base_Start_IT(&tim2);
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <main+0x50>)
 800021e:	f002 f939 	bl	8002494 <HAL_TIM_Base_Start_IT>


	while(1);
 8000222:	bf00      	nop
 8000224:	e7fd      	b.n	8000222 <main+0x46>
 8000226:	bf00      	nop
 8000228:	20000084 	.word	0x20000084
 800022c:	200000ac 	.word	0x200000ac

08000230 <SysClk_config>:

}

void SysClk_config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b090      	sub	sp, #64	@ 0x40
 8000234:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef hse;
	memset(&hse, 0, sizeof(hse));
 8000236:	f107 0318 	add.w	r3, r7, #24
 800023a:	2228      	movs	r2, #40	@ 0x28
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f002 fc25 	bl	8002a8e <memset>
	hse.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000244:	2301      	movs	r3, #1
 8000246:	61bb      	str	r3, [r7, #24]
	hse.HSEState = RCC_HSE_ON;
 8000248:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800024c:	61fb      	str	r3, [r7, #28]
	hse.PLL.PLLState = RCC_PLL_NONE;
 800024e:	2300      	movs	r3, #0
 8000250:	637b      	str	r3, [r7, #52]	@ 0x34
	if(HAL_RCC_OscConfig(&hse) != HAL_OK) Error_Handler();
 8000252:	f107 0318 	add.w	r3, r7, #24
 8000256:	4618      	mov	r0, r3
 8000258:	f001 fcee 	bl	8001c38 <HAL_RCC_OscConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SysClk_config+0x36>
 8000262:	f000 fa27 	bl	80006b4 <Error_Handler>
	RCC_ClkInitTypeDef clk;
	clk.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000266:	2301      	movs	r3, #1
 8000268:	60bb      	str	r3, [r7, #8]
	clk.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 800026a:	230f      	movs	r3, #15
 800026c:	607b      	str	r3, [r7, #4]
			RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	clk.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	60fb      	str	r3, [r7, #12]
	clk.APB1CLKDivider = RCC_HCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	613b      	str	r3, [r7, #16]
	clk.APB2CLKDivider = RCC_HCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	617b      	str	r3, [r7, #20]
	if(HAL_RCC_ClockConfig(&clk, FLASH_ACR_LATENCY_0) != HAL_OK) Error_Handler();
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	2101      	movs	r1, #1
 800027e:	4618      	mov	r0, r3
 8000280:	f001 ff5c 	bl	800213c <HAL_RCC_ClockConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SysClk_config+0x5e>
 800028a:	f000 fa13 	bl	80006b4 <Error_Handler>
	__HAL_RCC_HSI_DISABLE();// always disable hsi after making hse as clock source not before that
 800028e:	4b03      	ldr	r3, [pc, #12]	@ (800029c <SysClk_config+0x6c>)
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]

}
 8000294:	bf00      	nop
 8000296:	3740      	adds	r7, #64	@ 0x40
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	42420000 	.word	0x42420000

080002a0 <gpio_init>:

void gpio_init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b086      	sub	sp, #24
 80002a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio;

	// for led init
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80002a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000310 <gpio_init+0x70>)
 80002a8:	699b      	ldr	r3, [r3, #24]
 80002aa:	4a19      	ldr	r2, [pc, #100]	@ (8000310 <gpio_init+0x70>)
 80002ac:	f043 0310 	orr.w	r3, r3, #16
 80002b0:	6193      	str	r3, [r2, #24]
 80002b2:	4b17      	ldr	r3, [pc, #92]	@ (8000310 <gpio_init+0x70>)
 80002b4:	699b      	ldr	r3, [r3, #24]
 80002b6:	f003 0310 	and.w	r3, r3, #16
 80002ba:	607b      	str	r3, [r7, #4]
 80002bc:	687b      	ldr	r3, [r7, #4]

	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 80002be:	2301      	movs	r3, #1
 80002c0:	60fb      	str	r3, [r7, #12]
	gpio.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80002c2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80002c6:	60bb      	str	r3, [r7, #8]
	gpio.Pull = GPIO_NOPULL;
 80002c8:	2300      	movs	r3, #0
 80002ca:	613b      	str	r3, [r7, #16]
	gpio.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80002cc:	2301      	movs	r3, #1
 80002ce:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &gpio);
 80002d0:	f107 0308 	add.w	r3, r7, #8
 80002d4:	4619      	mov	r1, r3
 80002d6:	480f      	ldr	r0, [pc, #60]	@ (8000314 <gpio_init+0x74>)
 80002d8:	f001 faf0 	bl	80018bc <HAL_GPIO_Init>

	gpio.Pin = GPIO_PIN_10;
 80002dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002e0:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOA, &gpio);
 80002e2:	f107 0308 	add.w	r3, r7, #8
 80002e6:	4619      	mov	r1, r3
 80002e8:	480b      	ldr	r0, [pc, #44]	@ (8000318 <gpio_init+0x78>)
 80002ea:	f001 fae7 	bl	80018bc <HAL_GPIO_Init>

	// for button init
	gpio.Pin = GPIO_PIN_8;
 80002ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002f2:	60bb      	str	r3, [r7, #8]
	gpio.Mode = GPIO_MODE_IT_FALLING;
 80002f4:	4b09      	ldr	r3, [pc, #36]	@ (800031c <gpio_init+0x7c>)
 80002f6:	60fb      	str	r3, [r7, #12]
	gpio.Pull = GPIO_PULLUP;
 80002f8:	2301      	movs	r3, #1
 80002fa:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &gpio);
 80002fc:	f107 0308 	add.w	r3, r7, #8
 8000300:	4619      	mov	r1, r3
 8000302:	4805      	ldr	r0, [pc, #20]	@ (8000318 <gpio_init+0x78>)
 8000304:	f001 fada 	bl	80018bc <HAL_GPIO_Init>
}
 8000308:	bf00      	nop
 800030a:	3718      	adds	r7, #24
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	40021000 	.word	0x40021000
 8000314:	40011000 	.word	0x40011000
 8000318:	40010800 	.word	0x40010800
 800031c:	10210000 	.word	0x10210000

08000320 <CAN1_init>:

void CAN1_init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	can1.Instance = CAN1;
 8000324:	4b17      	ldr	r3, [pc, #92]	@ (8000384 <CAN1_init+0x64>)
 8000326:	4a18      	ldr	r2, [pc, #96]	@ (8000388 <CAN1_init+0x68>)
 8000328:	601a      	str	r2, [r3, #0]
	can1.Init.Mode = CAN_MODE_NORMAL; // with one device normal mode will not work
 800032a:	4b16      	ldr	r3, [pc, #88]	@ (8000384 <CAN1_init+0x64>)
 800032c:	2200      	movs	r2, #0
 800032e:	609a      	str	r2, [r3, #8]
	can1.Init.AutoBusOff = ENABLE;
 8000330:	4b14      	ldr	r3, [pc, #80]	@ (8000384 <CAN1_init+0x64>)
 8000332:	2201      	movs	r2, #1
 8000334:	765a      	strb	r2, [r3, #25]
	can1.Init.AutoRetransmission = ENABLE;
 8000336:	4b13      	ldr	r3, [pc, #76]	@ (8000384 <CAN1_init+0x64>)
 8000338:	2201      	movs	r2, #1
 800033a:	76da      	strb	r2, [r3, #27]
	can1.Init.AutoWakeUp = DISABLE;
 800033c:	4b11      	ldr	r3, [pc, #68]	@ (8000384 <CAN1_init+0x64>)
 800033e:	2200      	movs	r2, #0
 8000340:	769a      	strb	r2, [r3, #26]
	can1.Init.ReceiveFifoLocked = DISABLE;
 8000342:	4b10      	ldr	r3, [pc, #64]	@ (8000384 <CAN1_init+0x64>)
 8000344:	2200      	movs	r2, #0
 8000346:	771a      	strb	r2, [r3, #28]
	can1.Init.TimeTriggeredMode = DISABLE;
 8000348:	4b0e      	ldr	r3, [pc, #56]	@ (8000384 <CAN1_init+0x64>)
 800034a:	2200      	movs	r2, #0
 800034c:	761a      	strb	r2, [r3, #24]
	can1.Init.TransmitFifoPriority = DISABLE;
 800034e:	4b0d      	ldr	r3, [pc, #52]	@ (8000384 <CAN1_init+0x64>)
 8000350:	2200      	movs	r2, #0
 8000352:	775a      	strb	r2, [r3, #29]

	// for the frame
	can1.Init.Prescaler = 1;
 8000354:	4b0b      	ldr	r3, [pc, #44]	@ (8000384 <CAN1_init+0x64>)
 8000356:	2201      	movs	r2, #1
 8000358:	605a      	str	r2, [r3, #4]
	can1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800035a:	4b0a      	ldr	r3, [pc, #40]	@ (8000384 <CAN1_init+0x64>)
 800035c:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000360:	611a      	str	r2, [r3, #16]
	can1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000362:	4b08      	ldr	r3, [pc, #32]	@ (8000384 <CAN1_init+0x64>)
 8000364:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000368:	615a      	str	r2, [r3, #20]
	can1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800036a:	4b06      	ldr	r3, [pc, #24]	@ (8000384 <CAN1_init+0x64>)
 800036c:	2200      	movs	r2, #0
 800036e:	60da      	str	r2, [r3, #12]

	if(HAL_CAN_Init(&can1) != HAL_OK) Error_Handler();
 8000370:	4804      	ldr	r0, [pc, #16]	@ (8000384 <CAN1_init+0x64>)
 8000372:	f000 fb49 	bl	8000a08 <HAL_CAN_Init>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <CAN1_init+0x60>
 800037c:	f000 f99a 	bl	80006b4 <Error_Handler>




}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}
 8000384:	20000084 	.word	0x20000084
 8000388:	40006400 	.word	0x40006400

0800038c <CAN1_Tx>:


uint8_t led_no = 0;
void CAN1_Tx(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b088      	sub	sp, #32
 8000390:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef Txheader;

	uint32_t TxMailbox;
	uint8_t messg ;

	Txheader.IDE = CAN_ID_STD;
 8000392:	2300      	movs	r3, #0
 8000394:	613b      	str	r3, [r7, #16]
	Txheader.DLC = 1;
 8000396:	2301      	movs	r3, #1
 8000398:	61bb      	str	r3, [r7, #24]
	Txheader.RTR = CAN_RTR_DATA;
 800039a:	2300      	movs	r3, #0
 800039c:	617b      	str	r3, [r7, #20]
	Txheader.StdId = 0x65D;
 800039e:	f240 635d 	movw	r3, #1629	@ 0x65d
 80003a2:	60bb      	str	r3, [r7, #8]

	messg = ++led_no;
 80003a4:	4b0f      	ldr	r3, [pc, #60]	@ (80003e4 <CAN1_Tx+0x58>)
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	3301      	adds	r3, #1
 80003aa:	b2da      	uxtb	r2, r3
 80003ac:	4b0d      	ldr	r3, [pc, #52]	@ (80003e4 <CAN1_Tx+0x58>)
 80003ae:	701a      	strb	r2, [r3, #0]
 80003b0:	4b0c      	ldr	r3, [pc, #48]	@ (80003e4 <CAN1_Tx+0x58>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	70fb      	strb	r3, [r7, #3]
	if(led_no == 4)
 80003b6:	4b0b      	ldr	r3, [pc, #44]	@ (80003e4 <CAN1_Tx+0x58>)
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	2b04      	cmp	r3, #4
 80003bc:	d102      	bne.n	80003c4 <CAN1_Tx+0x38>
	{
		led_no = 0;
 80003be:	4b09      	ldr	r3, [pc, #36]	@ (80003e4 <CAN1_Tx+0x58>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	701a      	strb	r2, [r3, #0]
	}
	// here txmailbox is automatically filled by the below api, indicating which mailbox is being used
	if(HAL_CAN_AddTxMessage(&can1, &Txheader, &messg, &TxMailbox) != HAL_OK) Error_Handler();
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	1cfa      	adds	r2, r7, #3
 80003c8:	f107 0108 	add.w	r1, r7, #8
 80003cc:	4806      	ldr	r0, [pc, #24]	@ (80003e8 <CAN1_Tx+0x5c>)
 80003ce:	f000 fd23 	bl	8000e18 <HAL_CAN_AddTxMessage>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <CAN1_Tx+0x50>
 80003d8:	f000 f96c 	bl	80006b4 <Error_Handler>





}
 80003dc:	bf00      	nop
 80003de:	3720      	adds	r7, #32
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000110 	.word	0x20000110
 80003e8:	20000084 	.word	0x20000084

080003ec <CAN1_Filter_init>:



void CAN1_Filter_init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b08a      	sub	sp, #40	@ 0x28
 80003f0:	af00      	add	r7, sp, #0


	// here we accepting every message (no filter)
	CAN_FilterTypeDef filter;

	filter.FilterActivation = ENABLE;
 80003f2:	2301      	movs	r3, #1
 80003f4:	623b      	str	r3, [r7, #32]
	filter.FilterBank = 0;
 80003f6:	2300      	movs	r3, #0
 80003f8:	617b      	str	r3, [r7, #20]
	filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	613b      	str	r3, [r7, #16]
	filter.FilterIdHigh = 0x0000;
 80003fe:	2300      	movs	r3, #0
 8000400:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = 0x0000;
 8000402:	2300      	movs	r3, #0
 8000404:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = 0x0000;
 8000406:	2300      	movs	r3, #0
 8000408:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = 0x0000;
 800040a:	2300      	movs	r3, #0
 800040c:	60fb      	str	r3, [r7, #12]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800040e:	2301      	movs	r3, #1
 8000410:	61fb      	str	r3, [r7, #28]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000412:	2300      	movs	r3, #0
 8000414:	61bb      	str	r3, [r7, #24]


	if(HAL_CAN_ConfigFilter(&can1,&filter) != HAL_OK) Error_Handler();
 8000416:	463b      	mov	r3, r7
 8000418:	4619      	mov	r1, r3
 800041a:	4806      	ldr	r0, [pc, #24]	@ (8000434 <CAN1_Filter_init+0x48>)
 800041c:	f000 fbef 	bl	8000bfe <HAL_CAN_ConfigFilter>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <CAN1_Filter_init+0x3e>
 8000426:	f000 f945 	bl	80006b4 <Error_Handler>
}
 800042a:	bf00      	nop
 800042c:	3728      	adds	r7, #40	@ 0x28
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	20000084 	.word	0x20000084

08000438 <HAL_CAN_RxFifo0FullCallback>:

void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]


	uint8_t rcvd_mssg[8];

	if(HAL_CAN_GetRxMessage(&can1, CAN_RX_FIFO0, &RxHeader, rcvd_mssg) != HAL_OK) Error_Handler();
 8000440:	f107 0308 	add.w	r3, r7, #8
 8000444:	4a1c      	ldr	r2, [pc, #112]	@ (80004b8 <HAL_CAN_RxFifo0FullCallback+0x80>)
 8000446:	2100      	movs	r1, #0
 8000448:	481c      	ldr	r0, [pc, #112]	@ (80004bc <HAL_CAN_RxFifo0FullCallback+0x84>)
 800044a:	f000 fdb4 	bl	8000fb6 <HAL_CAN_GetRxMessage>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <HAL_CAN_RxFifo0FullCallback+0x20>
 8000454:	f000 f92e 	bl	80006b4 <Error_Handler>

	if(RxHeader.StdId == 0x65D && RxHeader.RTR == 0)
 8000458:	4b17      	ldr	r3, [pc, #92]	@ (80004b8 <HAL_CAN_RxFifo0FullCallback+0x80>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f240 625d 	movw	r2, #1629	@ 0x65d
 8000460:	4293      	cmp	r3, r2
 8000462:	d108      	bne.n	8000476 <HAL_CAN_RxFifo0FullCallback+0x3e>
 8000464:	4b14      	ldr	r3, [pc, #80]	@ (80004b8 <HAL_CAN_RxFifo0FullCallback+0x80>)
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d104      	bne.n	8000476 <HAL_CAN_RxFifo0FullCallback+0x3e>
	{
		// led command from n1 to n2
		Led_Manage_output(rcvd_mssg[0]);
 800046c:	7a3b      	ldrb	r3, [r7, #8]
 800046e:	4618      	mov	r0, r3
 8000470:	f000 f87c 	bl	800056c <Led_Manage_output>
 8000474:	e01d      	b.n	80004b2 <HAL_CAN_RxFifo0FullCallback+0x7a>
	}
	else if(RxHeader.StdId == 0x651 && RxHeader.RTR == 1)
 8000476:	4b10      	ldr	r3, [pc, #64]	@ (80004b8 <HAL_CAN_RxFifo0FullCallback+0x80>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f240 6251 	movw	r2, #1617	@ 0x651
 800047e:	4293      	cmp	r3, r2
 8000480:	d108      	bne.n	8000494 <HAL_CAN_RxFifo0FullCallback+0x5c>
 8000482:	4b0d      	ldr	r3, [pc, #52]	@ (80004b8 <HAL_CAN_RxFifo0FullCallback+0x80>)
 8000484:	68db      	ldr	r3, [r3, #12]
 8000486:	2b01      	cmp	r3, #1
 8000488:	d104      	bne.n	8000494 <HAL_CAN_RxFifo0FullCallback+0x5c>
	{
		// remote frame requested by n1
		Send_Response(0x651);
 800048a:	f240 6051 	movw	r0, #1617	@ 0x651
 800048e:	f000 f8ed 	bl	800066c <Send_Response>
 8000492:	e00e      	b.n	80004b2 <HAL_CAN_RxFifo0FullCallback+0x7a>
		return;

	}
	else if(RxHeader.StdId == 0x651 && RxHeader.RTR == 0)
 8000494:	4b08      	ldr	r3, [pc, #32]	@ (80004b8 <HAL_CAN_RxFifo0FullCallback+0x80>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	f240 6251 	movw	r2, #1617	@ 0x651
 800049c:	4293      	cmp	r3, r2
 800049e:	d108      	bne.n	80004b2 <HAL_CAN_RxFifo0FullCallback+0x7a>
 80004a0:	4b05      	ldr	r3, [pc, #20]	@ (80004b8 <HAL_CAN_RxFifo0FullCallback+0x80>)
 80004a2:	68db      	ldr	r3, [r3, #12]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d104      	bne.n	80004b2 <HAL_CAN_RxFifo0FullCallback+0x7a>
	{
		// data frame reply by n2 to n1
		printf("Reply received = %d\n", rcvd_mssg[0]);
 80004a8:	7a3b      	ldrb	r3, [r7, #8]
 80004aa:	4619      	mov	r1, r3
 80004ac:	4804      	ldr	r0, [pc, #16]	@ (80004c0 <HAL_CAN_RxFifo0FullCallback+0x88>)
 80004ae:	f002 fa99 	bl	80029e4 <iprintf>

	}
}
 80004b2:	3710      	adds	r7, #16
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	200000f4 	.word	0x200000f4
 80004bc:	20000084 	.word	0x20000084
 80004c0:	080036e8 	.word	0x080036e8

080004c4 <tim2_init>:


void tim2_init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0

	tim2.Instance = TIM2;
 80004c8:	4b0c      	ldr	r3, [pc, #48]	@ (80004fc <tim2_init+0x38>)
 80004ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004ce:	601a      	str	r2, [r3, #0]
	tim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d0:	4b0a      	ldr	r3, [pc, #40]	@ (80004fc <tim2_init+0x38>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
	tim2.Init.Prescaler = 7999; // as clock is 8Mhz we downsclaed it to 100hz
 80004d6:	4b09      	ldr	r3, [pc, #36]	@ (80004fc <tim2_init+0x38>)
 80004d8:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80004dc:	605a      	str	r2, [r3, #4]
	tim2.Init.Period = 1000 - 1; // to generate the delay after 1 sec
 80004de:	4b07      	ldr	r3, [pc, #28]	@ (80004fc <tim2_init+0x38>)
 80004e0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80004e4:	60da      	str	r2, [r3, #12]
	if(HAL_TIM_Base_Init(&tim2) != HAL_OK) Error_Handler();
 80004e6:	4805      	ldr	r0, [pc, #20]	@ (80004fc <tim2_init+0x38>)
 80004e8:	f001 ff84 	bl	80023f4 <HAL_TIM_Base_Init>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <tim2_init+0x32>
 80004f2:	f000 f8df 	bl	80006b4 <Error_Handler>

}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	200000ac 	.word	0x200000ac

08000500 <HAL_TIM_PeriodElapsedCallback>:

uint8_t counter = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	@ 0x28
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef TxHeader;
	uint8_t dummy = 0; // no meaning of message here
 8000508:	2300      	movs	r3, #0
 800050a:	73fb      	strb	r3, [r7, #15]
	uint32_t TxMailbox;
	if(counter == 4)
 800050c:	4b15      	ldr	r3, [pc, #84]	@ (8000564 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b04      	cmp	r3, #4
 8000512:	d11a      	bne.n	800054a <HAL_TIM_PeriodElapsedCallback+0x4a>
	{
		TxHeader.DLC = 2;
 8000514:	2302      	movs	r3, #2
 8000516:	623b      	str	r3, [r7, #32]
		TxHeader.StdId = 0x651;
 8000518:	f240 6351 	movw	r3, #1617	@ 0x651
 800051c:	613b      	str	r3, [r7, #16]
		TxHeader.IDE = CAN_ID_STD;
 800051e:	2300      	movs	r3, #0
 8000520:	61bb      	str	r3, [r7, #24]
		TxHeader.RTR = CAN_RTR_REMOTE;
 8000522:	2302      	movs	r3, #2
 8000524:	61fb      	str	r3, [r7, #28]

		if(HAL_CAN_AddTxMessage(&can1, &TxHeader, &dummy, &TxMailbox) != HAL_OK) Error_Handler();
 8000526:	f107 0308 	add.w	r3, r7, #8
 800052a:	f107 020f 	add.w	r2, r7, #15
 800052e:	f107 0110 	add.w	r1, r7, #16
 8000532:	480d      	ldr	r0, [pc, #52]	@ (8000568 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000534:	f000 fc70 	bl	8000e18 <HAL_CAN_AddTxMessage>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <HAL_TIM_PeriodElapsedCallback+0x42>
 800053e:	f000 f8b9 	bl	80006b4 <Error_Handler>

		counter = 0;
 8000542:	4b08      	ldr	r3, [pc, #32]	@ (8000564 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000544:	2200      	movs	r2, #0
 8000546:	701a      	strb	r2, [r3, #0]
	}
	else{
		CAN1_Tx();
		counter++;
	}
}
 8000548:	e007      	b.n	800055a <HAL_TIM_PeriodElapsedCallback+0x5a>
		CAN1_Tx();
 800054a:	f7ff ff1f 	bl	800038c <CAN1_Tx>
		counter++;
 800054e:	4b05      	ldr	r3, [pc, #20]	@ (8000564 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	3301      	adds	r3, #1
 8000554:	b2da      	uxtb	r2, r3
 8000556:	4b03      	ldr	r3, [pc, #12]	@ (8000564 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000558:	701a      	strb	r2, [r3, #0]
}
 800055a:	bf00      	nop
 800055c:	3728      	adds	r7, #40	@ 0x28
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000111 	.word	0x20000111
 8000568:	20000084 	.word	0x20000084

0800056c <Led_Manage_output>:

void Led_Manage_output(uint8_t led_no)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
	switch(led_no)
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	3b01      	subs	r3, #1
 800057a:	2b03      	cmp	r3, #3
 800057c:	d86e      	bhi.n	800065c <Led_Manage_output+0xf0>
 800057e:	a201      	add	r2, pc, #4	@ (adr r2, 8000584 <Led_Manage_output+0x18>)
 8000580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000584:	08000595 	.word	0x08000595
 8000588:	080005c7 	.word	0x080005c7
 800058c:	080005f9 	.word	0x080005f9
 8000590:	0800062b 	.word	0x0800062b
	{
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000594:	2201      	movs	r2, #1
 8000596:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800059a:	4832      	ldr	r0, [pc, #200]	@ (8000664 <Led_Manage_output+0xf8>)
 800059c:	f001 fb12 	bl	8001bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005a6:	482f      	ldr	r0, [pc, #188]	@ (8000664 <Led_Manage_output+0xf8>)
 80005a8:	f001 fb0c 	bl	8001bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005b2:	482c      	ldr	r0, [pc, #176]	@ (8000664 <Led_Manage_output+0xf8>)
 80005b4:	f001 fb06 	bl	8001bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005be:	482a      	ldr	r0, [pc, #168]	@ (8000668 <Led_Manage_output+0xfc>)
 80005c0:	f001 fb00 	bl	8001bc4 <HAL_GPIO_WritePin>
		break;
 80005c4:	e04a      	b.n	800065c <Led_Manage_output+0xf0>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005cc:	4825      	ldr	r0, [pc, #148]	@ (8000664 <Led_Manage_output+0xf8>)
 80005ce:	f001 faf9 	bl	8001bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005d8:	4822      	ldr	r0, [pc, #136]	@ (8000664 <Led_Manage_output+0xf8>)
 80005da:	f001 faf3 	bl	8001bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005e4:	481f      	ldr	r0, [pc, #124]	@ (8000664 <Led_Manage_output+0xf8>)
 80005e6:	f001 faed 	bl	8001bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005f0:	481d      	ldr	r0, [pc, #116]	@ (8000668 <Led_Manage_output+0xfc>)
 80005f2:	f001 fae7 	bl	8001bc4 <HAL_GPIO_WritePin>

		break;
 80005f6:	e031      	b.n	800065c <Led_Manage_output+0xf0>
	case 3:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005fe:	4819      	ldr	r0, [pc, #100]	@ (8000664 <Led_Manage_output+0xf8>)
 8000600:	f001 fae0 	bl	8001bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800060a:	4816      	ldr	r0, [pc, #88]	@ (8000664 <Led_Manage_output+0xf8>)
 800060c:	f001 fada 	bl	8001bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000616:	4813      	ldr	r0, [pc, #76]	@ (8000664 <Led_Manage_output+0xf8>)
 8000618:	f001 fad4 	bl	8001bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000622:	4811      	ldr	r0, [pc, #68]	@ (8000668 <Led_Manage_output+0xfc>)
 8000624:	f001 face 	bl	8001bc4 <HAL_GPIO_WritePin>

		break;
 8000628:	e018      	b.n	800065c <Led_Manage_output+0xf0>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000630:	480c      	ldr	r0, [pc, #48]	@ (8000664 <Led_Manage_output+0xf8>)
 8000632:	f001 fac7 	bl	8001bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800063c:	4809      	ldr	r0, [pc, #36]	@ (8000664 <Led_Manage_output+0xf8>)
 800063e:	f001 fac1 	bl	8001bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000648:	4806      	ldr	r0, [pc, #24]	@ (8000664 <Led_Manage_output+0xf8>)
 800064a:	f001 fabb 	bl	8001bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800064e:	2201      	movs	r2, #1
 8000650:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000654:	4804      	ldr	r0, [pc, #16]	@ (8000668 <Led_Manage_output+0xfc>)
 8000656:	f001 fab5 	bl	8001bc4 <HAL_GPIO_WritePin>

		break;
 800065a:	bf00      	nop

	}
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40011000 	.word	0x40011000
 8000668:	40010800 	.word	0x40010800

0800066c <Send_Response>:

void Send_Response(uint32_t stdId)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08a      	sub	sp, #40	@ 0x28
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;
	uint8_t response[2] = {0xAB , 0xCD};
 8000674:	f64c 53ab 	movw	r3, #52651	@ 0xcdab
 8000678:	813b      	strh	r3, [r7, #8]

	TxHeader.StdId = stdId;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	613b      	str	r3, [r7, #16]
	TxHeader.DLC = 2;
 800067e:	2302      	movs	r3, #2
 8000680:	623b      	str	r3, [r7, #32]
	TxHeader.RTR = CAN_RTR_DATA;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
	TxHeader.IDE = CAN_ID_STD;
 8000686:	2300      	movs	r3, #0
 8000688:	61bb      	str	r3, [r7, #24]

	if(HAL_CAN_AddTxMessage(&can1, &TxHeader, response, &TxMailbox) != HAL_OK) Error_Handler();
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	f107 0208 	add.w	r2, r7, #8
 8000692:	f107 0110 	add.w	r1, r7, #16
 8000696:	4806      	ldr	r0, [pc, #24]	@ (80006b0 <Send_Response+0x44>)
 8000698:	f000 fbbe 	bl	8000e18 <HAL_CAN_AddTxMessage>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <Send_Response+0x3a>
 80006a2:	f000 f807 	bl	80006b4 <Error_Handler>

}
 80006a6:	bf00      	nop
 80006a8:	3728      	adds	r7, #40	@ 0x28
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000084 	.word	0x20000084

080006b4 <Error_Handler>:

void Error_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
	while(1);
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <Error_Handler+0x4>

080006bc <HAL_TIM_Base_MspInit>:
#include "main.h"
#include "stm32f1xx_hal.h"

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM2_CLK_ENABLE();
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <HAL_TIM_Base_MspInit+0x38>)
 80006c6:	69db      	ldr	r3, [r3, #28]
 80006c8:	4a0a      	ldr	r2, [pc, #40]	@ (80006f4 <HAL_TIM_Base_MspInit+0x38>)
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	61d3      	str	r3, [r2, #28]
 80006d0:	4b08      	ldr	r3, [pc, #32]	@ (80006f4 <HAL_TIM_Base_MspInit+0x38>)
 80006d2:	69db      	ldr	r3, [r3, #28]
 80006d4:	f003 0301 	and.w	r3, r3, #1
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	68fb      	ldr	r3, [r7, #12]

	HAL_NVIC_SetPriority(TIM2_IRQn, 14, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	210e      	movs	r1, #14
 80006e0:	201c      	movs	r0, #28
 80006e2:	f001 f8a8 	bl	8001836 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006e6:	201c      	movs	r0, #28
 80006e8:	f001 f8c1 	bl	800186e <HAL_NVIC_EnableIRQ>

}
 80006ec:	bf00      	nop
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40021000 	.word	0x40021000

080006f8 <HAL_CAN_MspInit>:



void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	__HAL_RCC_CAN1_CLK_ENABLE();
 8000700:	4b25      	ldr	r3, [pc, #148]	@ (8000798 <HAL_CAN_MspInit+0xa0>)
 8000702:	69db      	ldr	r3, [r3, #28]
 8000704:	4a24      	ldr	r2, [pc, #144]	@ (8000798 <HAL_CAN_MspInit+0xa0>)
 8000706:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800070a:	61d3      	str	r3, [r2, #28]
 800070c:	4b22      	ldr	r3, [pc, #136]	@ (8000798 <HAL_CAN_MspInit+0xa0>)
 800070e:	69db      	ldr	r3, [r3, #28]
 8000710:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000718:	4b1f      	ldr	r3, [pc, #124]	@ (8000798 <HAL_CAN_MspInit+0xa0>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	4a1e      	ldr	r2, [pc, #120]	@ (8000798 <HAL_CAN_MspInit+0xa0>)
 800071e:	f043 0304 	orr.w	r3, r3, #4
 8000722:	6193      	str	r3, [r2, #24]
 8000724:	4b1c      	ldr	r3, [pc, #112]	@ (8000798 <HAL_CAN_MspInit+0xa0>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	f003 0304 	and.w	r3, r3, #4
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]

	HAL_NVIC_SetPriority(CAN1_TX_IRQn, 15, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	210f      	movs	r1, #15
 8000734:	2013      	movs	r0, #19
 8000736:	f001 f87e 	bl	8001836 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 15, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	210f      	movs	r1, #15
 800073e:	2014      	movs	r0, #20
 8000740:	f001 f879 	bl	8001836 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 15, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	210f      	movs	r1, #15
 8000748:	2015      	movs	r0, #21
 800074a:	f001 f874 	bl	8001836 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	210f      	movs	r1, #15
 8000752:	2016      	movs	r0, #22
 8000754:	f001 f86f 	bl	8001836 <HAL_NVIC_SetPriority>

	HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000758:	2013      	movs	r0, #19
 800075a:	f001 f888 	bl	800186e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800075e:	2014      	movs	r0, #20
 8000760:	f001 f885 	bl	800186e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000764:	2015      	movs	r0, #21
 8000766:	f001 f882 	bl	800186e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800076a:	2016      	movs	r0, #22
 800076c:	f001 f87f 	bl	800186e <HAL_NVIC_EnableIRQ>

	GPIO_InitTypeDef can;
	can.Mode = GPIO_MODE_AF_PP;
 8000770:	2302      	movs	r3, #2
 8000772:	617b      	str	r3, [r7, #20]
	can.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8000774:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000778:	613b      	str	r3, [r7, #16]
	can.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800077a:	2301      	movs	r3, #1
 800077c:	61fb      	str	r3, [r7, #28]
	can.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &can);
 8000782:	f107 0310 	add.w	r3, r7, #16
 8000786:	4619      	mov	r1, r3
 8000788:	4804      	ldr	r0, [pc, #16]	@ (800079c <HAL_CAN_MspInit+0xa4>)
 800078a:	f001 f897 	bl	80018bc <HAL_GPIO_Init>

}
 800078e:	bf00      	nop
 8000790:	3720      	adds	r7, #32
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40021000 	.word	0x40021000
 800079c:	40010800 	.word	0x40010800

080007a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	e00a      	b.n	80007c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007b2:	f3af 8000 	nop.w
 80007b6:	4601      	mov	r1, r0
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	1c5a      	adds	r2, r3, #1
 80007bc:	60ba      	str	r2, [r7, #8]
 80007be:	b2ca      	uxtb	r2, r1
 80007c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	3301      	adds	r3, #1
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	697a      	ldr	r2, [r7, #20]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	dbf0      	blt.n	80007b2 <_read+0x12>
  }

  return len;
 80007d0:	687b      	ldr	r3, [r7, #4]
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b086      	sub	sp, #24
 80007de:	af00      	add	r7, sp, #0
 80007e0:	60f8      	str	r0, [r7, #12]
 80007e2:	60b9      	str	r1, [r7, #8]
 80007e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	e009      	b.n	8000800 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	60ba      	str	r2, [r7, #8]
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	3301      	adds	r3, #1
 80007fe:	617b      	str	r3, [r7, #20]
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	429a      	cmp	r2, r3
 8000806:	dbf1      	blt.n	80007ec <_write+0x12>
  }
  return len;
 8000808:	687b      	ldr	r3, [r7, #4]
}
 800080a:	4618      	mov	r0, r3
 800080c:	3718      	adds	r7, #24
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <_close>:

int _close(int file)
{
 8000812:	b480      	push	{r7}
 8000814:	b083      	sub	sp, #12
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800081a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800081e:	4618      	mov	r0, r3
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr

08000828 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000838:	605a      	str	r2, [r3, #4]
  return 0;
 800083a:	2300      	movs	r3, #0
}
 800083c:	4618      	mov	r0, r3
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr

08000846 <_isatty>:

int _isatty(int file)
{
 8000846:	b480      	push	{r7}
 8000848:	b083      	sub	sp, #12
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800084e:	2301      	movs	r3, #1
}
 8000850:	4618      	mov	r0, r3
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr

0800085a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800085a:	b480      	push	{r7}
 800085c:	b085      	sub	sp, #20
 800085e:	af00      	add	r7, sp, #0
 8000860:	60f8      	str	r0, [r7, #12]
 8000862:	60b9      	str	r1, [r7, #8]
 8000864:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000866:	2300      	movs	r3, #0
}
 8000868:	4618      	mov	r0, r3
 800086a:	3714      	adds	r7, #20
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr
	...

08000874 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800087c:	4a14      	ldr	r2, [pc, #80]	@ (80008d0 <_sbrk+0x5c>)
 800087e:	4b15      	ldr	r3, [pc, #84]	@ (80008d4 <_sbrk+0x60>)
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000888:	4b13      	ldr	r3, [pc, #76]	@ (80008d8 <_sbrk+0x64>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d102      	bne.n	8000896 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000890:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <_sbrk+0x64>)
 8000892:	4a12      	ldr	r2, [pc, #72]	@ (80008dc <_sbrk+0x68>)
 8000894:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000896:	4b10      	ldr	r3, [pc, #64]	@ (80008d8 <_sbrk+0x64>)
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4413      	add	r3, r2
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d207      	bcs.n	80008b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008a4:	f002 f942 	bl	8002b2c <__errno>
 80008a8:	4603      	mov	r3, r0
 80008aa:	220c      	movs	r2, #12
 80008ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ae:	f04f 33ff 	mov.w	r3, #4294967295
 80008b2:	e009      	b.n	80008c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008b4:	4b08      	ldr	r3, [pc, #32]	@ (80008d8 <_sbrk+0x64>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ba:	4b07      	ldr	r3, [pc, #28]	@ (80008d8 <_sbrk+0x64>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4413      	add	r3, r2
 80008c2:	4a05      	ldr	r2, [pc, #20]	@ (80008d8 <_sbrk+0x64>)
 80008c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008c6:	68fb      	ldr	r3, [r7, #12]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3718      	adds	r7, #24
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20005000 	.word	0x20005000
 80008d4:	00000400 	.word	0x00000400
 80008d8:	20000114 	.word	0x20000114
 80008dc:	20000268 	.word	0x20000268

080008e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr

080008ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008ec:	f7ff fff8 	bl	80008e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f0:	480b      	ldr	r0, [pc, #44]	@ (8000920 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008f2:	490c      	ldr	r1, [pc, #48]	@ (8000924 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000928 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f8:	e002      	b.n	8000900 <LoopCopyDataInit>

080008fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fe:	3304      	adds	r3, #4

08000900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000904:	d3f9      	bcc.n	80008fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000906:	4a09      	ldr	r2, [pc, #36]	@ (800092c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000908:	4c09      	ldr	r4, [pc, #36]	@ (8000930 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800090c:	e001      	b.n	8000912 <LoopFillZerobss>

0800090e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000910:	3204      	adds	r2, #4

08000912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000914:	d3fb      	bcc.n	800090e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000916:	f002 f90f 	bl	8002b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800091a:	f7ff fc5f 	bl	80001dc <main>
  bx lr
 800091e:	4770      	bx	lr
  ldr r0, =_sdata
 8000920:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000924:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000928:	08003760 	.word	0x08003760
  ldr r2, =_sbss
 800092c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000930:	20000268 	.word	0x20000268

08000934 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000934:	e7fe      	b.n	8000934 <ADC1_2_IRQHandler>
	...

08000938 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800093c:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <HAL_Init+0x28>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a07      	ldr	r2, [pc, #28]	@ (8000960 <HAL_Init+0x28>)
 8000942:	f043 0310 	orr.w	r3, r3, #16
 8000946:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000948:	2003      	movs	r0, #3
 800094a:	f000 ff69 	bl	8001820 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800094e:	200f      	movs	r0, #15
 8000950:	f000 f80e 	bl	8000970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000954:	f000 f806 	bl	8000964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000958:	2300      	movs	r3, #0
}
 800095a:	4618      	mov	r0, r3
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40022000 	.word	0x40022000

08000964 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr

08000970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000978:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <HAL_InitTick+0x54>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	4b12      	ldr	r3, [pc, #72]	@ (80009c8 <HAL_InitTick+0x58>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	4619      	mov	r1, r3
 8000982:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000986:	fbb3 f3f1 	udiv	r3, r3, r1
 800098a:	fbb2 f3f3 	udiv	r3, r2, r3
 800098e:	4618      	mov	r0, r3
 8000990:	f000 ff7b 	bl	800188a <HAL_SYSTICK_Config>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	e00e      	b.n	80009bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2b0f      	cmp	r3, #15
 80009a2:	d80a      	bhi.n	80009ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a4:	2200      	movs	r2, #0
 80009a6:	6879      	ldr	r1, [r7, #4]
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	f000 ff43 	bl	8001836 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b0:	4a06      	ldr	r2, [pc, #24]	@ (80009cc <HAL_InitTick+0x5c>)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009b6:	2300      	movs	r3, #0
 80009b8:	e000      	b.n	80009bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000000 	.word	0x20000000
 80009c8:	20000008 	.word	0x20000008
 80009cc:	20000004 	.word	0x20000004

080009d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d4:	4b05      	ldr	r3, [pc, #20]	@ (80009ec <HAL_IncTick+0x1c>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b05      	ldr	r3, [pc, #20]	@ (80009f0 <HAL_IncTick+0x20>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4413      	add	r3, r2
 80009e0:	4a03      	ldr	r2, [pc, #12]	@ (80009f0 <HAL_IncTick+0x20>)
 80009e2:	6013      	str	r3, [r2, #0]
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr
 80009ec:	20000008 	.word	0x20000008
 80009f0:	20000118 	.word	0x20000118

080009f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return uwTick;
 80009f8:	4b02      	ldr	r3, [pc, #8]	@ (8000a04 <HAL_GetTick+0x10>)
 80009fa:	681b      	ldr	r3, [r3, #0]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr
 8000a04:	20000118 	.word	0x20000118

08000a08 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d101      	bne.n	8000a1a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e0ed      	b.n	8000bf6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d102      	bne.n	8000a2c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f7ff fe66 	bl	80006f8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f042 0201 	orr.w	r2, r2, #1
 8000a3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a3c:	f7ff ffda 	bl	80009f4 <HAL_GetTick>
 8000a40:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a42:	e012      	b.n	8000a6a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a44:	f7ff ffd6 	bl	80009f4 <HAL_GetTick>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	2b0a      	cmp	r3, #10
 8000a50:	d90b      	bls.n	8000a6a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a56:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2205      	movs	r2, #5
 8000a62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e0c5      	b.n	8000bf6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d0e5      	beq.n	8000a44 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f022 0202 	bic.w	r2, r2, #2
 8000a86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a88:	f7ff ffb4 	bl	80009f4 <HAL_GetTick>
 8000a8c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a8e:	e012      	b.n	8000ab6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a90:	f7ff ffb0 	bl	80009f4 <HAL_GetTick>
 8000a94:	4602      	mov	r2, r0
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	2b0a      	cmp	r3, #10
 8000a9c:	d90b      	bls.n	8000ab6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aa2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2205      	movs	r2, #5
 8000aae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e09f      	b.n	8000bf6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f003 0302 	and.w	r3, r3, #2
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d1e5      	bne.n	8000a90 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	7e1b      	ldrb	r3, [r3, #24]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d108      	bne.n	8000ade <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	e007      	b.n	8000aee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000aec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	7e5b      	ldrb	r3, [r3, #25]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d108      	bne.n	8000b08 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	e007      	b.n	8000b18 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000b16:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	7e9b      	ldrb	r3, [r3, #26]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d108      	bne.n	8000b32 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f042 0220 	orr.w	r2, r2, #32
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	e007      	b.n	8000b42 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f022 0220 	bic.w	r2, r2, #32
 8000b40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	7edb      	ldrb	r3, [r3, #27]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d108      	bne.n	8000b5c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f022 0210 	bic.w	r2, r2, #16
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	e007      	b.n	8000b6c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f042 0210 	orr.w	r2, r2, #16
 8000b6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	7f1b      	ldrb	r3, [r3, #28]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d108      	bne.n	8000b86 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f042 0208 	orr.w	r2, r2, #8
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	e007      	b.n	8000b96 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f022 0208 	bic.w	r2, r2, #8
 8000b94:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	7f5b      	ldrb	r3, [r3, #29]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d108      	bne.n	8000bb0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f042 0204 	orr.w	r2, r2, #4
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	e007      	b.n	8000bc0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f022 0204 	bic.w	r2, r2, #4
 8000bbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	689a      	ldr	r2, [r3, #8]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	431a      	orrs	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	691b      	ldr	r3, [r3, #16]
 8000bce:	431a      	orrs	r2, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	695b      	ldr	r3, [r3, #20]
 8000bd4:	ea42 0103 	orr.w	r1, r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	1e5a      	subs	r2, r3, #1
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	430a      	orrs	r2, r1
 8000be4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2200      	movs	r2, #0
 8000bea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2201      	movs	r2, #1
 8000bf0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b087      	sub	sp, #28
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c14:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000c16:	7cfb      	ldrb	r3, [r7, #19]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d003      	beq.n	8000c24 <HAL_CAN_ConfigFilter+0x26>
 8000c1c:	7cfb      	ldrb	r3, [r7, #19]
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	f040 80aa 	bne.w	8000d78 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000c2a:	f043 0201 	orr.w	r2, r3, #1
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	695b      	ldr	r3, [r3, #20]
 8000c38:	f003 031f 	and.w	r3, r3, #31
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	401a      	ands	r2, r3
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	69db      	ldr	r3, [r3, #28]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d123      	bne.n	8000ca6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	43db      	mvns	r3, r3
 8000c68:	401a      	ands	r2, r3
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c7c:	683a      	ldr	r2, [r7, #0]
 8000c7e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c80:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	3248      	adds	r2, #72	@ 0x48
 8000c86:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c9a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c9c:	6979      	ldr	r1, [r7, #20]
 8000c9e:	3348      	adds	r3, #72	@ 0x48
 8000ca0:	00db      	lsls	r3, r3, #3
 8000ca2:	440b      	add	r3, r1
 8000ca4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d122      	bne.n	8000cf4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	431a      	orrs	r2, r3
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cca:	683a      	ldr	r2, [r7, #0]
 8000ccc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000cce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	3248      	adds	r2, #72	@ 0x48
 8000cd4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ce8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cea:	6979      	ldr	r1, [r7, #20]
 8000cec:	3348      	adds	r3, #72	@ 0x48
 8000cee:	00db      	lsls	r3, r3, #3
 8000cf0:	440b      	add	r3, r1
 8000cf2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d109      	bne.n	8000d10 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	43db      	mvns	r3, r3
 8000d06:	401a      	ands	r2, r3
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000d0e:	e007      	b.n	8000d20 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	431a      	orrs	r2, r3
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	691b      	ldr	r3, [r3, #16]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d109      	bne.n	8000d3c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	43db      	mvns	r3, r3
 8000d32:	401a      	ands	r2, r3
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000d3a:	e007      	b.n	8000d4c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	431a      	orrs	r2, r3
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	6a1b      	ldr	r3, [r3, #32]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d107      	bne.n	8000d64 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000d6a:	f023 0201 	bic.w	r2, r3, #1
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000d74:	2300      	movs	r3, #0
 8000d76:	e006      	b.n	8000d86 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d7c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
  }
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	371c      	adds	r7, #28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr

08000d90 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d12e      	bne.n	8000e02 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2202      	movs	r2, #2
 8000da8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f022 0201 	bic.w	r2, r2, #1
 8000dba:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000dbc:	f7ff fe1a 	bl	80009f4 <HAL_GetTick>
 8000dc0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000dc2:	e012      	b.n	8000dea <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dc4:	f7ff fe16 	bl	80009f4 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b0a      	cmp	r3, #10
 8000dd0:	d90b      	bls.n	8000dea <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dd6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2205      	movs	r2, #5
 8000de2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e012      	b.n	8000e10 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1e5      	bne.n	8000dc4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e006      	b.n	8000e10 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e06:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
  }
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	@ 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
 8000e24:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e2c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e36:	7ffb      	ldrb	r3, [r7, #31]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d003      	beq.n	8000e44 <HAL_CAN_AddTxMessage+0x2c>
 8000e3c:	7ffb      	ldrb	r3, [r7, #31]
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	f040 80ad 	bne.w	8000f9e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d10a      	bne.n	8000e64 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d105      	bne.n	8000e64 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f000 8095 	beq.w	8000f8e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	0e1b      	lsrs	r3, r3, #24
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000e6e:	2201      	movs	r2, #1
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	409a      	lsls	r2, r3
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d10d      	bne.n	8000e9c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e8a:	68f9      	ldr	r1, [r7, #12]
 8000e8c:	6809      	ldr	r1, [r1, #0]
 8000e8e:	431a      	orrs	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	3318      	adds	r3, #24
 8000e94:	011b      	lsls	r3, r3, #4
 8000e96:	440b      	add	r3, r1
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	e00f      	b.n	8000ebc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ea6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000eac:	68f9      	ldr	r1, [r7, #12]
 8000eae:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000eb0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	3318      	adds	r3, #24
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	440b      	add	r3, r1
 8000eba:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	6819      	ldr	r1, [r3, #0]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	691a      	ldr	r2, [r3, #16]
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	3318      	adds	r3, #24
 8000ec8:	011b      	lsls	r3, r3, #4
 8000eca:	440b      	add	r3, r1
 8000ecc:	3304      	adds	r3, #4
 8000ece:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	7d1b      	ldrb	r3, [r3, #20]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d111      	bne.n	8000efc <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	3318      	adds	r3, #24
 8000ee0:	011b      	lsls	r3, r3, #4
 8000ee2:	4413      	add	r3, r2
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	68fa      	ldr	r2, [r7, #12]
 8000eea:	6811      	ldr	r1, [r2, #0]
 8000eec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	3318      	adds	r3, #24
 8000ef4:	011b      	lsls	r3, r3, #4
 8000ef6:	440b      	add	r3, r1
 8000ef8:	3304      	adds	r3, #4
 8000efa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3307      	adds	r3, #7
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	061a      	lsls	r2, r3, #24
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3306      	adds	r3, #6
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	041b      	lsls	r3, r3, #16
 8000f0c:	431a      	orrs	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3305      	adds	r3, #5
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	021b      	lsls	r3, r3, #8
 8000f16:	4313      	orrs	r3, r2
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	3204      	adds	r2, #4
 8000f1c:	7812      	ldrb	r2, [r2, #0]
 8000f1e:	4610      	mov	r0, r2
 8000f20:	68fa      	ldr	r2, [r7, #12]
 8000f22:	6811      	ldr	r1, [r2, #0]
 8000f24:	ea43 0200 	orr.w	r2, r3, r0
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	011b      	lsls	r3, r3, #4
 8000f2c:	440b      	add	r3, r1
 8000f2e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000f32:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3303      	adds	r3, #3
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	061a      	lsls	r2, r3, #24
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3302      	adds	r3, #2
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	041b      	lsls	r3, r3, #16
 8000f44:	431a      	orrs	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	021b      	lsls	r3, r3, #8
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	7812      	ldrb	r2, [r2, #0]
 8000f54:	4610      	mov	r0, r2
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	6811      	ldr	r1, [r2, #0]
 8000f5a:	ea43 0200 	orr.w	r2, r3, r0
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	011b      	lsls	r3, r3, #4
 8000f62:	440b      	add	r3, r1
 8000f64:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000f68:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	3318      	adds	r3, #24
 8000f72:	011b      	lsls	r3, r3, #4
 8000f74:	4413      	add	r3, r2
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	6811      	ldr	r1, [r2, #0]
 8000f7c:	f043 0201 	orr.w	r2, r3, #1
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	3318      	adds	r3, #24
 8000f84:	011b      	lsls	r3, r3, #4
 8000f86:	440b      	add	r3, r1
 8000f88:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	e00e      	b.n	8000fac <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f92:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e006      	b.n	8000fac <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fa2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
  }
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3724      	adds	r7, #36	@ 0x24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr

08000fb6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b087      	sub	sp, #28
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	60f8      	str	r0, [r7, #12]
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	607a      	str	r2, [r7, #4]
 8000fc2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fca:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fcc:	7dfb      	ldrb	r3, [r7, #23]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d003      	beq.n	8000fda <HAL_CAN_GetRxMessage+0x24>
 8000fd2:	7dfb      	ldrb	r3, [r7, #23]
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	f040 8103 	bne.w	80011e0 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d10e      	bne.n	8000ffe <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d116      	bne.n	800101c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ff2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e0f7      	b.n	80011ee <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	2b00      	cmp	r3, #0
 800100a:	d107      	bne.n	800101c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001010:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e0e8      	b.n	80011ee <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	331b      	adds	r3, #27
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	4413      	add	r3, r2
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0204 	and.w	r2, r3, #4
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d10c      	bne.n	8001054 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	331b      	adds	r3, #27
 8001042:	011b      	lsls	r3, r3, #4
 8001044:	4413      	add	r3, r2
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	0d5b      	lsrs	r3, r3, #21
 800104a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	e00b      	b.n	800106c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	331b      	adds	r3, #27
 800105c:	011b      	lsls	r3, r3, #4
 800105e:	4413      	add	r3, r2
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	08db      	lsrs	r3, r3, #3
 8001064:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	331b      	adds	r3, #27
 8001074:	011b      	lsls	r3, r3, #4
 8001076:	4413      	add	r3, r2
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0202 	and.w	r2, r3, #2
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	331b      	adds	r3, #27
 800108a:	011b      	lsls	r3, r3, #4
 800108c:	4413      	add	r3, r2
 800108e:	3304      	adds	r3, #4
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2208      	movs	r2, #8
 800109e:	611a      	str	r2, [r3, #16]
 80010a0:	e00b      	b.n	80010ba <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	331b      	adds	r3, #27
 80010aa:	011b      	lsls	r3, r3, #4
 80010ac:	4413      	add	r3, r2
 80010ae:	3304      	adds	r3, #4
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 020f 	and.w	r2, r3, #15
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	331b      	adds	r3, #27
 80010c2:	011b      	lsls	r3, r3, #4
 80010c4:	4413      	add	r3, r2
 80010c6:	3304      	adds	r3, #4
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	0a1b      	lsrs	r3, r3, #8
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	331b      	adds	r3, #27
 80010da:	011b      	lsls	r3, r3, #4
 80010dc:	4413      	add	r3, r2
 80010de:	3304      	adds	r3, #4
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	0c1b      	lsrs	r3, r3, #16
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	011b      	lsls	r3, r3, #4
 80010f2:	4413      	add	r3, r2
 80010f4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	011b      	lsls	r3, r3, #4
 8001108:	4413      	add	r3, r2
 800110a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	0a1a      	lsrs	r2, r3, #8
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	3301      	adds	r3, #1
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	011b      	lsls	r3, r3, #4
 8001122:	4413      	add	r3, r2
 8001124:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	0c1a      	lsrs	r2, r3, #16
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	3302      	adds	r3, #2
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	011b      	lsls	r3, r3, #4
 800113c:	4413      	add	r3, r2
 800113e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	0e1a      	lsrs	r2, r3, #24
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	3303      	adds	r3, #3
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	011b      	lsls	r3, r3, #4
 8001156:	4413      	add	r3, r2
 8001158:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	3304      	adds	r3, #4
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	011b      	lsls	r3, r3, #4
 800116e:	4413      	add	r3, r2
 8001170:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	0a1a      	lsrs	r2, r3, #8
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	3305      	adds	r3, #5
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	011b      	lsls	r3, r3, #4
 8001188:	4413      	add	r3, r2
 800118a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	0c1a      	lsrs	r2, r3, #16
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	3306      	adds	r3, #6
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	011b      	lsls	r3, r3, #4
 80011a2:	4413      	add	r3, r2
 80011a4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	0e1a      	lsrs	r2, r3, #24
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	3307      	adds	r3, #7
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d108      	bne.n	80011cc <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	68da      	ldr	r2, [r3, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f042 0220 	orr.w	r2, r2, #32
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	e007      	b.n	80011dc <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	691a      	ldr	r2, [r3, #16]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f042 0220 	orr.w	r2, r2, #32
 80011da:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80011dc:	2300      	movs	r3, #0
 80011de:	e006      	b.n	80011ee <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
  }
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	371c      	adds	r7, #28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr

080011f8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001208:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d002      	beq.n	8001216 <HAL_CAN_ActivateNotification+0x1e>
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	2b02      	cmp	r3, #2
 8001214:	d109      	bne.n	800122a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	6959      	ldr	r1, [r3, #20]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	430a      	orrs	r2, r1
 8001224:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001226:	2300      	movs	r3, #0
 8001228:	e006      	b.n	8001238 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800122e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
  }
}
 8001238:	4618      	mov	r0, r3
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr

08001242 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b08a      	sub	sp, #40	@ 0x28
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800124a:	2300      	movs	r3, #0
 800124c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800127e:	6a3b      	ldr	r3, [r7, #32]
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b00      	cmp	r3, #0
 8001286:	d07c      	beq.n	8001382 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b00      	cmp	r3, #0
 8001290:	d023      	beq.n	80012da <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2201      	movs	r2, #1
 8001298:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 f983 	bl	80015b0 <HAL_CAN_TxMailbox0CompleteCallback>
 80012aa:	e016      	b.n	80012da <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	f003 0304 	and.w	r3, r3, #4
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d004      	beq.n	80012c0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80012b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80012bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80012be:	e00c      	b.n	80012da <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d004      	beq.n	80012d4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80012ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80012d2:	e002      	b.n	80012da <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f000 f986 	bl	80015e6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d024      	beq.n	800132e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012ec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f000 f962 	bl	80015c2 <HAL_CAN_TxMailbox1CompleteCallback>
 80012fe:	e016      	b.n	800132e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001306:	2b00      	cmp	r3, #0
 8001308:	d004      	beq.n	8001314 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800130a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001310:	627b      	str	r3, [r7, #36]	@ 0x24
 8001312:	e00c      	b.n	800132e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800131a:	2b00      	cmp	r3, #0
 800131c:	d004      	beq.n	8001328 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800131e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001320:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001324:	627b      	str	r3, [r7, #36]	@ 0x24
 8001326:	e002      	b.n	800132e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f000 f965 	bl	80015f8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d024      	beq.n	8001382 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001340:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f000 f941 	bl	80015d4 <HAL_CAN_TxMailbox2CompleteCallback>
 8001352:	e016      	b.n	8001382 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d004      	beq.n	8001368 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800135e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001360:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001364:	627b      	str	r3, [r7, #36]	@ 0x24
 8001366:	e00c      	b.n	8001382 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d004      	beq.n	800137c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001378:	627b      	str	r3, [r7, #36]	@ 0x24
 800137a:	e002      	b.n	8001382 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 f944 	bl	800160a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001382:	6a3b      	ldr	r3, [r7, #32]
 8001384:	f003 0308 	and.w	r3, r3, #8
 8001388:	2b00      	cmp	r3, #0
 800138a:	d00c      	beq.n	80013a6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	f003 0310 	and.w	r3, r3, #16
 8001392:	2b00      	cmp	r3, #0
 8001394:	d007      	beq.n	80013a6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001398:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2210      	movs	r2, #16
 80013a4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80013a6:	6a3b      	ldr	r3, [r7, #32]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d00b      	beq.n	80013c8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d006      	beq.n	80013c8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2208      	movs	r2, #8
 80013c0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff f838 	bl	8000438 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80013c8:	6a3b      	ldr	r3, [r7, #32]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d009      	beq.n	80013e6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	f003 0303 	and.w	r3, r3, #3
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d002      	beq.n	80013e6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 f91b 	bl	800161c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80013e6:	6a3b      	ldr	r3, [r7, #32]
 80013e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00c      	beq.n	800140a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	f003 0310 	and.w	r3, r3, #16
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d007      	beq.n	800140a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80013fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001400:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2210      	movs	r2, #16
 8001408:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800140a:	6a3b      	ldr	r3, [r7, #32]
 800140c:	f003 0320 	and.w	r3, r3, #32
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00b      	beq.n	800142c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	2b00      	cmp	r3, #0
 800141c:	d006      	beq.n	800142c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2208      	movs	r2, #8
 8001424:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 f90a 	bl	8001640 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800142c:	6a3b      	ldr	r3, [r7, #32]
 800142e:	f003 0310 	and.w	r3, r3, #16
 8001432:	2b00      	cmp	r3, #0
 8001434:	d009      	beq.n	800144a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	2b00      	cmp	r3, #0
 8001442:	d002      	beq.n	800144a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f000 f8f2 	bl	800162e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800144a:	6a3b      	ldr	r3, [r7, #32]
 800144c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00b      	beq.n	800146c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f003 0310 	and.w	r3, r3, #16
 800145a:	2b00      	cmp	r3, #0
 800145c:	d006      	beq.n	800146c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2210      	movs	r2, #16
 8001464:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 f8f3 	bl	8001652 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800146c:	6a3b      	ldr	r3, [r7, #32]
 800146e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00b      	beq.n	800148e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	f003 0308 	and.w	r3, r3, #8
 800147c:	2b00      	cmp	r3, #0
 800147e:	d006      	beq.n	800148e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2208      	movs	r2, #8
 8001486:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 f8eb 	bl	8001664 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800148e:	6a3b      	ldr	r3, [r7, #32]
 8001490:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d07b      	beq.n	8001590 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d072      	beq.n	8001588 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80014a2:	6a3b      	ldr	r3, [r7, #32]
 80014a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d008      	beq.n	80014be <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80014b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014be:	6a3b      	ldr	r3, [r7, #32]
 80014c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d008      	beq.n	80014da <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80014d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014da:	6a3b      	ldr	r3, [r7, #32]
 80014dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d008      	beq.n	80014f6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80014ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f0:	f043 0304 	orr.w	r3, r3, #4
 80014f4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014f6:	6a3b      	ldr	r3, [r7, #32]
 80014f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d043      	beq.n	8001588 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001506:	2b00      	cmp	r3, #0
 8001508:	d03e      	beq.n	8001588 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001510:	2b60      	cmp	r3, #96	@ 0x60
 8001512:	d02b      	beq.n	800156c <HAL_CAN_IRQHandler+0x32a>
 8001514:	2b60      	cmp	r3, #96	@ 0x60
 8001516:	d82e      	bhi.n	8001576 <HAL_CAN_IRQHandler+0x334>
 8001518:	2b50      	cmp	r3, #80	@ 0x50
 800151a:	d022      	beq.n	8001562 <HAL_CAN_IRQHandler+0x320>
 800151c:	2b50      	cmp	r3, #80	@ 0x50
 800151e:	d82a      	bhi.n	8001576 <HAL_CAN_IRQHandler+0x334>
 8001520:	2b40      	cmp	r3, #64	@ 0x40
 8001522:	d019      	beq.n	8001558 <HAL_CAN_IRQHandler+0x316>
 8001524:	2b40      	cmp	r3, #64	@ 0x40
 8001526:	d826      	bhi.n	8001576 <HAL_CAN_IRQHandler+0x334>
 8001528:	2b30      	cmp	r3, #48	@ 0x30
 800152a:	d010      	beq.n	800154e <HAL_CAN_IRQHandler+0x30c>
 800152c:	2b30      	cmp	r3, #48	@ 0x30
 800152e:	d822      	bhi.n	8001576 <HAL_CAN_IRQHandler+0x334>
 8001530:	2b10      	cmp	r3, #16
 8001532:	d002      	beq.n	800153a <HAL_CAN_IRQHandler+0x2f8>
 8001534:	2b20      	cmp	r3, #32
 8001536:	d005      	beq.n	8001544 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001538:	e01d      	b.n	8001576 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800153a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153c:	f043 0308 	orr.w	r3, r3, #8
 8001540:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001542:	e019      	b.n	8001578 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001546:	f043 0310 	orr.w	r3, r3, #16
 800154a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800154c:	e014      	b.n	8001578 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800154e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001550:	f043 0320 	orr.w	r3, r3, #32
 8001554:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001556:	e00f      	b.n	8001578 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800155e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001560:	e00a      	b.n	8001578 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001564:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001568:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800156a:	e005      	b.n	8001578 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800156c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001572:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001574:	e000      	b.n	8001578 <HAL_CAN_IRQHandler+0x336>
            break;
 8001576:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	699a      	ldr	r2, [r3, #24]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001586:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2204      	movs	r2, #4
 800158e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001592:	2b00      	cmp	r3, #0
 8001594:	d008      	beq.n	80015a8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800159a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159c:	431a      	orrs	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f000 f867 	bl	8001676 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80015a8:	bf00      	nop
 80015aa:	3728      	adds	r7, #40	@ 0x28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr

080015c2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr

080015d4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr

080015e6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr

0800160a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr

0800161c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr

0800162e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr

08001652 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr

08001676 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr

08001688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001698:	4b0c      	ldr	r3, [pc, #48]	@ (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016a4:	4013      	ands	r3, r2
 80016a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ba:	4a04      	ldr	r2, [pc, #16]	@ (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	60d3      	str	r3, [r2, #12]
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d4:	4b04      	ldr	r3, [pc, #16]	@ (80016e8 <__NVIC_GetPriorityGrouping+0x18>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	0a1b      	lsrs	r3, r3, #8
 80016da:	f003 0307 	and.w	r3, r3, #7
}
 80016de:	4618      	mov	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	db0b      	blt.n	8001716 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	f003 021f 	and.w	r2, r3, #31
 8001704:	4906      	ldr	r1, [pc, #24]	@ (8001720 <__NVIC_EnableIRQ+0x34>)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	095b      	lsrs	r3, r3, #5
 800170c:	2001      	movs	r0, #1
 800170e:	fa00 f202 	lsl.w	r2, r0, r2
 8001712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	e000e100 	.word	0xe000e100

08001724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001734:	2b00      	cmp	r3, #0
 8001736:	db0a      	blt.n	800174e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	b2da      	uxtb	r2, r3
 800173c:	490c      	ldr	r1, [pc, #48]	@ (8001770 <__NVIC_SetPriority+0x4c>)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	0112      	lsls	r2, r2, #4
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	440b      	add	r3, r1
 8001748:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800174c:	e00a      	b.n	8001764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4908      	ldr	r1, [pc, #32]	@ (8001774 <__NVIC_SetPriority+0x50>)
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	3b04      	subs	r3, #4
 800175c:	0112      	lsls	r2, r2, #4
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	440b      	add	r3, r1
 8001762:	761a      	strb	r2, [r3, #24]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000e100 	.word	0xe000e100
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001778:	b480      	push	{r7}
 800177a:	b089      	sub	sp, #36	@ 0x24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f1c3 0307 	rsb	r3, r3, #7
 8001792:	2b04      	cmp	r3, #4
 8001794:	bf28      	it	cs
 8001796:	2304      	movcs	r3, #4
 8001798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3304      	adds	r3, #4
 800179e:	2b06      	cmp	r3, #6
 80017a0:	d902      	bls.n	80017a8 <NVIC_EncodePriority+0x30>
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3b03      	subs	r3, #3
 80017a6:	e000      	b.n	80017aa <NVIC_EncodePriority+0x32>
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	f04f 32ff 	mov.w	r2, #4294967295
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43da      	mvns	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	401a      	ands	r2, r3
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c0:	f04f 31ff 	mov.w	r1, #4294967295
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ca:	43d9      	mvns	r1, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	4313      	orrs	r3, r2
         );
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3724      	adds	r7, #36	@ 0x24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017ec:	d301      	bcc.n	80017f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00f      	b.n	8001812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f2:	4a0a      	ldr	r2, [pc, #40]	@ (800181c <SysTick_Config+0x40>)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017fa:	210f      	movs	r1, #15
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	f7ff ff90 	bl	8001724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001804:	4b05      	ldr	r3, [pc, #20]	@ (800181c <SysTick_Config+0x40>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800180a:	4b04      	ldr	r3, [pc, #16]	@ (800181c <SysTick_Config+0x40>)
 800180c:	2207      	movs	r2, #7
 800180e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	e000e010 	.word	0xe000e010

08001820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff ff2d 	bl	8001688 <__NVIC_SetPriorityGrouping>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001836:	b580      	push	{r7, lr}
 8001838:	b086      	sub	sp, #24
 800183a:	af00      	add	r7, sp, #0
 800183c:	4603      	mov	r3, r0
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
 8001842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001848:	f7ff ff42 	bl	80016d0 <__NVIC_GetPriorityGrouping>
 800184c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	6978      	ldr	r0, [r7, #20]
 8001854:	f7ff ff90 	bl	8001778 <NVIC_EncodePriority>
 8001858:	4602      	mov	r2, r0
 800185a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff5f 	bl	8001724 <__NVIC_SetPriority>
}
 8001866:	bf00      	nop
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	4603      	mov	r3, r0
 8001876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff35 	bl	80016ec <__NVIC_EnableIRQ>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ffa2 	bl	80017dc <SysTick_Config>
 8001898:	4603      	mov	r3, r0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80018a6:	f000 f802 	bl	80018ae <HAL_SYSTICK_Callback>
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr
	...

080018bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018bc:	b480      	push	{r7}
 80018be:	b08b      	sub	sp, #44	@ 0x2c
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ce:	e169      	b.n	8001ba4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018d0:	2201      	movs	r2, #1
 80018d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	69fa      	ldr	r2, [r7, #28]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	f040 8158 	bne.w	8001b9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	4a9a      	ldr	r2, [pc, #616]	@ (8001b5c <HAL_GPIO_Init+0x2a0>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d05e      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 80018f8:	4a98      	ldr	r2, [pc, #608]	@ (8001b5c <HAL_GPIO_Init+0x2a0>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d875      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 80018fe:	4a98      	ldr	r2, [pc, #608]	@ (8001b60 <HAL_GPIO_Init+0x2a4>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d058      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 8001904:	4a96      	ldr	r2, [pc, #600]	@ (8001b60 <HAL_GPIO_Init+0x2a4>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d86f      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 800190a:	4a96      	ldr	r2, [pc, #600]	@ (8001b64 <HAL_GPIO_Init+0x2a8>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d052      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 8001910:	4a94      	ldr	r2, [pc, #592]	@ (8001b64 <HAL_GPIO_Init+0x2a8>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d869      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 8001916:	4a94      	ldr	r2, [pc, #592]	@ (8001b68 <HAL_GPIO_Init+0x2ac>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d04c      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 800191c:	4a92      	ldr	r2, [pc, #584]	@ (8001b68 <HAL_GPIO_Init+0x2ac>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d863      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 8001922:	4a92      	ldr	r2, [pc, #584]	@ (8001b6c <HAL_GPIO_Init+0x2b0>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d046      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 8001928:	4a90      	ldr	r2, [pc, #576]	@ (8001b6c <HAL_GPIO_Init+0x2b0>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d85d      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 800192e:	2b12      	cmp	r3, #18
 8001930:	d82a      	bhi.n	8001988 <HAL_GPIO_Init+0xcc>
 8001932:	2b12      	cmp	r3, #18
 8001934:	d859      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 8001936:	a201      	add	r2, pc, #4	@ (adr r2, 800193c <HAL_GPIO_Init+0x80>)
 8001938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193c:	080019b7 	.word	0x080019b7
 8001940:	08001991 	.word	0x08001991
 8001944:	080019a3 	.word	0x080019a3
 8001948:	080019e5 	.word	0x080019e5
 800194c:	080019eb 	.word	0x080019eb
 8001950:	080019eb 	.word	0x080019eb
 8001954:	080019eb 	.word	0x080019eb
 8001958:	080019eb 	.word	0x080019eb
 800195c:	080019eb 	.word	0x080019eb
 8001960:	080019eb 	.word	0x080019eb
 8001964:	080019eb 	.word	0x080019eb
 8001968:	080019eb 	.word	0x080019eb
 800196c:	080019eb 	.word	0x080019eb
 8001970:	080019eb 	.word	0x080019eb
 8001974:	080019eb 	.word	0x080019eb
 8001978:	080019eb 	.word	0x080019eb
 800197c:	080019eb 	.word	0x080019eb
 8001980:	08001999 	.word	0x08001999
 8001984:	080019ad 	.word	0x080019ad
 8001988:	4a79      	ldr	r2, [pc, #484]	@ (8001b70 <HAL_GPIO_Init+0x2b4>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d013      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800198e:	e02c      	b.n	80019ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	623b      	str	r3, [r7, #32]
          break;
 8001996:	e029      	b.n	80019ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	3304      	adds	r3, #4
 800199e:	623b      	str	r3, [r7, #32]
          break;
 80019a0:	e024      	b.n	80019ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	3308      	adds	r3, #8
 80019a8:	623b      	str	r3, [r7, #32]
          break;
 80019aa:	e01f      	b.n	80019ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	330c      	adds	r3, #12
 80019b2:	623b      	str	r3, [r7, #32]
          break;
 80019b4:	e01a      	b.n	80019ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d102      	bne.n	80019c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019be:	2304      	movs	r3, #4
 80019c0:	623b      	str	r3, [r7, #32]
          break;
 80019c2:	e013      	b.n	80019ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d105      	bne.n	80019d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019cc:	2308      	movs	r3, #8
 80019ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69fa      	ldr	r2, [r7, #28]
 80019d4:	611a      	str	r2, [r3, #16]
          break;
 80019d6:	e009      	b.n	80019ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019d8:	2308      	movs	r3, #8
 80019da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	615a      	str	r2, [r3, #20]
          break;
 80019e2:	e003      	b.n	80019ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019e4:	2300      	movs	r3, #0
 80019e6:	623b      	str	r3, [r7, #32]
          break;
 80019e8:	e000      	b.n	80019ec <HAL_GPIO_Init+0x130>
          break;
 80019ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	2bff      	cmp	r3, #255	@ 0xff
 80019f0:	d801      	bhi.n	80019f6 <HAL_GPIO_Init+0x13a>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	e001      	b.n	80019fa <HAL_GPIO_Init+0x13e>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3304      	adds	r3, #4
 80019fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	2bff      	cmp	r3, #255	@ 0xff
 8001a00:	d802      	bhi.n	8001a08 <HAL_GPIO_Init+0x14c>
 8001a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	e002      	b.n	8001a0e <HAL_GPIO_Init+0x152>
 8001a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0a:	3b08      	subs	r3, #8
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	210f      	movs	r1, #15
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	401a      	ands	r2, r3
 8001a20:	6a39      	ldr	r1, [r7, #32]
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 80b1 	beq.w	8001b9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a3c:	4b4d      	ldr	r3, [pc, #308]	@ (8001b74 <HAL_GPIO_Init+0x2b8>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	4a4c      	ldr	r2, [pc, #304]	@ (8001b74 <HAL_GPIO_Init+0x2b8>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	6193      	str	r3, [r2, #24]
 8001a48:	4b4a      	ldr	r3, [pc, #296]	@ (8001b74 <HAL_GPIO_Init+0x2b8>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a54:	4a48      	ldr	r2, [pc, #288]	@ (8001b78 <HAL_GPIO_Init+0x2bc>)
 8001a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a58:	089b      	lsrs	r3, r3, #2
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	220f      	movs	r2, #15
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	4013      	ands	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a40      	ldr	r2, [pc, #256]	@ (8001b7c <HAL_GPIO_Init+0x2c0>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d013      	beq.n	8001aa8 <HAL_GPIO_Init+0x1ec>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a3f      	ldr	r2, [pc, #252]	@ (8001b80 <HAL_GPIO_Init+0x2c4>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d00d      	beq.n	8001aa4 <HAL_GPIO_Init+0x1e8>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a3e      	ldr	r2, [pc, #248]	@ (8001b84 <HAL_GPIO_Init+0x2c8>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d007      	beq.n	8001aa0 <HAL_GPIO_Init+0x1e4>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a3d      	ldr	r2, [pc, #244]	@ (8001b88 <HAL_GPIO_Init+0x2cc>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d101      	bne.n	8001a9c <HAL_GPIO_Init+0x1e0>
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e006      	b.n	8001aaa <HAL_GPIO_Init+0x1ee>
 8001a9c:	2304      	movs	r3, #4
 8001a9e:	e004      	b.n	8001aaa <HAL_GPIO_Init+0x1ee>
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e002      	b.n	8001aaa <HAL_GPIO_Init+0x1ee>
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e000      	b.n	8001aaa <HAL_GPIO_Init+0x1ee>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aac:	f002 0203 	and.w	r2, r2, #3
 8001ab0:	0092      	lsls	r2, r2, #2
 8001ab2:	4093      	lsls	r3, r2
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001aba:	492f      	ldr	r1, [pc, #188]	@ (8001b78 <HAL_GPIO_Init+0x2bc>)
 8001abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abe:	089b      	lsrs	r3, r3, #2
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d006      	beq.n	8001ae2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ad4:	4b2d      	ldr	r3, [pc, #180]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	492c      	ldr	r1, [pc, #176]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	608b      	str	r3, [r1, #8]
 8001ae0:	e006      	b.n	8001af0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ae2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	4928      	ldr	r1, [pc, #160]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d006      	beq.n	8001b0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001afc:	4b23      	ldr	r3, [pc, #140]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001afe:	68da      	ldr	r2, [r3, #12]
 8001b00:	4922      	ldr	r1, [pc, #136]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	60cb      	str	r3, [r1, #12]
 8001b08:	e006      	b.n	8001b18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b0a:	4b20      	ldr	r3, [pc, #128]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	491e      	ldr	r1, [pc, #120]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d006      	beq.n	8001b32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b24:	4b19      	ldr	r3, [pc, #100]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	4918      	ldr	r1, [pc, #96]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]
 8001b30:	e006      	b.n	8001b40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b32:	4b16      	ldr	r3, [pc, #88]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	4914      	ldr	r1, [pc, #80]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d021      	beq.n	8001b90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	490e      	ldr	r1, [pc, #56]	@ (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	600b      	str	r3, [r1, #0]
 8001b58:	e021      	b.n	8001b9e <HAL_GPIO_Init+0x2e2>
 8001b5a:	bf00      	nop
 8001b5c:	10320000 	.word	0x10320000
 8001b60:	10310000 	.word	0x10310000
 8001b64:	10220000 	.word	0x10220000
 8001b68:	10210000 	.word	0x10210000
 8001b6c:	10120000 	.word	0x10120000
 8001b70:	10110000 	.word	0x10110000
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40010000 	.word	0x40010000
 8001b7c:	40010800 	.word	0x40010800
 8001b80:	40010c00 	.word	0x40010c00
 8001b84:	40011000 	.word	0x40011000
 8001b88:	40011400 	.word	0x40011400
 8001b8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b90:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc0 <HAL_GPIO_Init+0x304>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	4909      	ldr	r1, [pc, #36]	@ (8001bc0 <HAL_GPIO_Init+0x304>)
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001baa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f47f ae8e 	bne.w	80018d0 <HAL_GPIO_Init+0x14>
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
 8001bb8:	372c      	adds	r7, #44	@ 0x2c
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr
 8001bc0:	40010400 	.word	0x40010400

08001bc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	807b      	strh	r3, [r7, #2]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bd4:	787b      	ldrb	r3, [r7, #1]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bda:	887a      	ldrh	r2, [r7, #2]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001be0:	e003      	b.n	8001bea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001be2:	887b      	ldrh	r3, [r7, #2]
 8001be4:	041a      	lsls	r2, r3, #16
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	611a      	str	r2, [r3, #16]
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bfe:	4b08      	ldr	r3, [pc, #32]	@ (8001c20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c00:	695a      	ldr	r2, [r3, #20]
 8001c02:	88fb      	ldrh	r3, [r7, #6]
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d006      	beq.n	8001c18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c0a:	4a05      	ldr	r2, [pc, #20]	@ (8001c20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c10:	88fb      	ldrh	r3, [r7, #6]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 f806 	bl	8001c24 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40010400 	.word	0x40010400

08001c24 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e272      	b.n	8002130 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 8087 	beq.w	8001d66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c58:	4b92      	ldr	r3, [pc, #584]	@ (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 030c 	and.w	r3, r3, #12
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	d00c      	beq.n	8001c7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c64:	4b8f      	ldr	r3, [pc, #572]	@ (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 030c 	and.w	r3, r3, #12
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d112      	bne.n	8001c96 <HAL_RCC_OscConfig+0x5e>
 8001c70:	4b8c      	ldr	r3, [pc, #560]	@ (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c7c:	d10b      	bne.n	8001c96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c7e:	4b89      	ldr	r3, [pc, #548]	@ (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d06c      	beq.n	8001d64 <HAL_RCC_OscConfig+0x12c>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d168      	bne.n	8001d64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e24c      	b.n	8002130 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c9e:	d106      	bne.n	8001cae <HAL_RCC_OscConfig+0x76>
 8001ca0:	4b80      	ldr	r3, [pc, #512]	@ (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a7f      	ldr	r2, [pc, #508]	@ (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	e02e      	b.n	8001d0c <HAL_RCC_OscConfig+0xd4>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x98>
 8001cb6:	4b7b      	ldr	r3, [pc, #492]	@ (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a7a      	ldr	r2, [pc, #488]	@ (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	4b78      	ldr	r3, [pc, #480]	@ (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a77      	ldr	r2, [pc, #476]	@ (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	e01d      	b.n	8001d0c <HAL_RCC_OscConfig+0xd4>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cd8:	d10c      	bne.n	8001cf4 <HAL_RCC_OscConfig+0xbc>
 8001cda:	4b72      	ldr	r3, [pc, #456]	@ (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a71      	ldr	r2, [pc, #452]	@ (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	4b6f      	ldr	r3, [pc, #444]	@ (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a6e      	ldr	r2, [pc, #440]	@ (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	e00b      	b.n	8001d0c <HAL_RCC_OscConfig+0xd4>
 8001cf4:	4b6b      	ldr	r3, [pc, #428]	@ (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a6a      	ldr	r2, [pc, #424]	@ (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001cfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	4b68      	ldr	r3, [pc, #416]	@ (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a67      	ldr	r2, [pc, #412]	@ (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001d06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d013      	beq.n	8001d3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d14:	f7fe fe6e 	bl	80009f4 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d1c:	f7fe fe6a 	bl	80009f4 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b64      	cmp	r3, #100	@ 0x64
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e200      	b.n	8002130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f0      	beq.n	8001d1c <HAL_RCC_OscConfig+0xe4>
 8001d3a:	e014      	b.n	8001d66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3c:	f7fe fe5a 	bl	80009f4 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d44:	f7fe fe56 	bl	80009f4 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b64      	cmp	r3, #100	@ 0x64
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e1ec      	b.n	8002130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d56:	4b53      	ldr	r3, [pc, #332]	@ (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_OscConfig+0x10c>
 8001d62:	e000      	b.n	8001d66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d063      	beq.n	8001e3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d72:	4b4c      	ldr	r3, [pc, #304]	@ (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 030c 	and.w	r3, r3, #12
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00b      	beq.n	8001d96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d7e:	4b49      	ldr	r3, [pc, #292]	@ (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 030c 	and.w	r3, r3, #12
 8001d86:	2b08      	cmp	r3, #8
 8001d88:	d11c      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x18c>
 8001d8a:	4b46      	ldr	r3, [pc, #280]	@ (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d116      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d96:	4b43      	ldr	r3, [pc, #268]	@ (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d005      	beq.n	8001dae <HAL_RCC_OscConfig+0x176>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d001      	beq.n	8001dae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e1c0      	b.n	8002130 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dae:	4b3d      	ldr	r3, [pc, #244]	@ (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	4939      	ldr	r1, [pc, #228]	@ (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc2:	e03a      	b.n	8001e3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d020      	beq.n	8001e0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dcc:	4b36      	ldr	r3, [pc, #216]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd2:	f7fe fe0f 	bl	80009f4 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dda:	f7fe fe0b 	bl	80009f4 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e1a1      	b.n	8002130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dec:	4b2d      	ldr	r3, [pc, #180]	@ (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0f0      	beq.n	8001dda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df8:	4b2a      	ldr	r3, [pc, #168]	@ (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	4927      	ldr	r1, [pc, #156]	@ (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	600b      	str	r3, [r1, #0]
 8001e0c:	e015      	b.n	8001e3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e0e:	4b26      	ldr	r3, [pc, #152]	@ (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e14:	f7fe fdee 	bl	80009f4 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e1c:	f7fe fdea 	bl	80009f4 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e180      	b.n	8002130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d03a      	beq.n	8001ebc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d019      	beq.n	8001e82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e4e:	4b17      	ldr	r3, [pc, #92]	@ (8001eac <HAL_RCC_OscConfig+0x274>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e54:	f7fe fdce 	bl	80009f4 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e5c:	f7fe fdca 	bl	80009f4 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e160      	b.n	8002130 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	f000 fa9c 	bl	80023b8 <RCC_Delay>
 8001e80:	e01c      	b.n	8001ebc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e82:	4b0a      	ldr	r3, [pc, #40]	@ (8001eac <HAL_RCC_OscConfig+0x274>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e88:	f7fe fdb4 	bl	80009f4 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e8e:	e00f      	b.n	8001eb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e90:	f7fe fdb0 	bl	80009f4 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d908      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e146      	b.n	8002130 <HAL_RCC_OscConfig+0x4f8>
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	42420000 	.word	0x42420000
 8001eac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb0:	4b92      	ldr	r3, [pc, #584]	@ (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1e9      	bne.n	8001e90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 80a6 	beq.w	8002016 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ece:	4b8b      	ldr	r3, [pc, #556]	@ (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10d      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eda:	4b88      	ldr	r3, [pc, #544]	@ (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	4a87      	ldr	r2, [pc, #540]	@ (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001ee0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ee4:	61d3      	str	r3, [r2, #28]
 8001ee6:	4b85      	ldr	r3, [pc, #532]	@ (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef6:	4b82      	ldr	r3, [pc, #520]	@ (8002100 <HAL_RCC_OscConfig+0x4c8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d118      	bne.n	8001f34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f02:	4b7f      	ldr	r3, [pc, #508]	@ (8002100 <HAL_RCC_OscConfig+0x4c8>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a7e      	ldr	r2, [pc, #504]	@ (8002100 <HAL_RCC_OscConfig+0x4c8>)
 8001f08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f0e:	f7fe fd71 	bl	80009f4 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f16:	f7fe fd6d 	bl	80009f4 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b64      	cmp	r3, #100	@ 0x64
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e103      	b.n	8002130 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f28:	4b75      	ldr	r3, [pc, #468]	@ (8002100 <HAL_RCC_OscConfig+0x4c8>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0f0      	beq.n	8001f16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d106      	bne.n	8001f4a <HAL_RCC_OscConfig+0x312>
 8001f3c:	4b6f      	ldr	r3, [pc, #444]	@ (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	4a6e      	ldr	r2, [pc, #440]	@ (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	6213      	str	r3, [r2, #32]
 8001f48:	e02d      	b.n	8001fa6 <HAL_RCC_OscConfig+0x36e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10c      	bne.n	8001f6c <HAL_RCC_OscConfig+0x334>
 8001f52:	4b6a      	ldr	r3, [pc, #424]	@ (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	4a69      	ldr	r2, [pc, #420]	@ (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001f58:	f023 0301 	bic.w	r3, r3, #1
 8001f5c:	6213      	str	r3, [r2, #32]
 8001f5e:	4b67      	ldr	r3, [pc, #412]	@ (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	4a66      	ldr	r2, [pc, #408]	@ (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001f64:	f023 0304 	bic.w	r3, r3, #4
 8001f68:	6213      	str	r3, [r2, #32]
 8001f6a:	e01c      	b.n	8001fa6 <HAL_RCC_OscConfig+0x36e>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	2b05      	cmp	r3, #5
 8001f72:	d10c      	bne.n	8001f8e <HAL_RCC_OscConfig+0x356>
 8001f74:	4b61      	ldr	r3, [pc, #388]	@ (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	4a60      	ldr	r2, [pc, #384]	@ (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001f7a:	f043 0304 	orr.w	r3, r3, #4
 8001f7e:	6213      	str	r3, [r2, #32]
 8001f80:	4b5e      	ldr	r3, [pc, #376]	@ (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	4a5d      	ldr	r2, [pc, #372]	@ (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6213      	str	r3, [r2, #32]
 8001f8c:	e00b      	b.n	8001fa6 <HAL_RCC_OscConfig+0x36e>
 8001f8e:	4b5b      	ldr	r3, [pc, #364]	@ (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	4a5a      	ldr	r2, [pc, #360]	@ (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001f94:	f023 0301 	bic.w	r3, r3, #1
 8001f98:	6213      	str	r3, [r2, #32]
 8001f9a:	4b58      	ldr	r3, [pc, #352]	@ (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	4a57      	ldr	r2, [pc, #348]	@ (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001fa0:	f023 0304 	bic.w	r3, r3, #4
 8001fa4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d015      	beq.n	8001fda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fae:	f7fe fd21 	bl	80009f4 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb4:	e00a      	b.n	8001fcc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb6:	f7fe fd1d 	bl	80009f4 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e0b1      	b.n	8002130 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fcc:	4b4b      	ldr	r3, [pc, #300]	@ (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0ee      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x37e>
 8001fd8:	e014      	b.n	8002004 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fda:	f7fe fd0b 	bl	80009f4 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe0:	e00a      	b.n	8001ff8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe2:	f7fe fd07 	bl	80009f4 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e09b      	b.n	8002130 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff8:	4b40      	ldr	r3, [pc, #256]	@ (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1ee      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002004:	7dfb      	ldrb	r3, [r7, #23]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d105      	bne.n	8002016 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800200a:	4b3c      	ldr	r3, [pc, #240]	@ (80020fc <HAL_RCC_OscConfig+0x4c4>)
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	4a3b      	ldr	r2, [pc, #236]	@ (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8002010:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002014:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 8087 	beq.w	800212e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002020:	4b36      	ldr	r3, [pc, #216]	@ (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 030c 	and.w	r3, r3, #12
 8002028:	2b08      	cmp	r3, #8
 800202a:	d061      	beq.n	80020f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d146      	bne.n	80020c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002034:	4b33      	ldr	r3, [pc, #204]	@ (8002104 <HAL_RCC_OscConfig+0x4cc>)
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203a:	f7fe fcdb 	bl	80009f4 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002042:	f7fe fcd7 	bl	80009f4 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e06d      	b.n	8002130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002054:	4b29      	ldr	r3, [pc, #164]	@ (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1f0      	bne.n	8002042 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002068:	d108      	bne.n	800207c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800206a:	4b24      	ldr	r3, [pc, #144]	@ (80020fc <HAL_RCC_OscConfig+0x4c4>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	4921      	ldr	r1, [pc, #132]	@ (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8002078:	4313      	orrs	r3, r2
 800207a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800207c:	4b1f      	ldr	r3, [pc, #124]	@ (80020fc <HAL_RCC_OscConfig+0x4c4>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a19      	ldr	r1, [r3, #32]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208c:	430b      	orrs	r3, r1
 800208e:	491b      	ldr	r1, [pc, #108]	@ (80020fc <HAL_RCC_OscConfig+0x4c4>)
 8002090:	4313      	orrs	r3, r2
 8002092:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002094:	4b1b      	ldr	r3, [pc, #108]	@ (8002104 <HAL_RCC_OscConfig+0x4cc>)
 8002096:	2201      	movs	r2, #1
 8002098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209a:	f7fe fcab 	bl	80009f4 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a2:	f7fe fca7 	bl	80009f4 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e03d      	b.n	8002130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020b4:	4b11      	ldr	r3, [pc, #68]	@ (80020fc <HAL_RCC_OscConfig+0x4c4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0f0      	beq.n	80020a2 <HAL_RCC_OscConfig+0x46a>
 80020c0:	e035      	b.n	800212e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c2:	4b10      	ldr	r3, [pc, #64]	@ (8002104 <HAL_RCC_OscConfig+0x4cc>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c8:	f7fe fc94 	bl	80009f4 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d0:	f7fe fc90 	bl	80009f4 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e026      	b.n	8002130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e2:	4b06      	ldr	r3, [pc, #24]	@ (80020fc <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x498>
 80020ee:	e01e      	b.n	800212e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d107      	bne.n	8002108 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e019      	b.n	8002130 <HAL_RCC_OscConfig+0x4f8>
 80020fc:	40021000 	.word	0x40021000
 8002100:	40007000 	.word	0x40007000
 8002104:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002108:	4b0b      	ldr	r3, [pc, #44]	@ (8002138 <HAL_RCC_OscConfig+0x500>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	429a      	cmp	r2, r3
 800211a:	d106      	bne.n	800212a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002126:	429a      	cmp	r2, r3
 8002128:	d001      	beq.n	800212e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40021000 	.word	0x40021000

0800213c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0d0      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002150:	4b6a      	ldr	r3, [pc, #424]	@ (80022fc <HAL_RCC_ClockConfig+0x1c0>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d910      	bls.n	8002180 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215e:	4b67      	ldr	r3, [pc, #412]	@ (80022fc <HAL_RCC_ClockConfig+0x1c0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f023 0207 	bic.w	r2, r3, #7
 8002166:	4965      	ldr	r1, [pc, #404]	@ (80022fc <HAL_RCC_ClockConfig+0x1c0>)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	4313      	orrs	r3, r2
 800216c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800216e:	4b63      	ldr	r3, [pc, #396]	@ (80022fc <HAL_RCC_ClockConfig+0x1c0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d001      	beq.n	8002180 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0b8      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d020      	beq.n	80021ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	d005      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002198:	4b59      	ldr	r3, [pc, #356]	@ (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	4a58      	ldr	r2, [pc, #352]	@ (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 800219e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80021a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d005      	beq.n	80021bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021b0:	4b53      	ldr	r3, [pc, #332]	@ (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	4a52      	ldr	r2, [pc, #328]	@ (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 80021b6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80021ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021bc:	4b50      	ldr	r3, [pc, #320]	@ (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	494d      	ldr	r1, [pc, #308]	@ (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d040      	beq.n	800225c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d107      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e2:	4b47      	ldr	r3, [pc, #284]	@ (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d115      	bne.n	800221a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e07f      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d107      	bne.n	800220a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021fa:	4b41      	ldr	r3, [pc, #260]	@ (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d109      	bne.n	800221a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e073      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220a:	4b3d      	ldr	r3, [pc, #244]	@ (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e06b      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800221a:	4b39      	ldr	r3, [pc, #228]	@ (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f023 0203 	bic.w	r2, r3, #3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	4936      	ldr	r1, [pc, #216]	@ (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 8002228:	4313      	orrs	r3, r2
 800222a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800222c:	f7fe fbe2 	bl	80009f4 <HAL_GetTick>
 8002230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002232:	e00a      	b.n	800224a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002234:	f7fe fbde 	bl	80009f4 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e053      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224a:	4b2d      	ldr	r3, [pc, #180]	@ (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f003 020c 	and.w	r2, r3, #12
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	429a      	cmp	r2, r3
 800225a:	d1eb      	bne.n	8002234 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800225c:	4b27      	ldr	r3, [pc, #156]	@ (80022fc <HAL_RCC_ClockConfig+0x1c0>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d210      	bcs.n	800228c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226a:	4b24      	ldr	r3, [pc, #144]	@ (80022fc <HAL_RCC_ClockConfig+0x1c0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 0207 	bic.w	r2, r3, #7
 8002272:	4922      	ldr	r1, [pc, #136]	@ (80022fc <HAL_RCC_ClockConfig+0x1c0>)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	4313      	orrs	r3, r2
 8002278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227a:	4b20      	ldr	r3, [pc, #128]	@ (80022fc <HAL_RCC_ClockConfig+0x1c0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d001      	beq.n	800228c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e032      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	d008      	beq.n	80022aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002298:	4b19      	ldr	r3, [pc, #100]	@ (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	4916      	ldr	r1, [pc, #88]	@ (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d009      	beq.n	80022ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022b6:	4b12      	ldr	r3, [pc, #72]	@ (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	490e      	ldr	r1, [pc, #56]	@ (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022ca:	f000 f821 	bl	8002310 <HAL_RCC_GetSysClockFreq>
 80022ce:	4602      	mov	r2, r0
 80022d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	091b      	lsrs	r3, r3, #4
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	490a      	ldr	r1, [pc, #40]	@ (8002304 <HAL_RCC_ClockConfig+0x1c8>)
 80022dc:	5ccb      	ldrb	r3, [r1, r3]
 80022de:	fa22 f303 	lsr.w	r3, r2, r3
 80022e2:	4a09      	ldr	r2, [pc, #36]	@ (8002308 <HAL_RCC_ClockConfig+0x1cc>)
 80022e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022e6:	4b09      	ldr	r3, [pc, #36]	@ (800230c <HAL_RCC_ClockConfig+0x1d0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe fb40 	bl	8000970 <HAL_InitTick>

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40022000 	.word	0x40022000
 8002300:	40021000 	.word	0x40021000
 8002304:	08003700 	.word	0x08003700
 8002308:	20000000 	.word	0x20000000
 800230c:	20000004 	.word	0x20000004

08002310 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002310:	b480      	push	{r7}
 8002312:	b087      	sub	sp, #28
 8002314:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	2300      	movs	r3, #0
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
 8002322:	2300      	movs	r3, #0
 8002324:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002326:	2300      	movs	r3, #0
 8002328:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800232a:	4b1e      	ldr	r3, [pc, #120]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 030c 	and.w	r3, r3, #12
 8002336:	2b04      	cmp	r3, #4
 8002338:	d002      	beq.n	8002340 <HAL_RCC_GetSysClockFreq+0x30>
 800233a:	2b08      	cmp	r3, #8
 800233c:	d003      	beq.n	8002346 <HAL_RCC_GetSysClockFreq+0x36>
 800233e:	e027      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002340:	4b19      	ldr	r3, [pc, #100]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002342:	613b      	str	r3, [r7, #16]
      break;
 8002344:	e027      	b.n	8002396 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	0c9b      	lsrs	r3, r3, #18
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	4a17      	ldr	r2, [pc, #92]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8002350:	5cd3      	ldrb	r3, [r2, r3]
 8002352:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d010      	beq.n	8002380 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800235e:	4b11      	ldr	r3, [pc, #68]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	0c5b      	lsrs	r3, r3, #17
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	4a11      	ldr	r2, [pc, #68]	@ (80023b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800236a:	5cd3      	ldrb	r3, [r2, r3]
 800236c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a0d      	ldr	r2, [pc, #52]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002372:	fb03 f202 	mul.w	r2, r3, r2
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	fbb2 f3f3 	udiv	r3, r2, r3
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	e004      	b.n	800238a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a0c      	ldr	r2, [pc, #48]	@ (80023b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002384:	fb02 f303 	mul.w	r3, r2, r3
 8002388:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	613b      	str	r3, [r7, #16]
      break;
 800238e:	e002      	b.n	8002396 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002390:	4b05      	ldr	r3, [pc, #20]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002392:	613b      	str	r3, [r7, #16]
      break;
 8002394:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002396:	693b      	ldr	r3, [r7, #16]
}
 8002398:	4618      	mov	r0, r3
 800239a:	371c      	adds	r7, #28
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	40021000 	.word	0x40021000
 80023a8:	007a1200 	.word	0x007a1200
 80023ac:	08003710 	.word	0x08003710
 80023b0:	08003720 	.word	0x08003720
 80023b4:	003d0900 	.word	0x003d0900

080023b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023c0:	4b0a      	ldr	r3, [pc, #40]	@ (80023ec <RCC_Delay+0x34>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a0a      	ldr	r2, [pc, #40]	@ (80023f0 <RCC_Delay+0x38>)
 80023c6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ca:	0a5b      	lsrs	r3, r3, #9
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	fb02 f303 	mul.w	r3, r2, r3
 80023d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023d4:	bf00      	nop
  }
  while (Delay --);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1e5a      	subs	r2, r3, #1
 80023da:	60fa      	str	r2, [r7, #12]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f9      	bne.n	80023d4 <RCC_Delay+0x1c>
}
 80023e0:	bf00      	nop
 80023e2:	bf00      	nop
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr
 80023ec:	20000000 	.word	0x20000000
 80023f0:	10624dd3 	.word	0x10624dd3

080023f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e041      	b.n	800248a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d106      	bne.n	8002420 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7fe f94e 	bl	80006bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2202      	movs	r2, #2
 8002424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3304      	adds	r3, #4
 8002430:	4619      	mov	r1, r3
 8002432:	4610      	mov	r0, r2
 8002434:	f000 f994 	bl	8002760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d001      	beq.n	80024ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e03a      	b.n	8002522 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2202      	movs	r2, #2
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0201 	orr.w	r2, r2, #1
 80024c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a18      	ldr	r2, [pc, #96]	@ (800252c <HAL_TIM_Base_Start_IT+0x98>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d00e      	beq.n	80024ec <HAL_TIM_Base_Start_IT+0x58>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024d6:	d009      	beq.n	80024ec <HAL_TIM_Base_Start_IT+0x58>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a14      	ldr	r2, [pc, #80]	@ (8002530 <HAL_TIM_Base_Start_IT+0x9c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d004      	beq.n	80024ec <HAL_TIM_Base_Start_IT+0x58>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a13      	ldr	r2, [pc, #76]	@ (8002534 <HAL_TIM_Base_Start_IT+0xa0>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d111      	bne.n	8002510 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2b06      	cmp	r3, #6
 80024fc:	d010      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f042 0201 	orr.w	r2, r2, #1
 800250c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800250e:	e007      	b.n	8002520 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr
 800252c:	40012c00 	.word	0x40012c00
 8002530:	40000400 	.word	0x40000400
 8002534:	40000800 	.word	0x40000800

08002538 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d020      	beq.n	800259c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d01b      	beq.n	800259c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f06f 0202 	mvn.w	r2, #2
 800256c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2201      	movs	r2, #1
 8002572:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f8d1 	bl	800272a <HAL_TIM_IC_CaptureCallback>
 8002588:	e005      	b.n	8002596 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f8c4 	bl	8002718 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 f8d3 	bl	800273c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d020      	beq.n	80025e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d01b      	beq.n	80025e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f06f 0204 	mvn.w	r2, #4
 80025b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2202      	movs	r2, #2
 80025be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f8ab 	bl	800272a <HAL_TIM_IC_CaptureCallback>
 80025d4:	e005      	b.n	80025e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f89e 	bl	8002718 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f8ad 	bl	800273c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d020      	beq.n	8002634 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f003 0308 	and.w	r3, r3, #8
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d01b      	beq.n	8002634 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f06f 0208 	mvn.w	r2, #8
 8002604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2204      	movs	r2, #4
 800260a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f885 	bl	800272a <HAL_TIM_IC_CaptureCallback>
 8002620:	e005      	b.n	800262e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f878 	bl	8002718 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f887 	bl	800273c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	f003 0310 	and.w	r3, r3, #16
 800263a:	2b00      	cmp	r3, #0
 800263c:	d020      	beq.n	8002680 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f003 0310 	and.w	r3, r3, #16
 8002644:	2b00      	cmp	r3, #0
 8002646:	d01b      	beq.n	8002680 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f06f 0210 	mvn.w	r2, #16
 8002650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2208      	movs	r2, #8
 8002656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f85f 	bl	800272a <HAL_TIM_IC_CaptureCallback>
 800266c:	e005      	b.n	800267a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f852 	bl	8002718 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f861 	bl	800273c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00c      	beq.n	80026a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	d007      	beq.n	80026a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0201 	mvn.w	r2, #1
 800269c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7fd ff2e 	bl	8000500 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00c      	beq.n	80026c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d007      	beq.n	80026c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80026c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f8c3 	bl	800284e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00c      	beq.n	80026ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d007      	beq.n	80026ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80026e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f831 	bl	800274e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	f003 0320 	and.w	r3, r3, #32
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00c      	beq.n	8002710 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f003 0320 	and.w	r3, r3, #32
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d007      	beq.n	8002710 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f06f 0220 	mvn.w	r2, #32
 8002708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f896 	bl	800283c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002710:	bf00      	nop
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr

0800272a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr

0800273c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr

0800274e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800274e:	b480      	push	{r7}
 8002750:	b083      	sub	sp, #12
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr

08002760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a2f      	ldr	r2, [pc, #188]	@ (8002830 <TIM_Base_SetConfig+0xd0>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d00b      	beq.n	8002790 <TIM_Base_SetConfig+0x30>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800277e:	d007      	beq.n	8002790 <TIM_Base_SetConfig+0x30>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a2c      	ldr	r2, [pc, #176]	@ (8002834 <TIM_Base_SetConfig+0xd4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d003      	beq.n	8002790 <TIM_Base_SetConfig+0x30>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a2b      	ldr	r2, [pc, #172]	@ (8002838 <TIM_Base_SetConfig+0xd8>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d108      	bne.n	80027a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	4313      	orrs	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a22      	ldr	r2, [pc, #136]	@ (8002830 <TIM_Base_SetConfig+0xd0>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d00b      	beq.n	80027c2 <TIM_Base_SetConfig+0x62>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027b0:	d007      	beq.n	80027c2 <TIM_Base_SetConfig+0x62>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a1f      	ldr	r2, [pc, #124]	@ (8002834 <TIM_Base_SetConfig+0xd4>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d003      	beq.n	80027c2 <TIM_Base_SetConfig+0x62>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a1e      	ldr	r2, [pc, #120]	@ (8002838 <TIM_Base_SetConfig+0xd8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d108      	bne.n	80027d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	4313      	orrs	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a0d      	ldr	r2, [pc, #52]	@ (8002830 <TIM_Base_SetConfig+0xd0>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d103      	bne.n	8002808 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d005      	beq.n	8002826 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f023 0201 	bic.w	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	611a      	str	r2, [r3, #16]
  }
}
 8002826:	bf00      	nop
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	40012c00 	.word	0x40012c00
 8002834:	40000400 	.word	0x40000400
 8002838:	40000800 	.word	0x40000800

0800283c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr

0800284e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr

08002860 <std>:
 8002860:	2300      	movs	r3, #0
 8002862:	b510      	push	{r4, lr}
 8002864:	4604      	mov	r4, r0
 8002866:	e9c0 3300 	strd	r3, r3, [r0]
 800286a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800286e:	6083      	str	r3, [r0, #8]
 8002870:	8181      	strh	r1, [r0, #12]
 8002872:	6643      	str	r3, [r0, #100]	@ 0x64
 8002874:	81c2      	strh	r2, [r0, #14]
 8002876:	6183      	str	r3, [r0, #24]
 8002878:	4619      	mov	r1, r3
 800287a:	2208      	movs	r2, #8
 800287c:	305c      	adds	r0, #92	@ 0x5c
 800287e:	f000 f906 	bl	8002a8e <memset>
 8002882:	4b0d      	ldr	r3, [pc, #52]	@ (80028b8 <std+0x58>)
 8002884:	6224      	str	r4, [r4, #32]
 8002886:	6263      	str	r3, [r4, #36]	@ 0x24
 8002888:	4b0c      	ldr	r3, [pc, #48]	@ (80028bc <std+0x5c>)
 800288a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800288c:	4b0c      	ldr	r3, [pc, #48]	@ (80028c0 <std+0x60>)
 800288e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002890:	4b0c      	ldr	r3, [pc, #48]	@ (80028c4 <std+0x64>)
 8002892:	6323      	str	r3, [r4, #48]	@ 0x30
 8002894:	4b0c      	ldr	r3, [pc, #48]	@ (80028c8 <std+0x68>)
 8002896:	429c      	cmp	r4, r3
 8002898:	d006      	beq.n	80028a8 <std+0x48>
 800289a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800289e:	4294      	cmp	r4, r2
 80028a0:	d002      	beq.n	80028a8 <std+0x48>
 80028a2:	33d0      	adds	r3, #208	@ 0xd0
 80028a4:	429c      	cmp	r4, r3
 80028a6:	d105      	bne.n	80028b4 <std+0x54>
 80028a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80028ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028b0:	f000 b966 	b.w	8002b80 <__retarget_lock_init_recursive>
 80028b4:	bd10      	pop	{r4, pc}
 80028b6:	bf00      	nop
 80028b8:	08002a09 	.word	0x08002a09
 80028bc:	08002a2b 	.word	0x08002a2b
 80028c0:	08002a63 	.word	0x08002a63
 80028c4:	08002a87 	.word	0x08002a87
 80028c8:	2000011c 	.word	0x2000011c

080028cc <stdio_exit_handler>:
 80028cc:	4a02      	ldr	r2, [pc, #8]	@ (80028d8 <stdio_exit_handler+0xc>)
 80028ce:	4903      	ldr	r1, [pc, #12]	@ (80028dc <stdio_exit_handler+0x10>)
 80028d0:	4803      	ldr	r0, [pc, #12]	@ (80028e0 <stdio_exit_handler+0x14>)
 80028d2:	f000 b869 	b.w	80029a8 <_fwalk_sglue>
 80028d6:	bf00      	nop
 80028d8:	2000000c 	.word	0x2000000c
 80028dc:	08003415 	.word	0x08003415
 80028e0:	2000001c 	.word	0x2000001c

080028e4 <cleanup_stdio>:
 80028e4:	6841      	ldr	r1, [r0, #4]
 80028e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002918 <cleanup_stdio+0x34>)
 80028e8:	b510      	push	{r4, lr}
 80028ea:	4299      	cmp	r1, r3
 80028ec:	4604      	mov	r4, r0
 80028ee:	d001      	beq.n	80028f4 <cleanup_stdio+0x10>
 80028f0:	f000 fd90 	bl	8003414 <_fflush_r>
 80028f4:	68a1      	ldr	r1, [r4, #8]
 80028f6:	4b09      	ldr	r3, [pc, #36]	@ (800291c <cleanup_stdio+0x38>)
 80028f8:	4299      	cmp	r1, r3
 80028fa:	d002      	beq.n	8002902 <cleanup_stdio+0x1e>
 80028fc:	4620      	mov	r0, r4
 80028fe:	f000 fd89 	bl	8003414 <_fflush_r>
 8002902:	68e1      	ldr	r1, [r4, #12]
 8002904:	4b06      	ldr	r3, [pc, #24]	@ (8002920 <cleanup_stdio+0x3c>)
 8002906:	4299      	cmp	r1, r3
 8002908:	d004      	beq.n	8002914 <cleanup_stdio+0x30>
 800290a:	4620      	mov	r0, r4
 800290c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002910:	f000 bd80 	b.w	8003414 <_fflush_r>
 8002914:	bd10      	pop	{r4, pc}
 8002916:	bf00      	nop
 8002918:	2000011c 	.word	0x2000011c
 800291c:	20000184 	.word	0x20000184
 8002920:	200001ec 	.word	0x200001ec

08002924 <global_stdio_init.part.0>:
 8002924:	b510      	push	{r4, lr}
 8002926:	4b0b      	ldr	r3, [pc, #44]	@ (8002954 <global_stdio_init.part.0+0x30>)
 8002928:	4c0b      	ldr	r4, [pc, #44]	@ (8002958 <global_stdio_init.part.0+0x34>)
 800292a:	4a0c      	ldr	r2, [pc, #48]	@ (800295c <global_stdio_init.part.0+0x38>)
 800292c:	4620      	mov	r0, r4
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	2104      	movs	r1, #4
 8002932:	2200      	movs	r2, #0
 8002934:	f7ff ff94 	bl	8002860 <std>
 8002938:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800293c:	2201      	movs	r2, #1
 800293e:	2109      	movs	r1, #9
 8002940:	f7ff ff8e 	bl	8002860 <std>
 8002944:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002948:	2202      	movs	r2, #2
 800294a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800294e:	2112      	movs	r1, #18
 8002950:	f7ff bf86 	b.w	8002860 <std>
 8002954:	20000254 	.word	0x20000254
 8002958:	2000011c 	.word	0x2000011c
 800295c:	080028cd 	.word	0x080028cd

08002960 <__sfp_lock_acquire>:
 8002960:	4801      	ldr	r0, [pc, #4]	@ (8002968 <__sfp_lock_acquire+0x8>)
 8002962:	f000 b90e 	b.w	8002b82 <__retarget_lock_acquire_recursive>
 8002966:	bf00      	nop
 8002968:	2000025d 	.word	0x2000025d

0800296c <__sfp_lock_release>:
 800296c:	4801      	ldr	r0, [pc, #4]	@ (8002974 <__sfp_lock_release+0x8>)
 800296e:	f000 b909 	b.w	8002b84 <__retarget_lock_release_recursive>
 8002972:	bf00      	nop
 8002974:	2000025d 	.word	0x2000025d

08002978 <__sinit>:
 8002978:	b510      	push	{r4, lr}
 800297a:	4604      	mov	r4, r0
 800297c:	f7ff fff0 	bl	8002960 <__sfp_lock_acquire>
 8002980:	6a23      	ldr	r3, [r4, #32]
 8002982:	b11b      	cbz	r3, 800298c <__sinit+0x14>
 8002984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002988:	f7ff bff0 	b.w	800296c <__sfp_lock_release>
 800298c:	4b04      	ldr	r3, [pc, #16]	@ (80029a0 <__sinit+0x28>)
 800298e:	6223      	str	r3, [r4, #32]
 8002990:	4b04      	ldr	r3, [pc, #16]	@ (80029a4 <__sinit+0x2c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1f5      	bne.n	8002984 <__sinit+0xc>
 8002998:	f7ff ffc4 	bl	8002924 <global_stdio_init.part.0>
 800299c:	e7f2      	b.n	8002984 <__sinit+0xc>
 800299e:	bf00      	nop
 80029a0:	080028e5 	.word	0x080028e5
 80029a4:	20000254 	.word	0x20000254

080029a8 <_fwalk_sglue>:
 80029a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029ac:	4607      	mov	r7, r0
 80029ae:	4688      	mov	r8, r1
 80029b0:	4614      	mov	r4, r2
 80029b2:	2600      	movs	r6, #0
 80029b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80029b8:	f1b9 0901 	subs.w	r9, r9, #1
 80029bc:	d505      	bpl.n	80029ca <_fwalk_sglue+0x22>
 80029be:	6824      	ldr	r4, [r4, #0]
 80029c0:	2c00      	cmp	r4, #0
 80029c2:	d1f7      	bne.n	80029b4 <_fwalk_sglue+0xc>
 80029c4:	4630      	mov	r0, r6
 80029c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029ca:	89ab      	ldrh	r3, [r5, #12]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d907      	bls.n	80029e0 <_fwalk_sglue+0x38>
 80029d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80029d4:	3301      	adds	r3, #1
 80029d6:	d003      	beq.n	80029e0 <_fwalk_sglue+0x38>
 80029d8:	4629      	mov	r1, r5
 80029da:	4638      	mov	r0, r7
 80029dc:	47c0      	blx	r8
 80029de:	4306      	orrs	r6, r0
 80029e0:	3568      	adds	r5, #104	@ 0x68
 80029e2:	e7e9      	b.n	80029b8 <_fwalk_sglue+0x10>

080029e4 <iprintf>:
 80029e4:	b40f      	push	{r0, r1, r2, r3}
 80029e6:	b507      	push	{r0, r1, r2, lr}
 80029e8:	4906      	ldr	r1, [pc, #24]	@ (8002a04 <iprintf+0x20>)
 80029ea:	ab04      	add	r3, sp, #16
 80029ec:	6808      	ldr	r0, [r1, #0]
 80029ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80029f2:	6881      	ldr	r1, [r0, #8]
 80029f4:	9301      	str	r3, [sp, #4]
 80029f6:	f000 f9e5 	bl	8002dc4 <_vfiprintf_r>
 80029fa:	b003      	add	sp, #12
 80029fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a00:	b004      	add	sp, #16
 8002a02:	4770      	bx	lr
 8002a04:	20000018 	.word	0x20000018

08002a08 <__sread>:
 8002a08:	b510      	push	{r4, lr}
 8002a0a:	460c      	mov	r4, r1
 8002a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a10:	f000 f868 	bl	8002ae4 <_read_r>
 8002a14:	2800      	cmp	r0, #0
 8002a16:	bfab      	itete	ge
 8002a18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002a1a:	89a3      	ldrhlt	r3, [r4, #12]
 8002a1c:	181b      	addge	r3, r3, r0
 8002a1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002a22:	bfac      	ite	ge
 8002a24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002a26:	81a3      	strhlt	r3, [r4, #12]
 8002a28:	bd10      	pop	{r4, pc}

08002a2a <__swrite>:
 8002a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a2e:	461f      	mov	r7, r3
 8002a30:	898b      	ldrh	r3, [r1, #12]
 8002a32:	4605      	mov	r5, r0
 8002a34:	05db      	lsls	r3, r3, #23
 8002a36:	460c      	mov	r4, r1
 8002a38:	4616      	mov	r6, r2
 8002a3a:	d505      	bpl.n	8002a48 <__swrite+0x1e>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a44:	f000 f83c 	bl	8002ac0 <_lseek_r>
 8002a48:	89a3      	ldrh	r3, [r4, #12]
 8002a4a:	4632      	mov	r2, r6
 8002a4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a50:	81a3      	strh	r3, [r4, #12]
 8002a52:	4628      	mov	r0, r5
 8002a54:	463b      	mov	r3, r7
 8002a56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a5e:	f000 b853 	b.w	8002b08 <_write_r>

08002a62 <__sseek>:
 8002a62:	b510      	push	{r4, lr}
 8002a64:	460c      	mov	r4, r1
 8002a66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a6a:	f000 f829 	bl	8002ac0 <_lseek_r>
 8002a6e:	1c43      	adds	r3, r0, #1
 8002a70:	89a3      	ldrh	r3, [r4, #12]
 8002a72:	bf15      	itete	ne
 8002a74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002a76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002a7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002a7e:	81a3      	strheq	r3, [r4, #12]
 8002a80:	bf18      	it	ne
 8002a82:	81a3      	strhne	r3, [r4, #12]
 8002a84:	bd10      	pop	{r4, pc}

08002a86 <__sclose>:
 8002a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a8a:	f000 b809 	b.w	8002aa0 <_close_r>

08002a8e <memset>:
 8002a8e:	4603      	mov	r3, r0
 8002a90:	4402      	add	r2, r0
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d100      	bne.n	8002a98 <memset+0xa>
 8002a96:	4770      	bx	lr
 8002a98:	f803 1b01 	strb.w	r1, [r3], #1
 8002a9c:	e7f9      	b.n	8002a92 <memset+0x4>
	...

08002aa0 <_close_r>:
 8002aa0:	b538      	push	{r3, r4, r5, lr}
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	4d05      	ldr	r5, [pc, #20]	@ (8002abc <_close_r+0x1c>)
 8002aa6:	4604      	mov	r4, r0
 8002aa8:	4608      	mov	r0, r1
 8002aaa:	602b      	str	r3, [r5, #0]
 8002aac:	f7fd feb1 	bl	8000812 <_close>
 8002ab0:	1c43      	adds	r3, r0, #1
 8002ab2:	d102      	bne.n	8002aba <_close_r+0x1a>
 8002ab4:	682b      	ldr	r3, [r5, #0]
 8002ab6:	b103      	cbz	r3, 8002aba <_close_r+0x1a>
 8002ab8:	6023      	str	r3, [r4, #0]
 8002aba:	bd38      	pop	{r3, r4, r5, pc}
 8002abc:	20000258 	.word	0x20000258

08002ac0 <_lseek_r>:
 8002ac0:	b538      	push	{r3, r4, r5, lr}
 8002ac2:	4604      	mov	r4, r0
 8002ac4:	4608      	mov	r0, r1
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	2200      	movs	r2, #0
 8002aca:	4d05      	ldr	r5, [pc, #20]	@ (8002ae0 <_lseek_r+0x20>)
 8002acc:	602a      	str	r2, [r5, #0]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	f7fd fec3 	bl	800085a <_lseek>
 8002ad4:	1c43      	adds	r3, r0, #1
 8002ad6:	d102      	bne.n	8002ade <_lseek_r+0x1e>
 8002ad8:	682b      	ldr	r3, [r5, #0]
 8002ada:	b103      	cbz	r3, 8002ade <_lseek_r+0x1e>
 8002adc:	6023      	str	r3, [r4, #0]
 8002ade:	bd38      	pop	{r3, r4, r5, pc}
 8002ae0:	20000258 	.word	0x20000258

08002ae4 <_read_r>:
 8002ae4:	b538      	push	{r3, r4, r5, lr}
 8002ae6:	4604      	mov	r4, r0
 8002ae8:	4608      	mov	r0, r1
 8002aea:	4611      	mov	r1, r2
 8002aec:	2200      	movs	r2, #0
 8002aee:	4d05      	ldr	r5, [pc, #20]	@ (8002b04 <_read_r+0x20>)
 8002af0:	602a      	str	r2, [r5, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	f7fd fe54 	bl	80007a0 <_read>
 8002af8:	1c43      	adds	r3, r0, #1
 8002afa:	d102      	bne.n	8002b02 <_read_r+0x1e>
 8002afc:	682b      	ldr	r3, [r5, #0]
 8002afe:	b103      	cbz	r3, 8002b02 <_read_r+0x1e>
 8002b00:	6023      	str	r3, [r4, #0]
 8002b02:	bd38      	pop	{r3, r4, r5, pc}
 8002b04:	20000258 	.word	0x20000258

08002b08 <_write_r>:
 8002b08:	b538      	push	{r3, r4, r5, lr}
 8002b0a:	4604      	mov	r4, r0
 8002b0c:	4608      	mov	r0, r1
 8002b0e:	4611      	mov	r1, r2
 8002b10:	2200      	movs	r2, #0
 8002b12:	4d05      	ldr	r5, [pc, #20]	@ (8002b28 <_write_r+0x20>)
 8002b14:	602a      	str	r2, [r5, #0]
 8002b16:	461a      	mov	r2, r3
 8002b18:	f7fd fe5f 	bl	80007da <_write>
 8002b1c:	1c43      	adds	r3, r0, #1
 8002b1e:	d102      	bne.n	8002b26 <_write_r+0x1e>
 8002b20:	682b      	ldr	r3, [r5, #0]
 8002b22:	b103      	cbz	r3, 8002b26 <_write_r+0x1e>
 8002b24:	6023      	str	r3, [r4, #0]
 8002b26:	bd38      	pop	{r3, r4, r5, pc}
 8002b28:	20000258 	.word	0x20000258

08002b2c <__errno>:
 8002b2c:	4b01      	ldr	r3, [pc, #4]	@ (8002b34 <__errno+0x8>)
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	20000018 	.word	0x20000018

08002b38 <__libc_init_array>:
 8002b38:	b570      	push	{r4, r5, r6, lr}
 8002b3a:	2600      	movs	r6, #0
 8002b3c:	4d0c      	ldr	r5, [pc, #48]	@ (8002b70 <__libc_init_array+0x38>)
 8002b3e:	4c0d      	ldr	r4, [pc, #52]	@ (8002b74 <__libc_init_array+0x3c>)
 8002b40:	1b64      	subs	r4, r4, r5
 8002b42:	10a4      	asrs	r4, r4, #2
 8002b44:	42a6      	cmp	r6, r4
 8002b46:	d109      	bne.n	8002b5c <__libc_init_array+0x24>
 8002b48:	f000 fdc2 	bl	80036d0 <_init>
 8002b4c:	2600      	movs	r6, #0
 8002b4e:	4d0a      	ldr	r5, [pc, #40]	@ (8002b78 <__libc_init_array+0x40>)
 8002b50:	4c0a      	ldr	r4, [pc, #40]	@ (8002b7c <__libc_init_array+0x44>)
 8002b52:	1b64      	subs	r4, r4, r5
 8002b54:	10a4      	asrs	r4, r4, #2
 8002b56:	42a6      	cmp	r6, r4
 8002b58:	d105      	bne.n	8002b66 <__libc_init_array+0x2e>
 8002b5a:	bd70      	pop	{r4, r5, r6, pc}
 8002b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b60:	4798      	blx	r3
 8002b62:	3601      	adds	r6, #1
 8002b64:	e7ee      	b.n	8002b44 <__libc_init_array+0xc>
 8002b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b6a:	4798      	blx	r3
 8002b6c:	3601      	adds	r6, #1
 8002b6e:	e7f2      	b.n	8002b56 <__libc_init_array+0x1e>
 8002b70:	08003758 	.word	0x08003758
 8002b74:	08003758 	.word	0x08003758
 8002b78:	08003758 	.word	0x08003758
 8002b7c:	0800375c 	.word	0x0800375c

08002b80 <__retarget_lock_init_recursive>:
 8002b80:	4770      	bx	lr

08002b82 <__retarget_lock_acquire_recursive>:
 8002b82:	4770      	bx	lr

08002b84 <__retarget_lock_release_recursive>:
 8002b84:	4770      	bx	lr
	...

08002b88 <_free_r>:
 8002b88:	b538      	push	{r3, r4, r5, lr}
 8002b8a:	4605      	mov	r5, r0
 8002b8c:	2900      	cmp	r1, #0
 8002b8e:	d040      	beq.n	8002c12 <_free_r+0x8a>
 8002b90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b94:	1f0c      	subs	r4, r1, #4
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	bfb8      	it	lt
 8002b9a:	18e4      	addlt	r4, r4, r3
 8002b9c:	f000 f8de 	bl	8002d5c <__malloc_lock>
 8002ba0:	4a1c      	ldr	r2, [pc, #112]	@ (8002c14 <_free_r+0x8c>)
 8002ba2:	6813      	ldr	r3, [r2, #0]
 8002ba4:	b933      	cbnz	r3, 8002bb4 <_free_r+0x2c>
 8002ba6:	6063      	str	r3, [r4, #4]
 8002ba8:	6014      	str	r4, [r2, #0]
 8002baa:	4628      	mov	r0, r5
 8002bac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002bb0:	f000 b8da 	b.w	8002d68 <__malloc_unlock>
 8002bb4:	42a3      	cmp	r3, r4
 8002bb6:	d908      	bls.n	8002bca <_free_r+0x42>
 8002bb8:	6820      	ldr	r0, [r4, #0]
 8002bba:	1821      	adds	r1, r4, r0
 8002bbc:	428b      	cmp	r3, r1
 8002bbe:	bf01      	itttt	eq
 8002bc0:	6819      	ldreq	r1, [r3, #0]
 8002bc2:	685b      	ldreq	r3, [r3, #4]
 8002bc4:	1809      	addeq	r1, r1, r0
 8002bc6:	6021      	streq	r1, [r4, #0]
 8002bc8:	e7ed      	b.n	8002ba6 <_free_r+0x1e>
 8002bca:	461a      	mov	r2, r3
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	b10b      	cbz	r3, 8002bd4 <_free_r+0x4c>
 8002bd0:	42a3      	cmp	r3, r4
 8002bd2:	d9fa      	bls.n	8002bca <_free_r+0x42>
 8002bd4:	6811      	ldr	r1, [r2, #0]
 8002bd6:	1850      	adds	r0, r2, r1
 8002bd8:	42a0      	cmp	r0, r4
 8002bda:	d10b      	bne.n	8002bf4 <_free_r+0x6c>
 8002bdc:	6820      	ldr	r0, [r4, #0]
 8002bde:	4401      	add	r1, r0
 8002be0:	1850      	adds	r0, r2, r1
 8002be2:	4283      	cmp	r3, r0
 8002be4:	6011      	str	r1, [r2, #0]
 8002be6:	d1e0      	bne.n	8002baa <_free_r+0x22>
 8002be8:	6818      	ldr	r0, [r3, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	4408      	add	r0, r1
 8002bee:	6010      	str	r0, [r2, #0]
 8002bf0:	6053      	str	r3, [r2, #4]
 8002bf2:	e7da      	b.n	8002baa <_free_r+0x22>
 8002bf4:	d902      	bls.n	8002bfc <_free_r+0x74>
 8002bf6:	230c      	movs	r3, #12
 8002bf8:	602b      	str	r3, [r5, #0]
 8002bfa:	e7d6      	b.n	8002baa <_free_r+0x22>
 8002bfc:	6820      	ldr	r0, [r4, #0]
 8002bfe:	1821      	adds	r1, r4, r0
 8002c00:	428b      	cmp	r3, r1
 8002c02:	bf01      	itttt	eq
 8002c04:	6819      	ldreq	r1, [r3, #0]
 8002c06:	685b      	ldreq	r3, [r3, #4]
 8002c08:	1809      	addeq	r1, r1, r0
 8002c0a:	6021      	streq	r1, [r4, #0]
 8002c0c:	6063      	str	r3, [r4, #4]
 8002c0e:	6054      	str	r4, [r2, #4]
 8002c10:	e7cb      	b.n	8002baa <_free_r+0x22>
 8002c12:	bd38      	pop	{r3, r4, r5, pc}
 8002c14:	20000264 	.word	0x20000264

08002c18 <sbrk_aligned>:
 8002c18:	b570      	push	{r4, r5, r6, lr}
 8002c1a:	4e0f      	ldr	r6, [pc, #60]	@ (8002c58 <sbrk_aligned+0x40>)
 8002c1c:	460c      	mov	r4, r1
 8002c1e:	6831      	ldr	r1, [r6, #0]
 8002c20:	4605      	mov	r5, r0
 8002c22:	b911      	cbnz	r1, 8002c2a <sbrk_aligned+0x12>
 8002c24:	f000 fcb2 	bl	800358c <_sbrk_r>
 8002c28:	6030      	str	r0, [r6, #0]
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	4628      	mov	r0, r5
 8002c2e:	f000 fcad 	bl	800358c <_sbrk_r>
 8002c32:	1c43      	adds	r3, r0, #1
 8002c34:	d103      	bne.n	8002c3e <sbrk_aligned+0x26>
 8002c36:	f04f 34ff 	mov.w	r4, #4294967295
 8002c3a:	4620      	mov	r0, r4
 8002c3c:	bd70      	pop	{r4, r5, r6, pc}
 8002c3e:	1cc4      	adds	r4, r0, #3
 8002c40:	f024 0403 	bic.w	r4, r4, #3
 8002c44:	42a0      	cmp	r0, r4
 8002c46:	d0f8      	beq.n	8002c3a <sbrk_aligned+0x22>
 8002c48:	1a21      	subs	r1, r4, r0
 8002c4a:	4628      	mov	r0, r5
 8002c4c:	f000 fc9e 	bl	800358c <_sbrk_r>
 8002c50:	3001      	adds	r0, #1
 8002c52:	d1f2      	bne.n	8002c3a <sbrk_aligned+0x22>
 8002c54:	e7ef      	b.n	8002c36 <sbrk_aligned+0x1e>
 8002c56:	bf00      	nop
 8002c58:	20000260 	.word	0x20000260

08002c5c <_malloc_r>:
 8002c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c60:	1ccd      	adds	r5, r1, #3
 8002c62:	f025 0503 	bic.w	r5, r5, #3
 8002c66:	3508      	adds	r5, #8
 8002c68:	2d0c      	cmp	r5, #12
 8002c6a:	bf38      	it	cc
 8002c6c:	250c      	movcc	r5, #12
 8002c6e:	2d00      	cmp	r5, #0
 8002c70:	4606      	mov	r6, r0
 8002c72:	db01      	blt.n	8002c78 <_malloc_r+0x1c>
 8002c74:	42a9      	cmp	r1, r5
 8002c76:	d904      	bls.n	8002c82 <_malloc_r+0x26>
 8002c78:	230c      	movs	r3, #12
 8002c7a:	6033      	str	r3, [r6, #0]
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002d58 <_malloc_r+0xfc>
 8002c86:	f000 f869 	bl	8002d5c <__malloc_lock>
 8002c8a:	f8d8 3000 	ldr.w	r3, [r8]
 8002c8e:	461c      	mov	r4, r3
 8002c90:	bb44      	cbnz	r4, 8002ce4 <_malloc_r+0x88>
 8002c92:	4629      	mov	r1, r5
 8002c94:	4630      	mov	r0, r6
 8002c96:	f7ff ffbf 	bl	8002c18 <sbrk_aligned>
 8002c9a:	1c43      	adds	r3, r0, #1
 8002c9c:	4604      	mov	r4, r0
 8002c9e:	d158      	bne.n	8002d52 <_malloc_r+0xf6>
 8002ca0:	f8d8 4000 	ldr.w	r4, [r8]
 8002ca4:	4627      	mov	r7, r4
 8002ca6:	2f00      	cmp	r7, #0
 8002ca8:	d143      	bne.n	8002d32 <_malloc_r+0xd6>
 8002caa:	2c00      	cmp	r4, #0
 8002cac:	d04b      	beq.n	8002d46 <_malloc_r+0xea>
 8002cae:	6823      	ldr	r3, [r4, #0]
 8002cb0:	4639      	mov	r1, r7
 8002cb2:	4630      	mov	r0, r6
 8002cb4:	eb04 0903 	add.w	r9, r4, r3
 8002cb8:	f000 fc68 	bl	800358c <_sbrk_r>
 8002cbc:	4581      	cmp	r9, r0
 8002cbe:	d142      	bne.n	8002d46 <_malloc_r+0xea>
 8002cc0:	6821      	ldr	r1, [r4, #0]
 8002cc2:	4630      	mov	r0, r6
 8002cc4:	1a6d      	subs	r5, r5, r1
 8002cc6:	4629      	mov	r1, r5
 8002cc8:	f7ff ffa6 	bl	8002c18 <sbrk_aligned>
 8002ccc:	3001      	adds	r0, #1
 8002cce:	d03a      	beq.n	8002d46 <_malloc_r+0xea>
 8002cd0:	6823      	ldr	r3, [r4, #0]
 8002cd2:	442b      	add	r3, r5
 8002cd4:	6023      	str	r3, [r4, #0]
 8002cd6:	f8d8 3000 	ldr.w	r3, [r8]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	bb62      	cbnz	r2, 8002d38 <_malloc_r+0xdc>
 8002cde:	f8c8 7000 	str.w	r7, [r8]
 8002ce2:	e00f      	b.n	8002d04 <_malloc_r+0xa8>
 8002ce4:	6822      	ldr	r2, [r4, #0]
 8002ce6:	1b52      	subs	r2, r2, r5
 8002ce8:	d420      	bmi.n	8002d2c <_malloc_r+0xd0>
 8002cea:	2a0b      	cmp	r2, #11
 8002cec:	d917      	bls.n	8002d1e <_malloc_r+0xc2>
 8002cee:	1961      	adds	r1, r4, r5
 8002cf0:	42a3      	cmp	r3, r4
 8002cf2:	6025      	str	r5, [r4, #0]
 8002cf4:	bf18      	it	ne
 8002cf6:	6059      	strne	r1, [r3, #4]
 8002cf8:	6863      	ldr	r3, [r4, #4]
 8002cfa:	bf08      	it	eq
 8002cfc:	f8c8 1000 	streq.w	r1, [r8]
 8002d00:	5162      	str	r2, [r4, r5]
 8002d02:	604b      	str	r3, [r1, #4]
 8002d04:	4630      	mov	r0, r6
 8002d06:	f000 f82f 	bl	8002d68 <__malloc_unlock>
 8002d0a:	f104 000b 	add.w	r0, r4, #11
 8002d0e:	1d23      	adds	r3, r4, #4
 8002d10:	f020 0007 	bic.w	r0, r0, #7
 8002d14:	1ac2      	subs	r2, r0, r3
 8002d16:	bf1c      	itt	ne
 8002d18:	1a1b      	subne	r3, r3, r0
 8002d1a:	50a3      	strne	r3, [r4, r2]
 8002d1c:	e7af      	b.n	8002c7e <_malloc_r+0x22>
 8002d1e:	6862      	ldr	r2, [r4, #4]
 8002d20:	42a3      	cmp	r3, r4
 8002d22:	bf0c      	ite	eq
 8002d24:	f8c8 2000 	streq.w	r2, [r8]
 8002d28:	605a      	strne	r2, [r3, #4]
 8002d2a:	e7eb      	b.n	8002d04 <_malloc_r+0xa8>
 8002d2c:	4623      	mov	r3, r4
 8002d2e:	6864      	ldr	r4, [r4, #4]
 8002d30:	e7ae      	b.n	8002c90 <_malloc_r+0x34>
 8002d32:	463c      	mov	r4, r7
 8002d34:	687f      	ldr	r7, [r7, #4]
 8002d36:	e7b6      	b.n	8002ca6 <_malloc_r+0x4a>
 8002d38:	461a      	mov	r2, r3
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	42a3      	cmp	r3, r4
 8002d3e:	d1fb      	bne.n	8002d38 <_malloc_r+0xdc>
 8002d40:	2300      	movs	r3, #0
 8002d42:	6053      	str	r3, [r2, #4]
 8002d44:	e7de      	b.n	8002d04 <_malloc_r+0xa8>
 8002d46:	230c      	movs	r3, #12
 8002d48:	4630      	mov	r0, r6
 8002d4a:	6033      	str	r3, [r6, #0]
 8002d4c:	f000 f80c 	bl	8002d68 <__malloc_unlock>
 8002d50:	e794      	b.n	8002c7c <_malloc_r+0x20>
 8002d52:	6005      	str	r5, [r0, #0]
 8002d54:	e7d6      	b.n	8002d04 <_malloc_r+0xa8>
 8002d56:	bf00      	nop
 8002d58:	20000264 	.word	0x20000264

08002d5c <__malloc_lock>:
 8002d5c:	4801      	ldr	r0, [pc, #4]	@ (8002d64 <__malloc_lock+0x8>)
 8002d5e:	f7ff bf10 	b.w	8002b82 <__retarget_lock_acquire_recursive>
 8002d62:	bf00      	nop
 8002d64:	2000025c 	.word	0x2000025c

08002d68 <__malloc_unlock>:
 8002d68:	4801      	ldr	r0, [pc, #4]	@ (8002d70 <__malloc_unlock+0x8>)
 8002d6a:	f7ff bf0b 	b.w	8002b84 <__retarget_lock_release_recursive>
 8002d6e:	bf00      	nop
 8002d70:	2000025c 	.word	0x2000025c

08002d74 <__sfputc_r>:
 8002d74:	6893      	ldr	r3, [r2, #8]
 8002d76:	b410      	push	{r4}
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	6093      	str	r3, [r2, #8]
 8002d7e:	da07      	bge.n	8002d90 <__sfputc_r+0x1c>
 8002d80:	6994      	ldr	r4, [r2, #24]
 8002d82:	42a3      	cmp	r3, r4
 8002d84:	db01      	blt.n	8002d8a <__sfputc_r+0x16>
 8002d86:	290a      	cmp	r1, #10
 8002d88:	d102      	bne.n	8002d90 <__sfputc_r+0x1c>
 8002d8a:	bc10      	pop	{r4}
 8002d8c:	f000 bb6a 	b.w	8003464 <__swbuf_r>
 8002d90:	6813      	ldr	r3, [r2, #0]
 8002d92:	1c58      	adds	r0, r3, #1
 8002d94:	6010      	str	r0, [r2, #0]
 8002d96:	7019      	strb	r1, [r3, #0]
 8002d98:	4608      	mov	r0, r1
 8002d9a:	bc10      	pop	{r4}
 8002d9c:	4770      	bx	lr

08002d9e <__sfputs_r>:
 8002d9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002da0:	4606      	mov	r6, r0
 8002da2:	460f      	mov	r7, r1
 8002da4:	4614      	mov	r4, r2
 8002da6:	18d5      	adds	r5, r2, r3
 8002da8:	42ac      	cmp	r4, r5
 8002daa:	d101      	bne.n	8002db0 <__sfputs_r+0x12>
 8002dac:	2000      	movs	r0, #0
 8002dae:	e007      	b.n	8002dc0 <__sfputs_r+0x22>
 8002db0:	463a      	mov	r2, r7
 8002db2:	4630      	mov	r0, r6
 8002db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002db8:	f7ff ffdc 	bl	8002d74 <__sfputc_r>
 8002dbc:	1c43      	adds	r3, r0, #1
 8002dbe:	d1f3      	bne.n	8002da8 <__sfputs_r+0xa>
 8002dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002dc4 <_vfiprintf_r>:
 8002dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dc8:	460d      	mov	r5, r1
 8002dca:	4614      	mov	r4, r2
 8002dcc:	4698      	mov	r8, r3
 8002dce:	4606      	mov	r6, r0
 8002dd0:	b09d      	sub	sp, #116	@ 0x74
 8002dd2:	b118      	cbz	r0, 8002ddc <_vfiprintf_r+0x18>
 8002dd4:	6a03      	ldr	r3, [r0, #32]
 8002dd6:	b90b      	cbnz	r3, 8002ddc <_vfiprintf_r+0x18>
 8002dd8:	f7ff fdce 	bl	8002978 <__sinit>
 8002ddc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002dde:	07d9      	lsls	r1, r3, #31
 8002de0:	d405      	bmi.n	8002dee <_vfiprintf_r+0x2a>
 8002de2:	89ab      	ldrh	r3, [r5, #12]
 8002de4:	059a      	lsls	r2, r3, #22
 8002de6:	d402      	bmi.n	8002dee <_vfiprintf_r+0x2a>
 8002de8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002dea:	f7ff feca 	bl	8002b82 <__retarget_lock_acquire_recursive>
 8002dee:	89ab      	ldrh	r3, [r5, #12]
 8002df0:	071b      	lsls	r3, r3, #28
 8002df2:	d501      	bpl.n	8002df8 <_vfiprintf_r+0x34>
 8002df4:	692b      	ldr	r3, [r5, #16]
 8002df6:	b99b      	cbnz	r3, 8002e20 <_vfiprintf_r+0x5c>
 8002df8:	4629      	mov	r1, r5
 8002dfa:	4630      	mov	r0, r6
 8002dfc:	f000 fb70 	bl	80034e0 <__swsetup_r>
 8002e00:	b170      	cbz	r0, 8002e20 <_vfiprintf_r+0x5c>
 8002e02:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002e04:	07dc      	lsls	r4, r3, #31
 8002e06:	d504      	bpl.n	8002e12 <_vfiprintf_r+0x4e>
 8002e08:	f04f 30ff 	mov.w	r0, #4294967295
 8002e0c:	b01d      	add	sp, #116	@ 0x74
 8002e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e12:	89ab      	ldrh	r3, [r5, #12]
 8002e14:	0598      	lsls	r0, r3, #22
 8002e16:	d4f7      	bmi.n	8002e08 <_vfiprintf_r+0x44>
 8002e18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002e1a:	f7ff feb3 	bl	8002b84 <__retarget_lock_release_recursive>
 8002e1e:	e7f3      	b.n	8002e08 <_vfiprintf_r+0x44>
 8002e20:	2300      	movs	r3, #0
 8002e22:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e24:	2320      	movs	r3, #32
 8002e26:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002e2a:	2330      	movs	r3, #48	@ 0x30
 8002e2c:	f04f 0901 	mov.w	r9, #1
 8002e30:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e34:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8002fe0 <_vfiprintf_r+0x21c>
 8002e38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002e3c:	4623      	mov	r3, r4
 8002e3e:	469a      	mov	sl, r3
 8002e40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e44:	b10a      	cbz	r2, 8002e4a <_vfiprintf_r+0x86>
 8002e46:	2a25      	cmp	r2, #37	@ 0x25
 8002e48:	d1f9      	bne.n	8002e3e <_vfiprintf_r+0x7a>
 8002e4a:	ebba 0b04 	subs.w	fp, sl, r4
 8002e4e:	d00b      	beq.n	8002e68 <_vfiprintf_r+0xa4>
 8002e50:	465b      	mov	r3, fp
 8002e52:	4622      	mov	r2, r4
 8002e54:	4629      	mov	r1, r5
 8002e56:	4630      	mov	r0, r6
 8002e58:	f7ff ffa1 	bl	8002d9e <__sfputs_r>
 8002e5c:	3001      	adds	r0, #1
 8002e5e:	f000 80a7 	beq.w	8002fb0 <_vfiprintf_r+0x1ec>
 8002e62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002e64:	445a      	add	r2, fp
 8002e66:	9209      	str	r2, [sp, #36]	@ 0x24
 8002e68:	f89a 3000 	ldrb.w	r3, [sl]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 809f 	beq.w	8002fb0 <_vfiprintf_r+0x1ec>
 8002e72:	2300      	movs	r3, #0
 8002e74:	f04f 32ff 	mov.w	r2, #4294967295
 8002e78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e7c:	f10a 0a01 	add.w	sl, sl, #1
 8002e80:	9304      	str	r3, [sp, #16]
 8002e82:	9307      	str	r3, [sp, #28]
 8002e84:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002e88:	931a      	str	r3, [sp, #104]	@ 0x68
 8002e8a:	4654      	mov	r4, sl
 8002e8c:	2205      	movs	r2, #5
 8002e8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e92:	4853      	ldr	r0, [pc, #332]	@ (8002fe0 <_vfiprintf_r+0x21c>)
 8002e94:	f000 fb8a 	bl	80035ac <memchr>
 8002e98:	9a04      	ldr	r2, [sp, #16]
 8002e9a:	b9d8      	cbnz	r0, 8002ed4 <_vfiprintf_r+0x110>
 8002e9c:	06d1      	lsls	r1, r2, #27
 8002e9e:	bf44      	itt	mi
 8002ea0:	2320      	movmi	r3, #32
 8002ea2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002ea6:	0713      	lsls	r3, r2, #28
 8002ea8:	bf44      	itt	mi
 8002eaa:	232b      	movmi	r3, #43	@ 0x2b
 8002eac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002eb0:	f89a 3000 	ldrb.w	r3, [sl]
 8002eb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8002eb6:	d015      	beq.n	8002ee4 <_vfiprintf_r+0x120>
 8002eb8:	4654      	mov	r4, sl
 8002eba:	2000      	movs	r0, #0
 8002ebc:	f04f 0c0a 	mov.w	ip, #10
 8002ec0:	9a07      	ldr	r2, [sp, #28]
 8002ec2:	4621      	mov	r1, r4
 8002ec4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ec8:	3b30      	subs	r3, #48	@ 0x30
 8002eca:	2b09      	cmp	r3, #9
 8002ecc:	d94b      	bls.n	8002f66 <_vfiprintf_r+0x1a2>
 8002ece:	b1b0      	cbz	r0, 8002efe <_vfiprintf_r+0x13a>
 8002ed0:	9207      	str	r2, [sp, #28]
 8002ed2:	e014      	b.n	8002efe <_vfiprintf_r+0x13a>
 8002ed4:	eba0 0308 	sub.w	r3, r0, r8
 8002ed8:	fa09 f303 	lsl.w	r3, r9, r3
 8002edc:	4313      	orrs	r3, r2
 8002ede:	46a2      	mov	sl, r4
 8002ee0:	9304      	str	r3, [sp, #16]
 8002ee2:	e7d2      	b.n	8002e8a <_vfiprintf_r+0xc6>
 8002ee4:	9b03      	ldr	r3, [sp, #12]
 8002ee6:	1d19      	adds	r1, r3, #4
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	9103      	str	r1, [sp, #12]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	bfbb      	ittet	lt
 8002ef0:	425b      	neglt	r3, r3
 8002ef2:	f042 0202 	orrlt.w	r2, r2, #2
 8002ef6:	9307      	strge	r3, [sp, #28]
 8002ef8:	9307      	strlt	r3, [sp, #28]
 8002efa:	bfb8      	it	lt
 8002efc:	9204      	strlt	r2, [sp, #16]
 8002efe:	7823      	ldrb	r3, [r4, #0]
 8002f00:	2b2e      	cmp	r3, #46	@ 0x2e
 8002f02:	d10a      	bne.n	8002f1a <_vfiprintf_r+0x156>
 8002f04:	7863      	ldrb	r3, [r4, #1]
 8002f06:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f08:	d132      	bne.n	8002f70 <_vfiprintf_r+0x1ac>
 8002f0a:	9b03      	ldr	r3, [sp, #12]
 8002f0c:	3402      	adds	r4, #2
 8002f0e:	1d1a      	adds	r2, r3, #4
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	9203      	str	r2, [sp, #12]
 8002f14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002f18:	9305      	str	r3, [sp, #20]
 8002f1a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002fe4 <_vfiprintf_r+0x220>
 8002f1e:	2203      	movs	r2, #3
 8002f20:	4650      	mov	r0, sl
 8002f22:	7821      	ldrb	r1, [r4, #0]
 8002f24:	f000 fb42 	bl	80035ac <memchr>
 8002f28:	b138      	cbz	r0, 8002f3a <_vfiprintf_r+0x176>
 8002f2a:	2240      	movs	r2, #64	@ 0x40
 8002f2c:	9b04      	ldr	r3, [sp, #16]
 8002f2e:	eba0 000a 	sub.w	r0, r0, sl
 8002f32:	4082      	lsls	r2, r0
 8002f34:	4313      	orrs	r3, r2
 8002f36:	3401      	adds	r4, #1
 8002f38:	9304      	str	r3, [sp, #16]
 8002f3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f3e:	2206      	movs	r2, #6
 8002f40:	4829      	ldr	r0, [pc, #164]	@ (8002fe8 <_vfiprintf_r+0x224>)
 8002f42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002f46:	f000 fb31 	bl	80035ac <memchr>
 8002f4a:	2800      	cmp	r0, #0
 8002f4c:	d03f      	beq.n	8002fce <_vfiprintf_r+0x20a>
 8002f4e:	4b27      	ldr	r3, [pc, #156]	@ (8002fec <_vfiprintf_r+0x228>)
 8002f50:	bb1b      	cbnz	r3, 8002f9a <_vfiprintf_r+0x1d6>
 8002f52:	9b03      	ldr	r3, [sp, #12]
 8002f54:	3307      	adds	r3, #7
 8002f56:	f023 0307 	bic.w	r3, r3, #7
 8002f5a:	3308      	adds	r3, #8
 8002f5c:	9303      	str	r3, [sp, #12]
 8002f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002f60:	443b      	add	r3, r7
 8002f62:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f64:	e76a      	b.n	8002e3c <_vfiprintf_r+0x78>
 8002f66:	460c      	mov	r4, r1
 8002f68:	2001      	movs	r0, #1
 8002f6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f6e:	e7a8      	b.n	8002ec2 <_vfiprintf_r+0xfe>
 8002f70:	2300      	movs	r3, #0
 8002f72:	f04f 0c0a 	mov.w	ip, #10
 8002f76:	4619      	mov	r1, r3
 8002f78:	3401      	adds	r4, #1
 8002f7a:	9305      	str	r3, [sp, #20]
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f82:	3a30      	subs	r2, #48	@ 0x30
 8002f84:	2a09      	cmp	r2, #9
 8002f86:	d903      	bls.n	8002f90 <_vfiprintf_r+0x1cc>
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0c6      	beq.n	8002f1a <_vfiprintf_r+0x156>
 8002f8c:	9105      	str	r1, [sp, #20]
 8002f8e:	e7c4      	b.n	8002f1a <_vfiprintf_r+0x156>
 8002f90:	4604      	mov	r4, r0
 8002f92:	2301      	movs	r3, #1
 8002f94:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f98:	e7f0      	b.n	8002f7c <_vfiprintf_r+0x1b8>
 8002f9a:	ab03      	add	r3, sp, #12
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	462a      	mov	r2, r5
 8002fa0:	4630      	mov	r0, r6
 8002fa2:	4b13      	ldr	r3, [pc, #76]	@ (8002ff0 <_vfiprintf_r+0x22c>)
 8002fa4:	a904      	add	r1, sp, #16
 8002fa6:	f3af 8000 	nop.w
 8002faa:	4607      	mov	r7, r0
 8002fac:	1c78      	adds	r0, r7, #1
 8002fae:	d1d6      	bne.n	8002f5e <_vfiprintf_r+0x19a>
 8002fb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002fb2:	07d9      	lsls	r1, r3, #31
 8002fb4:	d405      	bmi.n	8002fc2 <_vfiprintf_r+0x1fe>
 8002fb6:	89ab      	ldrh	r3, [r5, #12]
 8002fb8:	059a      	lsls	r2, r3, #22
 8002fba:	d402      	bmi.n	8002fc2 <_vfiprintf_r+0x1fe>
 8002fbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002fbe:	f7ff fde1 	bl	8002b84 <__retarget_lock_release_recursive>
 8002fc2:	89ab      	ldrh	r3, [r5, #12]
 8002fc4:	065b      	lsls	r3, r3, #25
 8002fc6:	f53f af1f 	bmi.w	8002e08 <_vfiprintf_r+0x44>
 8002fca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002fcc:	e71e      	b.n	8002e0c <_vfiprintf_r+0x48>
 8002fce:	ab03      	add	r3, sp, #12
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	462a      	mov	r2, r5
 8002fd4:	4630      	mov	r0, r6
 8002fd6:	4b06      	ldr	r3, [pc, #24]	@ (8002ff0 <_vfiprintf_r+0x22c>)
 8002fd8:	a904      	add	r1, sp, #16
 8002fda:	f000 f87d 	bl	80030d8 <_printf_i>
 8002fde:	e7e4      	b.n	8002faa <_vfiprintf_r+0x1e6>
 8002fe0:	08003722 	.word	0x08003722
 8002fe4:	08003728 	.word	0x08003728
 8002fe8:	0800372c 	.word	0x0800372c
 8002fec:	00000000 	.word	0x00000000
 8002ff0:	08002d9f 	.word	0x08002d9f

08002ff4 <_printf_common>:
 8002ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ff8:	4616      	mov	r6, r2
 8002ffa:	4698      	mov	r8, r3
 8002ffc:	688a      	ldr	r2, [r1, #8]
 8002ffe:	690b      	ldr	r3, [r1, #16]
 8003000:	4607      	mov	r7, r0
 8003002:	4293      	cmp	r3, r2
 8003004:	bfb8      	it	lt
 8003006:	4613      	movlt	r3, r2
 8003008:	6033      	str	r3, [r6, #0]
 800300a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800300e:	460c      	mov	r4, r1
 8003010:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003014:	b10a      	cbz	r2, 800301a <_printf_common+0x26>
 8003016:	3301      	adds	r3, #1
 8003018:	6033      	str	r3, [r6, #0]
 800301a:	6823      	ldr	r3, [r4, #0]
 800301c:	0699      	lsls	r1, r3, #26
 800301e:	bf42      	ittt	mi
 8003020:	6833      	ldrmi	r3, [r6, #0]
 8003022:	3302      	addmi	r3, #2
 8003024:	6033      	strmi	r3, [r6, #0]
 8003026:	6825      	ldr	r5, [r4, #0]
 8003028:	f015 0506 	ands.w	r5, r5, #6
 800302c:	d106      	bne.n	800303c <_printf_common+0x48>
 800302e:	f104 0a19 	add.w	sl, r4, #25
 8003032:	68e3      	ldr	r3, [r4, #12]
 8003034:	6832      	ldr	r2, [r6, #0]
 8003036:	1a9b      	subs	r3, r3, r2
 8003038:	42ab      	cmp	r3, r5
 800303a:	dc2b      	bgt.n	8003094 <_printf_common+0xa0>
 800303c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003040:	6822      	ldr	r2, [r4, #0]
 8003042:	3b00      	subs	r3, #0
 8003044:	bf18      	it	ne
 8003046:	2301      	movne	r3, #1
 8003048:	0692      	lsls	r2, r2, #26
 800304a:	d430      	bmi.n	80030ae <_printf_common+0xba>
 800304c:	4641      	mov	r1, r8
 800304e:	4638      	mov	r0, r7
 8003050:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003054:	47c8      	blx	r9
 8003056:	3001      	adds	r0, #1
 8003058:	d023      	beq.n	80030a2 <_printf_common+0xae>
 800305a:	6823      	ldr	r3, [r4, #0]
 800305c:	6922      	ldr	r2, [r4, #16]
 800305e:	f003 0306 	and.w	r3, r3, #6
 8003062:	2b04      	cmp	r3, #4
 8003064:	bf14      	ite	ne
 8003066:	2500      	movne	r5, #0
 8003068:	6833      	ldreq	r3, [r6, #0]
 800306a:	f04f 0600 	mov.w	r6, #0
 800306e:	bf08      	it	eq
 8003070:	68e5      	ldreq	r5, [r4, #12]
 8003072:	f104 041a 	add.w	r4, r4, #26
 8003076:	bf08      	it	eq
 8003078:	1aed      	subeq	r5, r5, r3
 800307a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800307e:	bf08      	it	eq
 8003080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003084:	4293      	cmp	r3, r2
 8003086:	bfc4      	itt	gt
 8003088:	1a9b      	subgt	r3, r3, r2
 800308a:	18ed      	addgt	r5, r5, r3
 800308c:	42b5      	cmp	r5, r6
 800308e:	d11a      	bne.n	80030c6 <_printf_common+0xd2>
 8003090:	2000      	movs	r0, #0
 8003092:	e008      	b.n	80030a6 <_printf_common+0xb2>
 8003094:	2301      	movs	r3, #1
 8003096:	4652      	mov	r2, sl
 8003098:	4641      	mov	r1, r8
 800309a:	4638      	mov	r0, r7
 800309c:	47c8      	blx	r9
 800309e:	3001      	adds	r0, #1
 80030a0:	d103      	bne.n	80030aa <_printf_common+0xb6>
 80030a2:	f04f 30ff 	mov.w	r0, #4294967295
 80030a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030aa:	3501      	adds	r5, #1
 80030ac:	e7c1      	b.n	8003032 <_printf_common+0x3e>
 80030ae:	2030      	movs	r0, #48	@ 0x30
 80030b0:	18e1      	adds	r1, r4, r3
 80030b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80030bc:	4422      	add	r2, r4
 80030be:	3302      	adds	r3, #2
 80030c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80030c4:	e7c2      	b.n	800304c <_printf_common+0x58>
 80030c6:	2301      	movs	r3, #1
 80030c8:	4622      	mov	r2, r4
 80030ca:	4641      	mov	r1, r8
 80030cc:	4638      	mov	r0, r7
 80030ce:	47c8      	blx	r9
 80030d0:	3001      	adds	r0, #1
 80030d2:	d0e6      	beq.n	80030a2 <_printf_common+0xae>
 80030d4:	3601      	adds	r6, #1
 80030d6:	e7d9      	b.n	800308c <_printf_common+0x98>

080030d8 <_printf_i>:
 80030d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030dc:	7e0f      	ldrb	r7, [r1, #24]
 80030de:	4691      	mov	r9, r2
 80030e0:	2f78      	cmp	r7, #120	@ 0x78
 80030e2:	4680      	mov	r8, r0
 80030e4:	460c      	mov	r4, r1
 80030e6:	469a      	mov	sl, r3
 80030e8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80030ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80030ee:	d807      	bhi.n	8003100 <_printf_i+0x28>
 80030f0:	2f62      	cmp	r7, #98	@ 0x62
 80030f2:	d80a      	bhi.n	800310a <_printf_i+0x32>
 80030f4:	2f00      	cmp	r7, #0
 80030f6:	f000 80d1 	beq.w	800329c <_printf_i+0x1c4>
 80030fa:	2f58      	cmp	r7, #88	@ 0x58
 80030fc:	f000 80b8 	beq.w	8003270 <_printf_i+0x198>
 8003100:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003104:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003108:	e03a      	b.n	8003180 <_printf_i+0xa8>
 800310a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800310e:	2b15      	cmp	r3, #21
 8003110:	d8f6      	bhi.n	8003100 <_printf_i+0x28>
 8003112:	a101      	add	r1, pc, #4	@ (adr r1, 8003118 <_printf_i+0x40>)
 8003114:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003118:	08003171 	.word	0x08003171
 800311c:	08003185 	.word	0x08003185
 8003120:	08003101 	.word	0x08003101
 8003124:	08003101 	.word	0x08003101
 8003128:	08003101 	.word	0x08003101
 800312c:	08003101 	.word	0x08003101
 8003130:	08003185 	.word	0x08003185
 8003134:	08003101 	.word	0x08003101
 8003138:	08003101 	.word	0x08003101
 800313c:	08003101 	.word	0x08003101
 8003140:	08003101 	.word	0x08003101
 8003144:	08003283 	.word	0x08003283
 8003148:	080031af 	.word	0x080031af
 800314c:	0800323d 	.word	0x0800323d
 8003150:	08003101 	.word	0x08003101
 8003154:	08003101 	.word	0x08003101
 8003158:	080032a5 	.word	0x080032a5
 800315c:	08003101 	.word	0x08003101
 8003160:	080031af 	.word	0x080031af
 8003164:	08003101 	.word	0x08003101
 8003168:	08003101 	.word	0x08003101
 800316c:	08003245 	.word	0x08003245
 8003170:	6833      	ldr	r3, [r6, #0]
 8003172:	1d1a      	adds	r2, r3, #4
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6032      	str	r2, [r6, #0]
 8003178:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800317c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003180:	2301      	movs	r3, #1
 8003182:	e09c      	b.n	80032be <_printf_i+0x1e6>
 8003184:	6833      	ldr	r3, [r6, #0]
 8003186:	6820      	ldr	r0, [r4, #0]
 8003188:	1d19      	adds	r1, r3, #4
 800318a:	6031      	str	r1, [r6, #0]
 800318c:	0606      	lsls	r6, r0, #24
 800318e:	d501      	bpl.n	8003194 <_printf_i+0xbc>
 8003190:	681d      	ldr	r5, [r3, #0]
 8003192:	e003      	b.n	800319c <_printf_i+0xc4>
 8003194:	0645      	lsls	r5, r0, #25
 8003196:	d5fb      	bpl.n	8003190 <_printf_i+0xb8>
 8003198:	f9b3 5000 	ldrsh.w	r5, [r3]
 800319c:	2d00      	cmp	r5, #0
 800319e:	da03      	bge.n	80031a8 <_printf_i+0xd0>
 80031a0:	232d      	movs	r3, #45	@ 0x2d
 80031a2:	426d      	negs	r5, r5
 80031a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80031a8:	230a      	movs	r3, #10
 80031aa:	4858      	ldr	r0, [pc, #352]	@ (800330c <_printf_i+0x234>)
 80031ac:	e011      	b.n	80031d2 <_printf_i+0xfa>
 80031ae:	6821      	ldr	r1, [r4, #0]
 80031b0:	6833      	ldr	r3, [r6, #0]
 80031b2:	0608      	lsls	r0, r1, #24
 80031b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80031b8:	d402      	bmi.n	80031c0 <_printf_i+0xe8>
 80031ba:	0649      	lsls	r1, r1, #25
 80031bc:	bf48      	it	mi
 80031be:	b2ad      	uxthmi	r5, r5
 80031c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80031c2:	6033      	str	r3, [r6, #0]
 80031c4:	bf14      	ite	ne
 80031c6:	230a      	movne	r3, #10
 80031c8:	2308      	moveq	r3, #8
 80031ca:	4850      	ldr	r0, [pc, #320]	@ (800330c <_printf_i+0x234>)
 80031cc:	2100      	movs	r1, #0
 80031ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80031d2:	6866      	ldr	r6, [r4, #4]
 80031d4:	2e00      	cmp	r6, #0
 80031d6:	60a6      	str	r6, [r4, #8]
 80031d8:	db05      	blt.n	80031e6 <_printf_i+0x10e>
 80031da:	6821      	ldr	r1, [r4, #0]
 80031dc:	432e      	orrs	r6, r5
 80031de:	f021 0104 	bic.w	r1, r1, #4
 80031e2:	6021      	str	r1, [r4, #0]
 80031e4:	d04b      	beq.n	800327e <_printf_i+0x1a6>
 80031e6:	4616      	mov	r6, r2
 80031e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80031ec:	fb03 5711 	mls	r7, r3, r1, r5
 80031f0:	5dc7      	ldrb	r7, [r0, r7]
 80031f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80031f6:	462f      	mov	r7, r5
 80031f8:	42bb      	cmp	r3, r7
 80031fa:	460d      	mov	r5, r1
 80031fc:	d9f4      	bls.n	80031e8 <_printf_i+0x110>
 80031fe:	2b08      	cmp	r3, #8
 8003200:	d10b      	bne.n	800321a <_printf_i+0x142>
 8003202:	6823      	ldr	r3, [r4, #0]
 8003204:	07df      	lsls	r7, r3, #31
 8003206:	d508      	bpl.n	800321a <_printf_i+0x142>
 8003208:	6923      	ldr	r3, [r4, #16]
 800320a:	6861      	ldr	r1, [r4, #4]
 800320c:	4299      	cmp	r1, r3
 800320e:	bfde      	ittt	le
 8003210:	2330      	movle	r3, #48	@ 0x30
 8003212:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003216:	f106 36ff 	addle.w	r6, r6, #4294967295
 800321a:	1b92      	subs	r2, r2, r6
 800321c:	6122      	str	r2, [r4, #16]
 800321e:	464b      	mov	r3, r9
 8003220:	4621      	mov	r1, r4
 8003222:	4640      	mov	r0, r8
 8003224:	f8cd a000 	str.w	sl, [sp]
 8003228:	aa03      	add	r2, sp, #12
 800322a:	f7ff fee3 	bl	8002ff4 <_printf_common>
 800322e:	3001      	adds	r0, #1
 8003230:	d14a      	bne.n	80032c8 <_printf_i+0x1f0>
 8003232:	f04f 30ff 	mov.w	r0, #4294967295
 8003236:	b004      	add	sp, #16
 8003238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800323c:	6823      	ldr	r3, [r4, #0]
 800323e:	f043 0320 	orr.w	r3, r3, #32
 8003242:	6023      	str	r3, [r4, #0]
 8003244:	2778      	movs	r7, #120	@ 0x78
 8003246:	4832      	ldr	r0, [pc, #200]	@ (8003310 <_printf_i+0x238>)
 8003248:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800324c:	6823      	ldr	r3, [r4, #0]
 800324e:	6831      	ldr	r1, [r6, #0]
 8003250:	061f      	lsls	r7, r3, #24
 8003252:	f851 5b04 	ldr.w	r5, [r1], #4
 8003256:	d402      	bmi.n	800325e <_printf_i+0x186>
 8003258:	065f      	lsls	r7, r3, #25
 800325a:	bf48      	it	mi
 800325c:	b2ad      	uxthmi	r5, r5
 800325e:	6031      	str	r1, [r6, #0]
 8003260:	07d9      	lsls	r1, r3, #31
 8003262:	bf44      	itt	mi
 8003264:	f043 0320 	orrmi.w	r3, r3, #32
 8003268:	6023      	strmi	r3, [r4, #0]
 800326a:	b11d      	cbz	r5, 8003274 <_printf_i+0x19c>
 800326c:	2310      	movs	r3, #16
 800326e:	e7ad      	b.n	80031cc <_printf_i+0xf4>
 8003270:	4826      	ldr	r0, [pc, #152]	@ (800330c <_printf_i+0x234>)
 8003272:	e7e9      	b.n	8003248 <_printf_i+0x170>
 8003274:	6823      	ldr	r3, [r4, #0]
 8003276:	f023 0320 	bic.w	r3, r3, #32
 800327a:	6023      	str	r3, [r4, #0]
 800327c:	e7f6      	b.n	800326c <_printf_i+0x194>
 800327e:	4616      	mov	r6, r2
 8003280:	e7bd      	b.n	80031fe <_printf_i+0x126>
 8003282:	6833      	ldr	r3, [r6, #0]
 8003284:	6825      	ldr	r5, [r4, #0]
 8003286:	1d18      	adds	r0, r3, #4
 8003288:	6961      	ldr	r1, [r4, #20]
 800328a:	6030      	str	r0, [r6, #0]
 800328c:	062e      	lsls	r6, r5, #24
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	d501      	bpl.n	8003296 <_printf_i+0x1be>
 8003292:	6019      	str	r1, [r3, #0]
 8003294:	e002      	b.n	800329c <_printf_i+0x1c4>
 8003296:	0668      	lsls	r0, r5, #25
 8003298:	d5fb      	bpl.n	8003292 <_printf_i+0x1ba>
 800329a:	8019      	strh	r1, [r3, #0]
 800329c:	2300      	movs	r3, #0
 800329e:	4616      	mov	r6, r2
 80032a0:	6123      	str	r3, [r4, #16]
 80032a2:	e7bc      	b.n	800321e <_printf_i+0x146>
 80032a4:	6833      	ldr	r3, [r6, #0]
 80032a6:	2100      	movs	r1, #0
 80032a8:	1d1a      	adds	r2, r3, #4
 80032aa:	6032      	str	r2, [r6, #0]
 80032ac:	681e      	ldr	r6, [r3, #0]
 80032ae:	6862      	ldr	r2, [r4, #4]
 80032b0:	4630      	mov	r0, r6
 80032b2:	f000 f97b 	bl	80035ac <memchr>
 80032b6:	b108      	cbz	r0, 80032bc <_printf_i+0x1e4>
 80032b8:	1b80      	subs	r0, r0, r6
 80032ba:	6060      	str	r0, [r4, #4]
 80032bc:	6863      	ldr	r3, [r4, #4]
 80032be:	6123      	str	r3, [r4, #16]
 80032c0:	2300      	movs	r3, #0
 80032c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80032c6:	e7aa      	b.n	800321e <_printf_i+0x146>
 80032c8:	4632      	mov	r2, r6
 80032ca:	4649      	mov	r1, r9
 80032cc:	4640      	mov	r0, r8
 80032ce:	6923      	ldr	r3, [r4, #16]
 80032d0:	47d0      	blx	sl
 80032d2:	3001      	adds	r0, #1
 80032d4:	d0ad      	beq.n	8003232 <_printf_i+0x15a>
 80032d6:	6823      	ldr	r3, [r4, #0]
 80032d8:	079b      	lsls	r3, r3, #30
 80032da:	d413      	bmi.n	8003304 <_printf_i+0x22c>
 80032dc:	68e0      	ldr	r0, [r4, #12]
 80032de:	9b03      	ldr	r3, [sp, #12]
 80032e0:	4298      	cmp	r0, r3
 80032e2:	bfb8      	it	lt
 80032e4:	4618      	movlt	r0, r3
 80032e6:	e7a6      	b.n	8003236 <_printf_i+0x15e>
 80032e8:	2301      	movs	r3, #1
 80032ea:	4632      	mov	r2, r6
 80032ec:	4649      	mov	r1, r9
 80032ee:	4640      	mov	r0, r8
 80032f0:	47d0      	blx	sl
 80032f2:	3001      	adds	r0, #1
 80032f4:	d09d      	beq.n	8003232 <_printf_i+0x15a>
 80032f6:	3501      	adds	r5, #1
 80032f8:	68e3      	ldr	r3, [r4, #12]
 80032fa:	9903      	ldr	r1, [sp, #12]
 80032fc:	1a5b      	subs	r3, r3, r1
 80032fe:	42ab      	cmp	r3, r5
 8003300:	dcf2      	bgt.n	80032e8 <_printf_i+0x210>
 8003302:	e7eb      	b.n	80032dc <_printf_i+0x204>
 8003304:	2500      	movs	r5, #0
 8003306:	f104 0619 	add.w	r6, r4, #25
 800330a:	e7f5      	b.n	80032f8 <_printf_i+0x220>
 800330c:	08003733 	.word	0x08003733
 8003310:	08003744 	.word	0x08003744

08003314 <__sflush_r>:
 8003314:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800331a:	0716      	lsls	r6, r2, #28
 800331c:	4605      	mov	r5, r0
 800331e:	460c      	mov	r4, r1
 8003320:	d454      	bmi.n	80033cc <__sflush_r+0xb8>
 8003322:	684b      	ldr	r3, [r1, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	dc02      	bgt.n	800332e <__sflush_r+0x1a>
 8003328:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800332a:	2b00      	cmp	r3, #0
 800332c:	dd48      	ble.n	80033c0 <__sflush_r+0xac>
 800332e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003330:	2e00      	cmp	r6, #0
 8003332:	d045      	beq.n	80033c0 <__sflush_r+0xac>
 8003334:	2300      	movs	r3, #0
 8003336:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800333a:	682f      	ldr	r7, [r5, #0]
 800333c:	6a21      	ldr	r1, [r4, #32]
 800333e:	602b      	str	r3, [r5, #0]
 8003340:	d030      	beq.n	80033a4 <__sflush_r+0x90>
 8003342:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003344:	89a3      	ldrh	r3, [r4, #12]
 8003346:	0759      	lsls	r1, r3, #29
 8003348:	d505      	bpl.n	8003356 <__sflush_r+0x42>
 800334a:	6863      	ldr	r3, [r4, #4]
 800334c:	1ad2      	subs	r2, r2, r3
 800334e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003350:	b10b      	cbz	r3, 8003356 <__sflush_r+0x42>
 8003352:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003354:	1ad2      	subs	r2, r2, r3
 8003356:	2300      	movs	r3, #0
 8003358:	4628      	mov	r0, r5
 800335a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800335c:	6a21      	ldr	r1, [r4, #32]
 800335e:	47b0      	blx	r6
 8003360:	1c43      	adds	r3, r0, #1
 8003362:	89a3      	ldrh	r3, [r4, #12]
 8003364:	d106      	bne.n	8003374 <__sflush_r+0x60>
 8003366:	6829      	ldr	r1, [r5, #0]
 8003368:	291d      	cmp	r1, #29
 800336a:	d82b      	bhi.n	80033c4 <__sflush_r+0xb0>
 800336c:	4a28      	ldr	r2, [pc, #160]	@ (8003410 <__sflush_r+0xfc>)
 800336e:	40ca      	lsrs	r2, r1
 8003370:	07d6      	lsls	r6, r2, #31
 8003372:	d527      	bpl.n	80033c4 <__sflush_r+0xb0>
 8003374:	2200      	movs	r2, #0
 8003376:	6062      	str	r2, [r4, #4]
 8003378:	6922      	ldr	r2, [r4, #16]
 800337a:	04d9      	lsls	r1, r3, #19
 800337c:	6022      	str	r2, [r4, #0]
 800337e:	d504      	bpl.n	800338a <__sflush_r+0x76>
 8003380:	1c42      	adds	r2, r0, #1
 8003382:	d101      	bne.n	8003388 <__sflush_r+0x74>
 8003384:	682b      	ldr	r3, [r5, #0]
 8003386:	b903      	cbnz	r3, 800338a <__sflush_r+0x76>
 8003388:	6560      	str	r0, [r4, #84]	@ 0x54
 800338a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800338c:	602f      	str	r7, [r5, #0]
 800338e:	b1b9      	cbz	r1, 80033c0 <__sflush_r+0xac>
 8003390:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003394:	4299      	cmp	r1, r3
 8003396:	d002      	beq.n	800339e <__sflush_r+0x8a>
 8003398:	4628      	mov	r0, r5
 800339a:	f7ff fbf5 	bl	8002b88 <_free_r>
 800339e:	2300      	movs	r3, #0
 80033a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80033a2:	e00d      	b.n	80033c0 <__sflush_r+0xac>
 80033a4:	2301      	movs	r3, #1
 80033a6:	4628      	mov	r0, r5
 80033a8:	47b0      	blx	r6
 80033aa:	4602      	mov	r2, r0
 80033ac:	1c50      	adds	r0, r2, #1
 80033ae:	d1c9      	bne.n	8003344 <__sflush_r+0x30>
 80033b0:	682b      	ldr	r3, [r5, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0c6      	beq.n	8003344 <__sflush_r+0x30>
 80033b6:	2b1d      	cmp	r3, #29
 80033b8:	d001      	beq.n	80033be <__sflush_r+0xaa>
 80033ba:	2b16      	cmp	r3, #22
 80033bc:	d11d      	bne.n	80033fa <__sflush_r+0xe6>
 80033be:	602f      	str	r7, [r5, #0]
 80033c0:	2000      	movs	r0, #0
 80033c2:	e021      	b.n	8003408 <__sflush_r+0xf4>
 80033c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033c8:	b21b      	sxth	r3, r3
 80033ca:	e01a      	b.n	8003402 <__sflush_r+0xee>
 80033cc:	690f      	ldr	r7, [r1, #16]
 80033ce:	2f00      	cmp	r7, #0
 80033d0:	d0f6      	beq.n	80033c0 <__sflush_r+0xac>
 80033d2:	0793      	lsls	r3, r2, #30
 80033d4:	bf18      	it	ne
 80033d6:	2300      	movne	r3, #0
 80033d8:	680e      	ldr	r6, [r1, #0]
 80033da:	bf08      	it	eq
 80033dc:	694b      	ldreq	r3, [r1, #20]
 80033de:	1bf6      	subs	r6, r6, r7
 80033e0:	600f      	str	r7, [r1, #0]
 80033e2:	608b      	str	r3, [r1, #8]
 80033e4:	2e00      	cmp	r6, #0
 80033e6:	ddeb      	ble.n	80033c0 <__sflush_r+0xac>
 80033e8:	4633      	mov	r3, r6
 80033ea:	463a      	mov	r2, r7
 80033ec:	4628      	mov	r0, r5
 80033ee:	6a21      	ldr	r1, [r4, #32]
 80033f0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80033f4:	47e0      	blx	ip
 80033f6:	2800      	cmp	r0, #0
 80033f8:	dc07      	bgt.n	800340a <__sflush_r+0xf6>
 80033fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003402:	f04f 30ff 	mov.w	r0, #4294967295
 8003406:	81a3      	strh	r3, [r4, #12]
 8003408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800340a:	4407      	add	r7, r0
 800340c:	1a36      	subs	r6, r6, r0
 800340e:	e7e9      	b.n	80033e4 <__sflush_r+0xd0>
 8003410:	20400001 	.word	0x20400001

08003414 <_fflush_r>:
 8003414:	b538      	push	{r3, r4, r5, lr}
 8003416:	690b      	ldr	r3, [r1, #16]
 8003418:	4605      	mov	r5, r0
 800341a:	460c      	mov	r4, r1
 800341c:	b913      	cbnz	r3, 8003424 <_fflush_r+0x10>
 800341e:	2500      	movs	r5, #0
 8003420:	4628      	mov	r0, r5
 8003422:	bd38      	pop	{r3, r4, r5, pc}
 8003424:	b118      	cbz	r0, 800342e <_fflush_r+0x1a>
 8003426:	6a03      	ldr	r3, [r0, #32]
 8003428:	b90b      	cbnz	r3, 800342e <_fflush_r+0x1a>
 800342a:	f7ff faa5 	bl	8002978 <__sinit>
 800342e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0f3      	beq.n	800341e <_fflush_r+0xa>
 8003436:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003438:	07d0      	lsls	r0, r2, #31
 800343a:	d404      	bmi.n	8003446 <_fflush_r+0x32>
 800343c:	0599      	lsls	r1, r3, #22
 800343e:	d402      	bmi.n	8003446 <_fflush_r+0x32>
 8003440:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003442:	f7ff fb9e 	bl	8002b82 <__retarget_lock_acquire_recursive>
 8003446:	4628      	mov	r0, r5
 8003448:	4621      	mov	r1, r4
 800344a:	f7ff ff63 	bl	8003314 <__sflush_r>
 800344e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003450:	4605      	mov	r5, r0
 8003452:	07da      	lsls	r2, r3, #31
 8003454:	d4e4      	bmi.n	8003420 <_fflush_r+0xc>
 8003456:	89a3      	ldrh	r3, [r4, #12]
 8003458:	059b      	lsls	r3, r3, #22
 800345a:	d4e1      	bmi.n	8003420 <_fflush_r+0xc>
 800345c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800345e:	f7ff fb91 	bl	8002b84 <__retarget_lock_release_recursive>
 8003462:	e7dd      	b.n	8003420 <_fflush_r+0xc>

08003464 <__swbuf_r>:
 8003464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003466:	460e      	mov	r6, r1
 8003468:	4614      	mov	r4, r2
 800346a:	4605      	mov	r5, r0
 800346c:	b118      	cbz	r0, 8003476 <__swbuf_r+0x12>
 800346e:	6a03      	ldr	r3, [r0, #32]
 8003470:	b90b      	cbnz	r3, 8003476 <__swbuf_r+0x12>
 8003472:	f7ff fa81 	bl	8002978 <__sinit>
 8003476:	69a3      	ldr	r3, [r4, #24]
 8003478:	60a3      	str	r3, [r4, #8]
 800347a:	89a3      	ldrh	r3, [r4, #12]
 800347c:	071a      	lsls	r2, r3, #28
 800347e:	d501      	bpl.n	8003484 <__swbuf_r+0x20>
 8003480:	6923      	ldr	r3, [r4, #16]
 8003482:	b943      	cbnz	r3, 8003496 <__swbuf_r+0x32>
 8003484:	4621      	mov	r1, r4
 8003486:	4628      	mov	r0, r5
 8003488:	f000 f82a 	bl	80034e0 <__swsetup_r>
 800348c:	b118      	cbz	r0, 8003496 <__swbuf_r+0x32>
 800348e:	f04f 37ff 	mov.w	r7, #4294967295
 8003492:	4638      	mov	r0, r7
 8003494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003496:	6823      	ldr	r3, [r4, #0]
 8003498:	6922      	ldr	r2, [r4, #16]
 800349a:	b2f6      	uxtb	r6, r6
 800349c:	1a98      	subs	r0, r3, r2
 800349e:	6963      	ldr	r3, [r4, #20]
 80034a0:	4637      	mov	r7, r6
 80034a2:	4283      	cmp	r3, r0
 80034a4:	dc05      	bgt.n	80034b2 <__swbuf_r+0x4e>
 80034a6:	4621      	mov	r1, r4
 80034a8:	4628      	mov	r0, r5
 80034aa:	f7ff ffb3 	bl	8003414 <_fflush_r>
 80034ae:	2800      	cmp	r0, #0
 80034b0:	d1ed      	bne.n	800348e <__swbuf_r+0x2a>
 80034b2:	68a3      	ldr	r3, [r4, #8]
 80034b4:	3b01      	subs	r3, #1
 80034b6:	60a3      	str	r3, [r4, #8]
 80034b8:	6823      	ldr	r3, [r4, #0]
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	6022      	str	r2, [r4, #0]
 80034be:	701e      	strb	r6, [r3, #0]
 80034c0:	6962      	ldr	r2, [r4, #20]
 80034c2:	1c43      	adds	r3, r0, #1
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d004      	beq.n	80034d2 <__swbuf_r+0x6e>
 80034c8:	89a3      	ldrh	r3, [r4, #12]
 80034ca:	07db      	lsls	r3, r3, #31
 80034cc:	d5e1      	bpl.n	8003492 <__swbuf_r+0x2e>
 80034ce:	2e0a      	cmp	r6, #10
 80034d0:	d1df      	bne.n	8003492 <__swbuf_r+0x2e>
 80034d2:	4621      	mov	r1, r4
 80034d4:	4628      	mov	r0, r5
 80034d6:	f7ff ff9d 	bl	8003414 <_fflush_r>
 80034da:	2800      	cmp	r0, #0
 80034dc:	d0d9      	beq.n	8003492 <__swbuf_r+0x2e>
 80034de:	e7d6      	b.n	800348e <__swbuf_r+0x2a>

080034e0 <__swsetup_r>:
 80034e0:	b538      	push	{r3, r4, r5, lr}
 80034e2:	4b29      	ldr	r3, [pc, #164]	@ (8003588 <__swsetup_r+0xa8>)
 80034e4:	4605      	mov	r5, r0
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	460c      	mov	r4, r1
 80034ea:	b118      	cbz	r0, 80034f4 <__swsetup_r+0x14>
 80034ec:	6a03      	ldr	r3, [r0, #32]
 80034ee:	b90b      	cbnz	r3, 80034f4 <__swsetup_r+0x14>
 80034f0:	f7ff fa42 	bl	8002978 <__sinit>
 80034f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034f8:	0719      	lsls	r1, r3, #28
 80034fa:	d422      	bmi.n	8003542 <__swsetup_r+0x62>
 80034fc:	06da      	lsls	r2, r3, #27
 80034fe:	d407      	bmi.n	8003510 <__swsetup_r+0x30>
 8003500:	2209      	movs	r2, #9
 8003502:	602a      	str	r2, [r5, #0]
 8003504:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003508:	f04f 30ff 	mov.w	r0, #4294967295
 800350c:	81a3      	strh	r3, [r4, #12]
 800350e:	e033      	b.n	8003578 <__swsetup_r+0x98>
 8003510:	0758      	lsls	r0, r3, #29
 8003512:	d512      	bpl.n	800353a <__swsetup_r+0x5a>
 8003514:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003516:	b141      	cbz	r1, 800352a <__swsetup_r+0x4a>
 8003518:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800351c:	4299      	cmp	r1, r3
 800351e:	d002      	beq.n	8003526 <__swsetup_r+0x46>
 8003520:	4628      	mov	r0, r5
 8003522:	f7ff fb31 	bl	8002b88 <_free_r>
 8003526:	2300      	movs	r3, #0
 8003528:	6363      	str	r3, [r4, #52]	@ 0x34
 800352a:	89a3      	ldrh	r3, [r4, #12]
 800352c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003530:	81a3      	strh	r3, [r4, #12]
 8003532:	2300      	movs	r3, #0
 8003534:	6063      	str	r3, [r4, #4]
 8003536:	6923      	ldr	r3, [r4, #16]
 8003538:	6023      	str	r3, [r4, #0]
 800353a:	89a3      	ldrh	r3, [r4, #12]
 800353c:	f043 0308 	orr.w	r3, r3, #8
 8003540:	81a3      	strh	r3, [r4, #12]
 8003542:	6923      	ldr	r3, [r4, #16]
 8003544:	b94b      	cbnz	r3, 800355a <__swsetup_r+0x7a>
 8003546:	89a3      	ldrh	r3, [r4, #12]
 8003548:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800354c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003550:	d003      	beq.n	800355a <__swsetup_r+0x7a>
 8003552:	4621      	mov	r1, r4
 8003554:	4628      	mov	r0, r5
 8003556:	f000 f85c 	bl	8003612 <__smakebuf_r>
 800355a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800355e:	f013 0201 	ands.w	r2, r3, #1
 8003562:	d00a      	beq.n	800357a <__swsetup_r+0x9a>
 8003564:	2200      	movs	r2, #0
 8003566:	60a2      	str	r2, [r4, #8]
 8003568:	6962      	ldr	r2, [r4, #20]
 800356a:	4252      	negs	r2, r2
 800356c:	61a2      	str	r2, [r4, #24]
 800356e:	6922      	ldr	r2, [r4, #16]
 8003570:	b942      	cbnz	r2, 8003584 <__swsetup_r+0xa4>
 8003572:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003576:	d1c5      	bne.n	8003504 <__swsetup_r+0x24>
 8003578:	bd38      	pop	{r3, r4, r5, pc}
 800357a:	0799      	lsls	r1, r3, #30
 800357c:	bf58      	it	pl
 800357e:	6962      	ldrpl	r2, [r4, #20]
 8003580:	60a2      	str	r2, [r4, #8]
 8003582:	e7f4      	b.n	800356e <__swsetup_r+0x8e>
 8003584:	2000      	movs	r0, #0
 8003586:	e7f7      	b.n	8003578 <__swsetup_r+0x98>
 8003588:	20000018 	.word	0x20000018

0800358c <_sbrk_r>:
 800358c:	b538      	push	{r3, r4, r5, lr}
 800358e:	2300      	movs	r3, #0
 8003590:	4d05      	ldr	r5, [pc, #20]	@ (80035a8 <_sbrk_r+0x1c>)
 8003592:	4604      	mov	r4, r0
 8003594:	4608      	mov	r0, r1
 8003596:	602b      	str	r3, [r5, #0]
 8003598:	f7fd f96c 	bl	8000874 <_sbrk>
 800359c:	1c43      	adds	r3, r0, #1
 800359e:	d102      	bne.n	80035a6 <_sbrk_r+0x1a>
 80035a0:	682b      	ldr	r3, [r5, #0]
 80035a2:	b103      	cbz	r3, 80035a6 <_sbrk_r+0x1a>
 80035a4:	6023      	str	r3, [r4, #0]
 80035a6:	bd38      	pop	{r3, r4, r5, pc}
 80035a8:	20000258 	.word	0x20000258

080035ac <memchr>:
 80035ac:	4603      	mov	r3, r0
 80035ae:	b510      	push	{r4, lr}
 80035b0:	b2c9      	uxtb	r1, r1
 80035b2:	4402      	add	r2, r0
 80035b4:	4293      	cmp	r3, r2
 80035b6:	4618      	mov	r0, r3
 80035b8:	d101      	bne.n	80035be <memchr+0x12>
 80035ba:	2000      	movs	r0, #0
 80035bc:	e003      	b.n	80035c6 <memchr+0x1a>
 80035be:	7804      	ldrb	r4, [r0, #0]
 80035c0:	3301      	adds	r3, #1
 80035c2:	428c      	cmp	r4, r1
 80035c4:	d1f6      	bne.n	80035b4 <memchr+0x8>
 80035c6:	bd10      	pop	{r4, pc}

080035c8 <__swhatbuf_r>:
 80035c8:	b570      	push	{r4, r5, r6, lr}
 80035ca:	460c      	mov	r4, r1
 80035cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035d0:	4615      	mov	r5, r2
 80035d2:	2900      	cmp	r1, #0
 80035d4:	461e      	mov	r6, r3
 80035d6:	b096      	sub	sp, #88	@ 0x58
 80035d8:	da0c      	bge.n	80035f4 <__swhatbuf_r+0x2c>
 80035da:	89a3      	ldrh	r3, [r4, #12]
 80035dc:	2100      	movs	r1, #0
 80035de:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80035e2:	bf14      	ite	ne
 80035e4:	2340      	movne	r3, #64	@ 0x40
 80035e6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80035ea:	2000      	movs	r0, #0
 80035ec:	6031      	str	r1, [r6, #0]
 80035ee:	602b      	str	r3, [r5, #0]
 80035f0:	b016      	add	sp, #88	@ 0x58
 80035f2:	bd70      	pop	{r4, r5, r6, pc}
 80035f4:	466a      	mov	r2, sp
 80035f6:	f000 f849 	bl	800368c <_fstat_r>
 80035fa:	2800      	cmp	r0, #0
 80035fc:	dbed      	blt.n	80035da <__swhatbuf_r+0x12>
 80035fe:	9901      	ldr	r1, [sp, #4]
 8003600:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003604:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003608:	4259      	negs	r1, r3
 800360a:	4159      	adcs	r1, r3
 800360c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003610:	e7eb      	b.n	80035ea <__swhatbuf_r+0x22>

08003612 <__smakebuf_r>:
 8003612:	898b      	ldrh	r3, [r1, #12]
 8003614:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003616:	079d      	lsls	r5, r3, #30
 8003618:	4606      	mov	r6, r0
 800361a:	460c      	mov	r4, r1
 800361c:	d507      	bpl.n	800362e <__smakebuf_r+0x1c>
 800361e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003622:	6023      	str	r3, [r4, #0]
 8003624:	6123      	str	r3, [r4, #16]
 8003626:	2301      	movs	r3, #1
 8003628:	6163      	str	r3, [r4, #20]
 800362a:	b003      	add	sp, #12
 800362c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800362e:	466a      	mov	r2, sp
 8003630:	ab01      	add	r3, sp, #4
 8003632:	f7ff ffc9 	bl	80035c8 <__swhatbuf_r>
 8003636:	9f00      	ldr	r7, [sp, #0]
 8003638:	4605      	mov	r5, r0
 800363a:	4639      	mov	r1, r7
 800363c:	4630      	mov	r0, r6
 800363e:	f7ff fb0d 	bl	8002c5c <_malloc_r>
 8003642:	b948      	cbnz	r0, 8003658 <__smakebuf_r+0x46>
 8003644:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003648:	059a      	lsls	r2, r3, #22
 800364a:	d4ee      	bmi.n	800362a <__smakebuf_r+0x18>
 800364c:	f023 0303 	bic.w	r3, r3, #3
 8003650:	f043 0302 	orr.w	r3, r3, #2
 8003654:	81a3      	strh	r3, [r4, #12]
 8003656:	e7e2      	b.n	800361e <__smakebuf_r+0xc>
 8003658:	89a3      	ldrh	r3, [r4, #12]
 800365a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800365e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003662:	81a3      	strh	r3, [r4, #12]
 8003664:	9b01      	ldr	r3, [sp, #4]
 8003666:	6020      	str	r0, [r4, #0]
 8003668:	b15b      	cbz	r3, 8003682 <__smakebuf_r+0x70>
 800366a:	4630      	mov	r0, r6
 800366c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003670:	f000 f81e 	bl	80036b0 <_isatty_r>
 8003674:	b128      	cbz	r0, 8003682 <__smakebuf_r+0x70>
 8003676:	89a3      	ldrh	r3, [r4, #12]
 8003678:	f023 0303 	bic.w	r3, r3, #3
 800367c:	f043 0301 	orr.w	r3, r3, #1
 8003680:	81a3      	strh	r3, [r4, #12]
 8003682:	89a3      	ldrh	r3, [r4, #12]
 8003684:	431d      	orrs	r5, r3
 8003686:	81a5      	strh	r5, [r4, #12]
 8003688:	e7cf      	b.n	800362a <__smakebuf_r+0x18>
	...

0800368c <_fstat_r>:
 800368c:	b538      	push	{r3, r4, r5, lr}
 800368e:	2300      	movs	r3, #0
 8003690:	4d06      	ldr	r5, [pc, #24]	@ (80036ac <_fstat_r+0x20>)
 8003692:	4604      	mov	r4, r0
 8003694:	4608      	mov	r0, r1
 8003696:	4611      	mov	r1, r2
 8003698:	602b      	str	r3, [r5, #0]
 800369a:	f7fd f8c5 	bl	8000828 <_fstat>
 800369e:	1c43      	adds	r3, r0, #1
 80036a0:	d102      	bne.n	80036a8 <_fstat_r+0x1c>
 80036a2:	682b      	ldr	r3, [r5, #0]
 80036a4:	b103      	cbz	r3, 80036a8 <_fstat_r+0x1c>
 80036a6:	6023      	str	r3, [r4, #0]
 80036a8:	bd38      	pop	{r3, r4, r5, pc}
 80036aa:	bf00      	nop
 80036ac:	20000258 	.word	0x20000258

080036b0 <_isatty_r>:
 80036b0:	b538      	push	{r3, r4, r5, lr}
 80036b2:	2300      	movs	r3, #0
 80036b4:	4d05      	ldr	r5, [pc, #20]	@ (80036cc <_isatty_r+0x1c>)
 80036b6:	4604      	mov	r4, r0
 80036b8:	4608      	mov	r0, r1
 80036ba:	602b      	str	r3, [r5, #0]
 80036bc:	f7fd f8c3 	bl	8000846 <_isatty>
 80036c0:	1c43      	adds	r3, r0, #1
 80036c2:	d102      	bne.n	80036ca <_isatty_r+0x1a>
 80036c4:	682b      	ldr	r3, [r5, #0]
 80036c6:	b103      	cbz	r3, 80036ca <_isatty_r+0x1a>
 80036c8:	6023      	str	r3, [r4, #0]
 80036ca:	bd38      	pop	{r3, r4, r5, pc}
 80036cc:	20000258 	.word	0x20000258

080036d0 <_init>:
 80036d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d2:	bf00      	nop
 80036d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036d6:	bc08      	pop	{r3}
 80036d8:	469e      	mov	lr, r3
 80036da:	4770      	bx	lr

080036dc <_fini>:
 80036dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036de:	bf00      	nop
 80036e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036e2:	bc08      	pop	{r3}
 80036e4:	469e      	mov	lr, r3
 80036e6:	4770      	bx	lr
