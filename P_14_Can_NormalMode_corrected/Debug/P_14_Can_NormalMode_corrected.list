
P_14_Can_NormalMode_corrected.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003628  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003734  08003734  00004734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037a4  080037a4  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080037a4  080037a4  00005068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080037a4  080037a4  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037a4  080037a4  000047a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037a8  080037a8  000047a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080037ac  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000068  08003814  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08003814  00005268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a0c0  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b41  00000000  00000000  0000f151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  00010c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a3  00000000  00000000  000117e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186cf  00000000  00000000  00012083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc59  00000000  00000000  0002a752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c4e4  00000000  00000000  000363ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c288f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003674  00000000  00000000  000c28d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000c5f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	0800371c 	.word	0x0800371c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	0800371c 	.word	0x0800371c

0800014c <SysTick_Handler>:

extern CAN_HandleTypeDef can1;
extern TIM_HandleTypeDef tim2;

void SysTick_Handler(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000150:	f000 fc64 	bl	8000a1c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000154:	f001 fbcb 	bl	80018ee <HAL_SYSTICK_IRQHandler>
}
 8000158:	bf00      	nop
 800015a:	bd80      	pop	{r7, pc}

0800015c <EXTI9_5_IRQHandler>:

// for button, when button is pressed the timer is started and button is on pin_no_8
void EXTI9_5_IRQHandler(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&tim2);
 8000160:	4804      	ldr	r0, [pc, #16]	@ (8000174 <EXTI9_5_IRQHandler+0x18>)
 8000162:	f002 f9bd 	bl	80024e0 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000166:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800016a:	f001 fd69 	bl	8001c40 <HAL_GPIO_EXTI_IRQHandler>
}
 800016e:	bf00      	nop
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	200000ac 	.word	0x200000ac

08000178 <TIM2_IRQHandler>:



void TIM2_IRQHandler(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&tim2);
 800017c:	4802      	ldr	r0, [pc, #8]	@ (8000188 <TIM2_IRQHandler+0x10>)
 800017e:	f002 fa01 	bl	8002584 <HAL_TIM_IRQHandler>
}
 8000182:	bf00      	nop
 8000184:	bd80      	pop	{r7, pc}
 8000186:	bf00      	nop
 8000188:	200000ac 	.word	0x200000ac

0800018c <USB_HP_CAN1_TX_IRQHandler>:

void USB_HP_CAN1_TX_IRQHandler(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&can1);
 8000190:	4802      	ldr	r0, [pc, #8]	@ (800019c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000192:	f001 f87c 	bl	800128e <HAL_CAN_IRQHandler>
}
 8000196:	bf00      	nop
 8000198:	bd80      	pop	{r7, pc}
 800019a:	bf00      	nop
 800019c:	20000084 	.word	0x20000084

080001a0 <USB_LP_CAN1_RX0_IRQHandler>:

void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&can1);
 80001a4:	4802      	ldr	r0, [pc, #8]	@ (80001b0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80001a6:	f001 f872 	bl	800128e <HAL_CAN_IRQHandler>
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	20000084 	.word	0x20000084

080001b4 <CAN1_RX1_IRQHandler>:


void CAN1_RX1_IRQHandler(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&can1);
 80001b8:	4802      	ldr	r0, [pc, #8]	@ (80001c4 <CAN1_RX1_IRQHandler+0x10>)
 80001ba:	f001 f868 	bl	800128e <HAL_CAN_IRQHandler>
}
 80001be:	bf00      	nop
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	20000084 	.word	0x20000084

080001c8 <CAN1_SCE_IRQHandler>:

void CAN1_SCE_IRQHandler(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&can1);
 80001cc:	4802      	ldr	r0, [pc, #8]	@ (80001d8 <CAN1_SCE_IRQHandler+0x10>)
 80001ce:	f001 f85e 	bl	800128e <HAL_CAN_IRQHandler>
}
 80001d2:	bf00      	nop
 80001d4:	bd80      	pop	{r7, pc}
 80001d6:	bf00      	nop
 80001d8:	20000084 	.word	0x20000084

080001dc <main>:
TIM_HandleTypeDef tim2;
CAN_RxHeaderTypeDef RxHeader;


int main(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	HAL_Init();
 80001e0:	f000 fbd0 	bl	8000984 <HAL_Init>
	SysClk_config(); // we are using HSE here which is 8Mhz
 80001e4:	f000 f824 	bl	8000230 <SysClk_config>

	tim2_init();
 80001e8:	f000 f96c 	bl	80004c4 <tim2_init>
	gpio_init();
 80001ec:	f000 f858 	bl	80002a0 <gpio_init>
	CAN1_init();
 80001f0:	f000 f896 	bl	8000320 <CAN1_init>
	CAN1_Filter_init();
 80001f4:	f000 f8fa 	bl	80003ec <CAN1_Filter_init>



	// here the interrupts are enabled for can
	if(HAL_CAN_ActivateNotification(&can1, CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF) != HAL_OK)  Error_Handler();
 80001f8:	f240 4103 	movw	r1, #1027	@ 0x403
 80001fc:	480a      	ldr	r0, [pc, #40]	@ (8000228 <main+0x4c>)
 80001fe:	f001 f821 	bl	8001244 <HAL_CAN_ActivateNotification>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d001      	beq.n	800020c <main+0x30>
 8000208:	f000 fa54 	bl	80006b4 <Error_Handler>

	if(HAL_CAN_Start(&can1) != HAL_OK) Error_Handler();
 800020c:	4806      	ldr	r0, [pc, #24]	@ (8000228 <main+0x4c>)
 800020e:	f000 fde5 	bl	8000ddc <HAL_CAN_Start>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d001      	beq.n	800021c <main+0x40>
 8000218:	f000 fa4c 	bl	80006b4 <Error_Handler>



	HAL_TIM_Base_Start_IT(&tim2);
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <main+0x50>)
 800021e:	f002 f95f 	bl	80024e0 <HAL_TIM_Base_Start_IT>


	while(1);
 8000222:	bf00      	nop
 8000224:	e7fd      	b.n	8000222 <main+0x46>
 8000226:	bf00      	nop
 8000228:	20000084 	.word	0x20000084
 800022c:	200000ac 	.word	0x200000ac

08000230 <SysClk_config>:

}

void SysClk_config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b090      	sub	sp, #64	@ 0x40
 8000234:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef hse;
	memset(&hse, 0, sizeof(hse));
 8000236:	f107 0318 	add.w	r3, r7, #24
 800023a:	2228      	movs	r2, #40	@ 0x28
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f002 fc4b 	bl	8002ada <memset>
	hse.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000244:	2301      	movs	r3, #1
 8000246:	61bb      	str	r3, [r7, #24]
	hse.HSEState = RCC_HSE_ON;
 8000248:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800024c:	61fb      	str	r3, [r7, #28]
	hse.PLL.PLLState = RCC_PLL_NONE;
 800024e:	2300      	movs	r3, #0
 8000250:	637b      	str	r3, [r7, #52]	@ 0x34
	if(HAL_RCC_OscConfig(&hse) != HAL_OK) Error_Handler();
 8000252:	f107 0318 	add.w	r3, r7, #24
 8000256:	4618      	mov	r0, r3
 8000258:	f001 fd14 	bl	8001c84 <HAL_RCC_OscConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SysClk_config+0x36>
 8000262:	f000 fa27 	bl	80006b4 <Error_Handler>
	RCC_ClkInitTypeDef clk;
	clk.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000266:	2301      	movs	r3, #1
 8000268:	60bb      	str	r3, [r7, #8]
	clk.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 800026a:	230f      	movs	r3, #15
 800026c:	607b      	str	r3, [r7, #4]
			RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	clk.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	60fb      	str	r3, [r7, #12]
	clk.APB1CLKDivider = RCC_HCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	613b      	str	r3, [r7, #16]
	clk.APB2CLKDivider = RCC_HCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	617b      	str	r3, [r7, #20]
	if(HAL_RCC_ClockConfig(&clk, FLASH_ACR_LATENCY_0) != HAL_OK) Error_Handler();
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	2101      	movs	r1, #1
 800027e:	4618      	mov	r0, r3
 8000280:	f001 ff82 	bl	8002188 <HAL_RCC_ClockConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SysClk_config+0x5e>
 800028a:	f000 fa13 	bl	80006b4 <Error_Handler>
	__HAL_RCC_HSI_DISABLE();// always disable hsi after making hse as clock source not before that
 800028e:	4b03      	ldr	r3, [pc, #12]	@ (800029c <SysClk_config+0x6c>)
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]

}
 8000294:	bf00      	nop
 8000296:	3740      	adds	r7, #64	@ 0x40
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	42420000 	.word	0x42420000

080002a0 <gpio_init>:

void gpio_init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b086      	sub	sp, #24
 80002a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio;

	// for led init
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80002a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000310 <gpio_init+0x70>)
 80002a8:	699b      	ldr	r3, [r3, #24]
 80002aa:	4a19      	ldr	r2, [pc, #100]	@ (8000310 <gpio_init+0x70>)
 80002ac:	f043 0310 	orr.w	r3, r3, #16
 80002b0:	6193      	str	r3, [r2, #24]
 80002b2:	4b17      	ldr	r3, [pc, #92]	@ (8000310 <gpio_init+0x70>)
 80002b4:	699b      	ldr	r3, [r3, #24]
 80002b6:	f003 0310 	and.w	r3, r3, #16
 80002ba:	607b      	str	r3, [r7, #4]
 80002bc:	687b      	ldr	r3, [r7, #4]

	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 80002be:	2301      	movs	r3, #1
 80002c0:	60fb      	str	r3, [r7, #12]
	gpio.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80002c2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80002c6:	60bb      	str	r3, [r7, #8]
	gpio.Pull = GPIO_NOPULL;
 80002c8:	2300      	movs	r3, #0
 80002ca:	613b      	str	r3, [r7, #16]
	gpio.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80002cc:	2301      	movs	r3, #1
 80002ce:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &gpio);
 80002d0:	f107 0308 	add.w	r3, r7, #8
 80002d4:	4619      	mov	r1, r3
 80002d6:	480f      	ldr	r0, [pc, #60]	@ (8000314 <gpio_init+0x74>)
 80002d8:	f001 fb16 	bl	8001908 <HAL_GPIO_Init>

	gpio.Pin = GPIO_PIN_10;
 80002dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002e0:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOA, &gpio);
 80002e2:	f107 0308 	add.w	r3, r7, #8
 80002e6:	4619      	mov	r1, r3
 80002e8:	480b      	ldr	r0, [pc, #44]	@ (8000318 <gpio_init+0x78>)
 80002ea:	f001 fb0d 	bl	8001908 <HAL_GPIO_Init>

	// for button init
	gpio.Pin = GPIO_PIN_8;
 80002ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002f2:	60bb      	str	r3, [r7, #8]
	gpio.Mode = GPIO_MODE_IT_FALLING;
 80002f4:	4b09      	ldr	r3, [pc, #36]	@ (800031c <gpio_init+0x7c>)
 80002f6:	60fb      	str	r3, [r7, #12]
	gpio.Pull = GPIO_PULLUP;
 80002f8:	2301      	movs	r3, #1
 80002fa:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &gpio);
 80002fc:	f107 0308 	add.w	r3, r7, #8
 8000300:	4619      	mov	r1, r3
 8000302:	4805      	ldr	r0, [pc, #20]	@ (8000318 <gpio_init+0x78>)
 8000304:	f001 fb00 	bl	8001908 <HAL_GPIO_Init>
}
 8000308:	bf00      	nop
 800030a:	3718      	adds	r7, #24
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	40021000 	.word	0x40021000
 8000314:	40011000 	.word	0x40011000
 8000318:	40010800 	.word	0x40010800
 800031c:	10210000 	.word	0x10210000

08000320 <CAN1_init>:

void CAN1_init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	can1.Instance = CAN1;
 8000324:	4b17      	ldr	r3, [pc, #92]	@ (8000384 <CAN1_init+0x64>)
 8000326:	4a18      	ldr	r2, [pc, #96]	@ (8000388 <CAN1_init+0x68>)
 8000328:	601a      	str	r2, [r3, #0]
	can1.Init.Mode = CAN_MODE_NORMAL; // with one device normal mode will not work
 800032a:	4b16      	ldr	r3, [pc, #88]	@ (8000384 <CAN1_init+0x64>)
 800032c:	2200      	movs	r2, #0
 800032e:	609a      	str	r2, [r3, #8]
	can1.Init.AutoBusOff = ENABLE;
 8000330:	4b14      	ldr	r3, [pc, #80]	@ (8000384 <CAN1_init+0x64>)
 8000332:	2201      	movs	r2, #1
 8000334:	765a      	strb	r2, [r3, #25]
	can1.Init.AutoRetransmission = ENABLE;
 8000336:	4b13      	ldr	r3, [pc, #76]	@ (8000384 <CAN1_init+0x64>)
 8000338:	2201      	movs	r2, #1
 800033a:	76da      	strb	r2, [r3, #27]
	can1.Init.AutoWakeUp = DISABLE;
 800033c:	4b11      	ldr	r3, [pc, #68]	@ (8000384 <CAN1_init+0x64>)
 800033e:	2200      	movs	r2, #0
 8000340:	769a      	strb	r2, [r3, #26]
	can1.Init.ReceiveFifoLocked = DISABLE;
 8000342:	4b10      	ldr	r3, [pc, #64]	@ (8000384 <CAN1_init+0x64>)
 8000344:	2200      	movs	r2, #0
 8000346:	771a      	strb	r2, [r3, #28]
	can1.Init.TimeTriggeredMode = DISABLE;
 8000348:	4b0e      	ldr	r3, [pc, #56]	@ (8000384 <CAN1_init+0x64>)
 800034a:	2200      	movs	r2, #0
 800034c:	761a      	strb	r2, [r3, #24]
	can1.Init.TransmitFifoPriority = DISABLE;
 800034e:	4b0d      	ldr	r3, [pc, #52]	@ (8000384 <CAN1_init+0x64>)
 8000350:	2200      	movs	r2, #0
 8000352:	775a      	strb	r2, [r3, #29]

	// for the frame
	can1.Init.Prescaler = 1;
 8000354:	4b0b      	ldr	r3, [pc, #44]	@ (8000384 <CAN1_init+0x64>)
 8000356:	2201      	movs	r2, #1
 8000358:	605a      	str	r2, [r3, #4]
	can1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800035a:	4b0a      	ldr	r3, [pc, #40]	@ (8000384 <CAN1_init+0x64>)
 800035c:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000360:	611a      	str	r2, [r3, #16]
	can1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000362:	4b08      	ldr	r3, [pc, #32]	@ (8000384 <CAN1_init+0x64>)
 8000364:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000368:	615a      	str	r2, [r3, #20]
	can1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800036a:	4b06      	ldr	r3, [pc, #24]	@ (8000384 <CAN1_init+0x64>)
 800036c:	2200      	movs	r2, #0
 800036e:	60da      	str	r2, [r3, #12]

	if(HAL_CAN_Init(&can1) != HAL_OK) Error_Handler();
 8000370:	4804      	ldr	r0, [pc, #16]	@ (8000384 <CAN1_init+0x64>)
 8000372:	f000 fb6f 	bl	8000a54 <HAL_CAN_Init>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <CAN1_init+0x60>
 800037c:	f000 f99a 	bl	80006b4 <Error_Handler>




}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}
 8000384:	20000084 	.word	0x20000084
 8000388:	40006400 	.word	0x40006400

0800038c <CAN1_Tx>:


uint8_t led_no = 0;
void CAN1_Tx(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b088      	sub	sp, #32
 8000390:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef Txheader;

	uint32_t TxMailbox;
	uint8_t messg ;

	Txheader.IDE = CAN_ID_STD;
 8000392:	2300      	movs	r3, #0
 8000394:	613b      	str	r3, [r7, #16]
	Txheader.DLC = 1;
 8000396:	2301      	movs	r3, #1
 8000398:	61bb      	str	r3, [r7, #24]
	Txheader.RTR = CAN_RTR_DATA;
 800039a:	2300      	movs	r3, #0
 800039c:	617b      	str	r3, [r7, #20]
	Txheader.StdId = 0x65D;
 800039e:	f240 635d 	movw	r3, #1629	@ 0x65d
 80003a2:	60bb      	str	r3, [r7, #8]

	messg = ++led_no;
 80003a4:	4b0f      	ldr	r3, [pc, #60]	@ (80003e4 <CAN1_Tx+0x58>)
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	3301      	adds	r3, #1
 80003aa:	b2da      	uxtb	r2, r3
 80003ac:	4b0d      	ldr	r3, [pc, #52]	@ (80003e4 <CAN1_Tx+0x58>)
 80003ae:	701a      	strb	r2, [r3, #0]
 80003b0:	4b0c      	ldr	r3, [pc, #48]	@ (80003e4 <CAN1_Tx+0x58>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	70fb      	strb	r3, [r7, #3]
	if(led_no == 4)
 80003b6:	4b0b      	ldr	r3, [pc, #44]	@ (80003e4 <CAN1_Tx+0x58>)
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	2b04      	cmp	r3, #4
 80003bc:	d102      	bne.n	80003c4 <CAN1_Tx+0x38>
	{
		led_no = 0;
 80003be:	4b09      	ldr	r3, [pc, #36]	@ (80003e4 <CAN1_Tx+0x58>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	701a      	strb	r2, [r3, #0]
	}
	// here txmailbox is automatically filled by the below api, indicating which mailbox is being used
	if(HAL_CAN_AddTxMessage(&can1, &Txheader, &messg, &TxMailbox) != HAL_OK) Error_Handler();
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	1cfa      	adds	r2, r7, #3
 80003c8:	f107 0108 	add.w	r1, r7, #8
 80003cc:	4806      	ldr	r0, [pc, #24]	@ (80003e8 <CAN1_Tx+0x5c>)
 80003ce:	f000 fd49 	bl	8000e64 <HAL_CAN_AddTxMessage>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <CAN1_Tx+0x50>
 80003d8:	f000 f96c 	bl	80006b4 <Error_Handler>





}
 80003dc:	bf00      	nop
 80003de:	3720      	adds	r7, #32
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000110 	.word	0x20000110
 80003e8:	20000084 	.word	0x20000084

080003ec <CAN1_Filter_init>:



void CAN1_Filter_init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b08a      	sub	sp, #40	@ 0x28
 80003f0:	af00      	add	r7, sp, #0


	// here we accepting every message (no filter)
	CAN_FilterTypeDef filter;

	filter.FilterActivation = ENABLE;
 80003f2:	2301      	movs	r3, #1
 80003f4:	623b      	str	r3, [r7, #32]
	filter.FilterBank = 0;
 80003f6:	2300      	movs	r3, #0
 80003f8:	617b      	str	r3, [r7, #20]
	filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	613b      	str	r3, [r7, #16]
	filter.FilterIdHigh = 0x0000;
 80003fe:	2300      	movs	r3, #0
 8000400:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = 0x0000;
 8000402:	2300      	movs	r3, #0
 8000404:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = 0x0000;
 8000406:	2300      	movs	r3, #0
 8000408:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = 0x0000;
 800040a:	2300      	movs	r3, #0
 800040c:	60fb      	str	r3, [r7, #12]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800040e:	2301      	movs	r3, #1
 8000410:	61fb      	str	r3, [r7, #28]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000412:	2300      	movs	r3, #0
 8000414:	61bb      	str	r3, [r7, #24]


	if(HAL_CAN_ConfigFilter(&can1,&filter) != HAL_OK) Error_Handler();
 8000416:	463b      	mov	r3, r7
 8000418:	4619      	mov	r1, r3
 800041a:	4806      	ldr	r0, [pc, #24]	@ (8000434 <CAN1_Filter_init+0x48>)
 800041c:	f000 fc15 	bl	8000c4a <HAL_CAN_ConfigFilter>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <CAN1_Filter_init+0x3e>
 8000426:	f000 f945 	bl	80006b4 <Error_Handler>
}
 800042a:	bf00      	nop
 800042c:	3728      	adds	r7, #40	@ 0x28
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	20000084 	.word	0x20000084

08000438 <HAL_CAN_RxFifo0FullCallback>:

void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]


	uint8_t rcvd_mssg[8];

	if(HAL_CAN_GetRxMessage(&can1, CAN_RX_FIFO0, &RxHeader, rcvd_mssg) != HAL_OK) Error_Handler();
 8000440:	f107 0308 	add.w	r3, r7, #8
 8000444:	4a1c      	ldr	r2, [pc, #112]	@ (80004b8 <HAL_CAN_RxFifo0FullCallback+0x80>)
 8000446:	2100      	movs	r1, #0
 8000448:	481c      	ldr	r0, [pc, #112]	@ (80004bc <HAL_CAN_RxFifo0FullCallback+0x84>)
 800044a:	f000 fdda 	bl	8001002 <HAL_CAN_GetRxMessage>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <HAL_CAN_RxFifo0FullCallback+0x20>
 8000454:	f000 f92e 	bl	80006b4 <Error_Handler>

	if(RxHeader.StdId == 0x65D && RxHeader.RTR == 0)
 8000458:	4b17      	ldr	r3, [pc, #92]	@ (80004b8 <HAL_CAN_RxFifo0FullCallback+0x80>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f240 625d 	movw	r2, #1629	@ 0x65d
 8000460:	4293      	cmp	r3, r2
 8000462:	d108      	bne.n	8000476 <HAL_CAN_RxFifo0FullCallback+0x3e>
 8000464:	4b14      	ldr	r3, [pc, #80]	@ (80004b8 <HAL_CAN_RxFifo0FullCallback+0x80>)
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d104      	bne.n	8000476 <HAL_CAN_RxFifo0FullCallback+0x3e>
	{
		// led command from n1 to n2
		Led_Manage_output(rcvd_mssg[0]);
 800046c:	7a3b      	ldrb	r3, [r7, #8]
 800046e:	4618      	mov	r0, r3
 8000470:	f000 f87c 	bl	800056c <Led_Manage_output>
 8000474:	e01d      	b.n	80004b2 <HAL_CAN_RxFifo0FullCallback+0x7a>
	}
	else if(RxHeader.StdId == 0x651 && RxHeader.RTR == 1)
 8000476:	4b10      	ldr	r3, [pc, #64]	@ (80004b8 <HAL_CAN_RxFifo0FullCallback+0x80>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f240 6251 	movw	r2, #1617	@ 0x651
 800047e:	4293      	cmp	r3, r2
 8000480:	d108      	bne.n	8000494 <HAL_CAN_RxFifo0FullCallback+0x5c>
 8000482:	4b0d      	ldr	r3, [pc, #52]	@ (80004b8 <HAL_CAN_RxFifo0FullCallback+0x80>)
 8000484:	68db      	ldr	r3, [r3, #12]
 8000486:	2b01      	cmp	r3, #1
 8000488:	d104      	bne.n	8000494 <HAL_CAN_RxFifo0FullCallback+0x5c>
	{
		// remote frame requested by n1
		Send_Response(0x651);
 800048a:	f240 6051 	movw	r0, #1617	@ 0x651
 800048e:	f000 f8ed 	bl	800066c <Send_Response>
 8000492:	e00e      	b.n	80004b2 <HAL_CAN_RxFifo0FullCallback+0x7a>
		return;

	}
	else if(RxHeader.StdId == 0x651 && RxHeader.RTR == 0)
 8000494:	4b08      	ldr	r3, [pc, #32]	@ (80004b8 <HAL_CAN_RxFifo0FullCallback+0x80>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	f240 6251 	movw	r2, #1617	@ 0x651
 800049c:	4293      	cmp	r3, r2
 800049e:	d108      	bne.n	80004b2 <HAL_CAN_RxFifo0FullCallback+0x7a>
 80004a0:	4b05      	ldr	r3, [pc, #20]	@ (80004b8 <HAL_CAN_RxFifo0FullCallback+0x80>)
 80004a2:	68db      	ldr	r3, [r3, #12]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d104      	bne.n	80004b2 <HAL_CAN_RxFifo0FullCallback+0x7a>
	{
		// data frame reply by n2 to n1
		printf("Reply received = %d\n", rcvd_mssg[0]);
 80004a8:	7a3b      	ldrb	r3, [r7, #8]
 80004aa:	4619      	mov	r1, r3
 80004ac:	4804      	ldr	r0, [pc, #16]	@ (80004c0 <HAL_CAN_RxFifo0FullCallback+0x88>)
 80004ae:	f002 fabf 	bl	8002a30 <iprintf>

	}
}
 80004b2:	3710      	adds	r7, #16
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	200000f4 	.word	0x200000f4
 80004bc:	20000084 	.word	0x20000084
 80004c0:	08003734 	.word	0x08003734

080004c4 <tim2_init>:


void tim2_init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0

	tim2.Instance = TIM2;
 80004c8:	4b0c      	ldr	r3, [pc, #48]	@ (80004fc <tim2_init+0x38>)
 80004ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004ce:	601a      	str	r2, [r3, #0]
	tim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d0:	4b0a      	ldr	r3, [pc, #40]	@ (80004fc <tim2_init+0x38>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
	tim2.Init.Prescaler = 7999; // as clock is 8Mhz we downsclaed it to 100hz
 80004d6:	4b09      	ldr	r3, [pc, #36]	@ (80004fc <tim2_init+0x38>)
 80004d8:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80004dc:	605a      	str	r2, [r3, #4]
	tim2.Init.Period = 1000 - 1; // to generate the delay after 1 sec
 80004de:	4b07      	ldr	r3, [pc, #28]	@ (80004fc <tim2_init+0x38>)
 80004e0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80004e4:	60da      	str	r2, [r3, #12]
	if(HAL_TIM_Base_Init(&tim2) != HAL_OK) Error_Handler();
 80004e6:	4805      	ldr	r0, [pc, #20]	@ (80004fc <tim2_init+0x38>)
 80004e8:	f001 ffaa 	bl	8002440 <HAL_TIM_Base_Init>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <tim2_init+0x32>
 80004f2:	f000 f8df 	bl	80006b4 <Error_Handler>

}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	200000ac 	.word	0x200000ac

08000500 <HAL_TIM_PeriodElapsedCallback>:

uint8_t counter = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	@ 0x28
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef TxHeader;
	uint8_t dummy = 0; // no meaning of message here
 8000508:	2300      	movs	r3, #0
 800050a:	73fb      	strb	r3, [r7, #15]
	uint32_t TxMailbox;
	if(counter == 4)
 800050c:	4b15      	ldr	r3, [pc, #84]	@ (8000564 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b04      	cmp	r3, #4
 8000512:	d11a      	bne.n	800054a <HAL_TIM_PeriodElapsedCallback+0x4a>
	{
		TxHeader.DLC = 2;
 8000514:	2302      	movs	r3, #2
 8000516:	623b      	str	r3, [r7, #32]
		TxHeader.StdId = 0x651;
 8000518:	f240 6351 	movw	r3, #1617	@ 0x651
 800051c:	613b      	str	r3, [r7, #16]
		TxHeader.IDE = CAN_ID_STD;
 800051e:	2300      	movs	r3, #0
 8000520:	61bb      	str	r3, [r7, #24]
		TxHeader.RTR = CAN_RTR_REMOTE;
 8000522:	2302      	movs	r3, #2
 8000524:	61fb      	str	r3, [r7, #28]

		if(HAL_CAN_AddTxMessage(&can1, &TxHeader, &dummy, &TxMailbox) != HAL_OK) Error_Handler();
 8000526:	f107 0308 	add.w	r3, r7, #8
 800052a:	f107 020f 	add.w	r2, r7, #15
 800052e:	f107 0110 	add.w	r1, r7, #16
 8000532:	480d      	ldr	r0, [pc, #52]	@ (8000568 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000534:	f000 fc96 	bl	8000e64 <HAL_CAN_AddTxMessage>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <HAL_TIM_PeriodElapsedCallback+0x42>
 800053e:	f000 f8b9 	bl	80006b4 <Error_Handler>

		counter = 0;
 8000542:	4b08      	ldr	r3, [pc, #32]	@ (8000564 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000544:	2200      	movs	r2, #0
 8000546:	701a      	strb	r2, [r3, #0]
	}
	else{
		CAN1_Tx();
		counter++;
	}
}
 8000548:	e007      	b.n	800055a <HAL_TIM_PeriodElapsedCallback+0x5a>
		CAN1_Tx();
 800054a:	f7ff ff1f 	bl	800038c <CAN1_Tx>
		counter++;
 800054e:	4b05      	ldr	r3, [pc, #20]	@ (8000564 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	3301      	adds	r3, #1
 8000554:	b2da      	uxtb	r2, r3
 8000556:	4b03      	ldr	r3, [pc, #12]	@ (8000564 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000558:	701a      	strb	r2, [r3, #0]
}
 800055a:	bf00      	nop
 800055c:	3728      	adds	r7, #40	@ 0x28
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000111 	.word	0x20000111
 8000568:	20000084 	.word	0x20000084

0800056c <Led_Manage_output>:

void Led_Manage_output(uint8_t led_no)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
	switch(led_no)
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	3b01      	subs	r3, #1
 800057a:	2b03      	cmp	r3, #3
 800057c:	d86e      	bhi.n	800065c <Led_Manage_output+0xf0>
 800057e:	a201      	add	r2, pc, #4	@ (adr r2, 8000584 <Led_Manage_output+0x18>)
 8000580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000584:	08000595 	.word	0x08000595
 8000588:	080005c7 	.word	0x080005c7
 800058c:	080005f9 	.word	0x080005f9
 8000590:	0800062b 	.word	0x0800062b
	{
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000594:	2201      	movs	r2, #1
 8000596:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800059a:	4832      	ldr	r0, [pc, #200]	@ (8000664 <Led_Manage_output+0xf8>)
 800059c:	f001 fb38 	bl	8001c10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005a6:	482f      	ldr	r0, [pc, #188]	@ (8000664 <Led_Manage_output+0xf8>)
 80005a8:	f001 fb32 	bl	8001c10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005b2:	482c      	ldr	r0, [pc, #176]	@ (8000664 <Led_Manage_output+0xf8>)
 80005b4:	f001 fb2c 	bl	8001c10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005be:	482a      	ldr	r0, [pc, #168]	@ (8000668 <Led_Manage_output+0xfc>)
 80005c0:	f001 fb26 	bl	8001c10 <HAL_GPIO_WritePin>
		break;
 80005c4:	e04a      	b.n	800065c <Led_Manage_output+0xf0>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005cc:	4825      	ldr	r0, [pc, #148]	@ (8000664 <Led_Manage_output+0xf8>)
 80005ce:	f001 fb1f 	bl	8001c10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005d8:	4822      	ldr	r0, [pc, #136]	@ (8000664 <Led_Manage_output+0xf8>)
 80005da:	f001 fb19 	bl	8001c10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005e4:	481f      	ldr	r0, [pc, #124]	@ (8000664 <Led_Manage_output+0xf8>)
 80005e6:	f001 fb13 	bl	8001c10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005f0:	481d      	ldr	r0, [pc, #116]	@ (8000668 <Led_Manage_output+0xfc>)
 80005f2:	f001 fb0d 	bl	8001c10 <HAL_GPIO_WritePin>

		break;
 80005f6:	e031      	b.n	800065c <Led_Manage_output+0xf0>
	case 3:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005fe:	4819      	ldr	r0, [pc, #100]	@ (8000664 <Led_Manage_output+0xf8>)
 8000600:	f001 fb06 	bl	8001c10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800060a:	4816      	ldr	r0, [pc, #88]	@ (8000664 <Led_Manage_output+0xf8>)
 800060c:	f001 fb00 	bl	8001c10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000616:	4813      	ldr	r0, [pc, #76]	@ (8000664 <Led_Manage_output+0xf8>)
 8000618:	f001 fafa 	bl	8001c10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000622:	4811      	ldr	r0, [pc, #68]	@ (8000668 <Led_Manage_output+0xfc>)
 8000624:	f001 faf4 	bl	8001c10 <HAL_GPIO_WritePin>

		break;
 8000628:	e018      	b.n	800065c <Led_Manage_output+0xf0>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000630:	480c      	ldr	r0, [pc, #48]	@ (8000664 <Led_Manage_output+0xf8>)
 8000632:	f001 faed 	bl	8001c10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800063c:	4809      	ldr	r0, [pc, #36]	@ (8000664 <Led_Manage_output+0xf8>)
 800063e:	f001 fae7 	bl	8001c10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000648:	4806      	ldr	r0, [pc, #24]	@ (8000664 <Led_Manage_output+0xf8>)
 800064a:	f001 fae1 	bl	8001c10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800064e:	2201      	movs	r2, #1
 8000650:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000654:	4804      	ldr	r0, [pc, #16]	@ (8000668 <Led_Manage_output+0xfc>)
 8000656:	f001 fadb 	bl	8001c10 <HAL_GPIO_WritePin>

		break;
 800065a:	bf00      	nop

	}
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40011000 	.word	0x40011000
 8000668:	40010800 	.word	0x40010800

0800066c <Send_Response>:

void Send_Response(uint32_t stdId)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08a      	sub	sp, #40	@ 0x28
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;
	uint8_t response[2] = {0xAB , 0xCD};
 8000674:	f64c 53ab 	movw	r3, #52651	@ 0xcdab
 8000678:	813b      	strh	r3, [r7, #8]

	TxHeader.StdId = stdId;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	613b      	str	r3, [r7, #16]
	TxHeader.DLC = 2;
 800067e:	2302      	movs	r3, #2
 8000680:	623b      	str	r3, [r7, #32]
	TxHeader.RTR = CAN_RTR_DATA;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
	TxHeader.IDE = CAN_ID_STD;
 8000686:	2300      	movs	r3, #0
 8000688:	61bb      	str	r3, [r7, #24]

	if(HAL_CAN_AddTxMessage(&can1, &TxHeader, response, &TxMailbox) != HAL_OK) Error_Handler();
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	f107 0208 	add.w	r2, r7, #8
 8000692:	f107 0110 	add.w	r1, r7, #16
 8000696:	4806      	ldr	r0, [pc, #24]	@ (80006b0 <Send_Response+0x44>)
 8000698:	f000 fbe4 	bl	8000e64 <HAL_CAN_AddTxMessage>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <Send_Response+0x3a>
 80006a2:	f000 f807 	bl	80006b4 <Error_Handler>

}
 80006a6:	bf00      	nop
 80006a8:	3728      	adds	r7, #40	@ 0x28
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000084 	.word	0x20000084

080006b4 <Error_Handler>:

void Error_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
	while(1);
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <Error_Handler+0x4>

080006bc <HAL_TIM_Base_MspInit>:
#include "main.h"
#include "stm32f1xx_hal.h"

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM2_CLK_ENABLE();
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <HAL_TIM_Base_MspInit+0x38>)
 80006c6:	69db      	ldr	r3, [r3, #28]
 80006c8:	4a0a      	ldr	r2, [pc, #40]	@ (80006f4 <HAL_TIM_Base_MspInit+0x38>)
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	61d3      	str	r3, [r2, #28]
 80006d0:	4b08      	ldr	r3, [pc, #32]	@ (80006f4 <HAL_TIM_Base_MspInit+0x38>)
 80006d2:	69db      	ldr	r3, [r3, #28]
 80006d4:	f003 0301 	and.w	r3, r3, #1
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	68fb      	ldr	r3, [r7, #12]

	HAL_NVIC_SetPriority(TIM2_IRQn, 14, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	210e      	movs	r1, #14
 80006e0:	201c      	movs	r0, #28
 80006e2:	f001 f8ce 	bl	8001882 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006e6:	201c      	movs	r0, #28
 80006e8:	f001 f8e7 	bl	80018ba <HAL_NVIC_EnableIRQ>

}
 80006ec:	bf00      	nop
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40021000 	.word	0x40021000

080006f8 <HAL_CAN_MspInit>:



void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	__HAL_RCC_CAN1_CLK_ENABLE();
 8000700:	4b25      	ldr	r3, [pc, #148]	@ (8000798 <HAL_CAN_MspInit+0xa0>)
 8000702:	69db      	ldr	r3, [r3, #28]
 8000704:	4a24      	ldr	r2, [pc, #144]	@ (8000798 <HAL_CAN_MspInit+0xa0>)
 8000706:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800070a:	61d3      	str	r3, [r2, #28]
 800070c:	4b22      	ldr	r3, [pc, #136]	@ (8000798 <HAL_CAN_MspInit+0xa0>)
 800070e:	69db      	ldr	r3, [r3, #28]
 8000710:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000718:	4b1f      	ldr	r3, [pc, #124]	@ (8000798 <HAL_CAN_MspInit+0xa0>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	4a1e      	ldr	r2, [pc, #120]	@ (8000798 <HAL_CAN_MspInit+0xa0>)
 800071e:	f043 0304 	orr.w	r3, r3, #4
 8000722:	6193      	str	r3, [r2, #24]
 8000724:	4b1c      	ldr	r3, [pc, #112]	@ (8000798 <HAL_CAN_MspInit+0xa0>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	f003 0304 	and.w	r3, r3, #4
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]

	HAL_NVIC_SetPriority(CAN1_TX_IRQn, 15, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	210f      	movs	r1, #15
 8000734:	2013      	movs	r0, #19
 8000736:	f001 f8a4 	bl	8001882 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 15, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	210f      	movs	r1, #15
 800073e:	2014      	movs	r0, #20
 8000740:	f001 f89f 	bl	8001882 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 15, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	210f      	movs	r1, #15
 8000748:	2015      	movs	r0, #21
 800074a:	f001 f89a 	bl	8001882 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	210f      	movs	r1, #15
 8000752:	2016      	movs	r0, #22
 8000754:	f001 f895 	bl	8001882 <HAL_NVIC_SetPriority>

	HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000758:	2013      	movs	r0, #19
 800075a:	f001 f8ae 	bl	80018ba <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800075e:	2014      	movs	r0, #20
 8000760:	f001 f8ab 	bl	80018ba <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000764:	2015      	movs	r0, #21
 8000766:	f001 f8a8 	bl	80018ba <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800076a:	2016      	movs	r0, #22
 800076c:	f001 f8a5 	bl	80018ba <HAL_NVIC_EnableIRQ>

	GPIO_InitTypeDef can;
	can.Mode = GPIO_MODE_AF_PP;
 8000770:	2302      	movs	r3, #2
 8000772:	617b      	str	r3, [r7, #20]
	can.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8000774:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000778:	613b      	str	r3, [r7, #16]
	can.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800077a:	2301      	movs	r3, #1
 800077c:	61fb      	str	r3, [r7, #28]
	can.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &can);
 8000782:	f107 0310 	add.w	r3, r7, #16
 8000786:	4619      	mov	r1, r3
 8000788:	4804      	ldr	r0, [pc, #16]	@ (800079c <HAL_CAN_MspInit+0xa4>)
 800078a:	f001 f8bd 	bl	8001908 <HAL_GPIO_Init>

}
 800078e:	bf00      	nop
 8000790:	3720      	adds	r7, #32
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40021000 	.word	0x40021000
 800079c:	40010800 	.word	0x40010800

080007a0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80007aa:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <ITM_SendChar+0x44>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a0d      	ldr	r2, [pc, #52]	@ (80007e4 <ITM_SendChar+0x44>)
 80007b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80007b4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80007b6:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <ITM_SendChar+0x48>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a0b      	ldr	r2, [pc, #44]	@ (80007e8 <ITM_SendChar+0x48>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80007c2:	bf00      	nop
 80007c4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d0f8      	beq.n	80007c4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80007d2:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	6013      	str	r3, [r2, #0]
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr
 80007e4:	e000edfc 	.word	0xe000edfc
 80007e8:	e0000e00 	.word	0xe0000e00

080007ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	e00a      	b.n	8000814 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007fe:	f3af 8000 	nop.w
 8000802:	4601      	mov	r1, r0
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	1c5a      	adds	r2, r3, #1
 8000808:	60ba      	str	r2, [r7, #8]
 800080a:	b2ca      	uxtb	r2, r1
 800080c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	3301      	adds	r3, #1
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697a      	ldr	r2, [r7, #20]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	429a      	cmp	r2, r3
 800081a:	dbf0      	blt.n	80007fe <_read+0x12>
  }

  return len;
 800081c:	687b      	ldr	r3, [r7, #4]
}
 800081e:	4618      	mov	r0, r3
 8000820:	3718      	adds	r7, #24
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b086      	sub	sp, #24
 800082a:	af00      	add	r7, sp, #0
 800082c:	60f8      	str	r0, [r7, #12]
 800082e:	60b9      	str	r1, [r7, #8]
 8000830:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	e009      	b.n	800084c <_write+0x26>
  {
   // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	1c5a      	adds	r2, r3, #1
 800083c:	60ba      	str	r2, [r7, #8]
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ffad 	bl	80007a0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	3301      	adds	r3, #1
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	697a      	ldr	r2, [r7, #20]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	429a      	cmp	r2, r3
 8000852:	dbf1      	blt.n	8000838 <_write+0x12>
  }
  return len;
 8000854:	687b      	ldr	r3, [r7, #4]
}
 8000856:	4618      	mov	r0, r3
 8000858:	3718      	adds	r7, #24
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <_close>:

int _close(int file)
{
 800085e:	b480      	push	{r7}
 8000860:	b083      	sub	sp, #12
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000866:	f04f 33ff 	mov.w	r3, #4294967295
}
 800086a:	4618      	mov	r0, r3
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr

08000874 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000884:	605a      	str	r2, [r3, #4]
  return 0;
 8000886:	2300      	movs	r3, #0
}
 8000888:	4618      	mov	r0, r3
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr

08000892 <_isatty>:

int _isatty(int file)
{
 8000892:	b480      	push	{r7}
 8000894:	b083      	sub	sp, #12
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800089a:	2301      	movs	r3, #1
}
 800089c:	4618      	mov	r0, r3
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr

080008a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008a6:	b480      	push	{r7}
 80008a8:	b085      	sub	sp, #20
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	60f8      	str	r0, [r7, #12]
 80008ae:	60b9      	str	r1, [r7, #8]
 80008b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008b2:	2300      	movs	r3, #0
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3714      	adds	r7, #20
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
	...

080008c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008c8:	4a14      	ldr	r2, [pc, #80]	@ (800091c <_sbrk+0x5c>)
 80008ca:	4b15      	ldr	r3, [pc, #84]	@ (8000920 <_sbrk+0x60>)
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d4:	4b13      	ldr	r3, [pc, #76]	@ (8000924 <_sbrk+0x64>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d102      	bne.n	80008e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008dc:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <_sbrk+0x64>)
 80008de:	4a12      	ldr	r2, [pc, #72]	@ (8000928 <_sbrk+0x68>)
 80008e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008e2:	4b10      	ldr	r3, [pc, #64]	@ (8000924 <_sbrk+0x64>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4413      	add	r3, r2
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d207      	bcs.n	8000900 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008f0:	f002 f942 	bl	8002b78 <__errno>
 80008f4:	4603      	mov	r3, r0
 80008f6:	220c      	movs	r2, #12
 80008f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008fa:	f04f 33ff 	mov.w	r3, #4294967295
 80008fe:	e009      	b.n	8000914 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000900:	4b08      	ldr	r3, [pc, #32]	@ (8000924 <_sbrk+0x64>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000906:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <_sbrk+0x64>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4413      	add	r3, r2
 800090e:	4a05      	ldr	r2, [pc, #20]	@ (8000924 <_sbrk+0x64>)
 8000910:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000912:	68fb      	ldr	r3, [r7, #12]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20005000 	.word	0x20005000
 8000920:	00000400 	.word	0x00000400
 8000924:	20000114 	.word	0x20000114
 8000928:	20000268 	.word	0x20000268

0800092c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr

08000938 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000938:	f7ff fff8 	bl	800092c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800093c:	480b      	ldr	r0, [pc, #44]	@ (800096c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800093e:	490c      	ldr	r1, [pc, #48]	@ (8000970 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000940:	4a0c      	ldr	r2, [pc, #48]	@ (8000974 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000944:	e002      	b.n	800094c <LoopCopyDataInit>

08000946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094a:	3304      	adds	r3, #4

0800094c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800094c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000950:	d3f9      	bcc.n	8000946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000952:	4a09      	ldr	r2, [pc, #36]	@ (8000978 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000954:	4c09      	ldr	r4, [pc, #36]	@ (800097c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000958:	e001      	b.n	800095e <LoopFillZerobss>

0800095a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800095c:	3204      	adds	r2, #4

0800095e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000960:	d3fb      	bcc.n	800095a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000962:	f002 f90f 	bl	8002b84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000966:	f7ff fc39 	bl	80001dc <main>
  bx lr
 800096a:	4770      	bx	lr
  ldr r0, =_sdata
 800096c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000970:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000974:	080037ac 	.word	0x080037ac
  ldr r2, =_sbss
 8000978:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800097c:	20000268 	.word	0x20000268

08000980 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000980:	e7fe      	b.n	8000980 <ADC1_2_IRQHandler>
	...

08000984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000988:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <HAL_Init+0x28>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a07      	ldr	r2, [pc, #28]	@ (80009ac <HAL_Init+0x28>)
 800098e:	f043 0310 	orr.w	r3, r3, #16
 8000992:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000994:	2003      	movs	r0, #3
 8000996:	f000 ff69 	bl	800186c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800099a:	200f      	movs	r0, #15
 800099c:	f000 f80e 	bl	80009bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a0:	f000 f806 	bl	80009b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40022000 	.word	0x40022000

080009b0 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr

080009bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c4:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <HAL_InitTick+0x54>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4b12      	ldr	r3, [pc, #72]	@ (8000a14 <HAL_InitTick+0x58>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	4619      	mov	r1, r3
 80009ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 ff7b 	bl	80018d6 <HAL_SYSTICK_Config>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	e00e      	b.n	8000a08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2b0f      	cmp	r3, #15
 80009ee:	d80a      	bhi.n	8000a06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f0:	2200      	movs	r2, #0
 80009f2:	6879      	ldr	r1, [r7, #4]
 80009f4:	f04f 30ff 	mov.w	r0, #4294967295
 80009f8:	f000 ff43 	bl	8001882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009fc:	4a06      	ldr	r2, [pc, #24]	@ (8000a18 <HAL_InitTick+0x5c>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a02:	2300      	movs	r3, #0
 8000a04:	e000      	b.n	8000a08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000000 	.word	0x20000000
 8000a14:	20000008 	.word	0x20000008
 8000a18:	20000004 	.word	0x20000004

08000a1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a20:	4b05      	ldr	r3, [pc, #20]	@ (8000a38 <HAL_IncTick+0x1c>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b05      	ldr	r3, [pc, #20]	@ (8000a3c <HAL_IncTick+0x20>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	4a03      	ldr	r2, [pc, #12]	@ (8000a3c <HAL_IncTick+0x20>)
 8000a2e:	6013      	str	r3, [r2, #0]
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	20000008 	.word	0x20000008
 8000a3c:	20000118 	.word	0x20000118

08000a40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  return uwTick;
 8000a44:	4b02      	ldr	r3, [pc, #8]	@ (8000a50 <HAL_GetTick+0x10>)
 8000a46:	681b      	ldr	r3, [r3, #0]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr
 8000a50:	20000118 	.word	0x20000118

08000a54 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d101      	bne.n	8000a66 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e0ed      	b.n	8000c42 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d102      	bne.n	8000a78 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f7ff fe40 	bl	80006f8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f042 0201 	orr.w	r2, r2, #1
 8000a86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a88:	f7ff ffda 	bl	8000a40 <HAL_GetTick>
 8000a8c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a8e:	e012      	b.n	8000ab6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a90:	f7ff ffd6 	bl	8000a40 <HAL_GetTick>
 8000a94:	4602      	mov	r2, r0
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	2b0a      	cmp	r3, #10
 8000a9c:	d90b      	bls.n	8000ab6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aa2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2205      	movs	r2, #5
 8000aae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e0c5      	b.n	8000c42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d0e5      	beq.n	8000a90 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f022 0202 	bic.w	r2, r2, #2
 8000ad2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ad4:	f7ff ffb4 	bl	8000a40 <HAL_GetTick>
 8000ad8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ada:	e012      	b.n	8000b02 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000adc:	f7ff ffb0 	bl	8000a40 <HAL_GetTick>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	2b0a      	cmp	r3, #10
 8000ae8:	d90b      	bls.n	8000b02 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2205      	movs	r2, #5
 8000afa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e09f      	b.n	8000c42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f003 0302 	and.w	r3, r3, #2
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d1e5      	bne.n	8000adc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	7e1b      	ldrb	r3, [r3, #24]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d108      	bne.n	8000b2a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	e007      	b.n	8000b3a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000b38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	7e5b      	ldrb	r3, [r3, #25]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d108      	bne.n	8000b54 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	e007      	b.n	8000b64 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000b62:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	7e9b      	ldrb	r3, [r3, #26]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d108      	bne.n	8000b7e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f042 0220 	orr.w	r2, r2, #32
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	e007      	b.n	8000b8e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f022 0220 	bic.w	r2, r2, #32
 8000b8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	7edb      	ldrb	r3, [r3, #27]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d108      	bne.n	8000ba8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f022 0210 	bic.w	r2, r2, #16
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	e007      	b.n	8000bb8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f042 0210 	orr.w	r2, r2, #16
 8000bb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	7f1b      	ldrb	r3, [r3, #28]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d108      	bne.n	8000bd2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f042 0208 	orr.w	r2, r2, #8
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	e007      	b.n	8000be2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f022 0208 	bic.w	r2, r2, #8
 8000be0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	7f5b      	ldrb	r3, [r3, #29]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d108      	bne.n	8000bfc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f042 0204 	orr.w	r2, r2, #4
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	e007      	b.n	8000c0c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f022 0204 	bic.w	r2, r2, #4
 8000c0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	689a      	ldr	r2, [r3, #8]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	431a      	orrs	r2, r3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	691b      	ldr	r3, [r3, #16]
 8000c1a:	431a      	orrs	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	695b      	ldr	r3, [r3, #20]
 8000c20:	ea42 0103 	orr.w	r1, r2, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	1e5a      	subs	r2, r3, #1
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	430a      	orrs	r2, r1
 8000c30:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2200      	movs	r2, #0
 8000c36:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b087      	sub	sp, #28
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
 8000c52:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c60:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000c62:	7cfb      	ldrb	r3, [r7, #19]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d003      	beq.n	8000c70 <HAL_CAN_ConfigFilter+0x26>
 8000c68:	7cfb      	ldrb	r3, [r7, #19]
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	f040 80aa 	bne.w	8000dc4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000c76:	f043 0201 	orr.w	r2, r3, #1
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	695b      	ldr	r3, [r3, #20]
 8000c84:	f003 031f 	and.w	r3, r3, #31
 8000c88:	2201      	movs	r2, #1
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	401a      	ands	r2, r3
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	69db      	ldr	r3, [r3, #28]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d123      	bne.n	8000cf2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	401a      	ands	r2, r3
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cc8:	683a      	ldr	r2, [r7, #0]
 8000cca:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ccc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	3248      	adds	r2, #72	@ 0x48
 8000cd2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ce6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ce8:	6979      	ldr	r1, [r7, #20]
 8000cea:	3348      	adds	r3, #72	@ 0x48
 8000cec:	00db      	lsls	r3, r3, #3
 8000cee:	440b      	add	r3, r1
 8000cf0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	69db      	ldr	r3, [r3, #28]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d122      	bne.n	8000d40 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	431a      	orrs	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d16:	683a      	ldr	r2, [r7, #0]
 8000d18:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d1a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	3248      	adds	r2, #72	@ 0x48
 8000d20:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d34:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d36:	6979      	ldr	r1, [r7, #20]
 8000d38:	3348      	adds	r3, #72	@ 0x48
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	440b      	add	r3, r1
 8000d3e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d109      	bne.n	8000d5c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	43db      	mvns	r3, r3
 8000d52:	401a      	ands	r2, r3
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000d5a:	e007      	b.n	8000d6c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	431a      	orrs	r2, r3
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	691b      	ldr	r3, [r3, #16]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d109      	bne.n	8000d88 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	401a      	ands	r2, r3
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000d86:	e007      	b.n	8000d98 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	431a      	orrs	r2, r3
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	6a1b      	ldr	r3, [r3, #32]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d107      	bne.n	8000db0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	431a      	orrs	r2, r3
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000db6:	f023 0201 	bic.w	r2, r3, #1
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e006      	b.n	8000dd2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dc8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
  }
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	371c      	adds	r7, #28
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr

08000ddc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d12e      	bne.n	8000e4e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2202      	movs	r2, #2
 8000df4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f022 0201 	bic.w	r2, r2, #1
 8000e06:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e08:	f7ff fe1a 	bl	8000a40 <HAL_GetTick>
 8000e0c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e0e:	e012      	b.n	8000e36 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e10:	f7ff fe16 	bl	8000a40 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	2b0a      	cmp	r3, #10
 8000e1c:	d90b      	bls.n	8000e36 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e22:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2205      	movs	r2, #5
 8000e2e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e012      	b.n	8000e5c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1e5      	bne.n	8000e10 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	e006      	b.n	8000e5c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e52:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
  }
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	@ 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
 8000e70:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e78:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e82:	7ffb      	ldrb	r3, [r7, #31]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d003      	beq.n	8000e90 <HAL_CAN_AddTxMessage+0x2c>
 8000e88:	7ffb      	ldrb	r3, [r7, #31]
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	f040 80ad 	bne.w	8000fea <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d10a      	bne.n	8000eb0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d105      	bne.n	8000eb0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f000 8095 	beq.w	8000fda <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	0e1b      	lsrs	r3, r3, #24
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000eba:	2201      	movs	r2, #1
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	409a      	lsls	r2, r3
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d10d      	bne.n	8000ee8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000ed6:	68f9      	ldr	r1, [r7, #12]
 8000ed8:	6809      	ldr	r1, [r1, #0]
 8000eda:	431a      	orrs	r2, r3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	3318      	adds	r3, #24
 8000ee0:	011b      	lsls	r3, r3, #4
 8000ee2:	440b      	add	r3, r1
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	e00f      	b.n	8000f08 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ef2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ef8:	68f9      	ldr	r1, [r7, #12]
 8000efa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000efc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	3318      	adds	r3, #24
 8000f02:	011b      	lsls	r3, r3, #4
 8000f04:	440b      	add	r3, r1
 8000f06:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	6819      	ldr	r1, [r3, #0]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	691a      	ldr	r2, [r3, #16]
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	3318      	adds	r3, #24
 8000f14:	011b      	lsls	r3, r3, #4
 8000f16:	440b      	add	r3, r1
 8000f18:	3304      	adds	r3, #4
 8000f1a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	7d1b      	ldrb	r3, [r3, #20]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d111      	bne.n	8000f48 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	3318      	adds	r3, #24
 8000f2c:	011b      	lsls	r3, r3, #4
 8000f2e:	4413      	add	r3, r2
 8000f30:	3304      	adds	r3, #4
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	6811      	ldr	r1, [r2, #0]
 8000f38:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	3318      	adds	r3, #24
 8000f40:	011b      	lsls	r3, r3, #4
 8000f42:	440b      	add	r3, r1
 8000f44:	3304      	adds	r3, #4
 8000f46:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3307      	adds	r3, #7
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	061a      	lsls	r2, r3, #24
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3306      	adds	r3, #6
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	041b      	lsls	r3, r3, #16
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3305      	adds	r3, #5
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	021b      	lsls	r3, r3, #8
 8000f62:	4313      	orrs	r3, r2
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	3204      	adds	r2, #4
 8000f68:	7812      	ldrb	r2, [r2, #0]
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	68fa      	ldr	r2, [r7, #12]
 8000f6e:	6811      	ldr	r1, [r2, #0]
 8000f70:	ea43 0200 	orr.w	r2, r3, r0
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	011b      	lsls	r3, r3, #4
 8000f78:	440b      	add	r3, r1
 8000f7a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000f7e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3303      	adds	r3, #3
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	061a      	lsls	r2, r3, #24
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	041b      	lsls	r3, r3, #16
 8000f90:	431a      	orrs	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3301      	adds	r3, #1
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	7812      	ldrb	r2, [r2, #0]
 8000fa0:	4610      	mov	r0, r2
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	6811      	ldr	r1, [r2, #0]
 8000fa6:	ea43 0200 	orr.w	r2, r3, r0
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	011b      	lsls	r3, r3, #4
 8000fae:	440b      	add	r3, r1
 8000fb0:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000fb4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	3318      	adds	r3, #24
 8000fbe:	011b      	lsls	r3, r3, #4
 8000fc0:	4413      	add	r3, r2
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	6811      	ldr	r1, [r2, #0]
 8000fc8:	f043 0201 	orr.w	r2, r3, #1
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	3318      	adds	r3, #24
 8000fd0:	011b      	lsls	r3, r3, #4
 8000fd2:	440b      	add	r3, r1
 8000fd4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e00e      	b.n	8000ff8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fde:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e006      	b.n	8000ff8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fee:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
  }
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3724      	adds	r7, #36	@ 0x24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr

08001002 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001002:	b480      	push	{r7}
 8001004:	b087      	sub	sp, #28
 8001006:	af00      	add	r7, sp, #0
 8001008:	60f8      	str	r0, [r7, #12]
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001016:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001018:	7dfb      	ldrb	r3, [r7, #23]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d003      	beq.n	8001026 <HAL_CAN_GetRxMessage+0x24>
 800101e:	7dfb      	ldrb	r3, [r7, #23]
 8001020:	2b02      	cmp	r3, #2
 8001022:	f040 8103 	bne.w	800122c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d10e      	bne.n	800104a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	f003 0303 	and.w	r3, r3, #3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d116      	bne.n	8001068 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800103e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e0f7      	b.n	800123a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	2b00      	cmp	r3, #0
 8001056:	d107      	bne.n	8001068 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800105c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e0e8      	b.n	800123a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	331b      	adds	r3, #27
 8001070:	011b      	lsls	r3, r3, #4
 8001072:	4413      	add	r3, r2
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0204 	and.w	r2, r3, #4
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10c      	bne.n	80010a0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	331b      	adds	r3, #27
 800108e:	011b      	lsls	r3, r3, #4
 8001090:	4413      	add	r3, r2
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	0d5b      	lsrs	r3, r3, #21
 8001096:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	e00b      	b.n	80010b8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	331b      	adds	r3, #27
 80010a8:	011b      	lsls	r3, r3, #4
 80010aa:	4413      	add	r3, r2
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	08db      	lsrs	r3, r3, #3
 80010b0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	331b      	adds	r3, #27
 80010c0:	011b      	lsls	r3, r3, #4
 80010c2:	4413      	add	r3, r2
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0202 	and.w	r2, r3, #2
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	331b      	adds	r3, #27
 80010d6:	011b      	lsls	r3, r3, #4
 80010d8:	4413      	add	r3, r2
 80010da:	3304      	adds	r3, #4
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0308 	and.w	r3, r3, #8
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2208      	movs	r2, #8
 80010ea:	611a      	str	r2, [r3, #16]
 80010ec:	e00b      	b.n	8001106 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	331b      	adds	r3, #27
 80010f6:	011b      	lsls	r3, r3, #4
 80010f8:	4413      	add	r3, r2
 80010fa:	3304      	adds	r3, #4
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 020f 	and.w	r2, r3, #15
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	331b      	adds	r3, #27
 800110e:	011b      	lsls	r3, r3, #4
 8001110:	4413      	add	r3, r2
 8001112:	3304      	adds	r3, #4
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	0a1b      	lsrs	r3, r3, #8
 8001118:	b2da      	uxtb	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	331b      	adds	r3, #27
 8001126:	011b      	lsls	r3, r3, #4
 8001128:	4413      	add	r3, r2
 800112a:	3304      	adds	r3, #4
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	0c1b      	lsrs	r3, r3, #16
 8001130:	b29a      	uxth	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	011b      	lsls	r3, r3, #4
 800113e:	4413      	add	r3, r2
 8001140:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	b2da      	uxtb	r2, r3
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	011b      	lsls	r3, r3, #4
 8001154:	4413      	add	r3, r2
 8001156:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	0a1a      	lsrs	r2, r3, #8
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	3301      	adds	r3, #1
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	011b      	lsls	r3, r3, #4
 800116e:	4413      	add	r3, r2
 8001170:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	0c1a      	lsrs	r2, r3, #16
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	3302      	adds	r3, #2
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	011b      	lsls	r3, r3, #4
 8001188:	4413      	add	r3, r2
 800118a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	0e1a      	lsrs	r2, r3, #24
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	3303      	adds	r3, #3
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	011b      	lsls	r3, r3, #4
 80011a2:	4413      	add	r3, r2
 80011a4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	3304      	adds	r3, #4
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	011b      	lsls	r3, r3, #4
 80011ba:	4413      	add	r3, r2
 80011bc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	0a1a      	lsrs	r2, r3, #8
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	3305      	adds	r3, #5
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	011b      	lsls	r3, r3, #4
 80011d4:	4413      	add	r3, r2
 80011d6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	0c1a      	lsrs	r2, r3, #16
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	3306      	adds	r3, #6
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	011b      	lsls	r3, r3, #4
 80011ee:	4413      	add	r3, r2
 80011f0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	0e1a      	lsrs	r2, r3, #24
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	3307      	adds	r3, #7
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d108      	bne.n	8001218 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68da      	ldr	r2, [r3, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f042 0220 	orr.w	r2, r2, #32
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	e007      	b.n	8001228 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	691a      	ldr	r2, [r3, #16]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f042 0220 	orr.w	r2, r2, #32
 8001226:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001228:	2300      	movs	r3, #0
 800122a:	e006      	b.n	800123a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001230:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
  }
}
 800123a:	4618      	mov	r0, r3
 800123c:	371c      	adds	r7, #28
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr

08001244 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001254:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d002      	beq.n	8001262 <HAL_CAN_ActivateNotification+0x1e>
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	2b02      	cmp	r3, #2
 8001260:	d109      	bne.n	8001276 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6959      	ldr	r1, [r3, #20]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	430a      	orrs	r2, r1
 8001270:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	e006      	b.n	8001284 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800127a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
  }
}
 8001284:	4618      	mov	r0, r3
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr

0800128e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b08a      	sub	sp, #40	@ 0x28
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001296:	2300      	movs	r3, #0
 8001298:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80012ca:	6a3b      	ldr	r3, [r7, #32]
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d07c      	beq.n	80013ce <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d023      	beq.n	8001326 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2201      	movs	r2, #1
 80012e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f000 f983 	bl	80015fc <HAL_CAN_TxMailbox0CompleteCallback>
 80012f6:	e016      	b.n	8001326 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d004      	beq.n	800130c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001304:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001308:	627b      	str	r3, [r7, #36]	@ 0x24
 800130a:	e00c      	b.n	8001326 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	f003 0308 	and.w	r3, r3, #8
 8001312:	2b00      	cmp	r3, #0
 8001314:	d004      	beq.n	8001320 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001318:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800131c:	627b      	str	r3, [r7, #36]	@ 0x24
 800131e:	e002      	b.n	8001326 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 f986 	bl	8001632 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800132c:	2b00      	cmp	r3, #0
 800132e:	d024      	beq.n	800137a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001338:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 f962 	bl	800160e <HAL_CAN_TxMailbox1CompleteCallback>
 800134a:	e016      	b.n	800137a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001352:	2b00      	cmp	r3, #0
 8001354:	d004      	beq.n	8001360 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001358:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800135c:	627b      	str	r3, [r7, #36]	@ 0x24
 800135e:	e00c      	b.n	800137a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001366:	2b00      	cmp	r3, #0
 8001368:	d004      	beq.n	8001374 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800136a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001370:	627b      	str	r3, [r7, #36]	@ 0x24
 8001372:	e002      	b.n	800137a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 f965 	bl	8001644 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d024      	beq.n	80013ce <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800138c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f000 f941 	bl	8001620 <HAL_CAN_TxMailbox2CompleteCallback>
 800139e:	e016      	b.n	80013ce <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d004      	beq.n	80013b4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80013aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80013b2:	e00c      	b.n	80013ce <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d004      	beq.n	80013c8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80013be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80013c6:	e002      	b.n	80013ce <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f000 f944 	bl	8001656 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80013ce:	6a3b      	ldr	r3, [r7, #32]
 80013d0:	f003 0308 	and.w	r3, r3, #8
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d00c      	beq.n	80013f2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	f003 0310 	and.w	r3, r3, #16
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d007      	beq.n	80013f2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80013e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013e8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2210      	movs	r2, #16
 80013f0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80013f2:	6a3b      	ldr	r3, [r7, #32]
 80013f4:	f003 0304 	and.w	r3, r3, #4
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d00b      	beq.n	8001414 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	2b00      	cmp	r3, #0
 8001404:	d006      	beq.n	8001414 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2208      	movs	r2, #8
 800140c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff f812 	bl	8000438 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001414:	6a3b      	ldr	r3, [r7, #32]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d009      	beq.n	8001432 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	2b00      	cmp	r3, #0
 800142a:	d002      	beq.n	8001432 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f000 f91b 	bl	8001668 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001432:	6a3b      	ldr	r3, [r7, #32]
 8001434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00c      	beq.n	8001456 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	f003 0310 	and.w	r3, r3, #16
 8001442:	2b00      	cmp	r3, #0
 8001444:	d007      	beq.n	8001456 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001448:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2210      	movs	r2, #16
 8001454:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001456:	6a3b      	ldr	r3, [r7, #32]
 8001458:	f003 0320 	and.w	r3, r3, #32
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00b      	beq.n	8001478 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	2b00      	cmp	r3, #0
 8001468:	d006      	beq.n	8001478 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2208      	movs	r2, #8
 8001470:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f000 f90a 	bl	800168c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001478:	6a3b      	ldr	r3, [r7, #32]
 800147a:	f003 0310 	and.w	r3, r3, #16
 800147e:	2b00      	cmp	r3, #0
 8001480:	d009      	beq.n	8001496 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	2b00      	cmp	r3, #0
 800148e:	d002      	beq.n	8001496 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f000 f8f2 	bl	800167a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001496:	6a3b      	ldr	r3, [r7, #32]
 8001498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00b      	beq.n	80014b8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	f003 0310 	and.w	r3, r3, #16
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d006      	beq.n	80014b8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2210      	movs	r2, #16
 80014b0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 f8f3 	bl	800169e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80014b8:	6a3b      	ldr	r3, [r7, #32]
 80014ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d00b      	beq.n	80014da <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	f003 0308 	and.w	r3, r3, #8
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d006      	beq.n	80014da <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2208      	movs	r2, #8
 80014d2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f000 f8eb 	bl	80016b0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80014da:	6a3b      	ldr	r3, [r7, #32]
 80014dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d07b      	beq.n	80015dc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	f003 0304 	and.w	r3, r3, #4
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d072      	beq.n	80015d4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80014ee:	6a3b      	ldr	r3, [r7, #32]
 80014f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d008      	beq.n	800150a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800150a:	6a3b      	ldr	r3, [r7, #32]
 800150c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001510:	2b00      	cmp	r3, #0
 8001512:	d008      	beq.n	8001526 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800151e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001526:	6a3b      	ldr	r3, [r7, #32]
 8001528:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800152c:	2b00      	cmp	r3, #0
 800152e:	d008      	beq.n	8001542 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800153a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001542:	6a3b      	ldr	r3, [r7, #32]
 8001544:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001548:	2b00      	cmp	r3, #0
 800154a:	d043      	beq.n	80015d4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001552:	2b00      	cmp	r3, #0
 8001554:	d03e      	beq.n	80015d4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800155c:	2b60      	cmp	r3, #96	@ 0x60
 800155e:	d02b      	beq.n	80015b8 <HAL_CAN_IRQHandler+0x32a>
 8001560:	2b60      	cmp	r3, #96	@ 0x60
 8001562:	d82e      	bhi.n	80015c2 <HAL_CAN_IRQHandler+0x334>
 8001564:	2b50      	cmp	r3, #80	@ 0x50
 8001566:	d022      	beq.n	80015ae <HAL_CAN_IRQHandler+0x320>
 8001568:	2b50      	cmp	r3, #80	@ 0x50
 800156a:	d82a      	bhi.n	80015c2 <HAL_CAN_IRQHandler+0x334>
 800156c:	2b40      	cmp	r3, #64	@ 0x40
 800156e:	d019      	beq.n	80015a4 <HAL_CAN_IRQHandler+0x316>
 8001570:	2b40      	cmp	r3, #64	@ 0x40
 8001572:	d826      	bhi.n	80015c2 <HAL_CAN_IRQHandler+0x334>
 8001574:	2b30      	cmp	r3, #48	@ 0x30
 8001576:	d010      	beq.n	800159a <HAL_CAN_IRQHandler+0x30c>
 8001578:	2b30      	cmp	r3, #48	@ 0x30
 800157a:	d822      	bhi.n	80015c2 <HAL_CAN_IRQHandler+0x334>
 800157c:	2b10      	cmp	r3, #16
 800157e:	d002      	beq.n	8001586 <HAL_CAN_IRQHandler+0x2f8>
 8001580:	2b20      	cmp	r3, #32
 8001582:	d005      	beq.n	8001590 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001584:	e01d      	b.n	80015c2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001588:	f043 0308 	orr.w	r3, r3, #8
 800158c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800158e:	e019      	b.n	80015c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001592:	f043 0310 	orr.w	r3, r3, #16
 8001596:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001598:	e014      	b.n	80015c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800159a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159c:	f043 0320 	orr.w	r3, r3, #32
 80015a0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015a2:	e00f      	b.n	80015c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80015a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015aa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015ac:	e00a      	b.n	80015c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80015ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015b4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015b6:	e005      	b.n	80015c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80015b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015be:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015c0:	e000      	b.n	80015c4 <HAL_CAN_IRQHandler+0x336>
            break;
 80015c2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	699a      	ldr	r2, [r3, #24]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80015d2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2204      	movs	r2, #4
 80015da:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80015dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d008      	beq.n	80015f4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e8:	431a      	orrs	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f867 	bl	80016c2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80015f4:	bf00      	nop
 80015f6:	3728      	adds	r7, #40	@ 0x28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr

0800160e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr

08001632 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr

08001656 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr

08001668 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr

0800167a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr

0800168c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr

0800169e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr

080016c2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr

080016d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016f0:	4013      	ands	r3, r2
 80016f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001700:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001706:	4a04      	ldr	r2, [pc, #16]	@ (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	60d3      	str	r3, [r2, #12]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001720:	4b04      	ldr	r3, [pc, #16]	@ (8001734 <__NVIC_GetPriorityGrouping+0x18>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	0a1b      	lsrs	r3, r3, #8
 8001726:	f003 0307 	and.w	r3, r3, #7
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	2b00      	cmp	r3, #0
 8001748:	db0b      	blt.n	8001762 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	f003 021f 	and.w	r2, r3, #31
 8001750:	4906      	ldr	r1, [pc, #24]	@ (800176c <__NVIC_EnableIRQ+0x34>)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	095b      	lsrs	r3, r3, #5
 8001758:	2001      	movs	r0, #1
 800175a:	fa00 f202 	lsl.w	r2, r0, r2
 800175e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	e000e100 	.word	0xe000e100

08001770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	6039      	str	r1, [r7, #0]
 800177a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	2b00      	cmp	r3, #0
 8001782:	db0a      	blt.n	800179a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	b2da      	uxtb	r2, r3
 8001788:	490c      	ldr	r1, [pc, #48]	@ (80017bc <__NVIC_SetPriority+0x4c>)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	0112      	lsls	r2, r2, #4
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	440b      	add	r3, r1
 8001794:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001798:	e00a      	b.n	80017b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4908      	ldr	r1, [pc, #32]	@ (80017c0 <__NVIC_SetPriority+0x50>)
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	3b04      	subs	r3, #4
 80017a8:	0112      	lsls	r2, r2, #4
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	440b      	add	r3, r1
 80017ae:	761a      	strb	r2, [r3, #24]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000e100 	.word	0xe000e100
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b089      	sub	sp, #36	@ 0x24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f1c3 0307 	rsb	r3, r3, #7
 80017de:	2b04      	cmp	r3, #4
 80017e0:	bf28      	it	cs
 80017e2:	2304      	movcs	r3, #4
 80017e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3304      	adds	r3, #4
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	d902      	bls.n	80017f4 <NVIC_EncodePriority+0x30>
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3b03      	subs	r3, #3
 80017f2:	e000      	b.n	80017f6 <NVIC_EncodePriority+0x32>
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	f04f 32ff 	mov.w	r2, #4294967295
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43da      	mvns	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	401a      	ands	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800180c:	f04f 31ff 	mov.w	r1, #4294967295
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	43d9      	mvns	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	4313      	orrs	r3, r2
         );
}
 800181e:	4618      	mov	r0, r3
 8001820:	3724      	adds	r7, #36	@ 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3b01      	subs	r3, #1
 8001834:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001838:	d301      	bcc.n	800183e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800183a:	2301      	movs	r3, #1
 800183c:	e00f      	b.n	800185e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800183e:	4a0a      	ldr	r2, [pc, #40]	@ (8001868 <SysTick_Config+0x40>)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001846:	210f      	movs	r1, #15
 8001848:	f04f 30ff 	mov.w	r0, #4294967295
 800184c:	f7ff ff90 	bl	8001770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001850:	4b05      	ldr	r3, [pc, #20]	@ (8001868 <SysTick_Config+0x40>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001856:	4b04      	ldr	r3, [pc, #16]	@ (8001868 <SysTick_Config+0x40>)
 8001858:	2207      	movs	r2, #7
 800185a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	e000e010 	.word	0xe000e010

0800186c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ff2d 	bl	80016d4 <__NVIC_SetPriorityGrouping>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001882:	b580      	push	{r7, lr}
 8001884:	b086      	sub	sp, #24
 8001886:	af00      	add	r7, sp, #0
 8001888:	4603      	mov	r3, r0
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
 800188e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001894:	f7ff ff42 	bl	800171c <__NVIC_GetPriorityGrouping>
 8001898:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	68b9      	ldr	r1, [r7, #8]
 800189e:	6978      	ldr	r0, [r7, #20]
 80018a0:	f7ff ff90 	bl	80017c4 <NVIC_EncodePriority>
 80018a4:	4602      	mov	r2, r0
 80018a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018aa:	4611      	mov	r1, r2
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff5f 	bl	8001770 <__NVIC_SetPriority>
}
 80018b2:	bf00      	nop
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4603      	mov	r3, r0
 80018c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff35 	bl	8001738 <__NVIC_EnableIRQ>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff ffa2 	bl	8001828 <SysTick_Config>
 80018e4:	4603      	mov	r3, r0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80018f2:	f000 f802 	bl	80018fa <HAL_SYSTICK_Callback>
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr
	...

08001908 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001908:	b480      	push	{r7}
 800190a:	b08b      	sub	sp, #44	@ 0x2c
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001916:	2300      	movs	r3, #0
 8001918:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800191a:	e169      	b.n	8001bf0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800191c:	2201      	movs	r2, #1
 800191e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	429a      	cmp	r2, r3
 8001936:	f040 8158 	bne.w	8001bea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	4a9a      	ldr	r2, [pc, #616]	@ (8001ba8 <HAL_GPIO_Init+0x2a0>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d05e      	beq.n	8001a02 <HAL_GPIO_Init+0xfa>
 8001944:	4a98      	ldr	r2, [pc, #608]	@ (8001ba8 <HAL_GPIO_Init+0x2a0>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d875      	bhi.n	8001a36 <HAL_GPIO_Init+0x12e>
 800194a:	4a98      	ldr	r2, [pc, #608]	@ (8001bac <HAL_GPIO_Init+0x2a4>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d058      	beq.n	8001a02 <HAL_GPIO_Init+0xfa>
 8001950:	4a96      	ldr	r2, [pc, #600]	@ (8001bac <HAL_GPIO_Init+0x2a4>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d86f      	bhi.n	8001a36 <HAL_GPIO_Init+0x12e>
 8001956:	4a96      	ldr	r2, [pc, #600]	@ (8001bb0 <HAL_GPIO_Init+0x2a8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d052      	beq.n	8001a02 <HAL_GPIO_Init+0xfa>
 800195c:	4a94      	ldr	r2, [pc, #592]	@ (8001bb0 <HAL_GPIO_Init+0x2a8>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d869      	bhi.n	8001a36 <HAL_GPIO_Init+0x12e>
 8001962:	4a94      	ldr	r2, [pc, #592]	@ (8001bb4 <HAL_GPIO_Init+0x2ac>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d04c      	beq.n	8001a02 <HAL_GPIO_Init+0xfa>
 8001968:	4a92      	ldr	r2, [pc, #584]	@ (8001bb4 <HAL_GPIO_Init+0x2ac>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d863      	bhi.n	8001a36 <HAL_GPIO_Init+0x12e>
 800196e:	4a92      	ldr	r2, [pc, #584]	@ (8001bb8 <HAL_GPIO_Init+0x2b0>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d046      	beq.n	8001a02 <HAL_GPIO_Init+0xfa>
 8001974:	4a90      	ldr	r2, [pc, #576]	@ (8001bb8 <HAL_GPIO_Init+0x2b0>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d85d      	bhi.n	8001a36 <HAL_GPIO_Init+0x12e>
 800197a:	2b12      	cmp	r3, #18
 800197c:	d82a      	bhi.n	80019d4 <HAL_GPIO_Init+0xcc>
 800197e:	2b12      	cmp	r3, #18
 8001980:	d859      	bhi.n	8001a36 <HAL_GPIO_Init+0x12e>
 8001982:	a201      	add	r2, pc, #4	@ (adr r2, 8001988 <HAL_GPIO_Init+0x80>)
 8001984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001988:	08001a03 	.word	0x08001a03
 800198c:	080019dd 	.word	0x080019dd
 8001990:	080019ef 	.word	0x080019ef
 8001994:	08001a31 	.word	0x08001a31
 8001998:	08001a37 	.word	0x08001a37
 800199c:	08001a37 	.word	0x08001a37
 80019a0:	08001a37 	.word	0x08001a37
 80019a4:	08001a37 	.word	0x08001a37
 80019a8:	08001a37 	.word	0x08001a37
 80019ac:	08001a37 	.word	0x08001a37
 80019b0:	08001a37 	.word	0x08001a37
 80019b4:	08001a37 	.word	0x08001a37
 80019b8:	08001a37 	.word	0x08001a37
 80019bc:	08001a37 	.word	0x08001a37
 80019c0:	08001a37 	.word	0x08001a37
 80019c4:	08001a37 	.word	0x08001a37
 80019c8:	08001a37 	.word	0x08001a37
 80019cc:	080019e5 	.word	0x080019e5
 80019d0:	080019f9 	.word	0x080019f9
 80019d4:	4a79      	ldr	r2, [pc, #484]	@ (8001bbc <HAL_GPIO_Init+0x2b4>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d013      	beq.n	8001a02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019da:	e02c      	b.n	8001a36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	623b      	str	r3, [r7, #32]
          break;
 80019e2:	e029      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	3304      	adds	r3, #4
 80019ea:	623b      	str	r3, [r7, #32]
          break;
 80019ec:	e024      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	3308      	adds	r3, #8
 80019f4:	623b      	str	r3, [r7, #32]
          break;
 80019f6:	e01f      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	330c      	adds	r3, #12
 80019fe:	623b      	str	r3, [r7, #32]
          break;
 8001a00:	e01a      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d102      	bne.n	8001a10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a0a:	2304      	movs	r3, #4
 8001a0c:	623b      	str	r3, [r7, #32]
          break;
 8001a0e:	e013      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d105      	bne.n	8001a24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a18:	2308      	movs	r3, #8
 8001a1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69fa      	ldr	r2, [r7, #28]
 8001a20:	611a      	str	r2, [r3, #16]
          break;
 8001a22:	e009      	b.n	8001a38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a24:	2308      	movs	r3, #8
 8001a26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69fa      	ldr	r2, [r7, #28]
 8001a2c:	615a      	str	r2, [r3, #20]
          break;
 8001a2e:	e003      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a30:	2300      	movs	r3, #0
 8001a32:	623b      	str	r3, [r7, #32]
          break;
 8001a34:	e000      	b.n	8001a38 <HAL_GPIO_Init+0x130>
          break;
 8001a36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	2bff      	cmp	r3, #255	@ 0xff
 8001a3c:	d801      	bhi.n	8001a42 <HAL_GPIO_Init+0x13a>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	e001      	b.n	8001a46 <HAL_GPIO_Init+0x13e>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3304      	adds	r3, #4
 8001a46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	2bff      	cmp	r3, #255	@ 0xff
 8001a4c:	d802      	bhi.n	8001a54 <HAL_GPIO_Init+0x14c>
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	e002      	b.n	8001a5a <HAL_GPIO_Init+0x152>
 8001a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a56:	3b08      	subs	r3, #8
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	210f      	movs	r1, #15
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	fa01 f303 	lsl.w	r3, r1, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	6a39      	ldr	r1, [r7, #32]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	fa01 f303 	lsl.w	r3, r1, r3
 8001a74:	431a      	orrs	r2, r3
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 80b1 	beq.w	8001bea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a88:	4b4d      	ldr	r3, [pc, #308]	@ (8001bc0 <HAL_GPIO_Init+0x2b8>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	4a4c      	ldr	r2, [pc, #304]	@ (8001bc0 <HAL_GPIO_Init+0x2b8>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	6193      	str	r3, [r2, #24]
 8001a94:	4b4a      	ldr	r3, [pc, #296]	@ (8001bc0 <HAL_GPIO_Init+0x2b8>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001aa0:	4a48      	ldr	r2, [pc, #288]	@ (8001bc4 <HAL_GPIO_Init+0x2bc>)
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa4:	089b      	lsrs	r3, r3, #2
 8001aa6:	3302      	adds	r3, #2
 8001aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	220f      	movs	r2, #15
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a40      	ldr	r2, [pc, #256]	@ (8001bc8 <HAL_GPIO_Init+0x2c0>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d013      	beq.n	8001af4 <HAL_GPIO_Init+0x1ec>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a3f      	ldr	r2, [pc, #252]	@ (8001bcc <HAL_GPIO_Init+0x2c4>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d00d      	beq.n	8001af0 <HAL_GPIO_Init+0x1e8>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a3e      	ldr	r2, [pc, #248]	@ (8001bd0 <HAL_GPIO_Init+0x2c8>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d007      	beq.n	8001aec <HAL_GPIO_Init+0x1e4>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a3d      	ldr	r2, [pc, #244]	@ (8001bd4 <HAL_GPIO_Init+0x2cc>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d101      	bne.n	8001ae8 <HAL_GPIO_Init+0x1e0>
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e006      	b.n	8001af6 <HAL_GPIO_Init+0x1ee>
 8001ae8:	2304      	movs	r3, #4
 8001aea:	e004      	b.n	8001af6 <HAL_GPIO_Init+0x1ee>
 8001aec:	2302      	movs	r3, #2
 8001aee:	e002      	b.n	8001af6 <HAL_GPIO_Init+0x1ee>
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <HAL_GPIO_Init+0x1ee>
 8001af4:	2300      	movs	r3, #0
 8001af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001af8:	f002 0203 	and.w	r2, r2, #3
 8001afc:	0092      	lsls	r2, r2, #2
 8001afe:	4093      	lsls	r3, r2
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b06:	492f      	ldr	r1, [pc, #188]	@ (8001bc4 <HAL_GPIO_Init+0x2bc>)
 8001b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0a:	089b      	lsrs	r3, r3, #2
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d006      	beq.n	8001b2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b20:	4b2d      	ldr	r3, [pc, #180]	@ (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	492c      	ldr	r1, [pc, #176]	@ (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	608b      	str	r3, [r1, #8]
 8001b2c:	e006      	b.n	8001b3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	4928      	ldr	r1, [pc, #160]	@ (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d006      	beq.n	8001b56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b48:	4b23      	ldr	r3, [pc, #140]	@ (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	4922      	ldr	r1, [pc, #136]	@ (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	60cb      	str	r3, [r1, #12]
 8001b54:	e006      	b.n	8001b64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b56:	4b20      	ldr	r3, [pc, #128]	@ (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	491e      	ldr	r1, [pc, #120]	@ (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d006      	beq.n	8001b7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b70:	4b19      	ldr	r3, [pc, #100]	@ (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	4918      	ldr	r1, [pc, #96]	@ (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	604b      	str	r3, [r1, #4]
 8001b7c:	e006      	b.n	8001b8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b7e:	4b16      	ldr	r3, [pc, #88]	@ (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	4914      	ldr	r1, [pc, #80]	@ (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d021      	beq.n	8001bdc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b98:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	490e      	ldr	r1, [pc, #56]	@ (8001bd8 <HAL_GPIO_Init+0x2d0>)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	600b      	str	r3, [r1, #0]
 8001ba4:	e021      	b.n	8001bea <HAL_GPIO_Init+0x2e2>
 8001ba6:	bf00      	nop
 8001ba8:	10320000 	.word	0x10320000
 8001bac:	10310000 	.word	0x10310000
 8001bb0:	10220000 	.word	0x10220000
 8001bb4:	10210000 	.word	0x10210000
 8001bb8:	10120000 	.word	0x10120000
 8001bbc:	10110000 	.word	0x10110000
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40010000 	.word	0x40010000
 8001bc8:	40010800 	.word	0x40010800
 8001bcc:	40010c00 	.word	0x40010c00
 8001bd0:	40011000 	.word	0x40011000
 8001bd4:	40011400 	.word	0x40011400
 8001bd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8001c0c <HAL_GPIO_Init+0x304>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	43db      	mvns	r3, r3
 8001be4:	4909      	ldr	r1, [pc, #36]	@ (8001c0c <HAL_GPIO_Init+0x304>)
 8001be6:	4013      	ands	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bec:	3301      	adds	r3, #1
 8001bee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f47f ae8e 	bne.w	800191c <HAL_GPIO_Init+0x14>
  }
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	372c      	adds	r7, #44	@ 0x2c
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr
 8001c0c:	40010400 	.word	0x40010400

08001c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	807b      	strh	r3, [r7, #2]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c20:	787b      	ldrb	r3, [r7, #1]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c26:	887a      	ldrh	r2, [r7, #2]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c2c:	e003      	b.n	8001c36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c2e:	887b      	ldrh	r3, [r7, #2]
 8001c30:	041a      	lsls	r2, r3, #16
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	611a      	str	r2, [r3, #16]
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c4a:	4b08      	ldr	r3, [pc, #32]	@ (8001c6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c4c:	695a      	ldr	r2, [r3, #20]
 8001c4e:	88fb      	ldrh	r3, [r7, #6]
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d006      	beq.n	8001c64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c56:	4a05      	ldr	r2, [pc, #20]	@ (8001c6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 f806 	bl	8001c70 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40010400 	.word	0x40010400

08001c70 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr

08001c84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e272      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 8087 	beq.w	8001db2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ca4:	4b92      	ldr	r3, [pc, #584]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 030c 	and.w	r3, r3, #12
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d00c      	beq.n	8001cca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cb0:	4b8f      	ldr	r3, [pc, #572]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 030c 	and.w	r3, r3, #12
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d112      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x5e>
 8001cbc:	4b8c      	ldr	r3, [pc, #560]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cc8:	d10b      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cca:	4b89      	ldr	r3, [pc, #548]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d06c      	beq.n	8001db0 <HAL_RCC_OscConfig+0x12c>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d168      	bne.n	8001db0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e24c      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cea:	d106      	bne.n	8001cfa <HAL_RCC_OscConfig+0x76>
 8001cec:	4b80      	ldr	r3, [pc, #512]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a7f      	ldr	r2, [pc, #508]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	e02e      	b.n	8001d58 <HAL_RCC_OscConfig+0xd4>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10c      	bne.n	8001d1c <HAL_RCC_OscConfig+0x98>
 8001d02:	4b7b      	ldr	r3, [pc, #492]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a7a      	ldr	r2, [pc, #488]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	4b78      	ldr	r3, [pc, #480]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a77      	ldr	r2, [pc, #476]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	e01d      	b.n	8001d58 <HAL_RCC_OscConfig+0xd4>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d24:	d10c      	bne.n	8001d40 <HAL_RCC_OscConfig+0xbc>
 8001d26:	4b72      	ldr	r3, [pc, #456]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a71      	ldr	r2, [pc, #452]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	4b6f      	ldr	r3, [pc, #444]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a6e      	ldr	r2, [pc, #440]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d3c:	6013      	str	r3, [r2, #0]
 8001d3e:	e00b      	b.n	8001d58 <HAL_RCC_OscConfig+0xd4>
 8001d40:	4b6b      	ldr	r3, [pc, #428]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a6a      	ldr	r2, [pc, #424]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d4a:	6013      	str	r3, [r2, #0]
 8001d4c:	4b68      	ldr	r3, [pc, #416]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a67      	ldr	r2, [pc, #412]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d013      	beq.n	8001d88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d60:	f7fe fe6e 	bl	8000a40 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d68:	f7fe fe6a 	bl	8000a40 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b64      	cmp	r3, #100	@ 0x64
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e200      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7a:	4b5d      	ldr	r3, [pc, #372]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0f0      	beq.n	8001d68 <HAL_RCC_OscConfig+0xe4>
 8001d86:	e014      	b.n	8001db2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d88:	f7fe fe5a 	bl	8000a40 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d90:	f7fe fe56 	bl	8000a40 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b64      	cmp	r3, #100	@ 0x64
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e1ec      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da2:	4b53      	ldr	r3, [pc, #332]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x10c>
 8001dae:	e000      	b.n	8001db2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d063      	beq.n	8001e86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dbe:	4b4c      	ldr	r3, [pc, #304]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00b      	beq.n	8001de2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dca:	4b49      	ldr	r3, [pc, #292]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f003 030c 	and.w	r3, r3, #12
 8001dd2:	2b08      	cmp	r3, #8
 8001dd4:	d11c      	bne.n	8001e10 <HAL_RCC_OscConfig+0x18c>
 8001dd6:	4b46      	ldr	r3, [pc, #280]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d116      	bne.n	8001e10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de2:	4b43      	ldr	r3, [pc, #268]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d005      	beq.n	8001dfa <HAL_RCC_OscConfig+0x176>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d001      	beq.n	8001dfa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e1c0      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfa:	4b3d      	ldr	r3, [pc, #244]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4939      	ldr	r1, [pc, #228]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0e:	e03a      	b.n	8001e86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d020      	beq.n	8001e5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e18:	4b36      	ldr	r3, [pc, #216]	@ (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1e:	f7fe fe0f 	bl	8000a40 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e26:	f7fe fe0b 	bl	8000a40 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e1a1      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e38:	4b2d      	ldr	r3, [pc, #180]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0f0      	beq.n	8001e26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e44:	4b2a      	ldr	r3, [pc, #168]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4927      	ldr	r1, [pc, #156]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	600b      	str	r3, [r1, #0]
 8001e58:	e015      	b.n	8001e86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e5a:	4b26      	ldr	r3, [pc, #152]	@ (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e60:	f7fe fdee 	bl	8000a40 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e68:	f7fe fdea 	bl	8000a40 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e180      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d03a      	beq.n	8001f08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d019      	beq.n	8001ece <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e9a:	4b17      	ldr	r3, [pc, #92]	@ (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea0:	f7fe fdce 	bl	8000a40 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea8:	f7fe fdca 	bl	8000a40 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e160      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eba:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0f0      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ec6:	2001      	movs	r0, #1
 8001ec8:	f000 fa9c 	bl	8002404 <RCC_Delay>
 8001ecc:	e01c      	b.n	8001f08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ece:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed4:	f7fe fdb4 	bl	8000a40 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eda:	e00f      	b.n	8001efc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001edc:	f7fe fdb0 	bl	8000a40 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d908      	bls.n	8001efc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e146      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
 8001eee:	bf00      	nop
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	42420000 	.word	0x42420000
 8001ef8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001efc:	4b92      	ldr	r3, [pc, #584]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1e9      	bne.n	8001edc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 80a6 	beq.w	8002062 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f16:	2300      	movs	r3, #0
 8001f18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f1a:	4b8b      	ldr	r3, [pc, #556]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10d      	bne.n	8001f42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f26:	4b88      	ldr	r3, [pc, #544]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	4a87      	ldr	r2, [pc, #540]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001f2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f30:	61d3      	str	r3, [r2, #28]
 8001f32:	4b85      	ldr	r3, [pc, #532]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f42:	4b82      	ldr	r3, [pc, #520]	@ (800214c <HAL_RCC_OscConfig+0x4c8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d118      	bne.n	8001f80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f4e:	4b7f      	ldr	r3, [pc, #508]	@ (800214c <HAL_RCC_OscConfig+0x4c8>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a7e      	ldr	r2, [pc, #504]	@ (800214c <HAL_RCC_OscConfig+0x4c8>)
 8001f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f5a:	f7fe fd71 	bl	8000a40 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f62:	f7fe fd6d 	bl	8000a40 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b64      	cmp	r3, #100	@ 0x64
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e103      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f74:	4b75      	ldr	r3, [pc, #468]	@ (800214c <HAL_RCC_OscConfig+0x4c8>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d106      	bne.n	8001f96 <HAL_RCC_OscConfig+0x312>
 8001f88:	4b6f      	ldr	r3, [pc, #444]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	4a6e      	ldr	r2, [pc, #440]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	6213      	str	r3, [r2, #32]
 8001f94:	e02d      	b.n	8001ff2 <HAL_RCC_OscConfig+0x36e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10c      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x334>
 8001f9e:	4b6a      	ldr	r3, [pc, #424]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	4a69      	ldr	r2, [pc, #420]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fa4:	f023 0301 	bic.w	r3, r3, #1
 8001fa8:	6213      	str	r3, [r2, #32]
 8001faa:	4b67      	ldr	r3, [pc, #412]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	4a66      	ldr	r2, [pc, #408]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fb0:	f023 0304 	bic.w	r3, r3, #4
 8001fb4:	6213      	str	r3, [r2, #32]
 8001fb6:	e01c      	b.n	8001ff2 <HAL_RCC_OscConfig+0x36e>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	2b05      	cmp	r3, #5
 8001fbe:	d10c      	bne.n	8001fda <HAL_RCC_OscConfig+0x356>
 8001fc0:	4b61      	ldr	r3, [pc, #388]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	4a60      	ldr	r2, [pc, #384]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fc6:	f043 0304 	orr.w	r3, r3, #4
 8001fca:	6213      	str	r3, [r2, #32]
 8001fcc:	4b5e      	ldr	r3, [pc, #376]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	4a5d      	ldr	r2, [pc, #372]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	6213      	str	r3, [r2, #32]
 8001fd8:	e00b      	b.n	8001ff2 <HAL_RCC_OscConfig+0x36e>
 8001fda:	4b5b      	ldr	r3, [pc, #364]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	4a5a      	ldr	r2, [pc, #360]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fe0:	f023 0301 	bic.w	r3, r3, #1
 8001fe4:	6213      	str	r3, [r2, #32]
 8001fe6:	4b58      	ldr	r3, [pc, #352]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	4a57      	ldr	r2, [pc, #348]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fec:	f023 0304 	bic.w	r3, r3, #4
 8001ff0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d015      	beq.n	8002026 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffa:	f7fe fd21 	bl	8000a40 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002000:	e00a      	b.n	8002018 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002002:	f7fe fd1d 	bl	8000a40 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002010:	4293      	cmp	r3, r2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e0b1      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002018:	4b4b      	ldr	r3, [pc, #300]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0ee      	beq.n	8002002 <HAL_RCC_OscConfig+0x37e>
 8002024:	e014      	b.n	8002050 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002026:	f7fe fd0b 	bl	8000a40 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800202c:	e00a      	b.n	8002044 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202e:	f7fe fd07 	bl	8000a40 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	f241 3288 	movw	r2, #5000	@ 0x1388
 800203c:	4293      	cmp	r3, r2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e09b      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002044:	4b40      	ldr	r3, [pc, #256]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1ee      	bne.n	800202e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002050:	7dfb      	ldrb	r3, [r7, #23]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d105      	bne.n	8002062 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002056:	4b3c      	ldr	r3, [pc, #240]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	4a3b      	ldr	r2, [pc, #236]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 800205c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002060:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 8087 	beq.w	800217a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800206c:	4b36      	ldr	r3, [pc, #216]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 030c 	and.w	r3, r3, #12
 8002074:	2b08      	cmp	r3, #8
 8002076:	d061      	beq.n	800213c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	2b02      	cmp	r3, #2
 800207e:	d146      	bne.n	800210e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002080:	4b33      	ldr	r3, [pc, #204]	@ (8002150 <HAL_RCC_OscConfig+0x4cc>)
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002086:	f7fe fcdb 	bl	8000a40 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208e:	f7fe fcd7 	bl	8000a40 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e06d      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a0:	4b29      	ldr	r3, [pc, #164]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1f0      	bne.n	800208e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020b4:	d108      	bne.n	80020c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020b6:	4b24      	ldr	r3, [pc, #144]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	4921      	ldr	r1, [pc, #132]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a19      	ldr	r1, [r3, #32]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d8:	430b      	orrs	r3, r1
 80020da:	491b      	ldr	r1, [pc, #108]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002150 <HAL_RCC_OscConfig+0x4cc>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e6:	f7fe fcab 	bl	8000a40 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ee:	f7fe fca7 	bl	8000a40 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e03d      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002100:	4b11      	ldr	r3, [pc, #68]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f0      	beq.n	80020ee <HAL_RCC_OscConfig+0x46a>
 800210c:	e035      	b.n	800217a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210e:	4b10      	ldr	r3, [pc, #64]	@ (8002150 <HAL_RCC_OscConfig+0x4cc>)
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7fe fc94 	bl	8000a40 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211c:	f7fe fc90 	bl	8000a40 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e026      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800212e:	4b06      	ldr	r3, [pc, #24]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x498>
 800213a:	e01e      	b.n	800217a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d107      	bne.n	8002154 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e019      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
 8002148:	40021000 	.word	0x40021000
 800214c:	40007000 	.word	0x40007000
 8002150:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002154:	4b0b      	ldr	r3, [pc, #44]	@ (8002184 <HAL_RCC_OscConfig+0x500>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	429a      	cmp	r2, r3
 8002166:	d106      	bne.n	8002176 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002172:	429a      	cmp	r2, r3
 8002174:	d001      	beq.n	800217a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40021000 	.word	0x40021000

08002188 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e0d0      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800219c:	4b6a      	ldr	r3, [pc, #424]	@ (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d910      	bls.n	80021cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021aa:	4b67      	ldr	r3, [pc, #412]	@ (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f023 0207 	bic.w	r2, r3, #7
 80021b2:	4965      	ldr	r1, [pc, #404]	@ (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ba:	4b63      	ldr	r3, [pc, #396]	@ (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d001      	beq.n	80021cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0b8      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d020      	beq.n	800221a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021e4:	4b59      	ldr	r3, [pc, #356]	@ (800234c <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	4a58      	ldr	r2, [pc, #352]	@ (800234c <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80021ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021fc:	4b53      	ldr	r3, [pc, #332]	@ (800234c <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	4a52      	ldr	r2, [pc, #328]	@ (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002206:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002208:	4b50      	ldr	r3, [pc, #320]	@ (800234c <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	494d      	ldr	r1, [pc, #308]	@ (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	4313      	orrs	r3, r2
 8002218:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d040      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d107      	bne.n	800223e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222e:	4b47      	ldr	r3, [pc, #284]	@ (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d115      	bne.n	8002266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e07f      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b02      	cmp	r3, #2
 8002244:	d107      	bne.n	8002256 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002246:	4b41      	ldr	r3, [pc, #260]	@ (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d109      	bne.n	8002266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e073      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002256:	4b3d      	ldr	r3, [pc, #244]	@ (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e06b      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002266:	4b39      	ldr	r3, [pc, #228]	@ (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f023 0203 	bic.w	r2, r3, #3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	4936      	ldr	r1, [pc, #216]	@ (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002274:	4313      	orrs	r3, r2
 8002276:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002278:	f7fe fbe2 	bl	8000a40 <HAL_GetTick>
 800227c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227e:	e00a      	b.n	8002296 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002280:	f7fe fbde 	bl	8000a40 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800228e:	4293      	cmp	r3, r2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e053      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002296:	4b2d      	ldr	r3, [pc, #180]	@ (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 020c 	and.w	r2, r3, #12
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d1eb      	bne.n	8002280 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022a8:	4b27      	ldr	r3, [pc, #156]	@ (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d210      	bcs.n	80022d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b6:	4b24      	ldr	r3, [pc, #144]	@ (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 0207 	bic.w	r2, r3, #7
 80022be:	4922      	ldr	r1, [pc, #136]	@ (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c6:	4b20      	ldr	r3, [pc, #128]	@ (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d001      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e032      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d008      	beq.n	80022f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e4:	4b19      	ldr	r3, [pc, #100]	@ (800234c <HAL_RCC_ClockConfig+0x1c4>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4916      	ldr	r1, [pc, #88]	@ (800234c <HAL_RCC_ClockConfig+0x1c4>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d009      	beq.n	8002316 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002302:	4b12      	ldr	r3, [pc, #72]	@ (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	490e      	ldr	r1, [pc, #56]	@ (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002312:	4313      	orrs	r3, r2
 8002314:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002316:	f000 f821 	bl	800235c <HAL_RCC_GetSysClockFreq>
 800231a:	4602      	mov	r2, r0
 800231c:	4b0b      	ldr	r3, [pc, #44]	@ (800234c <HAL_RCC_ClockConfig+0x1c4>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	091b      	lsrs	r3, r3, #4
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	490a      	ldr	r1, [pc, #40]	@ (8002350 <HAL_RCC_ClockConfig+0x1c8>)
 8002328:	5ccb      	ldrb	r3, [r1, r3]
 800232a:	fa22 f303 	lsr.w	r3, r2, r3
 800232e:	4a09      	ldr	r2, [pc, #36]	@ (8002354 <HAL_RCC_ClockConfig+0x1cc>)
 8002330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002332:	4b09      	ldr	r3, [pc, #36]	@ (8002358 <HAL_RCC_ClockConfig+0x1d0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe fb40 	bl	80009bc <HAL_InitTick>

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40022000 	.word	0x40022000
 800234c:	40021000 	.word	0x40021000
 8002350:	0800374c 	.word	0x0800374c
 8002354:	20000000 	.word	0x20000000
 8002358:	20000004 	.word	0x20000004

0800235c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800235c:	b480      	push	{r7}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	2300      	movs	r3, #0
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	2300      	movs	r3, #0
 8002370:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002376:	4b1e      	ldr	r3, [pc, #120]	@ (80023f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	2b04      	cmp	r3, #4
 8002384:	d002      	beq.n	800238c <HAL_RCC_GetSysClockFreq+0x30>
 8002386:	2b08      	cmp	r3, #8
 8002388:	d003      	beq.n	8002392 <HAL_RCC_GetSysClockFreq+0x36>
 800238a:	e027      	b.n	80023dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800238c:	4b19      	ldr	r3, [pc, #100]	@ (80023f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800238e:	613b      	str	r3, [r7, #16]
      break;
 8002390:	e027      	b.n	80023e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	0c9b      	lsrs	r3, r3, #18
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	4a17      	ldr	r2, [pc, #92]	@ (80023f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800239c:	5cd3      	ldrb	r3, [r2, r3]
 800239e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d010      	beq.n	80023cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023aa:	4b11      	ldr	r3, [pc, #68]	@ (80023f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	0c5b      	lsrs	r3, r3, #17
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	4a11      	ldr	r2, [pc, #68]	@ (80023fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80023b6:	5cd3      	ldrb	r3, [r2, r3]
 80023b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a0d      	ldr	r2, [pc, #52]	@ (80023f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80023be:	fb03 f202 	mul.w	r2, r3, r2
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	e004      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a0c      	ldr	r2, [pc, #48]	@ (8002400 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023d0:	fb02 f303 	mul.w	r3, r2, r3
 80023d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	613b      	str	r3, [r7, #16]
      break;
 80023da:	e002      	b.n	80023e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023dc:	4b05      	ldr	r3, [pc, #20]	@ (80023f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80023de:	613b      	str	r3, [r7, #16]
      break;
 80023e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023e2:	693b      	ldr	r3, [r7, #16]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	371c      	adds	r7, #28
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000
 80023f4:	007a1200 	.word	0x007a1200
 80023f8:	0800375c 	.word	0x0800375c
 80023fc:	0800376c 	.word	0x0800376c
 8002400:	003d0900 	.word	0x003d0900

08002404 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800240c:	4b0a      	ldr	r3, [pc, #40]	@ (8002438 <RCC_Delay+0x34>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a0a      	ldr	r2, [pc, #40]	@ (800243c <RCC_Delay+0x38>)
 8002412:	fba2 2303 	umull	r2, r3, r2, r3
 8002416:	0a5b      	lsrs	r3, r3, #9
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	fb02 f303 	mul.w	r3, r2, r3
 800241e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002420:	bf00      	nop
  }
  while (Delay --);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1e5a      	subs	r2, r3, #1
 8002426:	60fa      	str	r2, [r7, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1f9      	bne.n	8002420 <RCC_Delay+0x1c>
}
 800242c:	bf00      	nop
 800242e:	bf00      	nop
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr
 8002438:	20000000 	.word	0x20000000
 800243c:	10624dd3 	.word	0x10624dd3

08002440 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e041      	b.n	80024d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d106      	bne.n	800246c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7fe f928 	bl	80006bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3304      	adds	r3, #4
 800247c:	4619      	mov	r1, r3
 800247e:	4610      	mov	r0, r2
 8002480:	f000 f994 	bl	80027ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
	...

080024e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d001      	beq.n	80024f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e03a      	b.n	800256e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2202      	movs	r2, #2
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0201 	orr.w	r2, r2, #1
 800250e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a18      	ldr	r2, [pc, #96]	@ (8002578 <HAL_TIM_Base_Start_IT+0x98>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d00e      	beq.n	8002538 <HAL_TIM_Base_Start_IT+0x58>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002522:	d009      	beq.n	8002538 <HAL_TIM_Base_Start_IT+0x58>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a14      	ldr	r2, [pc, #80]	@ (800257c <HAL_TIM_Base_Start_IT+0x9c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d004      	beq.n	8002538 <HAL_TIM_Base_Start_IT+0x58>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a13      	ldr	r2, [pc, #76]	@ (8002580 <HAL_TIM_Base_Start_IT+0xa0>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d111      	bne.n	800255c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2b06      	cmp	r3, #6
 8002548:	d010      	beq.n	800256c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f042 0201 	orr.w	r2, r2, #1
 8002558:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800255a:	e007      	b.n	800256c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0201 	orr.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr
 8002578:	40012c00 	.word	0x40012c00
 800257c:	40000400 	.word	0x40000400
 8002580:	40000800 	.word	0x40000800

08002584 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d020      	beq.n	80025e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d01b      	beq.n	80025e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f06f 0202 	mvn.w	r2, #2
 80025b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f8d1 	bl	8002776 <HAL_TIM_IC_CaptureCallback>
 80025d4:	e005      	b.n	80025e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f8c4 	bl	8002764 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f8d3 	bl	8002788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	f003 0304 	and.w	r3, r3, #4
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d020      	beq.n	8002634 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d01b      	beq.n	8002634 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f06f 0204 	mvn.w	r2, #4
 8002604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2202      	movs	r2, #2
 800260a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f8ab 	bl	8002776 <HAL_TIM_IC_CaptureCallback>
 8002620:	e005      	b.n	800262e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f89e 	bl	8002764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f8ad 	bl	8002788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	2b00      	cmp	r3, #0
 800263c:	d020      	beq.n	8002680 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	2b00      	cmp	r3, #0
 8002646:	d01b      	beq.n	8002680 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f06f 0208 	mvn.w	r2, #8
 8002650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2204      	movs	r2, #4
 8002656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f885 	bl	8002776 <HAL_TIM_IC_CaptureCallback>
 800266c:	e005      	b.n	800267a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f878 	bl	8002764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f887 	bl	8002788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	f003 0310 	and.w	r3, r3, #16
 8002686:	2b00      	cmp	r3, #0
 8002688:	d020      	beq.n	80026cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	2b00      	cmp	r3, #0
 8002692:	d01b      	beq.n	80026cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0210 	mvn.w	r2, #16
 800269c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2208      	movs	r2, #8
 80026a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f85f 	bl	8002776 <HAL_TIM_IC_CaptureCallback>
 80026b8:	e005      	b.n	80026c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f852 	bl	8002764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f861 	bl	8002788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00c      	beq.n	80026f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d007      	beq.n	80026f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f06f 0201 	mvn.w	r2, #1
 80026e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7fd ff08 	bl	8000500 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00c      	beq.n	8002714 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002700:	2b00      	cmp	r3, #0
 8002702:	d007      	beq.n	8002714 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800270c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f8c3 	bl	800289a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00c      	beq.n	8002738 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002724:	2b00      	cmp	r3, #0
 8002726:	d007      	beq.n	8002738 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f831 	bl	800279a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	f003 0320 	and.w	r3, r3, #32
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00c      	beq.n	800275c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f003 0320 	and.w	r3, r3, #32
 8002748:	2b00      	cmp	r3, #0
 800274a:	d007      	beq.n	800275c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f06f 0220 	mvn.w	r2, #32
 8002754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f896 	bl	8002888 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800275c:	bf00      	nop
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr

08002776 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr

0800279a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a2f      	ldr	r2, [pc, #188]	@ (800287c <TIM_Base_SetConfig+0xd0>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d00b      	beq.n	80027dc <TIM_Base_SetConfig+0x30>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027ca:	d007      	beq.n	80027dc <TIM_Base_SetConfig+0x30>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a2c      	ldr	r2, [pc, #176]	@ (8002880 <TIM_Base_SetConfig+0xd4>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d003      	beq.n	80027dc <TIM_Base_SetConfig+0x30>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a2b      	ldr	r2, [pc, #172]	@ (8002884 <TIM_Base_SetConfig+0xd8>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d108      	bne.n	80027ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a22      	ldr	r2, [pc, #136]	@ (800287c <TIM_Base_SetConfig+0xd0>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d00b      	beq.n	800280e <TIM_Base_SetConfig+0x62>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027fc:	d007      	beq.n	800280e <TIM_Base_SetConfig+0x62>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a1f      	ldr	r2, [pc, #124]	@ (8002880 <TIM_Base_SetConfig+0xd4>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d003      	beq.n	800280e <TIM_Base_SetConfig+0x62>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a1e      	ldr	r2, [pc, #120]	@ (8002884 <TIM_Base_SetConfig+0xd8>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d108      	bne.n	8002820 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	4313      	orrs	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	4313      	orrs	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a0d      	ldr	r2, [pc, #52]	@ (800287c <TIM_Base_SetConfig+0xd0>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d103      	bne.n	8002854 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	691a      	ldr	r2, [r3, #16]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d005      	beq.n	8002872 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f023 0201 	bic.w	r2, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	611a      	str	r2, [r3, #16]
  }
}
 8002872:	bf00      	nop
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr
 800287c:	40012c00 	.word	0x40012c00
 8002880:	40000400 	.word	0x40000400
 8002884:	40000800 	.word	0x40000800

08002888 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr

0800289a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr

080028ac <std>:
 80028ac:	2300      	movs	r3, #0
 80028ae:	b510      	push	{r4, lr}
 80028b0:	4604      	mov	r4, r0
 80028b2:	e9c0 3300 	strd	r3, r3, [r0]
 80028b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80028ba:	6083      	str	r3, [r0, #8]
 80028bc:	8181      	strh	r1, [r0, #12]
 80028be:	6643      	str	r3, [r0, #100]	@ 0x64
 80028c0:	81c2      	strh	r2, [r0, #14]
 80028c2:	6183      	str	r3, [r0, #24]
 80028c4:	4619      	mov	r1, r3
 80028c6:	2208      	movs	r2, #8
 80028c8:	305c      	adds	r0, #92	@ 0x5c
 80028ca:	f000 f906 	bl	8002ada <memset>
 80028ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002904 <std+0x58>)
 80028d0:	6224      	str	r4, [r4, #32]
 80028d2:	6263      	str	r3, [r4, #36]	@ 0x24
 80028d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002908 <std+0x5c>)
 80028d6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80028d8:	4b0c      	ldr	r3, [pc, #48]	@ (800290c <std+0x60>)
 80028da:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80028dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002910 <std+0x64>)
 80028de:	6323      	str	r3, [r4, #48]	@ 0x30
 80028e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002914 <std+0x68>)
 80028e2:	429c      	cmp	r4, r3
 80028e4:	d006      	beq.n	80028f4 <std+0x48>
 80028e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80028ea:	4294      	cmp	r4, r2
 80028ec:	d002      	beq.n	80028f4 <std+0x48>
 80028ee:	33d0      	adds	r3, #208	@ 0xd0
 80028f0:	429c      	cmp	r4, r3
 80028f2:	d105      	bne.n	8002900 <std+0x54>
 80028f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80028f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028fc:	f000 b966 	b.w	8002bcc <__retarget_lock_init_recursive>
 8002900:	bd10      	pop	{r4, pc}
 8002902:	bf00      	nop
 8002904:	08002a55 	.word	0x08002a55
 8002908:	08002a77 	.word	0x08002a77
 800290c:	08002aaf 	.word	0x08002aaf
 8002910:	08002ad3 	.word	0x08002ad3
 8002914:	2000011c 	.word	0x2000011c

08002918 <stdio_exit_handler>:
 8002918:	4a02      	ldr	r2, [pc, #8]	@ (8002924 <stdio_exit_handler+0xc>)
 800291a:	4903      	ldr	r1, [pc, #12]	@ (8002928 <stdio_exit_handler+0x10>)
 800291c:	4803      	ldr	r0, [pc, #12]	@ (800292c <stdio_exit_handler+0x14>)
 800291e:	f000 b869 	b.w	80029f4 <_fwalk_sglue>
 8002922:	bf00      	nop
 8002924:	2000000c 	.word	0x2000000c
 8002928:	08003461 	.word	0x08003461
 800292c:	2000001c 	.word	0x2000001c

08002930 <cleanup_stdio>:
 8002930:	6841      	ldr	r1, [r0, #4]
 8002932:	4b0c      	ldr	r3, [pc, #48]	@ (8002964 <cleanup_stdio+0x34>)
 8002934:	b510      	push	{r4, lr}
 8002936:	4299      	cmp	r1, r3
 8002938:	4604      	mov	r4, r0
 800293a:	d001      	beq.n	8002940 <cleanup_stdio+0x10>
 800293c:	f000 fd90 	bl	8003460 <_fflush_r>
 8002940:	68a1      	ldr	r1, [r4, #8]
 8002942:	4b09      	ldr	r3, [pc, #36]	@ (8002968 <cleanup_stdio+0x38>)
 8002944:	4299      	cmp	r1, r3
 8002946:	d002      	beq.n	800294e <cleanup_stdio+0x1e>
 8002948:	4620      	mov	r0, r4
 800294a:	f000 fd89 	bl	8003460 <_fflush_r>
 800294e:	68e1      	ldr	r1, [r4, #12]
 8002950:	4b06      	ldr	r3, [pc, #24]	@ (800296c <cleanup_stdio+0x3c>)
 8002952:	4299      	cmp	r1, r3
 8002954:	d004      	beq.n	8002960 <cleanup_stdio+0x30>
 8002956:	4620      	mov	r0, r4
 8002958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800295c:	f000 bd80 	b.w	8003460 <_fflush_r>
 8002960:	bd10      	pop	{r4, pc}
 8002962:	bf00      	nop
 8002964:	2000011c 	.word	0x2000011c
 8002968:	20000184 	.word	0x20000184
 800296c:	200001ec 	.word	0x200001ec

08002970 <global_stdio_init.part.0>:
 8002970:	b510      	push	{r4, lr}
 8002972:	4b0b      	ldr	r3, [pc, #44]	@ (80029a0 <global_stdio_init.part.0+0x30>)
 8002974:	4c0b      	ldr	r4, [pc, #44]	@ (80029a4 <global_stdio_init.part.0+0x34>)
 8002976:	4a0c      	ldr	r2, [pc, #48]	@ (80029a8 <global_stdio_init.part.0+0x38>)
 8002978:	4620      	mov	r0, r4
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	2104      	movs	r1, #4
 800297e:	2200      	movs	r2, #0
 8002980:	f7ff ff94 	bl	80028ac <std>
 8002984:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002988:	2201      	movs	r2, #1
 800298a:	2109      	movs	r1, #9
 800298c:	f7ff ff8e 	bl	80028ac <std>
 8002990:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002994:	2202      	movs	r2, #2
 8002996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800299a:	2112      	movs	r1, #18
 800299c:	f7ff bf86 	b.w	80028ac <std>
 80029a0:	20000254 	.word	0x20000254
 80029a4:	2000011c 	.word	0x2000011c
 80029a8:	08002919 	.word	0x08002919

080029ac <__sfp_lock_acquire>:
 80029ac:	4801      	ldr	r0, [pc, #4]	@ (80029b4 <__sfp_lock_acquire+0x8>)
 80029ae:	f000 b90e 	b.w	8002bce <__retarget_lock_acquire_recursive>
 80029b2:	bf00      	nop
 80029b4:	2000025d 	.word	0x2000025d

080029b8 <__sfp_lock_release>:
 80029b8:	4801      	ldr	r0, [pc, #4]	@ (80029c0 <__sfp_lock_release+0x8>)
 80029ba:	f000 b909 	b.w	8002bd0 <__retarget_lock_release_recursive>
 80029be:	bf00      	nop
 80029c0:	2000025d 	.word	0x2000025d

080029c4 <__sinit>:
 80029c4:	b510      	push	{r4, lr}
 80029c6:	4604      	mov	r4, r0
 80029c8:	f7ff fff0 	bl	80029ac <__sfp_lock_acquire>
 80029cc:	6a23      	ldr	r3, [r4, #32]
 80029ce:	b11b      	cbz	r3, 80029d8 <__sinit+0x14>
 80029d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029d4:	f7ff bff0 	b.w	80029b8 <__sfp_lock_release>
 80029d8:	4b04      	ldr	r3, [pc, #16]	@ (80029ec <__sinit+0x28>)
 80029da:	6223      	str	r3, [r4, #32]
 80029dc:	4b04      	ldr	r3, [pc, #16]	@ (80029f0 <__sinit+0x2c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1f5      	bne.n	80029d0 <__sinit+0xc>
 80029e4:	f7ff ffc4 	bl	8002970 <global_stdio_init.part.0>
 80029e8:	e7f2      	b.n	80029d0 <__sinit+0xc>
 80029ea:	bf00      	nop
 80029ec:	08002931 	.word	0x08002931
 80029f0:	20000254 	.word	0x20000254

080029f4 <_fwalk_sglue>:
 80029f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029f8:	4607      	mov	r7, r0
 80029fa:	4688      	mov	r8, r1
 80029fc:	4614      	mov	r4, r2
 80029fe:	2600      	movs	r6, #0
 8002a00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002a04:	f1b9 0901 	subs.w	r9, r9, #1
 8002a08:	d505      	bpl.n	8002a16 <_fwalk_sglue+0x22>
 8002a0a:	6824      	ldr	r4, [r4, #0]
 8002a0c:	2c00      	cmp	r4, #0
 8002a0e:	d1f7      	bne.n	8002a00 <_fwalk_sglue+0xc>
 8002a10:	4630      	mov	r0, r6
 8002a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a16:	89ab      	ldrh	r3, [r5, #12]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d907      	bls.n	8002a2c <_fwalk_sglue+0x38>
 8002a1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002a20:	3301      	adds	r3, #1
 8002a22:	d003      	beq.n	8002a2c <_fwalk_sglue+0x38>
 8002a24:	4629      	mov	r1, r5
 8002a26:	4638      	mov	r0, r7
 8002a28:	47c0      	blx	r8
 8002a2a:	4306      	orrs	r6, r0
 8002a2c:	3568      	adds	r5, #104	@ 0x68
 8002a2e:	e7e9      	b.n	8002a04 <_fwalk_sglue+0x10>

08002a30 <iprintf>:
 8002a30:	b40f      	push	{r0, r1, r2, r3}
 8002a32:	b507      	push	{r0, r1, r2, lr}
 8002a34:	4906      	ldr	r1, [pc, #24]	@ (8002a50 <iprintf+0x20>)
 8002a36:	ab04      	add	r3, sp, #16
 8002a38:	6808      	ldr	r0, [r1, #0]
 8002a3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a3e:	6881      	ldr	r1, [r0, #8]
 8002a40:	9301      	str	r3, [sp, #4]
 8002a42:	f000 f9e5 	bl	8002e10 <_vfiprintf_r>
 8002a46:	b003      	add	sp, #12
 8002a48:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a4c:	b004      	add	sp, #16
 8002a4e:	4770      	bx	lr
 8002a50:	20000018 	.word	0x20000018

08002a54 <__sread>:
 8002a54:	b510      	push	{r4, lr}
 8002a56:	460c      	mov	r4, r1
 8002a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a5c:	f000 f868 	bl	8002b30 <_read_r>
 8002a60:	2800      	cmp	r0, #0
 8002a62:	bfab      	itete	ge
 8002a64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002a66:	89a3      	ldrhlt	r3, [r4, #12]
 8002a68:	181b      	addge	r3, r3, r0
 8002a6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002a6e:	bfac      	ite	ge
 8002a70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002a72:	81a3      	strhlt	r3, [r4, #12]
 8002a74:	bd10      	pop	{r4, pc}

08002a76 <__swrite>:
 8002a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a7a:	461f      	mov	r7, r3
 8002a7c:	898b      	ldrh	r3, [r1, #12]
 8002a7e:	4605      	mov	r5, r0
 8002a80:	05db      	lsls	r3, r3, #23
 8002a82:	460c      	mov	r4, r1
 8002a84:	4616      	mov	r6, r2
 8002a86:	d505      	bpl.n	8002a94 <__swrite+0x1e>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a90:	f000 f83c 	bl	8002b0c <_lseek_r>
 8002a94:	89a3      	ldrh	r3, [r4, #12]
 8002a96:	4632      	mov	r2, r6
 8002a98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a9c:	81a3      	strh	r3, [r4, #12]
 8002a9e:	4628      	mov	r0, r5
 8002aa0:	463b      	mov	r3, r7
 8002aa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002aa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002aaa:	f000 b853 	b.w	8002b54 <_write_r>

08002aae <__sseek>:
 8002aae:	b510      	push	{r4, lr}
 8002ab0:	460c      	mov	r4, r1
 8002ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ab6:	f000 f829 	bl	8002b0c <_lseek_r>
 8002aba:	1c43      	adds	r3, r0, #1
 8002abc:	89a3      	ldrh	r3, [r4, #12]
 8002abe:	bf15      	itete	ne
 8002ac0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002ac2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002ac6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002aca:	81a3      	strheq	r3, [r4, #12]
 8002acc:	bf18      	it	ne
 8002ace:	81a3      	strhne	r3, [r4, #12]
 8002ad0:	bd10      	pop	{r4, pc}

08002ad2 <__sclose>:
 8002ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ad6:	f000 b809 	b.w	8002aec <_close_r>

08002ada <memset>:
 8002ada:	4603      	mov	r3, r0
 8002adc:	4402      	add	r2, r0
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d100      	bne.n	8002ae4 <memset+0xa>
 8002ae2:	4770      	bx	lr
 8002ae4:	f803 1b01 	strb.w	r1, [r3], #1
 8002ae8:	e7f9      	b.n	8002ade <memset+0x4>
	...

08002aec <_close_r>:
 8002aec:	b538      	push	{r3, r4, r5, lr}
 8002aee:	2300      	movs	r3, #0
 8002af0:	4d05      	ldr	r5, [pc, #20]	@ (8002b08 <_close_r+0x1c>)
 8002af2:	4604      	mov	r4, r0
 8002af4:	4608      	mov	r0, r1
 8002af6:	602b      	str	r3, [r5, #0]
 8002af8:	f7fd feb1 	bl	800085e <_close>
 8002afc:	1c43      	adds	r3, r0, #1
 8002afe:	d102      	bne.n	8002b06 <_close_r+0x1a>
 8002b00:	682b      	ldr	r3, [r5, #0]
 8002b02:	b103      	cbz	r3, 8002b06 <_close_r+0x1a>
 8002b04:	6023      	str	r3, [r4, #0]
 8002b06:	bd38      	pop	{r3, r4, r5, pc}
 8002b08:	20000258 	.word	0x20000258

08002b0c <_lseek_r>:
 8002b0c:	b538      	push	{r3, r4, r5, lr}
 8002b0e:	4604      	mov	r4, r0
 8002b10:	4608      	mov	r0, r1
 8002b12:	4611      	mov	r1, r2
 8002b14:	2200      	movs	r2, #0
 8002b16:	4d05      	ldr	r5, [pc, #20]	@ (8002b2c <_lseek_r+0x20>)
 8002b18:	602a      	str	r2, [r5, #0]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	f7fd fec3 	bl	80008a6 <_lseek>
 8002b20:	1c43      	adds	r3, r0, #1
 8002b22:	d102      	bne.n	8002b2a <_lseek_r+0x1e>
 8002b24:	682b      	ldr	r3, [r5, #0]
 8002b26:	b103      	cbz	r3, 8002b2a <_lseek_r+0x1e>
 8002b28:	6023      	str	r3, [r4, #0]
 8002b2a:	bd38      	pop	{r3, r4, r5, pc}
 8002b2c:	20000258 	.word	0x20000258

08002b30 <_read_r>:
 8002b30:	b538      	push	{r3, r4, r5, lr}
 8002b32:	4604      	mov	r4, r0
 8002b34:	4608      	mov	r0, r1
 8002b36:	4611      	mov	r1, r2
 8002b38:	2200      	movs	r2, #0
 8002b3a:	4d05      	ldr	r5, [pc, #20]	@ (8002b50 <_read_r+0x20>)
 8002b3c:	602a      	str	r2, [r5, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	f7fd fe54 	bl	80007ec <_read>
 8002b44:	1c43      	adds	r3, r0, #1
 8002b46:	d102      	bne.n	8002b4e <_read_r+0x1e>
 8002b48:	682b      	ldr	r3, [r5, #0]
 8002b4a:	b103      	cbz	r3, 8002b4e <_read_r+0x1e>
 8002b4c:	6023      	str	r3, [r4, #0]
 8002b4e:	bd38      	pop	{r3, r4, r5, pc}
 8002b50:	20000258 	.word	0x20000258

08002b54 <_write_r>:
 8002b54:	b538      	push	{r3, r4, r5, lr}
 8002b56:	4604      	mov	r4, r0
 8002b58:	4608      	mov	r0, r1
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	4d05      	ldr	r5, [pc, #20]	@ (8002b74 <_write_r+0x20>)
 8002b60:	602a      	str	r2, [r5, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	f7fd fe5f 	bl	8000826 <_write>
 8002b68:	1c43      	adds	r3, r0, #1
 8002b6a:	d102      	bne.n	8002b72 <_write_r+0x1e>
 8002b6c:	682b      	ldr	r3, [r5, #0]
 8002b6e:	b103      	cbz	r3, 8002b72 <_write_r+0x1e>
 8002b70:	6023      	str	r3, [r4, #0]
 8002b72:	bd38      	pop	{r3, r4, r5, pc}
 8002b74:	20000258 	.word	0x20000258

08002b78 <__errno>:
 8002b78:	4b01      	ldr	r3, [pc, #4]	@ (8002b80 <__errno+0x8>)
 8002b7a:	6818      	ldr	r0, [r3, #0]
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	20000018 	.word	0x20000018

08002b84 <__libc_init_array>:
 8002b84:	b570      	push	{r4, r5, r6, lr}
 8002b86:	2600      	movs	r6, #0
 8002b88:	4d0c      	ldr	r5, [pc, #48]	@ (8002bbc <__libc_init_array+0x38>)
 8002b8a:	4c0d      	ldr	r4, [pc, #52]	@ (8002bc0 <__libc_init_array+0x3c>)
 8002b8c:	1b64      	subs	r4, r4, r5
 8002b8e:	10a4      	asrs	r4, r4, #2
 8002b90:	42a6      	cmp	r6, r4
 8002b92:	d109      	bne.n	8002ba8 <__libc_init_array+0x24>
 8002b94:	f000 fdc2 	bl	800371c <_init>
 8002b98:	2600      	movs	r6, #0
 8002b9a:	4d0a      	ldr	r5, [pc, #40]	@ (8002bc4 <__libc_init_array+0x40>)
 8002b9c:	4c0a      	ldr	r4, [pc, #40]	@ (8002bc8 <__libc_init_array+0x44>)
 8002b9e:	1b64      	subs	r4, r4, r5
 8002ba0:	10a4      	asrs	r4, r4, #2
 8002ba2:	42a6      	cmp	r6, r4
 8002ba4:	d105      	bne.n	8002bb2 <__libc_init_array+0x2e>
 8002ba6:	bd70      	pop	{r4, r5, r6, pc}
 8002ba8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bac:	4798      	blx	r3
 8002bae:	3601      	adds	r6, #1
 8002bb0:	e7ee      	b.n	8002b90 <__libc_init_array+0xc>
 8002bb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bb6:	4798      	blx	r3
 8002bb8:	3601      	adds	r6, #1
 8002bba:	e7f2      	b.n	8002ba2 <__libc_init_array+0x1e>
 8002bbc:	080037a4 	.word	0x080037a4
 8002bc0:	080037a4 	.word	0x080037a4
 8002bc4:	080037a4 	.word	0x080037a4
 8002bc8:	080037a8 	.word	0x080037a8

08002bcc <__retarget_lock_init_recursive>:
 8002bcc:	4770      	bx	lr

08002bce <__retarget_lock_acquire_recursive>:
 8002bce:	4770      	bx	lr

08002bd0 <__retarget_lock_release_recursive>:
 8002bd0:	4770      	bx	lr
	...

08002bd4 <_free_r>:
 8002bd4:	b538      	push	{r3, r4, r5, lr}
 8002bd6:	4605      	mov	r5, r0
 8002bd8:	2900      	cmp	r1, #0
 8002bda:	d040      	beq.n	8002c5e <_free_r+0x8a>
 8002bdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002be0:	1f0c      	subs	r4, r1, #4
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	bfb8      	it	lt
 8002be6:	18e4      	addlt	r4, r4, r3
 8002be8:	f000 f8de 	bl	8002da8 <__malloc_lock>
 8002bec:	4a1c      	ldr	r2, [pc, #112]	@ (8002c60 <_free_r+0x8c>)
 8002bee:	6813      	ldr	r3, [r2, #0]
 8002bf0:	b933      	cbnz	r3, 8002c00 <_free_r+0x2c>
 8002bf2:	6063      	str	r3, [r4, #4]
 8002bf4:	6014      	str	r4, [r2, #0]
 8002bf6:	4628      	mov	r0, r5
 8002bf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002bfc:	f000 b8da 	b.w	8002db4 <__malloc_unlock>
 8002c00:	42a3      	cmp	r3, r4
 8002c02:	d908      	bls.n	8002c16 <_free_r+0x42>
 8002c04:	6820      	ldr	r0, [r4, #0]
 8002c06:	1821      	adds	r1, r4, r0
 8002c08:	428b      	cmp	r3, r1
 8002c0a:	bf01      	itttt	eq
 8002c0c:	6819      	ldreq	r1, [r3, #0]
 8002c0e:	685b      	ldreq	r3, [r3, #4]
 8002c10:	1809      	addeq	r1, r1, r0
 8002c12:	6021      	streq	r1, [r4, #0]
 8002c14:	e7ed      	b.n	8002bf2 <_free_r+0x1e>
 8002c16:	461a      	mov	r2, r3
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	b10b      	cbz	r3, 8002c20 <_free_r+0x4c>
 8002c1c:	42a3      	cmp	r3, r4
 8002c1e:	d9fa      	bls.n	8002c16 <_free_r+0x42>
 8002c20:	6811      	ldr	r1, [r2, #0]
 8002c22:	1850      	adds	r0, r2, r1
 8002c24:	42a0      	cmp	r0, r4
 8002c26:	d10b      	bne.n	8002c40 <_free_r+0x6c>
 8002c28:	6820      	ldr	r0, [r4, #0]
 8002c2a:	4401      	add	r1, r0
 8002c2c:	1850      	adds	r0, r2, r1
 8002c2e:	4283      	cmp	r3, r0
 8002c30:	6011      	str	r1, [r2, #0]
 8002c32:	d1e0      	bne.n	8002bf6 <_free_r+0x22>
 8002c34:	6818      	ldr	r0, [r3, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	4408      	add	r0, r1
 8002c3a:	6010      	str	r0, [r2, #0]
 8002c3c:	6053      	str	r3, [r2, #4]
 8002c3e:	e7da      	b.n	8002bf6 <_free_r+0x22>
 8002c40:	d902      	bls.n	8002c48 <_free_r+0x74>
 8002c42:	230c      	movs	r3, #12
 8002c44:	602b      	str	r3, [r5, #0]
 8002c46:	e7d6      	b.n	8002bf6 <_free_r+0x22>
 8002c48:	6820      	ldr	r0, [r4, #0]
 8002c4a:	1821      	adds	r1, r4, r0
 8002c4c:	428b      	cmp	r3, r1
 8002c4e:	bf01      	itttt	eq
 8002c50:	6819      	ldreq	r1, [r3, #0]
 8002c52:	685b      	ldreq	r3, [r3, #4]
 8002c54:	1809      	addeq	r1, r1, r0
 8002c56:	6021      	streq	r1, [r4, #0]
 8002c58:	6063      	str	r3, [r4, #4]
 8002c5a:	6054      	str	r4, [r2, #4]
 8002c5c:	e7cb      	b.n	8002bf6 <_free_r+0x22>
 8002c5e:	bd38      	pop	{r3, r4, r5, pc}
 8002c60:	20000264 	.word	0x20000264

08002c64 <sbrk_aligned>:
 8002c64:	b570      	push	{r4, r5, r6, lr}
 8002c66:	4e0f      	ldr	r6, [pc, #60]	@ (8002ca4 <sbrk_aligned+0x40>)
 8002c68:	460c      	mov	r4, r1
 8002c6a:	6831      	ldr	r1, [r6, #0]
 8002c6c:	4605      	mov	r5, r0
 8002c6e:	b911      	cbnz	r1, 8002c76 <sbrk_aligned+0x12>
 8002c70:	f000 fcb2 	bl	80035d8 <_sbrk_r>
 8002c74:	6030      	str	r0, [r6, #0]
 8002c76:	4621      	mov	r1, r4
 8002c78:	4628      	mov	r0, r5
 8002c7a:	f000 fcad 	bl	80035d8 <_sbrk_r>
 8002c7e:	1c43      	adds	r3, r0, #1
 8002c80:	d103      	bne.n	8002c8a <sbrk_aligned+0x26>
 8002c82:	f04f 34ff 	mov.w	r4, #4294967295
 8002c86:	4620      	mov	r0, r4
 8002c88:	bd70      	pop	{r4, r5, r6, pc}
 8002c8a:	1cc4      	adds	r4, r0, #3
 8002c8c:	f024 0403 	bic.w	r4, r4, #3
 8002c90:	42a0      	cmp	r0, r4
 8002c92:	d0f8      	beq.n	8002c86 <sbrk_aligned+0x22>
 8002c94:	1a21      	subs	r1, r4, r0
 8002c96:	4628      	mov	r0, r5
 8002c98:	f000 fc9e 	bl	80035d8 <_sbrk_r>
 8002c9c:	3001      	adds	r0, #1
 8002c9e:	d1f2      	bne.n	8002c86 <sbrk_aligned+0x22>
 8002ca0:	e7ef      	b.n	8002c82 <sbrk_aligned+0x1e>
 8002ca2:	bf00      	nop
 8002ca4:	20000260 	.word	0x20000260

08002ca8 <_malloc_r>:
 8002ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cac:	1ccd      	adds	r5, r1, #3
 8002cae:	f025 0503 	bic.w	r5, r5, #3
 8002cb2:	3508      	adds	r5, #8
 8002cb4:	2d0c      	cmp	r5, #12
 8002cb6:	bf38      	it	cc
 8002cb8:	250c      	movcc	r5, #12
 8002cba:	2d00      	cmp	r5, #0
 8002cbc:	4606      	mov	r6, r0
 8002cbe:	db01      	blt.n	8002cc4 <_malloc_r+0x1c>
 8002cc0:	42a9      	cmp	r1, r5
 8002cc2:	d904      	bls.n	8002cce <_malloc_r+0x26>
 8002cc4:	230c      	movs	r3, #12
 8002cc6:	6033      	str	r3, [r6, #0]
 8002cc8:	2000      	movs	r0, #0
 8002cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002da4 <_malloc_r+0xfc>
 8002cd2:	f000 f869 	bl	8002da8 <__malloc_lock>
 8002cd6:	f8d8 3000 	ldr.w	r3, [r8]
 8002cda:	461c      	mov	r4, r3
 8002cdc:	bb44      	cbnz	r4, 8002d30 <_malloc_r+0x88>
 8002cde:	4629      	mov	r1, r5
 8002ce0:	4630      	mov	r0, r6
 8002ce2:	f7ff ffbf 	bl	8002c64 <sbrk_aligned>
 8002ce6:	1c43      	adds	r3, r0, #1
 8002ce8:	4604      	mov	r4, r0
 8002cea:	d158      	bne.n	8002d9e <_malloc_r+0xf6>
 8002cec:	f8d8 4000 	ldr.w	r4, [r8]
 8002cf0:	4627      	mov	r7, r4
 8002cf2:	2f00      	cmp	r7, #0
 8002cf4:	d143      	bne.n	8002d7e <_malloc_r+0xd6>
 8002cf6:	2c00      	cmp	r4, #0
 8002cf8:	d04b      	beq.n	8002d92 <_malloc_r+0xea>
 8002cfa:	6823      	ldr	r3, [r4, #0]
 8002cfc:	4639      	mov	r1, r7
 8002cfe:	4630      	mov	r0, r6
 8002d00:	eb04 0903 	add.w	r9, r4, r3
 8002d04:	f000 fc68 	bl	80035d8 <_sbrk_r>
 8002d08:	4581      	cmp	r9, r0
 8002d0a:	d142      	bne.n	8002d92 <_malloc_r+0xea>
 8002d0c:	6821      	ldr	r1, [r4, #0]
 8002d0e:	4630      	mov	r0, r6
 8002d10:	1a6d      	subs	r5, r5, r1
 8002d12:	4629      	mov	r1, r5
 8002d14:	f7ff ffa6 	bl	8002c64 <sbrk_aligned>
 8002d18:	3001      	adds	r0, #1
 8002d1a:	d03a      	beq.n	8002d92 <_malloc_r+0xea>
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	442b      	add	r3, r5
 8002d20:	6023      	str	r3, [r4, #0]
 8002d22:	f8d8 3000 	ldr.w	r3, [r8]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	bb62      	cbnz	r2, 8002d84 <_malloc_r+0xdc>
 8002d2a:	f8c8 7000 	str.w	r7, [r8]
 8002d2e:	e00f      	b.n	8002d50 <_malloc_r+0xa8>
 8002d30:	6822      	ldr	r2, [r4, #0]
 8002d32:	1b52      	subs	r2, r2, r5
 8002d34:	d420      	bmi.n	8002d78 <_malloc_r+0xd0>
 8002d36:	2a0b      	cmp	r2, #11
 8002d38:	d917      	bls.n	8002d6a <_malloc_r+0xc2>
 8002d3a:	1961      	adds	r1, r4, r5
 8002d3c:	42a3      	cmp	r3, r4
 8002d3e:	6025      	str	r5, [r4, #0]
 8002d40:	bf18      	it	ne
 8002d42:	6059      	strne	r1, [r3, #4]
 8002d44:	6863      	ldr	r3, [r4, #4]
 8002d46:	bf08      	it	eq
 8002d48:	f8c8 1000 	streq.w	r1, [r8]
 8002d4c:	5162      	str	r2, [r4, r5]
 8002d4e:	604b      	str	r3, [r1, #4]
 8002d50:	4630      	mov	r0, r6
 8002d52:	f000 f82f 	bl	8002db4 <__malloc_unlock>
 8002d56:	f104 000b 	add.w	r0, r4, #11
 8002d5a:	1d23      	adds	r3, r4, #4
 8002d5c:	f020 0007 	bic.w	r0, r0, #7
 8002d60:	1ac2      	subs	r2, r0, r3
 8002d62:	bf1c      	itt	ne
 8002d64:	1a1b      	subne	r3, r3, r0
 8002d66:	50a3      	strne	r3, [r4, r2]
 8002d68:	e7af      	b.n	8002cca <_malloc_r+0x22>
 8002d6a:	6862      	ldr	r2, [r4, #4]
 8002d6c:	42a3      	cmp	r3, r4
 8002d6e:	bf0c      	ite	eq
 8002d70:	f8c8 2000 	streq.w	r2, [r8]
 8002d74:	605a      	strne	r2, [r3, #4]
 8002d76:	e7eb      	b.n	8002d50 <_malloc_r+0xa8>
 8002d78:	4623      	mov	r3, r4
 8002d7a:	6864      	ldr	r4, [r4, #4]
 8002d7c:	e7ae      	b.n	8002cdc <_malloc_r+0x34>
 8002d7e:	463c      	mov	r4, r7
 8002d80:	687f      	ldr	r7, [r7, #4]
 8002d82:	e7b6      	b.n	8002cf2 <_malloc_r+0x4a>
 8002d84:	461a      	mov	r2, r3
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	42a3      	cmp	r3, r4
 8002d8a:	d1fb      	bne.n	8002d84 <_malloc_r+0xdc>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	6053      	str	r3, [r2, #4]
 8002d90:	e7de      	b.n	8002d50 <_malloc_r+0xa8>
 8002d92:	230c      	movs	r3, #12
 8002d94:	4630      	mov	r0, r6
 8002d96:	6033      	str	r3, [r6, #0]
 8002d98:	f000 f80c 	bl	8002db4 <__malloc_unlock>
 8002d9c:	e794      	b.n	8002cc8 <_malloc_r+0x20>
 8002d9e:	6005      	str	r5, [r0, #0]
 8002da0:	e7d6      	b.n	8002d50 <_malloc_r+0xa8>
 8002da2:	bf00      	nop
 8002da4:	20000264 	.word	0x20000264

08002da8 <__malloc_lock>:
 8002da8:	4801      	ldr	r0, [pc, #4]	@ (8002db0 <__malloc_lock+0x8>)
 8002daa:	f7ff bf10 	b.w	8002bce <__retarget_lock_acquire_recursive>
 8002dae:	bf00      	nop
 8002db0:	2000025c 	.word	0x2000025c

08002db4 <__malloc_unlock>:
 8002db4:	4801      	ldr	r0, [pc, #4]	@ (8002dbc <__malloc_unlock+0x8>)
 8002db6:	f7ff bf0b 	b.w	8002bd0 <__retarget_lock_release_recursive>
 8002dba:	bf00      	nop
 8002dbc:	2000025c 	.word	0x2000025c

08002dc0 <__sfputc_r>:
 8002dc0:	6893      	ldr	r3, [r2, #8]
 8002dc2:	b410      	push	{r4}
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	6093      	str	r3, [r2, #8]
 8002dca:	da07      	bge.n	8002ddc <__sfputc_r+0x1c>
 8002dcc:	6994      	ldr	r4, [r2, #24]
 8002dce:	42a3      	cmp	r3, r4
 8002dd0:	db01      	blt.n	8002dd6 <__sfputc_r+0x16>
 8002dd2:	290a      	cmp	r1, #10
 8002dd4:	d102      	bne.n	8002ddc <__sfputc_r+0x1c>
 8002dd6:	bc10      	pop	{r4}
 8002dd8:	f000 bb6a 	b.w	80034b0 <__swbuf_r>
 8002ddc:	6813      	ldr	r3, [r2, #0]
 8002dde:	1c58      	adds	r0, r3, #1
 8002de0:	6010      	str	r0, [r2, #0]
 8002de2:	7019      	strb	r1, [r3, #0]
 8002de4:	4608      	mov	r0, r1
 8002de6:	bc10      	pop	{r4}
 8002de8:	4770      	bx	lr

08002dea <__sfputs_r>:
 8002dea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dec:	4606      	mov	r6, r0
 8002dee:	460f      	mov	r7, r1
 8002df0:	4614      	mov	r4, r2
 8002df2:	18d5      	adds	r5, r2, r3
 8002df4:	42ac      	cmp	r4, r5
 8002df6:	d101      	bne.n	8002dfc <__sfputs_r+0x12>
 8002df8:	2000      	movs	r0, #0
 8002dfa:	e007      	b.n	8002e0c <__sfputs_r+0x22>
 8002dfc:	463a      	mov	r2, r7
 8002dfe:	4630      	mov	r0, r6
 8002e00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e04:	f7ff ffdc 	bl	8002dc0 <__sfputc_r>
 8002e08:	1c43      	adds	r3, r0, #1
 8002e0a:	d1f3      	bne.n	8002df4 <__sfputs_r+0xa>
 8002e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002e10 <_vfiprintf_r>:
 8002e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e14:	460d      	mov	r5, r1
 8002e16:	4614      	mov	r4, r2
 8002e18:	4698      	mov	r8, r3
 8002e1a:	4606      	mov	r6, r0
 8002e1c:	b09d      	sub	sp, #116	@ 0x74
 8002e1e:	b118      	cbz	r0, 8002e28 <_vfiprintf_r+0x18>
 8002e20:	6a03      	ldr	r3, [r0, #32]
 8002e22:	b90b      	cbnz	r3, 8002e28 <_vfiprintf_r+0x18>
 8002e24:	f7ff fdce 	bl	80029c4 <__sinit>
 8002e28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002e2a:	07d9      	lsls	r1, r3, #31
 8002e2c:	d405      	bmi.n	8002e3a <_vfiprintf_r+0x2a>
 8002e2e:	89ab      	ldrh	r3, [r5, #12]
 8002e30:	059a      	lsls	r2, r3, #22
 8002e32:	d402      	bmi.n	8002e3a <_vfiprintf_r+0x2a>
 8002e34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002e36:	f7ff feca 	bl	8002bce <__retarget_lock_acquire_recursive>
 8002e3a:	89ab      	ldrh	r3, [r5, #12]
 8002e3c:	071b      	lsls	r3, r3, #28
 8002e3e:	d501      	bpl.n	8002e44 <_vfiprintf_r+0x34>
 8002e40:	692b      	ldr	r3, [r5, #16]
 8002e42:	b99b      	cbnz	r3, 8002e6c <_vfiprintf_r+0x5c>
 8002e44:	4629      	mov	r1, r5
 8002e46:	4630      	mov	r0, r6
 8002e48:	f000 fb70 	bl	800352c <__swsetup_r>
 8002e4c:	b170      	cbz	r0, 8002e6c <_vfiprintf_r+0x5c>
 8002e4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002e50:	07dc      	lsls	r4, r3, #31
 8002e52:	d504      	bpl.n	8002e5e <_vfiprintf_r+0x4e>
 8002e54:	f04f 30ff 	mov.w	r0, #4294967295
 8002e58:	b01d      	add	sp, #116	@ 0x74
 8002e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e5e:	89ab      	ldrh	r3, [r5, #12]
 8002e60:	0598      	lsls	r0, r3, #22
 8002e62:	d4f7      	bmi.n	8002e54 <_vfiprintf_r+0x44>
 8002e64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002e66:	f7ff feb3 	bl	8002bd0 <__retarget_lock_release_recursive>
 8002e6a:	e7f3      	b.n	8002e54 <_vfiprintf_r+0x44>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e70:	2320      	movs	r3, #32
 8002e72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002e76:	2330      	movs	r3, #48	@ 0x30
 8002e78:	f04f 0901 	mov.w	r9, #1
 8002e7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e80:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800302c <_vfiprintf_r+0x21c>
 8002e84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002e88:	4623      	mov	r3, r4
 8002e8a:	469a      	mov	sl, r3
 8002e8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e90:	b10a      	cbz	r2, 8002e96 <_vfiprintf_r+0x86>
 8002e92:	2a25      	cmp	r2, #37	@ 0x25
 8002e94:	d1f9      	bne.n	8002e8a <_vfiprintf_r+0x7a>
 8002e96:	ebba 0b04 	subs.w	fp, sl, r4
 8002e9a:	d00b      	beq.n	8002eb4 <_vfiprintf_r+0xa4>
 8002e9c:	465b      	mov	r3, fp
 8002e9e:	4622      	mov	r2, r4
 8002ea0:	4629      	mov	r1, r5
 8002ea2:	4630      	mov	r0, r6
 8002ea4:	f7ff ffa1 	bl	8002dea <__sfputs_r>
 8002ea8:	3001      	adds	r0, #1
 8002eaa:	f000 80a7 	beq.w	8002ffc <_vfiprintf_r+0x1ec>
 8002eae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002eb0:	445a      	add	r2, fp
 8002eb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8002eb4:	f89a 3000 	ldrb.w	r3, [sl]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 809f 	beq.w	8002ffc <_vfiprintf_r+0x1ec>
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ec8:	f10a 0a01 	add.w	sl, sl, #1
 8002ecc:	9304      	str	r3, [sp, #16]
 8002ece:	9307      	str	r3, [sp, #28]
 8002ed0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002ed4:	931a      	str	r3, [sp, #104]	@ 0x68
 8002ed6:	4654      	mov	r4, sl
 8002ed8:	2205      	movs	r2, #5
 8002eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ede:	4853      	ldr	r0, [pc, #332]	@ (800302c <_vfiprintf_r+0x21c>)
 8002ee0:	f000 fb8a 	bl	80035f8 <memchr>
 8002ee4:	9a04      	ldr	r2, [sp, #16]
 8002ee6:	b9d8      	cbnz	r0, 8002f20 <_vfiprintf_r+0x110>
 8002ee8:	06d1      	lsls	r1, r2, #27
 8002eea:	bf44      	itt	mi
 8002eec:	2320      	movmi	r3, #32
 8002eee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002ef2:	0713      	lsls	r3, r2, #28
 8002ef4:	bf44      	itt	mi
 8002ef6:	232b      	movmi	r3, #43	@ 0x2b
 8002ef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002efc:	f89a 3000 	ldrb.w	r3, [sl]
 8002f00:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f02:	d015      	beq.n	8002f30 <_vfiprintf_r+0x120>
 8002f04:	4654      	mov	r4, sl
 8002f06:	2000      	movs	r0, #0
 8002f08:	f04f 0c0a 	mov.w	ip, #10
 8002f0c:	9a07      	ldr	r2, [sp, #28]
 8002f0e:	4621      	mov	r1, r4
 8002f10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f14:	3b30      	subs	r3, #48	@ 0x30
 8002f16:	2b09      	cmp	r3, #9
 8002f18:	d94b      	bls.n	8002fb2 <_vfiprintf_r+0x1a2>
 8002f1a:	b1b0      	cbz	r0, 8002f4a <_vfiprintf_r+0x13a>
 8002f1c:	9207      	str	r2, [sp, #28]
 8002f1e:	e014      	b.n	8002f4a <_vfiprintf_r+0x13a>
 8002f20:	eba0 0308 	sub.w	r3, r0, r8
 8002f24:	fa09 f303 	lsl.w	r3, r9, r3
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	46a2      	mov	sl, r4
 8002f2c:	9304      	str	r3, [sp, #16]
 8002f2e:	e7d2      	b.n	8002ed6 <_vfiprintf_r+0xc6>
 8002f30:	9b03      	ldr	r3, [sp, #12]
 8002f32:	1d19      	adds	r1, r3, #4
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	9103      	str	r1, [sp, #12]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bfbb      	ittet	lt
 8002f3c:	425b      	neglt	r3, r3
 8002f3e:	f042 0202 	orrlt.w	r2, r2, #2
 8002f42:	9307      	strge	r3, [sp, #28]
 8002f44:	9307      	strlt	r3, [sp, #28]
 8002f46:	bfb8      	it	lt
 8002f48:	9204      	strlt	r2, [sp, #16]
 8002f4a:	7823      	ldrb	r3, [r4, #0]
 8002f4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8002f4e:	d10a      	bne.n	8002f66 <_vfiprintf_r+0x156>
 8002f50:	7863      	ldrb	r3, [r4, #1]
 8002f52:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f54:	d132      	bne.n	8002fbc <_vfiprintf_r+0x1ac>
 8002f56:	9b03      	ldr	r3, [sp, #12]
 8002f58:	3402      	adds	r4, #2
 8002f5a:	1d1a      	adds	r2, r3, #4
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	9203      	str	r2, [sp, #12]
 8002f60:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002f64:	9305      	str	r3, [sp, #20]
 8002f66:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003030 <_vfiprintf_r+0x220>
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	4650      	mov	r0, sl
 8002f6e:	7821      	ldrb	r1, [r4, #0]
 8002f70:	f000 fb42 	bl	80035f8 <memchr>
 8002f74:	b138      	cbz	r0, 8002f86 <_vfiprintf_r+0x176>
 8002f76:	2240      	movs	r2, #64	@ 0x40
 8002f78:	9b04      	ldr	r3, [sp, #16]
 8002f7a:	eba0 000a 	sub.w	r0, r0, sl
 8002f7e:	4082      	lsls	r2, r0
 8002f80:	4313      	orrs	r3, r2
 8002f82:	3401      	adds	r4, #1
 8002f84:	9304      	str	r3, [sp, #16]
 8002f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f8a:	2206      	movs	r2, #6
 8002f8c:	4829      	ldr	r0, [pc, #164]	@ (8003034 <_vfiprintf_r+0x224>)
 8002f8e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002f92:	f000 fb31 	bl	80035f8 <memchr>
 8002f96:	2800      	cmp	r0, #0
 8002f98:	d03f      	beq.n	800301a <_vfiprintf_r+0x20a>
 8002f9a:	4b27      	ldr	r3, [pc, #156]	@ (8003038 <_vfiprintf_r+0x228>)
 8002f9c:	bb1b      	cbnz	r3, 8002fe6 <_vfiprintf_r+0x1d6>
 8002f9e:	9b03      	ldr	r3, [sp, #12]
 8002fa0:	3307      	adds	r3, #7
 8002fa2:	f023 0307 	bic.w	r3, r3, #7
 8002fa6:	3308      	adds	r3, #8
 8002fa8:	9303      	str	r3, [sp, #12]
 8002faa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002fac:	443b      	add	r3, r7
 8002fae:	9309      	str	r3, [sp, #36]	@ 0x24
 8002fb0:	e76a      	b.n	8002e88 <_vfiprintf_r+0x78>
 8002fb2:	460c      	mov	r4, r1
 8002fb4:	2001      	movs	r0, #1
 8002fb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8002fba:	e7a8      	b.n	8002f0e <_vfiprintf_r+0xfe>
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f04f 0c0a 	mov.w	ip, #10
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	3401      	adds	r4, #1
 8002fc6:	9305      	str	r3, [sp, #20]
 8002fc8:	4620      	mov	r0, r4
 8002fca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002fce:	3a30      	subs	r2, #48	@ 0x30
 8002fd0:	2a09      	cmp	r2, #9
 8002fd2:	d903      	bls.n	8002fdc <_vfiprintf_r+0x1cc>
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0c6      	beq.n	8002f66 <_vfiprintf_r+0x156>
 8002fd8:	9105      	str	r1, [sp, #20]
 8002fda:	e7c4      	b.n	8002f66 <_vfiprintf_r+0x156>
 8002fdc:	4604      	mov	r4, r0
 8002fde:	2301      	movs	r3, #1
 8002fe0:	fb0c 2101 	mla	r1, ip, r1, r2
 8002fe4:	e7f0      	b.n	8002fc8 <_vfiprintf_r+0x1b8>
 8002fe6:	ab03      	add	r3, sp, #12
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	462a      	mov	r2, r5
 8002fec:	4630      	mov	r0, r6
 8002fee:	4b13      	ldr	r3, [pc, #76]	@ (800303c <_vfiprintf_r+0x22c>)
 8002ff0:	a904      	add	r1, sp, #16
 8002ff2:	f3af 8000 	nop.w
 8002ff6:	4607      	mov	r7, r0
 8002ff8:	1c78      	adds	r0, r7, #1
 8002ffa:	d1d6      	bne.n	8002faa <_vfiprintf_r+0x19a>
 8002ffc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002ffe:	07d9      	lsls	r1, r3, #31
 8003000:	d405      	bmi.n	800300e <_vfiprintf_r+0x1fe>
 8003002:	89ab      	ldrh	r3, [r5, #12]
 8003004:	059a      	lsls	r2, r3, #22
 8003006:	d402      	bmi.n	800300e <_vfiprintf_r+0x1fe>
 8003008:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800300a:	f7ff fde1 	bl	8002bd0 <__retarget_lock_release_recursive>
 800300e:	89ab      	ldrh	r3, [r5, #12]
 8003010:	065b      	lsls	r3, r3, #25
 8003012:	f53f af1f 	bmi.w	8002e54 <_vfiprintf_r+0x44>
 8003016:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003018:	e71e      	b.n	8002e58 <_vfiprintf_r+0x48>
 800301a:	ab03      	add	r3, sp, #12
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	462a      	mov	r2, r5
 8003020:	4630      	mov	r0, r6
 8003022:	4b06      	ldr	r3, [pc, #24]	@ (800303c <_vfiprintf_r+0x22c>)
 8003024:	a904      	add	r1, sp, #16
 8003026:	f000 f87d 	bl	8003124 <_printf_i>
 800302a:	e7e4      	b.n	8002ff6 <_vfiprintf_r+0x1e6>
 800302c:	0800376e 	.word	0x0800376e
 8003030:	08003774 	.word	0x08003774
 8003034:	08003778 	.word	0x08003778
 8003038:	00000000 	.word	0x00000000
 800303c:	08002deb 	.word	0x08002deb

08003040 <_printf_common>:
 8003040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003044:	4616      	mov	r6, r2
 8003046:	4698      	mov	r8, r3
 8003048:	688a      	ldr	r2, [r1, #8]
 800304a:	690b      	ldr	r3, [r1, #16]
 800304c:	4607      	mov	r7, r0
 800304e:	4293      	cmp	r3, r2
 8003050:	bfb8      	it	lt
 8003052:	4613      	movlt	r3, r2
 8003054:	6033      	str	r3, [r6, #0]
 8003056:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800305a:	460c      	mov	r4, r1
 800305c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003060:	b10a      	cbz	r2, 8003066 <_printf_common+0x26>
 8003062:	3301      	adds	r3, #1
 8003064:	6033      	str	r3, [r6, #0]
 8003066:	6823      	ldr	r3, [r4, #0]
 8003068:	0699      	lsls	r1, r3, #26
 800306a:	bf42      	ittt	mi
 800306c:	6833      	ldrmi	r3, [r6, #0]
 800306e:	3302      	addmi	r3, #2
 8003070:	6033      	strmi	r3, [r6, #0]
 8003072:	6825      	ldr	r5, [r4, #0]
 8003074:	f015 0506 	ands.w	r5, r5, #6
 8003078:	d106      	bne.n	8003088 <_printf_common+0x48>
 800307a:	f104 0a19 	add.w	sl, r4, #25
 800307e:	68e3      	ldr	r3, [r4, #12]
 8003080:	6832      	ldr	r2, [r6, #0]
 8003082:	1a9b      	subs	r3, r3, r2
 8003084:	42ab      	cmp	r3, r5
 8003086:	dc2b      	bgt.n	80030e0 <_printf_common+0xa0>
 8003088:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800308c:	6822      	ldr	r2, [r4, #0]
 800308e:	3b00      	subs	r3, #0
 8003090:	bf18      	it	ne
 8003092:	2301      	movne	r3, #1
 8003094:	0692      	lsls	r2, r2, #26
 8003096:	d430      	bmi.n	80030fa <_printf_common+0xba>
 8003098:	4641      	mov	r1, r8
 800309a:	4638      	mov	r0, r7
 800309c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80030a0:	47c8      	blx	r9
 80030a2:	3001      	adds	r0, #1
 80030a4:	d023      	beq.n	80030ee <_printf_common+0xae>
 80030a6:	6823      	ldr	r3, [r4, #0]
 80030a8:	6922      	ldr	r2, [r4, #16]
 80030aa:	f003 0306 	and.w	r3, r3, #6
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	bf14      	ite	ne
 80030b2:	2500      	movne	r5, #0
 80030b4:	6833      	ldreq	r3, [r6, #0]
 80030b6:	f04f 0600 	mov.w	r6, #0
 80030ba:	bf08      	it	eq
 80030bc:	68e5      	ldreq	r5, [r4, #12]
 80030be:	f104 041a 	add.w	r4, r4, #26
 80030c2:	bf08      	it	eq
 80030c4:	1aed      	subeq	r5, r5, r3
 80030c6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80030ca:	bf08      	it	eq
 80030cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030d0:	4293      	cmp	r3, r2
 80030d2:	bfc4      	itt	gt
 80030d4:	1a9b      	subgt	r3, r3, r2
 80030d6:	18ed      	addgt	r5, r5, r3
 80030d8:	42b5      	cmp	r5, r6
 80030da:	d11a      	bne.n	8003112 <_printf_common+0xd2>
 80030dc:	2000      	movs	r0, #0
 80030de:	e008      	b.n	80030f2 <_printf_common+0xb2>
 80030e0:	2301      	movs	r3, #1
 80030e2:	4652      	mov	r2, sl
 80030e4:	4641      	mov	r1, r8
 80030e6:	4638      	mov	r0, r7
 80030e8:	47c8      	blx	r9
 80030ea:	3001      	adds	r0, #1
 80030ec:	d103      	bne.n	80030f6 <_printf_common+0xb6>
 80030ee:	f04f 30ff 	mov.w	r0, #4294967295
 80030f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030f6:	3501      	adds	r5, #1
 80030f8:	e7c1      	b.n	800307e <_printf_common+0x3e>
 80030fa:	2030      	movs	r0, #48	@ 0x30
 80030fc:	18e1      	adds	r1, r4, r3
 80030fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003102:	1c5a      	adds	r2, r3, #1
 8003104:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003108:	4422      	add	r2, r4
 800310a:	3302      	adds	r3, #2
 800310c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003110:	e7c2      	b.n	8003098 <_printf_common+0x58>
 8003112:	2301      	movs	r3, #1
 8003114:	4622      	mov	r2, r4
 8003116:	4641      	mov	r1, r8
 8003118:	4638      	mov	r0, r7
 800311a:	47c8      	blx	r9
 800311c:	3001      	adds	r0, #1
 800311e:	d0e6      	beq.n	80030ee <_printf_common+0xae>
 8003120:	3601      	adds	r6, #1
 8003122:	e7d9      	b.n	80030d8 <_printf_common+0x98>

08003124 <_printf_i>:
 8003124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003128:	7e0f      	ldrb	r7, [r1, #24]
 800312a:	4691      	mov	r9, r2
 800312c:	2f78      	cmp	r7, #120	@ 0x78
 800312e:	4680      	mov	r8, r0
 8003130:	460c      	mov	r4, r1
 8003132:	469a      	mov	sl, r3
 8003134:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003136:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800313a:	d807      	bhi.n	800314c <_printf_i+0x28>
 800313c:	2f62      	cmp	r7, #98	@ 0x62
 800313e:	d80a      	bhi.n	8003156 <_printf_i+0x32>
 8003140:	2f00      	cmp	r7, #0
 8003142:	f000 80d1 	beq.w	80032e8 <_printf_i+0x1c4>
 8003146:	2f58      	cmp	r7, #88	@ 0x58
 8003148:	f000 80b8 	beq.w	80032bc <_printf_i+0x198>
 800314c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003150:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003154:	e03a      	b.n	80031cc <_printf_i+0xa8>
 8003156:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800315a:	2b15      	cmp	r3, #21
 800315c:	d8f6      	bhi.n	800314c <_printf_i+0x28>
 800315e:	a101      	add	r1, pc, #4	@ (adr r1, 8003164 <_printf_i+0x40>)
 8003160:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003164:	080031bd 	.word	0x080031bd
 8003168:	080031d1 	.word	0x080031d1
 800316c:	0800314d 	.word	0x0800314d
 8003170:	0800314d 	.word	0x0800314d
 8003174:	0800314d 	.word	0x0800314d
 8003178:	0800314d 	.word	0x0800314d
 800317c:	080031d1 	.word	0x080031d1
 8003180:	0800314d 	.word	0x0800314d
 8003184:	0800314d 	.word	0x0800314d
 8003188:	0800314d 	.word	0x0800314d
 800318c:	0800314d 	.word	0x0800314d
 8003190:	080032cf 	.word	0x080032cf
 8003194:	080031fb 	.word	0x080031fb
 8003198:	08003289 	.word	0x08003289
 800319c:	0800314d 	.word	0x0800314d
 80031a0:	0800314d 	.word	0x0800314d
 80031a4:	080032f1 	.word	0x080032f1
 80031a8:	0800314d 	.word	0x0800314d
 80031ac:	080031fb 	.word	0x080031fb
 80031b0:	0800314d 	.word	0x0800314d
 80031b4:	0800314d 	.word	0x0800314d
 80031b8:	08003291 	.word	0x08003291
 80031bc:	6833      	ldr	r3, [r6, #0]
 80031be:	1d1a      	adds	r2, r3, #4
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6032      	str	r2, [r6, #0]
 80031c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80031c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80031cc:	2301      	movs	r3, #1
 80031ce:	e09c      	b.n	800330a <_printf_i+0x1e6>
 80031d0:	6833      	ldr	r3, [r6, #0]
 80031d2:	6820      	ldr	r0, [r4, #0]
 80031d4:	1d19      	adds	r1, r3, #4
 80031d6:	6031      	str	r1, [r6, #0]
 80031d8:	0606      	lsls	r6, r0, #24
 80031da:	d501      	bpl.n	80031e0 <_printf_i+0xbc>
 80031dc:	681d      	ldr	r5, [r3, #0]
 80031de:	e003      	b.n	80031e8 <_printf_i+0xc4>
 80031e0:	0645      	lsls	r5, r0, #25
 80031e2:	d5fb      	bpl.n	80031dc <_printf_i+0xb8>
 80031e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80031e8:	2d00      	cmp	r5, #0
 80031ea:	da03      	bge.n	80031f4 <_printf_i+0xd0>
 80031ec:	232d      	movs	r3, #45	@ 0x2d
 80031ee:	426d      	negs	r5, r5
 80031f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80031f4:	230a      	movs	r3, #10
 80031f6:	4858      	ldr	r0, [pc, #352]	@ (8003358 <_printf_i+0x234>)
 80031f8:	e011      	b.n	800321e <_printf_i+0xfa>
 80031fa:	6821      	ldr	r1, [r4, #0]
 80031fc:	6833      	ldr	r3, [r6, #0]
 80031fe:	0608      	lsls	r0, r1, #24
 8003200:	f853 5b04 	ldr.w	r5, [r3], #4
 8003204:	d402      	bmi.n	800320c <_printf_i+0xe8>
 8003206:	0649      	lsls	r1, r1, #25
 8003208:	bf48      	it	mi
 800320a:	b2ad      	uxthmi	r5, r5
 800320c:	2f6f      	cmp	r7, #111	@ 0x6f
 800320e:	6033      	str	r3, [r6, #0]
 8003210:	bf14      	ite	ne
 8003212:	230a      	movne	r3, #10
 8003214:	2308      	moveq	r3, #8
 8003216:	4850      	ldr	r0, [pc, #320]	@ (8003358 <_printf_i+0x234>)
 8003218:	2100      	movs	r1, #0
 800321a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800321e:	6866      	ldr	r6, [r4, #4]
 8003220:	2e00      	cmp	r6, #0
 8003222:	60a6      	str	r6, [r4, #8]
 8003224:	db05      	blt.n	8003232 <_printf_i+0x10e>
 8003226:	6821      	ldr	r1, [r4, #0]
 8003228:	432e      	orrs	r6, r5
 800322a:	f021 0104 	bic.w	r1, r1, #4
 800322e:	6021      	str	r1, [r4, #0]
 8003230:	d04b      	beq.n	80032ca <_printf_i+0x1a6>
 8003232:	4616      	mov	r6, r2
 8003234:	fbb5 f1f3 	udiv	r1, r5, r3
 8003238:	fb03 5711 	mls	r7, r3, r1, r5
 800323c:	5dc7      	ldrb	r7, [r0, r7]
 800323e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003242:	462f      	mov	r7, r5
 8003244:	42bb      	cmp	r3, r7
 8003246:	460d      	mov	r5, r1
 8003248:	d9f4      	bls.n	8003234 <_printf_i+0x110>
 800324a:	2b08      	cmp	r3, #8
 800324c:	d10b      	bne.n	8003266 <_printf_i+0x142>
 800324e:	6823      	ldr	r3, [r4, #0]
 8003250:	07df      	lsls	r7, r3, #31
 8003252:	d508      	bpl.n	8003266 <_printf_i+0x142>
 8003254:	6923      	ldr	r3, [r4, #16]
 8003256:	6861      	ldr	r1, [r4, #4]
 8003258:	4299      	cmp	r1, r3
 800325a:	bfde      	ittt	le
 800325c:	2330      	movle	r3, #48	@ 0x30
 800325e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003262:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003266:	1b92      	subs	r2, r2, r6
 8003268:	6122      	str	r2, [r4, #16]
 800326a:	464b      	mov	r3, r9
 800326c:	4621      	mov	r1, r4
 800326e:	4640      	mov	r0, r8
 8003270:	f8cd a000 	str.w	sl, [sp]
 8003274:	aa03      	add	r2, sp, #12
 8003276:	f7ff fee3 	bl	8003040 <_printf_common>
 800327a:	3001      	adds	r0, #1
 800327c:	d14a      	bne.n	8003314 <_printf_i+0x1f0>
 800327e:	f04f 30ff 	mov.w	r0, #4294967295
 8003282:	b004      	add	sp, #16
 8003284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003288:	6823      	ldr	r3, [r4, #0]
 800328a:	f043 0320 	orr.w	r3, r3, #32
 800328e:	6023      	str	r3, [r4, #0]
 8003290:	2778      	movs	r7, #120	@ 0x78
 8003292:	4832      	ldr	r0, [pc, #200]	@ (800335c <_printf_i+0x238>)
 8003294:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003298:	6823      	ldr	r3, [r4, #0]
 800329a:	6831      	ldr	r1, [r6, #0]
 800329c:	061f      	lsls	r7, r3, #24
 800329e:	f851 5b04 	ldr.w	r5, [r1], #4
 80032a2:	d402      	bmi.n	80032aa <_printf_i+0x186>
 80032a4:	065f      	lsls	r7, r3, #25
 80032a6:	bf48      	it	mi
 80032a8:	b2ad      	uxthmi	r5, r5
 80032aa:	6031      	str	r1, [r6, #0]
 80032ac:	07d9      	lsls	r1, r3, #31
 80032ae:	bf44      	itt	mi
 80032b0:	f043 0320 	orrmi.w	r3, r3, #32
 80032b4:	6023      	strmi	r3, [r4, #0]
 80032b6:	b11d      	cbz	r5, 80032c0 <_printf_i+0x19c>
 80032b8:	2310      	movs	r3, #16
 80032ba:	e7ad      	b.n	8003218 <_printf_i+0xf4>
 80032bc:	4826      	ldr	r0, [pc, #152]	@ (8003358 <_printf_i+0x234>)
 80032be:	e7e9      	b.n	8003294 <_printf_i+0x170>
 80032c0:	6823      	ldr	r3, [r4, #0]
 80032c2:	f023 0320 	bic.w	r3, r3, #32
 80032c6:	6023      	str	r3, [r4, #0]
 80032c8:	e7f6      	b.n	80032b8 <_printf_i+0x194>
 80032ca:	4616      	mov	r6, r2
 80032cc:	e7bd      	b.n	800324a <_printf_i+0x126>
 80032ce:	6833      	ldr	r3, [r6, #0]
 80032d0:	6825      	ldr	r5, [r4, #0]
 80032d2:	1d18      	adds	r0, r3, #4
 80032d4:	6961      	ldr	r1, [r4, #20]
 80032d6:	6030      	str	r0, [r6, #0]
 80032d8:	062e      	lsls	r6, r5, #24
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	d501      	bpl.n	80032e2 <_printf_i+0x1be>
 80032de:	6019      	str	r1, [r3, #0]
 80032e0:	e002      	b.n	80032e8 <_printf_i+0x1c4>
 80032e2:	0668      	lsls	r0, r5, #25
 80032e4:	d5fb      	bpl.n	80032de <_printf_i+0x1ba>
 80032e6:	8019      	strh	r1, [r3, #0]
 80032e8:	2300      	movs	r3, #0
 80032ea:	4616      	mov	r6, r2
 80032ec:	6123      	str	r3, [r4, #16]
 80032ee:	e7bc      	b.n	800326a <_printf_i+0x146>
 80032f0:	6833      	ldr	r3, [r6, #0]
 80032f2:	2100      	movs	r1, #0
 80032f4:	1d1a      	adds	r2, r3, #4
 80032f6:	6032      	str	r2, [r6, #0]
 80032f8:	681e      	ldr	r6, [r3, #0]
 80032fa:	6862      	ldr	r2, [r4, #4]
 80032fc:	4630      	mov	r0, r6
 80032fe:	f000 f97b 	bl	80035f8 <memchr>
 8003302:	b108      	cbz	r0, 8003308 <_printf_i+0x1e4>
 8003304:	1b80      	subs	r0, r0, r6
 8003306:	6060      	str	r0, [r4, #4]
 8003308:	6863      	ldr	r3, [r4, #4]
 800330a:	6123      	str	r3, [r4, #16]
 800330c:	2300      	movs	r3, #0
 800330e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003312:	e7aa      	b.n	800326a <_printf_i+0x146>
 8003314:	4632      	mov	r2, r6
 8003316:	4649      	mov	r1, r9
 8003318:	4640      	mov	r0, r8
 800331a:	6923      	ldr	r3, [r4, #16]
 800331c:	47d0      	blx	sl
 800331e:	3001      	adds	r0, #1
 8003320:	d0ad      	beq.n	800327e <_printf_i+0x15a>
 8003322:	6823      	ldr	r3, [r4, #0]
 8003324:	079b      	lsls	r3, r3, #30
 8003326:	d413      	bmi.n	8003350 <_printf_i+0x22c>
 8003328:	68e0      	ldr	r0, [r4, #12]
 800332a:	9b03      	ldr	r3, [sp, #12]
 800332c:	4298      	cmp	r0, r3
 800332e:	bfb8      	it	lt
 8003330:	4618      	movlt	r0, r3
 8003332:	e7a6      	b.n	8003282 <_printf_i+0x15e>
 8003334:	2301      	movs	r3, #1
 8003336:	4632      	mov	r2, r6
 8003338:	4649      	mov	r1, r9
 800333a:	4640      	mov	r0, r8
 800333c:	47d0      	blx	sl
 800333e:	3001      	adds	r0, #1
 8003340:	d09d      	beq.n	800327e <_printf_i+0x15a>
 8003342:	3501      	adds	r5, #1
 8003344:	68e3      	ldr	r3, [r4, #12]
 8003346:	9903      	ldr	r1, [sp, #12]
 8003348:	1a5b      	subs	r3, r3, r1
 800334a:	42ab      	cmp	r3, r5
 800334c:	dcf2      	bgt.n	8003334 <_printf_i+0x210>
 800334e:	e7eb      	b.n	8003328 <_printf_i+0x204>
 8003350:	2500      	movs	r5, #0
 8003352:	f104 0619 	add.w	r6, r4, #25
 8003356:	e7f5      	b.n	8003344 <_printf_i+0x220>
 8003358:	0800377f 	.word	0x0800377f
 800335c:	08003790 	.word	0x08003790

08003360 <__sflush_r>:
 8003360:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003366:	0716      	lsls	r6, r2, #28
 8003368:	4605      	mov	r5, r0
 800336a:	460c      	mov	r4, r1
 800336c:	d454      	bmi.n	8003418 <__sflush_r+0xb8>
 800336e:	684b      	ldr	r3, [r1, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	dc02      	bgt.n	800337a <__sflush_r+0x1a>
 8003374:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003376:	2b00      	cmp	r3, #0
 8003378:	dd48      	ble.n	800340c <__sflush_r+0xac>
 800337a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800337c:	2e00      	cmp	r6, #0
 800337e:	d045      	beq.n	800340c <__sflush_r+0xac>
 8003380:	2300      	movs	r3, #0
 8003382:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003386:	682f      	ldr	r7, [r5, #0]
 8003388:	6a21      	ldr	r1, [r4, #32]
 800338a:	602b      	str	r3, [r5, #0]
 800338c:	d030      	beq.n	80033f0 <__sflush_r+0x90>
 800338e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003390:	89a3      	ldrh	r3, [r4, #12]
 8003392:	0759      	lsls	r1, r3, #29
 8003394:	d505      	bpl.n	80033a2 <__sflush_r+0x42>
 8003396:	6863      	ldr	r3, [r4, #4]
 8003398:	1ad2      	subs	r2, r2, r3
 800339a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800339c:	b10b      	cbz	r3, 80033a2 <__sflush_r+0x42>
 800339e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80033a0:	1ad2      	subs	r2, r2, r3
 80033a2:	2300      	movs	r3, #0
 80033a4:	4628      	mov	r0, r5
 80033a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80033a8:	6a21      	ldr	r1, [r4, #32]
 80033aa:	47b0      	blx	r6
 80033ac:	1c43      	adds	r3, r0, #1
 80033ae:	89a3      	ldrh	r3, [r4, #12]
 80033b0:	d106      	bne.n	80033c0 <__sflush_r+0x60>
 80033b2:	6829      	ldr	r1, [r5, #0]
 80033b4:	291d      	cmp	r1, #29
 80033b6:	d82b      	bhi.n	8003410 <__sflush_r+0xb0>
 80033b8:	4a28      	ldr	r2, [pc, #160]	@ (800345c <__sflush_r+0xfc>)
 80033ba:	40ca      	lsrs	r2, r1
 80033bc:	07d6      	lsls	r6, r2, #31
 80033be:	d527      	bpl.n	8003410 <__sflush_r+0xb0>
 80033c0:	2200      	movs	r2, #0
 80033c2:	6062      	str	r2, [r4, #4]
 80033c4:	6922      	ldr	r2, [r4, #16]
 80033c6:	04d9      	lsls	r1, r3, #19
 80033c8:	6022      	str	r2, [r4, #0]
 80033ca:	d504      	bpl.n	80033d6 <__sflush_r+0x76>
 80033cc:	1c42      	adds	r2, r0, #1
 80033ce:	d101      	bne.n	80033d4 <__sflush_r+0x74>
 80033d0:	682b      	ldr	r3, [r5, #0]
 80033d2:	b903      	cbnz	r3, 80033d6 <__sflush_r+0x76>
 80033d4:	6560      	str	r0, [r4, #84]	@ 0x54
 80033d6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80033d8:	602f      	str	r7, [r5, #0]
 80033da:	b1b9      	cbz	r1, 800340c <__sflush_r+0xac>
 80033dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80033e0:	4299      	cmp	r1, r3
 80033e2:	d002      	beq.n	80033ea <__sflush_r+0x8a>
 80033e4:	4628      	mov	r0, r5
 80033e6:	f7ff fbf5 	bl	8002bd4 <_free_r>
 80033ea:	2300      	movs	r3, #0
 80033ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80033ee:	e00d      	b.n	800340c <__sflush_r+0xac>
 80033f0:	2301      	movs	r3, #1
 80033f2:	4628      	mov	r0, r5
 80033f4:	47b0      	blx	r6
 80033f6:	4602      	mov	r2, r0
 80033f8:	1c50      	adds	r0, r2, #1
 80033fa:	d1c9      	bne.n	8003390 <__sflush_r+0x30>
 80033fc:	682b      	ldr	r3, [r5, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0c6      	beq.n	8003390 <__sflush_r+0x30>
 8003402:	2b1d      	cmp	r3, #29
 8003404:	d001      	beq.n	800340a <__sflush_r+0xaa>
 8003406:	2b16      	cmp	r3, #22
 8003408:	d11d      	bne.n	8003446 <__sflush_r+0xe6>
 800340a:	602f      	str	r7, [r5, #0]
 800340c:	2000      	movs	r0, #0
 800340e:	e021      	b.n	8003454 <__sflush_r+0xf4>
 8003410:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003414:	b21b      	sxth	r3, r3
 8003416:	e01a      	b.n	800344e <__sflush_r+0xee>
 8003418:	690f      	ldr	r7, [r1, #16]
 800341a:	2f00      	cmp	r7, #0
 800341c:	d0f6      	beq.n	800340c <__sflush_r+0xac>
 800341e:	0793      	lsls	r3, r2, #30
 8003420:	bf18      	it	ne
 8003422:	2300      	movne	r3, #0
 8003424:	680e      	ldr	r6, [r1, #0]
 8003426:	bf08      	it	eq
 8003428:	694b      	ldreq	r3, [r1, #20]
 800342a:	1bf6      	subs	r6, r6, r7
 800342c:	600f      	str	r7, [r1, #0]
 800342e:	608b      	str	r3, [r1, #8]
 8003430:	2e00      	cmp	r6, #0
 8003432:	ddeb      	ble.n	800340c <__sflush_r+0xac>
 8003434:	4633      	mov	r3, r6
 8003436:	463a      	mov	r2, r7
 8003438:	4628      	mov	r0, r5
 800343a:	6a21      	ldr	r1, [r4, #32]
 800343c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003440:	47e0      	blx	ip
 8003442:	2800      	cmp	r0, #0
 8003444:	dc07      	bgt.n	8003456 <__sflush_r+0xf6>
 8003446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800344a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800344e:	f04f 30ff 	mov.w	r0, #4294967295
 8003452:	81a3      	strh	r3, [r4, #12]
 8003454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003456:	4407      	add	r7, r0
 8003458:	1a36      	subs	r6, r6, r0
 800345a:	e7e9      	b.n	8003430 <__sflush_r+0xd0>
 800345c:	20400001 	.word	0x20400001

08003460 <_fflush_r>:
 8003460:	b538      	push	{r3, r4, r5, lr}
 8003462:	690b      	ldr	r3, [r1, #16]
 8003464:	4605      	mov	r5, r0
 8003466:	460c      	mov	r4, r1
 8003468:	b913      	cbnz	r3, 8003470 <_fflush_r+0x10>
 800346a:	2500      	movs	r5, #0
 800346c:	4628      	mov	r0, r5
 800346e:	bd38      	pop	{r3, r4, r5, pc}
 8003470:	b118      	cbz	r0, 800347a <_fflush_r+0x1a>
 8003472:	6a03      	ldr	r3, [r0, #32]
 8003474:	b90b      	cbnz	r3, 800347a <_fflush_r+0x1a>
 8003476:	f7ff faa5 	bl	80029c4 <__sinit>
 800347a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0f3      	beq.n	800346a <_fflush_r+0xa>
 8003482:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003484:	07d0      	lsls	r0, r2, #31
 8003486:	d404      	bmi.n	8003492 <_fflush_r+0x32>
 8003488:	0599      	lsls	r1, r3, #22
 800348a:	d402      	bmi.n	8003492 <_fflush_r+0x32>
 800348c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800348e:	f7ff fb9e 	bl	8002bce <__retarget_lock_acquire_recursive>
 8003492:	4628      	mov	r0, r5
 8003494:	4621      	mov	r1, r4
 8003496:	f7ff ff63 	bl	8003360 <__sflush_r>
 800349a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800349c:	4605      	mov	r5, r0
 800349e:	07da      	lsls	r2, r3, #31
 80034a0:	d4e4      	bmi.n	800346c <_fflush_r+0xc>
 80034a2:	89a3      	ldrh	r3, [r4, #12]
 80034a4:	059b      	lsls	r3, r3, #22
 80034a6:	d4e1      	bmi.n	800346c <_fflush_r+0xc>
 80034a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80034aa:	f7ff fb91 	bl	8002bd0 <__retarget_lock_release_recursive>
 80034ae:	e7dd      	b.n	800346c <_fflush_r+0xc>

080034b0 <__swbuf_r>:
 80034b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b2:	460e      	mov	r6, r1
 80034b4:	4614      	mov	r4, r2
 80034b6:	4605      	mov	r5, r0
 80034b8:	b118      	cbz	r0, 80034c2 <__swbuf_r+0x12>
 80034ba:	6a03      	ldr	r3, [r0, #32]
 80034bc:	b90b      	cbnz	r3, 80034c2 <__swbuf_r+0x12>
 80034be:	f7ff fa81 	bl	80029c4 <__sinit>
 80034c2:	69a3      	ldr	r3, [r4, #24]
 80034c4:	60a3      	str	r3, [r4, #8]
 80034c6:	89a3      	ldrh	r3, [r4, #12]
 80034c8:	071a      	lsls	r2, r3, #28
 80034ca:	d501      	bpl.n	80034d0 <__swbuf_r+0x20>
 80034cc:	6923      	ldr	r3, [r4, #16]
 80034ce:	b943      	cbnz	r3, 80034e2 <__swbuf_r+0x32>
 80034d0:	4621      	mov	r1, r4
 80034d2:	4628      	mov	r0, r5
 80034d4:	f000 f82a 	bl	800352c <__swsetup_r>
 80034d8:	b118      	cbz	r0, 80034e2 <__swbuf_r+0x32>
 80034da:	f04f 37ff 	mov.w	r7, #4294967295
 80034de:	4638      	mov	r0, r7
 80034e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034e2:	6823      	ldr	r3, [r4, #0]
 80034e4:	6922      	ldr	r2, [r4, #16]
 80034e6:	b2f6      	uxtb	r6, r6
 80034e8:	1a98      	subs	r0, r3, r2
 80034ea:	6963      	ldr	r3, [r4, #20]
 80034ec:	4637      	mov	r7, r6
 80034ee:	4283      	cmp	r3, r0
 80034f0:	dc05      	bgt.n	80034fe <__swbuf_r+0x4e>
 80034f2:	4621      	mov	r1, r4
 80034f4:	4628      	mov	r0, r5
 80034f6:	f7ff ffb3 	bl	8003460 <_fflush_r>
 80034fa:	2800      	cmp	r0, #0
 80034fc:	d1ed      	bne.n	80034da <__swbuf_r+0x2a>
 80034fe:	68a3      	ldr	r3, [r4, #8]
 8003500:	3b01      	subs	r3, #1
 8003502:	60a3      	str	r3, [r4, #8]
 8003504:	6823      	ldr	r3, [r4, #0]
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	6022      	str	r2, [r4, #0]
 800350a:	701e      	strb	r6, [r3, #0]
 800350c:	6962      	ldr	r2, [r4, #20]
 800350e:	1c43      	adds	r3, r0, #1
 8003510:	429a      	cmp	r2, r3
 8003512:	d004      	beq.n	800351e <__swbuf_r+0x6e>
 8003514:	89a3      	ldrh	r3, [r4, #12]
 8003516:	07db      	lsls	r3, r3, #31
 8003518:	d5e1      	bpl.n	80034de <__swbuf_r+0x2e>
 800351a:	2e0a      	cmp	r6, #10
 800351c:	d1df      	bne.n	80034de <__swbuf_r+0x2e>
 800351e:	4621      	mov	r1, r4
 8003520:	4628      	mov	r0, r5
 8003522:	f7ff ff9d 	bl	8003460 <_fflush_r>
 8003526:	2800      	cmp	r0, #0
 8003528:	d0d9      	beq.n	80034de <__swbuf_r+0x2e>
 800352a:	e7d6      	b.n	80034da <__swbuf_r+0x2a>

0800352c <__swsetup_r>:
 800352c:	b538      	push	{r3, r4, r5, lr}
 800352e:	4b29      	ldr	r3, [pc, #164]	@ (80035d4 <__swsetup_r+0xa8>)
 8003530:	4605      	mov	r5, r0
 8003532:	6818      	ldr	r0, [r3, #0]
 8003534:	460c      	mov	r4, r1
 8003536:	b118      	cbz	r0, 8003540 <__swsetup_r+0x14>
 8003538:	6a03      	ldr	r3, [r0, #32]
 800353a:	b90b      	cbnz	r3, 8003540 <__swsetup_r+0x14>
 800353c:	f7ff fa42 	bl	80029c4 <__sinit>
 8003540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003544:	0719      	lsls	r1, r3, #28
 8003546:	d422      	bmi.n	800358e <__swsetup_r+0x62>
 8003548:	06da      	lsls	r2, r3, #27
 800354a:	d407      	bmi.n	800355c <__swsetup_r+0x30>
 800354c:	2209      	movs	r2, #9
 800354e:	602a      	str	r2, [r5, #0]
 8003550:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003554:	f04f 30ff 	mov.w	r0, #4294967295
 8003558:	81a3      	strh	r3, [r4, #12]
 800355a:	e033      	b.n	80035c4 <__swsetup_r+0x98>
 800355c:	0758      	lsls	r0, r3, #29
 800355e:	d512      	bpl.n	8003586 <__swsetup_r+0x5a>
 8003560:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003562:	b141      	cbz	r1, 8003576 <__swsetup_r+0x4a>
 8003564:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003568:	4299      	cmp	r1, r3
 800356a:	d002      	beq.n	8003572 <__swsetup_r+0x46>
 800356c:	4628      	mov	r0, r5
 800356e:	f7ff fb31 	bl	8002bd4 <_free_r>
 8003572:	2300      	movs	r3, #0
 8003574:	6363      	str	r3, [r4, #52]	@ 0x34
 8003576:	89a3      	ldrh	r3, [r4, #12]
 8003578:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800357c:	81a3      	strh	r3, [r4, #12]
 800357e:	2300      	movs	r3, #0
 8003580:	6063      	str	r3, [r4, #4]
 8003582:	6923      	ldr	r3, [r4, #16]
 8003584:	6023      	str	r3, [r4, #0]
 8003586:	89a3      	ldrh	r3, [r4, #12]
 8003588:	f043 0308 	orr.w	r3, r3, #8
 800358c:	81a3      	strh	r3, [r4, #12]
 800358e:	6923      	ldr	r3, [r4, #16]
 8003590:	b94b      	cbnz	r3, 80035a6 <__swsetup_r+0x7a>
 8003592:	89a3      	ldrh	r3, [r4, #12]
 8003594:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800359c:	d003      	beq.n	80035a6 <__swsetup_r+0x7a>
 800359e:	4621      	mov	r1, r4
 80035a0:	4628      	mov	r0, r5
 80035a2:	f000 f85c 	bl	800365e <__smakebuf_r>
 80035a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035aa:	f013 0201 	ands.w	r2, r3, #1
 80035ae:	d00a      	beq.n	80035c6 <__swsetup_r+0x9a>
 80035b0:	2200      	movs	r2, #0
 80035b2:	60a2      	str	r2, [r4, #8]
 80035b4:	6962      	ldr	r2, [r4, #20]
 80035b6:	4252      	negs	r2, r2
 80035b8:	61a2      	str	r2, [r4, #24]
 80035ba:	6922      	ldr	r2, [r4, #16]
 80035bc:	b942      	cbnz	r2, 80035d0 <__swsetup_r+0xa4>
 80035be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80035c2:	d1c5      	bne.n	8003550 <__swsetup_r+0x24>
 80035c4:	bd38      	pop	{r3, r4, r5, pc}
 80035c6:	0799      	lsls	r1, r3, #30
 80035c8:	bf58      	it	pl
 80035ca:	6962      	ldrpl	r2, [r4, #20]
 80035cc:	60a2      	str	r2, [r4, #8]
 80035ce:	e7f4      	b.n	80035ba <__swsetup_r+0x8e>
 80035d0:	2000      	movs	r0, #0
 80035d2:	e7f7      	b.n	80035c4 <__swsetup_r+0x98>
 80035d4:	20000018 	.word	0x20000018

080035d8 <_sbrk_r>:
 80035d8:	b538      	push	{r3, r4, r5, lr}
 80035da:	2300      	movs	r3, #0
 80035dc:	4d05      	ldr	r5, [pc, #20]	@ (80035f4 <_sbrk_r+0x1c>)
 80035de:	4604      	mov	r4, r0
 80035e0:	4608      	mov	r0, r1
 80035e2:	602b      	str	r3, [r5, #0]
 80035e4:	f7fd f96c 	bl	80008c0 <_sbrk>
 80035e8:	1c43      	adds	r3, r0, #1
 80035ea:	d102      	bne.n	80035f2 <_sbrk_r+0x1a>
 80035ec:	682b      	ldr	r3, [r5, #0]
 80035ee:	b103      	cbz	r3, 80035f2 <_sbrk_r+0x1a>
 80035f0:	6023      	str	r3, [r4, #0]
 80035f2:	bd38      	pop	{r3, r4, r5, pc}
 80035f4:	20000258 	.word	0x20000258

080035f8 <memchr>:
 80035f8:	4603      	mov	r3, r0
 80035fa:	b510      	push	{r4, lr}
 80035fc:	b2c9      	uxtb	r1, r1
 80035fe:	4402      	add	r2, r0
 8003600:	4293      	cmp	r3, r2
 8003602:	4618      	mov	r0, r3
 8003604:	d101      	bne.n	800360a <memchr+0x12>
 8003606:	2000      	movs	r0, #0
 8003608:	e003      	b.n	8003612 <memchr+0x1a>
 800360a:	7804      	ldrb	r4, [r0, #0]
 800360c:	3301      	adds	r3, #1
 800360e:	428c      	cmp	r4, r1
 8003610:	d1f6      	bne.n	8003600 <memchr+0x8>
 8003612:	bd10      	pop	{r4, pc}

08003614 <__swhatbuf_r>:
 8003614:	b570      	push	{r4, r5, r6, lr}
 8003616:	460c      	mov	r4, r1
 8003618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800361c:	4615      	mov	r5, r2
 800361e:	2900      	cmp	r1, #0
 8003620:	461e      	mov	r6, r3
 8003622:	b096      	sub	sp, #88	@ 0x58
 8003624:	da0c      	bge.n	8003640 <__swhatbuf_r+0x2c>
 8003626:	89a3      	ldrh	r3, [r4, #12]
 8003628:	2100      	movs	r1, #0
 800362a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800362e:	bf14      	ite	ne
 8003630:	2340      	movne	r3, #64	@ 0x40
 8003632:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003636:	2000      	movs	r0, #0
 8003638:	6031      	str	r1, [r6, #0]
 800363a:	602b      	str	r3, [r5, #0]
 800363c:	b016      	add	sp, #88	@ 0x58
 800363e:	bd70      	pop	{r4, r5, r6, pc}
 8003640:	466a      	mov	r2, sp
 8003642:	f000 f849 	bl	80036d8 <_fstat_r>
 8003646:	2800      	cmp	r0, #0
 8003648:	dbed      	blt.n	8003626 <__swhatbuf_r+0x12>
 800364a:	9901      	ldr	r1, [sp, #4]
 800364c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003650:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003654:	4259      	negs	r1, r3
 8003656:	4159      	adcs	r1, r3
 8003658:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800365c:	e7eb      	b.n	8003636 <__swhatbuf_r+0x22>

0800365e <__smakebuf_r>:
 800365e:	898b      	ldrh	r3, [r1, #12]
 8003660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003662:	079d      	lsls	r5, r3, #30
 8003664:	4606      	mov	r6, r0
 8003666:	460c      	mov	r4, r1
 8003668:	d507      	bpl.n	800367a <__smakebuf_r+0x1c>
 800366a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800366e:	6023      	str	r3, [r4, #0]
 8003670:	6123      	str	r3, [r4, #16]
 8003672:	2301      	movs	r3, #1
 8003674:	6163      	str	r3, [r4, #20]
 8003676:	b003      	add	sp, #12
 8003678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800367a:	466a      	mov	r2, sp
 800367c:	ab01      	add	r3, sp, #4
 800367e:	f7ff ffc9 	bl	8003614 <__swhatbuf_r>
 8003682:	9f00      	ldr	r7, [sp, #0]
 8003684:	4605      	mov	r5, r0
 8003686:	4639      	mov	r1, r7
 8003688:	4630      	mov	r0, r6
 800368a:	f7ff fb0d 	bl	8002ca8 <_malloc_r>
 800368e:	b948      	cbnz	r0, 80036a4 <__smakebuf_r+0x46>
 8003690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003694:	059a      	lsls	r2, r3, #22
 8003696:	d4ee      	bmi.n	8003676 <__smakebuf_r+0x18>
 8003698:	f023 0303 	bic.w	r3, r3, #3
 800369c:	f043 0302 	orr.w	r3, r3, #2
 80036a0:	81a3      	strh	r3, [r4, #12]
 80036a2:	e7e2      	b.n	800366a <__smakebuf_r+0xc>
 80036a4:	89a3      	ldrh	r3, [r4, #12]
 80036a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80036aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036ae:	81a3      	strh	r3, [r4, #12]
 80036b0:	9b01      	ldr	r3, [sp, #4]
 80036b2:	6020      	str	r0, [r4, #0]
 80036b4:	b15b      	cbz	r3, 80036ce <__smakebuf_r+0x70>
 80036b6:	4630      	mov	r0, r6
 80036b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036bc:	f000 f81e 	bl	80036fc <_isatty_r>
 80036c0:	b128      	cbz	r0, 80036ce <__smakebuf_r+0x70>
 80036c2:	89a3      	ldrh	r3, [r4, #12]
 80036c4:	f023 0303 	bic.w	r3, r3, #3
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	81a3      	strh	r3, [r4, #12]
 80036ce:	89a3      	ldrh	r3, [r4, #12]
 80036d0:	431d      	orrs	r5, r3
 80036d2:	81a5      	strh	r5, [r4, #12]
 80036d4:	e7cf      	b.n	8003676 <__smakebuf_r+0x18>
	...

080036d8 <_fstat_r>:
 80036d8:	b538      	push	{r3, r4, r5, lr}
 80036da:	2300      	movs	r3, #0
 80036dc:	4d06      	ldr	r5, [pc, #24]	@ (80036f8 <_fstat_r+0x20>)
 80036de:	4604      	mov	r4, r0
 80036e0:	4608      	mov	r0, r1
 80036e2:	4611      	mov	r1, r2
 80036e4:	602b      	str	r3, [r5, #0]
 80036e6:	f7fd f8c5 	bl	8000874 <_fstat>
 80036ea:	1c43      	adds	r3, r0, #1
 80036ec:	d102      	bne.n	80036f4 <_fstat_r+0x1c>
 80036ee:	682b      	ldr	r3, [r5, #0]
 80036f0:	b103      	cbz	r3, 80036f4 <_fstat_r+0x1c>
 80036f2:	6023      	str	r3, [r4, #0]
 80036f4:	bd38      	pop	{r3, r4, r5, pc}
 80036f6:	bf00      	nop
 80036f8:	20000258 	.word	0x20000258

080036fc <_isatty_r>:
 80036fc:	b538      	push	{r3, r4, r5, lr}
 80036fe:	2300      	movs	r3, #0
 8003700:	4d05      	ldr	r5, [pc, #20]	@ (8003718 <_isatty_r+0x1c>)
 8003702:	4604      	mov	r4, r0
 8003704:	4608      	mov	r0, r1
 8003706:	602b      	str	r3, [r5, #0]
 8003708:	f7fd f8c3 	bl	8000892 <_isatty>
 800370c:	1c43      	adds	r3, r0, #1
 800370e:	d102      	bne.n	8003716 <_isatty_r+0x1a>
 8003710:	682b      	ldr	r3, [r5, #0]
 8003712:	b103      	cbz	r3, 8003716 <_isatty_r+0x1a>
 8003714:	6023      	str	r3, [r4, #0]
 8003716:	bd38      	pop	{r3, r4, r5, pc}
 8003718:	20000258 	.word	0x20000258

0800371c <_init>:
 800371c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371e:	bf00      	nop
 8003720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003722:	bc08      	pop	{r3}
 8003724:	469e      	mov	lr, r3
 8003726:	4770      	bx	lr

08003728 <_fini>:
 8003728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372a:	bf00      	nop
 800372c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800372e:	bc08      	pop	{r3}
 8003730:	469e      	mov	lr, r3
 8003732:	4770      	bx	lr
