
P_4_clocks_n_oscs3_pll.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002494  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002634  08002634  00003634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026a0  080026a0  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080026a0  080026a0  000036a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080026a8  080026a8  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026a8  080026a8  000036a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080026ac  080026ac  000036ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080026b0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000068  08002718  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08002718  000041d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000039e4  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ffb  00000000  00000000  00007a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000478  00000000  00000000  00008a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000332  00000000  00000000  00008ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015b0d  00000000  00000000  00009222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004fee  00000000  00000000  0001ed2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084e82  00000000  00000000  00023d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a8b9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001808  00000000  00000000  000a8be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000aa3ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800261c 	.word	0x0800261c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800261c 	.word	0x0800261c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <SysTick_Handler>:
void SysTick_Handler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80005b0:	f000 fa40 	bl	8000a34 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80005b4:	f000 fb43 	bl	8000c3e <HAL_SYSTICK_IRQHandler>
}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}

080005bc <main>:
void Error_Handler(void);
void GPIO_SWO(void);
void Clock_cnfg(uint8_t clock_freq);

int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0

	HAL_Init();
 80005c0:	f000 f9de 	bl	8000980 <HAL_Init>
	GPIO_SWO();
 80005c4:	f000 f818 	bl	80005f8 <GPIO_SWO>
	Clock_cnfg(SYS_CLOCK_FREQ_100MHz);
 80005c8:	2003      	movs	r0, #3
 80005ca:	f000 f83d 	bl	8000648 <Clock_cnfg>
	printf("SysClk Freq = %lu\n", HAL_RCC_GetSysClockFreq());
 80005ce:	f001 f825 	bl	800161c <HAL_RCC_GetSysClockFreq>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4619      	mov	r1, r3
 80005d6:	4806      	ldr	r0, [pc, #24]	@ (80005f0 <main+0x34>)
 80005d8:	f001 f9b4 	bl	8001944 <iprintf>
	printf("Hclk Freq = %lu\n", HAL_RCC_GetHCLKFreq());
 80005dc:	f001 f8e4 	bl	80017a8 <HAL_RCC_GetHCLKFreq>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4619      	mov	r1, r3
 80005e4:	4803      	ldr	r0, [pc, #12]	@ (80005f4 <main+0x38>)
 80005e6:	f001 f9ad 	bl	8001944 <iprintf>

while(1);
 80005ea:	bf00      	nop
 80005ec:	e7fd      	b.n	80005ea <main+0x2e>
 80005ee:	bf00      	nop
 80005f0:	08002634 	.word	0x08002634
 80005f4:	08002648 	.word	0x08002648

080005f8 <GPIO_SWO>:

}

void GPIO_SWO(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	603b      	str	r3, [r7, #0]
 8000602:	4b0f      	ldr	r3, [pc, #60]	@ (8000640 <GPIO_SWO+0x48>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	4a0e      	ldr	r2, [pc, #56]	@ (8000640 <GPIO_SWO+0x48>)
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	6313      	str	r3, [r2, #48]	@ 0x30
 800060e:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <GPIO_SWO+0x48>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef gpio_swo;
	gpio_swo.Mode = GPIO_MODE_AF_PP;
 800061a:	2302      	movs	r3, #2
 800061c:	60bb      	str	r3, [r7, #8]
	gpio_swo.Pin = GPIO_PIN_3;
 800061e:	2308      	movs	r3, #8
 8000620:	607b      	str	r3, [r7, #4]
	gpio_swo.Alternate = GPIO_AF0_SWJ;
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
	gpio_swo.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
	gpio_swo.Speed = GPIO_SPEED_FREQ_LOW;
 800062a:	2300      	movs	r3, #0
 800062c:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(GPIOB, &gpio_swo);
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	4619      	mov	r1, r3
 8000632:	4804      	ldr	r0, [pc, #16]	@ (8000644 <GPIO_SWO+0x4c>)
 8000634:	f000 fb10 	bl	8000c58 <HAL_GPIO_Init>
}
 8000638:	bf00      	nop
 800063a:	3718      	adds	r7, #24
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40023800 	.word	0x40023800
 8000644:	40020400 	.word	0x40020400

08000648 <Clock_cnfg>:

void Clock_cnfg(uint8_t clock_freq)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	@ 0x50
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;

	osc_init.HSIState = RCC_HSI_ON;
 8000652:	2301      	movs	r3, #1
 8000654:	62fb      	str	r3, [r7, #44]	@ 0x2c
	osc_init.HSICalibrationValue = 16;
 8000656:	2310      	movs	r3, #16
 8000658:	633b      	str	r3, [r7, #48]	@ 0x30

	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065a:	2300      	movs	r3, #0
 800065c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	osc_init.PLL.PLLState = RCC_PLL_ON;	osc_init.PLL.PLLM = 16;
 800065e:	2302      	movs	r3, #2
 8000660:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000662:	2310      	movs	r3, #16
 8000664:	643b      	str	r3, [r7, #64]	@ 0x40
	osc_init.PLL.PLLP = 2;
 8000666:	2302      	movs	r3, #2
 8000668:	64bb      	str	r3, [r7, #72]	@ 0x48


	switch(clock_freq)
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	2b03      	cmp	r3, #3
 800066e:	d04e      	beq.n	800070e <Clock_cnfg+0xc6>
 8000670:	2b03      	cmp	r3, #3
 8000672:	dc75      	bgt.n	8000760 <Clock_cnfg+0x118>
 8000674:	2b01      	cmp	r3, #1
 8000676:	d002      	beq.n	800067e <Clock_cnfg+0x36>
 8000678:	2b02      	cmp	r3, #2
 800067a:	d024      	beq.n	80006c6 <Clock_cnfg+0x7e>





}
 800067c:	e070      	b.n	8000760 <Clock_cnfg+0x118>
			osc_init.PLL.PLLN = 100;
 800067e:	2364      	movs	r3, #100	@ 0x64
 8000680:	647b      	str	r3, [r7, #68]	@ 0x44
			if (HAL_RCC_OscConfig(&osc_init) != HAL_OK) Error_Handler();
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	4618      	mov	r0, r3
 8000688:	f000 fc6a 	bl	8000f60 <HAL_RCC_OscConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <Clock_cnfg+0x4e>
 8000692:	f000 f869 	bl	8000768 <Error_Handler>
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8000696:	230f      	movs	r3, #15
 8000698:	60fb      	str	r3, [r7, #12]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069a:	2302      	movs	r3, #2
 800069c:	613b      	str	r3, [r7, #16]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800069e:	2380      	movs	r3, #128	@ 0x80
 80006a0:	617b      	str	r3, [r7, #20]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a6:	61bb      	str	r3, [r7, #24]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ac:	61fb      	str	r3, [r7, #28]
			if (HAL_RCC_ClockConfig(&clk_init, FLASH_ACR_LATENCY_0WS) != HAL_OK) Error_Handler();
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 fecb 	bl	8001450 <HAL_RCC_ClockConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d04a      	beq.n	8000756 <Clock_cnfg+0x10e>
 80006c0:	f000 f852 	bl	8000768 <Error_Handler>
			break;
 80006c4:	e047      	b.n	8000756 <Clock_cnfg+0x10e>
			osc_init.PLL.PLLN = 150;
 80006c6:	2396      	movs	r3, #150	@ 0x96
 80006c8:	647b      	str	r3, [r7, #68]	@ 0x44
			if (HAL_RCC_OscConfig(&osc_init) != HAL_OK) Error_Handler();
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 fc46 	bl	8000f60 <HAL_RCC_OscConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <Clock_cnfg+0x96>
 80006da:	f000 f845 	bl	8000768 <Error_Handler>
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 80006de:	230f      	movs	r3, #15
 80006e0:	60fb      	str	r3, [r7, #12]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e2:	2302      	movs	r3, #2
 80006e4:	613b      	str	r3, [r7, #16]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80006e6:	2380      	movs	r3, #128	@ 0x80
 80006e8:	617b      	str	r3, [r7, #20]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ee:	61bb      	str	r3, [r7, #24]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f4:	61fb      	str	r3, [r7, #28]
			if (HAL_RCC_ClockConfig(&clk_init, FLASH_ACR_LATENCY_1WS) != HAL_OK) Error_Handler();
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	2101      	movs	r1, #1
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 fea7 	bl	8001450 <HAL_RCC_ClockConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d028      	beq.n	800075a <Clock_cnfg+0x112>
 8000708:	f000 f82e 	bl	8000768 <Error_Handler>
			break;
 800070c:	e025      	b.n	800075a <Clock_cnfg+0x112>
			osc_init.PLL.PLLN = 200;
 800070e:	23c8      	movs	r3, #200	@ 0xc8
 8000710:	647b      	str	r3, [r7, #68]	@ 0x44
			if (HAL_RCC_OscConfig(&osc_init) != HAL_OK) Error_Handler();
 8000712:	f107 0320 	add.w	r3, r7, #32
 8000716:	4618      	mov	r0, r3
 8000718:	f000 fc22 	bl	8000f60 <HAL_RCC_OscConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <Clock_cnfg+0xde>
 8000722:	f000 f821 	bl	8000768 <Error_Handler>
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8000726:	230f      	movs	r3, #15
 8000728:	60fb      	str	r3, [r7, #12]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072a:	2302      	movs	r3, #2
 800072c:	613b      	str	r3, [r7, #16]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800072e:	2380      	movs	r3, #128	@ 0x80
 8000730:	617b      	str	r3, [r7, #20]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000732:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000736:	61bb      	str	r3, [r7, #24]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000738:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800073c:	61fb      	str	r3, [r7, #28]
			if (HAL_RCC_ClockConfig(&clk_init, FLASH_ACR_LATENCY_1WS) != HAL_OK) Error_Handler();
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	2101      	movs	r1, #1
 8000744:	4618      	mov	r0, r3
 8000746:	f000 fe83 	bl	8001450 <HAL_RCC_ClockConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d006      	beq.n	800075e <Clock_cnfg+0x116>
 8000750:	f000 f80a 	bl	8000768 <Error_Handler>
			break;
 8000754:	e003      	b.n	800075e <Clock_cnfg+0x116>
			break;
 8000756:	bf00      	nop
 8000758:	e002      	b.n	8000760 <Clock_cnfg+0x118>
			break;
 800075a:	bf00      	nop
 800075c:	e000      	b.n	8000760 <Clock_cnfg+0x118>
			break;
 800075e:	bf00      	nop
}
 8000760:	bf00      	nop
 8000762:	3750      	adds	r7, #80	@ 0x50
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <Error_Handler>:
void Error_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
	while(1);
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <Error_Handler+0x4>

08000770 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800077a:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <ITM_SendChar+0x48>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a0e      	ldr	r2, [pc, #56]	@ (80007b8 <ITM_SendChar+0x48>)
 8000780:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000784:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000786:	4b0d      	ldr	r3, [pc, #52]	@ (80007bc <ITM_SendChar+0x4c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a0c      	ldr	r2, [pc, #48]	@ (80007bc <ITM_SendChar+0x4c>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000792:	bf00      	nop
 8000794:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d0f8      	beq.n	8000794 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80007a2:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	6013      	str	r3, [r2, #0]
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	e000edfc 	.word	0xe000edfc
 80007bc:	e0000e00 	.word	0xe0000e00

080007c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	e00a      	b.n	80007e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007d2:	f3af 8000 	nop.w
 80007d6:	4601      	mov	r1, r0
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	1c5a      	adds	r2, r3, #1
 80007dc:	60ba      	str	r2, [r7, #8]
 80007de:	b2ca      	uxtb	r2, r1
 80007e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	3301      	adds	r3, #1
 80007e6:	617b      	str	r3, [r7, #20]
 80007e8:	697a      	ldr	r2, [r7, #20]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	dbf0      	blt.n	80007d2 <_read+0x12>
  }

  return len;
 80007f0:	687b      	ldr	r3, [r7, #4]
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3718      	adds	r7, #24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b086      	sub	sp, #24
 80007fe:	af00      	add	r7, sp, #0
 8000800:	60f8      	str	r0, [r7, #12]
 8000802:	60b9      	str	r1, [r7, #8]
 8000804:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
 800080a:	e009      	b.n	8000820 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	1c5a      	adds	r2, r3, #1
 8000810:	60ba      	str	r2, [r7, #8]
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ffab 	bl	8000770 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	3301      	adds	r3, #1
 800081e:	617b      	str	r3, [r7, #20]
 8000820:	697a      	ldr	r2, [r7, #20]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	429a      	cmp	r2, r3
 8000826:	dbf1      	blt.n	800080c <_write+0x12>
  }
  return len;
 8000828:	687b      	ldr	r3, [r7, #4]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <_close>:

int _close(int file)
{
 8000832:	b480      	push	{r7}
 8000834:	b083      	sub	sp, #12
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800083a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800083e:	4618      	mov	r0, r3
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800084a:	b480      	push	{r7}
 800084c:	b083      	sub	sp, #12
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
 8000852:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800085a:	605a      	str	r2, [r3, #4]
  return 0;
 800085c:	2300      	movs	r3, #0
}
 800085e:	4618      	mov	r0, r3
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <_isatty>:

int _isatty(int file)
{
 800086a:	b480      	push	{r7}
 800086c:	b083      	sub	sp, #12
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000872:	2301      	movs	r3, #1
}
 8000874:	4618      	mov	r0, r3
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
	...

0800089c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a4:	4a14      	ldr	r2, [pc, #80]	@ (80008f8 <_sbrk+0x5c>)
 80008a6:	4b15      	ldr	r3, [pc, #84]	@ (80008fc <_sbrk+0x60>)
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b0:	4b13      	ldr	r3, [pc, #76]	@ (8000900 <_sbrk+0x64>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d102      	bne.n	80008be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b8:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <_sbrk+0x64>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	@ (8000904 <_sbrk+0x68>)
 80008bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008be:	4b10      	ldr	r3, [pc, #64]	@ (8000900 <_sbrk+0x64>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4413      	add	r3, r2
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d207      	bcs.n	80008dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008cc:	f001 f8de 	bl	8001a8c <__errno>
 80008d0:	4603      	mov	r3, r0
 80008d2:	220c      	movs	r2, #12
 80008d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295
 80008da:	e009      	b.n	80008f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008dc:	4b08      	ldr	r3, [pc, #32]	@ (8000900 <_sbrk+0x64>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008e2:	4b07      	ldr	r3, [pc, #28]	@ (8000900 <_sbrk+0x64>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4413      	add	r3, r2
 80008ea:	4a05      	ldr	r2, [pc, #20]	@ (8000900 <_sbrk+0x64>)
 80008ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ee:	68fb      	ldr	r3, [r7, #12]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20020000 	.word	0x20020000
 80008fc:	00000400 	.word	0x00000400
 8000900:	20000084 	.word	0x20000084
 8000904:	200001d8 	.word	0x200001d8

08000908 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800090c:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <SystemInit+0x20>)
 800090e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000912:	4a05      	ldr	r2, [pc, #20]	@ (8000928 <SystemInit+0x20>)
 8000914:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000918:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800092c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000964 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000930:	f7ff ffea 	bl	8000908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000934:	480c      	ldr	r0, [pc, #48]	@ (8000968 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000936:	490d      	ldr	r1, [pc, #52]	@ (800096c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000938:	4a0d      	ldr	r2, [pc, #52]	@ (8000970 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800093c:	e002      	b.n	8000944 <LoopCopyDataInit>

0800093e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000942:	3304      	adds	r3, #4

08000944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000948:	d3f9      	bcc.n	800093e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094a:	4a0a      	ldr	r2, [pc, #40]	@ (8000974 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800094c:	4c0a      	ldr	r4, [pc, #40]	@ (8000978 <LoopFillZerobss+0x22>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000950:	e001      	b.n	8000956 <LoopFillZerobss>

08000952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000954:	3204      	adds	r2, #4

08000956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000958:	d3fb      	bcc.n	8000952 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800095a:	f001 f89d 	bl	8001a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800095e:	f7ff fe2d 	bl	80005bc <main>
  bx  lr    
 8000962:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000964:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800096c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000970:	080026b0 	.word	0x080026b0
  ldr r2, =_sbss
 8000974:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000978:	200001d8 	.word	0x200001d8

0800097c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800097c:	e7fe      	b.n	800097c <ADC_IRQHandler>
	...

08000980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000984:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <HAL_Init+0x40>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a0d      	ldr	r2, [pc, #52]	@ (80009c0 <HAL_Init+0x40>)
 800098a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800098e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000990:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <HAL_Init+0x40>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0a      	ldr	r2, [pc, #40]	@ (80009c0 <HAL_Init+0x40>)
 8000996:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800099a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800099c:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <HAL_Init+0x40>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a07      	ldr	r2, [pc, #28]	@ (80009c0 <HAL_Init+0x40>)
 80009a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a8:	2003      	movs	r0, #3
 80009aa:	f000 f915 	bl	8000bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ae:	200f      	movs	r0, #15
 80009b0:	f000 f810 	bl	80009d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b4:	f000 f806 	bl	80009c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023c00 	.word	0x40023c00

080009c4 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
	...

080009d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009dc:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <HAL_InitTick+0x54>)
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b12      	ldr	r3, [pc, #72]	@ (8000a2c <HAL_InitTick+0x58>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	4619      	mov	r1, r3
 80009e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 f917 	bl	8000c26 <HAL_SYSTICK_Config>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e00e      	b.n	8000a20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2b0f      	cmp	r3, #15
 8000a06:	d80a      	bhi.n	8000a1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	6879      	ldr	r1, [r7, #4]
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a10:	f000 f8ed 	bl	8000bee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a14:	4a06      	ldr	r2, [pc, #24]	@ (8000a30 <HAL_InitTick+0x5c>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e000      	b.n	8000a20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	20000008 	.word	0x20000008
 8000a30:	20000004 	.word	0x20000004

08000a34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a38:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <HAL_IncTick+0x20>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <HAL_IncTick+0x24>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	4a04      	ldr	r2, [pc, #16]	@ (8000a58 <HAL_IncTick+0x24>)
 8000a46:	6013      	str	r3, [r2, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	20000008 	.word	0x20000008
 8000a58:	20000088 	.word	0x20000088

08000a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a60:	4b03      	ldr	r3, [pc, #12]	@ (8000a70 <HAL_GetTick+0x14>)
 8000a62:	681b      	ldr	r3, [r3, #0]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20000088 	.word	0x20000088

08000a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f003 0307 	and.w	r3, r3, #7
 8000a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a84:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a90:	4013      	ands	r3, r2
 8000a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000aa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aa6:	4a04      	ldr	r2, [pc, #16]	@ (8000ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	60d3      	str	r3, [r2, #12]
}
 8000aac:	bf00      	nop
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac0:	4b04      	ldr	r3, [pc, #16]	@ (8000ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	0a1b      	lsrs	r3, r3, #8
 8000ac6:	f003 0307 	and.w	r3, r3, #7
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	6039      	str	r1, [r7, #0]
 8000ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	db0a      	blt.n	8000b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	490c      	ldr	r1, [pc, #48]	@ (8000b24 <__NVIC_SetPriority+0x4c>)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	0112      	lsls	r2, r2, #4
 8000af8:	b2d2      	uxtb	r2, r2
 8000afa:	440b      	add	r3, r1
 8000afc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b00:	e00a      	b.n	8000b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4908      	ldr	r1, [pc, #32]	@ (8000b28 <__NVIC_SetPriority+0x50>)
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	f003 030f 	and.w	r3, r3, #15
 8000b0e:	3b04      	subs	r3, #4
 8000b10:	0112      	lsls	r2, r2, #4
 8000b12:	b2d2      	uxtb	r2, r2
 8000b14:	440b      	add	r3, r1
 8000b16:	761a      	strb	r2, [r3, #24]
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000e100 	.word	0xe000e100
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b089      	sub	sp, #36	@ 0x24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	f1c3 0307 	rsb	r3, r3, #7
 8000b46:	2b04      	cmp	r3, #4
 8000b48:	bf28      	it	cs
 8000b4a:	2304      	movcs	r3, #4
 8000b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	3304      	adds	r3, #4
 8000b52:	2b06      	cmp	r3, #6
 8000b54:	d902      	bls.n	8000b5c <NVIC_EncodePriority+0x30>
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3b03      	subs	r3, #3
 8000b5a:	e000      	b.n	8000b5e <NVIC_EncodePriority+0x32>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b60:	f04f 32ff 	mov.w	r2, #4294967295
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	43da      	mvns	r2, r3
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	401a      	ands	r2, r3
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b74:	f04f 31ff 	mov.w	r1, #4294967295
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7e:	43d9      	mvns	r1, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b84:	4313      	orrs	r3, r2
         );
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3724      	adds	r7, #36	@ 0x24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
	...

08000b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ba4:	d301      	bcc.n	8000baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e00f      	b.n	8000bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000baa:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd4 <SysTick_Config+0x40>)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bb2:	210f      	movs	r1, #15
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb8:	f7ff ff8e 	bl	8000ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bbc:	4b05      	ldr	r3, [pc, #20]	@ (8000bd4 <SysTick_Config+0x40>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bc2:	4b04      	ldr	r3, [pc, #16]	@ (8000bd4 <SysTick_Config+0x40>)
 8000bc4:	2207      	movs	r2, #7
 8000bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	e000e010 	.word	0xe000e010

08000bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff ff47 	bl	8000a74 <__NVIC_SetPriorityGrouping>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b086      	sub	sp, #24
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
 8000bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c00:	f7ff ff5c 	bl	8000abc <__NVIC_GetPriorityGrouping>
 8000c04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	68b9      	ldr	r1, [r7, #8]
 8000c0a:	6978      	ldr	r0, [r7, #20]
 8000c0c:	f7ff ff8e 	bl	8000b2c <NVIC_EncodePriority>
 8000c10:	4602      	mov	r2, r0
 8000c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff5d 	bl	8000ad8 <__NVIC_SetPriority>
}
 8000c1e:	bf00      	nop
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff ffb0 	bl	8000b94 <SysTick_Config>
 8000c34:	4603      	mov	r3, r0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000c42:	f000 f802 	bl	8000c4a <HAL_SYSTICK_Callback>
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b089      	sub	sp, #36	@ 0x24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
 8000c72:	e159      	b.n	8000f28 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c74:	2201      	movs	r2, #1
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	697a      	ldr	r2, [r7, #20]
 8000c84:	4013      	ands	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	f040 8148 	bne.w	8000f22 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f003 0303 	and.w	r3, r3, #3
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d005      	beq.n	8000caa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d130      	bne.n	8000d0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	2203      	movs	r2, #3
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	43db      	mvns	r3, r3
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	68da      	ldr	r2, [r3, #12]
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	4013      	ands	r3, r2
 8000cee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	091b      	lsrs	r3, r3, #4
 8000cf6:	f003 0201 	and.w	r2, r3, #1
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f003 0303 	and.w	r3, r3, #3
 8000d14:	2b03      	cmp	r3, #3
 8000d16:	d017      	beq.n	8000d48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	2203      	movs	r2, #3
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	689a      	ldr	r2, [r3, #8]
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 0303 	and.w	r3, r3, #3
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d123      	bne.n	8000d9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	08da      	lsrs	r2, r3, #3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3208      	adds	r2, #8
 8000d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	f003 0307 	and.w	r3, r3, #7
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	220f      	movs	r2, #15
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4013      	ands	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	691a      	ldr	r2, [r3, #16]
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	08da      	lsrs	r2, r3, #3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	3208      	adds	r2, #8
 8000d96:	69b9      	ldr	r1, [r7, #24]
 8000d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	2203      	movs	r2, #3
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4013      	ands	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0203 	and.w	r2, r3, #3
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	f000 80a2 	beq.w	8000f22 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	4b57      	ldr	r3, [pc, #348]	@ (8000f40 <HAL_GPIO_Init+0x2e8>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de6:	4a56      	ldr	r2, [pc, #344]	@ (8000f40 <HAL_GPIO_Init+0x2e8>)
 8000de8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dee:	4b54      	ldr	r3, [pc, #336]	@ (8000f40 <HAL_GPIO_Init+0x2e8>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dfa:	4a52      	ldr	r2, [pc, #328]	@ (8000f44 <HAL_GPIO_Init+0x2ec>)
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	089b      	lsrs	r3, r3, #2
 8000e00:	3302      	adds	r3, #2
 8000e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	f003 0303 	and.w	r3, r3, #3
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	220f      	movs	r2, #15
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a49      	ldr	r2, [pc, #292]	@ (8000f48 <HAL_GPIO_Init+0x2f0>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d019      	beq.n	8000e5a <HAL_GPIO_Init+0x202>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a48      	ldr	r2, [pc, #288]	@ (8000f4c <HAL_GPIO_Init+0x2f4>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d013      	beq.n	8000e56 <HAL_GPIO_Init+0x1fe>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a47      	ldr	r2, [pc, #284]	@ (8000f50 <HAL_GPIO_Init+0x2f8>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d00d      	beq.n	8000e52 <HAL_GPIO_Init+0x1fa>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a46      	ldr	r2, [pc, #280]	@ (8000f54 <HAL_GPIO_Init+0x2fc>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d007      	beq.n	8000e4e <HAL_GPIO_Init+0x1f6>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a45      	ldr	r2, [pc, #276]	@ (8000f58 <HAL_GPIO_Init+0x300>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d101      	bne.n	8000e4a <HAL_GPIO_Init+0x1f2>
 8000e46:	2304      	movs	r3, #4
 8000e48:	e008      	b.n	8000e5c <HAL_GPIO_Init+0x204>
 8000e4a:	2307      	movs	r3, #7
 8000e4c:	e006      	b.n	8000e5c <HAL_GPIO_Init+0x204>
 8000e4e:	2303      	movs	r3, #3
 8000e50:	e004      	b.n	8000e5c <HAL_GPIO_Init+0x204>
 8000e52:	2302      	movs	r3, #2
 8000e54:	e002      	b.n	8000e5c <HAL_GPIO_Init+0x204>
 8000e56:	2301      	movs	r3, #1
 8000e58:	e000      	b.n	8000e5c <HAL_GPIO_Init+0x204>
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	69fa      	ldr	r2, [r7, #28]
 8000e5e:	f002 0203 	and.w	r2, r2, #3
 8000e62:	0092      	lsls	r2, r2, #2
 8000e64:	4093      	lsls	r3, r2
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e6c:	4935      	ldr	r1, [pc, #212]	@ (8000f44 <HAL_GPIO_Init+0x2ec>)
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	089b      	lsrs	r3, r3, #2
 8000e72:	3302      	adds	r3, #2
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e7a:	4b38      	ldr	r3, [pc, #224]	@ (8000f5c <HAL_GPIO_Init+0x304>)
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	43db      	mvns	r3, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4013      	ands	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d003      	beq.n	8000e9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e9e:	4a2f      	ldr	r2, [pc, #188]	@ (8000f5c <HAL_GPIO_Init+0x304>)
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ea4:	4b2d      	ldr	r3, [pc, #180]	@ (8000f5c <HAL_GPIO_Init+0x304>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d003      	beq.n	8000ec8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ec8:	4a24      	ldr	r2, [pc, #144]	@ (8000f5c <HAL_GPIO_Init+0x304>)
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ece:	4b23      	ldr	r3, [pc, #140]	@ (8000f5c <HAL_GPIO_Init+0x304>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4013      	ands	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d003      	beq.n	8000ef2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ef2:	4a1a      	ldr	r2, [pc, #104]	@ (8000f5c <HAL_GPIO_Init+0x304>)
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ef8:	4b18      	ldr	r3, [pc, #96]	@ (8000f5c <HAL_GPIO_Init+0x304>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d003      	beq.n	8000f1c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f1c:	4a0f      	ldr	r2, [pc, #60]	@ (8000f5c <HAL_GPIO_Init+0x304>)
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3301      	adds	r3, #1
 8000f26:	61fb      	str	r3, [r7, #28]
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	2b0f      	cmp	r3, #15
 8000f2c:	f67f aea2 	bls.w	8000c74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f30:	bf00      	nop
 8000f32:	bf00      	nop
 8000f34:	3724      	adds	r7, #36	@ 0x24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40013800 	.word	0x40013800
 8000f48:	40020000 	.word	0x40020000
 8000f4c:	40020400 	.word	0x40020400
 8000f50:	40020800 	.word	0x40020800
 8000f54:	40020c00 	.word	0x40020c00
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40013c00 	.word	0x40013c00

08000f60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e267      	b.n	8001442 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d075      	beq.n	800106a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f7e:	4b88      	ldr	r3, [pc, #544]	@ (80011a0 <HAL_RCC_OscConfig+0x240>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f003 030c 	and.w	r3, r3, #12
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	d00c      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f8a:	4b85      	ldr	r3, [pc, #532]	@ (80011a0 <HAL_RCC_OscConfig+0x240>)
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f92:	2b08      	cmp	r3, #8
 8000f94:	d112      	bne.n	8000fbc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f96:	4b82      	ldr	r3, [pc, #520]	@ (80011a0 <HAL_RCC_OscConfig+0x240>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000fa2:	d10b      	bne.n	8000fbc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa4:	4b7e      	ldr	r3, [pc, #504]	@ (80011a0 <HAL_RCC_OscConfig+0x240>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d05b      	beq.n	8001068 <HAL_RCC_OscConfig+0x108>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d157      	bne.n	8001068 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e242      	b.n	8001442 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fc4:	d106      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x74>
 8000fc6:	4b76      	ldr	r3, [pc, #472]	@ (80011a0 <HAL_RCC_OscConfig+0x240>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a75      	ldr	r2, [pc, #468]	@ (80011a0 <HAL_RCC_OscConfig+0x240>)
 8000fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	e01d      	b.n	8001010 <HAL_RCC_OscConfig+0xb0>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000fdc:	d10c      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x98>
 8000fde:	4b70      	ldr	r3, [pc, #448]	@ (80011a0 <HAL_RCC_OscConfig+0x240>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a6f      	ldr	r2, [pc, #444]	@ (80011a0 <HAL_RCC_OscConfig+0x240>)
 8000fe4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	4b6d      	ldr	r3, [pc, #436]	@ (80011a0 <HAL_RCC_OscConfig+0x240>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a6c      	ldr	r2, [pc, #432]	@ (80011a0 <HAL_RCC_OscConfig+0x240>)
 8000ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	e00b      	b.n	8001010 <HAL_RCC_OscConfig+0xb0>
 8000ff8:	4b69      	ldr	r3, [pc, #420]	@ (80011a0 <HAL_RCC_OscConfig+0x240>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a68      	ldr	r2, [pc, #416]	@ (80011a0 <HAL_RCC_OscConfig+0x240>)
 8000ffe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	4b66      	ldr	r3, [pc, #408]	@ (80011a0 <HAL_RCC_OscConfig+0x240>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a65      	ldr	r2, [pc, #404]	@ (80011a0 <HAL_RCC_OscConfig+0x240>)
 800100a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800100e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d013      	beq.n	8001040 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001018:	f7ff fd20 	bl	8000a5c <HAL_GetTick>
 800101c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800101e:	e008      	b.n	8001032 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001020:	f7ff fd1c 	bl	8000a5c <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b64      	cmp	r3, #100	@ 0x64
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e207      	b.n	8001442 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001032:	4b5b      	ldr	r3, [pc, #364]	@ (80011a0 <HAL_RCC_OscConfig+0x240>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d0f0      	beq.n	8001020 <HAL_RCC_OscConfig+0xc0>
 800103e:	e014      	b.n	800106a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001040:	f7ff fd0c 	bl	8000a5c <HAL_GetTick>
 8001044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001046:	e008      	b.n	800105a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001048:	f7ff fd08 	bl	8000a5c <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b64      	cmp	r3, #100	@ 0x64
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e1f3      	b.n	8001442 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800105a:	4b51      	ldr	r3, [pc, #324]	@ (80011a0 <HAL_RCC_OscConfig+0x240>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1f0      	bne.n	8001048 <HAL_RCC_OscConfig+0xe8>
 8001066:	e000      	b.n	800106a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d063      	beq.n	800113e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001076:	4b4a      	ldr	r3, [pc, #296]	@ (80011a0 <HAL_RCC_OscConfig+0x240>)
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	f003 030c 	and.w	r3, r3, #12
 800107e:	2b00      	cmp	r3, #0
 8001080:	d00b      	beq.n	800109a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001082:	4b47      	ldr	r3, [pc, #284]	@ (80011a0 <HAL_RCC_OscConfig+0x240>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800108a:	2b08      	cmp	r3, #8
 800108c:	d11c      	bne.n	80010c8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800108e:	4b44      	ldr	r3, [pc, #272]	@ (80011a0 <HAL_RCC_OscConfig+0x240>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d116      	bne.n	80010c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800109a:	4b41      	ldr	r3, [pc, #260]	@ (80011a0 <HAL_RCC_OscConfig+0x240>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d005      	beq.n	80010b2 <HAL_RCC_OscConfig+0x152>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d001      	beq.n	80010b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e1c7      	b.n	8001442 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b2:	4b3b      	ldr	r3, [pc, #236]	@ (80011a0 <HAL_RCC_OscConfig+0x240>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	4937      	ldr	r1, [pc, #220]	@ (80011a0 <HAL_RCC_OscConfig+0x240>)
 80010c2:	4313      	orrs	r3, r2
 80010c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010c6:	e03a      	b.n	800113e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d020      	beq.n	8001112 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010d0:	4b34      	ldr	r3, [pc, #208]	@ (80011a4 <HAL_RCC_OscConfig+0x244>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d6:	f7ff fcc1 	bl	8000a5c <HAL_GetTick>
 80010da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010dc:	e008      	b.n	80010f0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010de:	f7ff fcbd 	bl	8000a5c <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e1a8      	b.n	8001442 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f0:	4b2b      	ldr	r3, [pc, #172]	@ (80011a0 <HAL_RCC_OscConfig+0x240>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0f0      	beq.n	80010de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010fc:	4b28      	ldr	r3, [pc, #160]	@ (80011a0 <HAL_RCC_OscConfig+0x240>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	691b      	ldr	r3, [r3, #16]
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	4925      	ldr	r1, [pc, #148]	@ (80011a0 <HAL_RCC_OscConfig+0x240>)
 800110c:	4313      	orrs	r3, r2
 800110e:	600b      	str	r3, [r1, #0]
 8001110:	e015      	b.n	800113e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001112:	4b24      	ldr	r3, [pc, #144]	@ (80011a4 <HAL_RCC_OscConfig+0x244>)
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001118:	f7ff fca0 	bl	8000a5c <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001120:	f7ff fc9c 	bl	8000a5c <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e187      	b.n	8001442 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001132:	4b1b      	ldr	r3, [pc, #108]	@ (80011a0 <HAL_RCC_OscConfig+0x240>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f0      	bne.n	8001120 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	2b00      	cmp	r3, #0
 8001148:	d036      	beq.n	80011b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d016      	beq.n	8001180 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001152:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <HAL_RCC_OscConfig+0x248>)
 8001154:	2201      	movs	r2, #1
 8001156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001158:	f7ff fc80 	bl	8000a5c <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001160:	f7ff fc7c 	bl	8000a5c <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b02      	cmp	r3, #2
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e167      	b.n	8001442 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001172:	4b0b      	ldr	r3, [pc, #44]	@ (80011a0 <HAL_RCC_OscConfig+0x240>)
 8001174:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0f0      	beq.n	8001160 <HAL_RCC_OscConfig+0x200>
 800117e:	e01b      	b.n	80011b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001180:	4b09      	ldr	r3, [pc, #36]	@ (80011a8 <HAL_RCC_OscConfig+0x248>)
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001186:	f7ff fc69 	bl	8000a5c <HAL_GetTick>
 800118a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800118c:	e00e      	b.n	80011ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800118e:	f7ff fc65 	bl	8000a5c <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d907      	bls.n	80011ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e150      	b.n	8001442 <HAL_RCC_OscConfig+0x4e2>
 80011a0:	40023800 	.word	0x40023800
 80011a4:	42470000 	.word	0x42470000
 80011a8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ac:	4b88      	ldr	r3, [pc, #544]	@ (80013d0 <HAL_RCC_OscConfig+0x470>)
 80011ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1ea      	bne.n	800118e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 8097 	beq.w	80012f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011c6:	2300      	movs	r3, #0
 80011c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ca:	4b81      	ldr	r3, [pc, #516]	@ (80013d0 <HAL_RCC_OscConfig+0x470>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10f      	bne.n	80011f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	4b7d      	ldr	r3, [pc, #500]	@ (80013d0 <HAL_RCC_OscConfig+0x470>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011de:	4a7c      	ldr	r2, [pc, #496]	@ (80013d0 <HAL_RCC_OscConfig+0x470>)
 80011e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011e6:	4b7a      	ldr	r3, [pc, #488]	@ (80013d0 <HAL_RCC_OscConfig+0x470>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011f2:	2301      	movs	r3, #1
 80011f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f6:	4b77      	ldr	r3, [pc, #476]	@ (80013d4 <HAL_RCC_OscConfig+0x474>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d118      	bne.n	8001234 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001202:	4b74      	ldr	r3, [pc, #464]	@ (80013d4 <HAL_RCC_OscConfig+0x474>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a73      	ldr	r2, [pc, #460]	@ (80013d4 <HAL_RCC_OscConfig+0x474>)
 8001208:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800120c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800120e:	f7ff fc25 	bl	8000a5c <HAL_GetTick>
 8001212:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001214:	e008      	b.n	8001228 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001216:	f7ff fc21 	bl	8000a5c <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e10c      	b.n	8001442 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001228:	4b6a      	ldr	r3, [pc, #424]	@ (80013d4 <HAL_RCC_OscConfig+0x474>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001230:	2b00      	cmp	r3, #0
 8001232:	d0f0      	beq.n	8001216 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d106      	bne.n	800124a <HAL_RCC_OscConfig+0x2ea>
 800123c:	4b64      	ldr	r3, [pc, #400]	@ (80013d0 <HAL_RCC_OscConfig+0x470>)
 800123e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001240:	4a63      	ldr	r2, [pc, #396]	@ (80013d0 <HAL_RCC_OscConfig+0x470>)
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	6713      	str	r3, [r2, #112]	@ 0x70
 8001248:	e01c      	b.n	8001284 <HAL_RCC_OscConfig+0x324>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	2b05      	cmp	r3, #5
 8001250:	d10c      	bne.n	800126c <HAL_RCC_OscConfig+0x30c>
 8001252:	4b5f      	ldr	r3, [pc, #380]	@ (80013d0 <HAL_RCC_OscConfig+0x470>)
 8001254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001256:	4a5e      	ldr	r2, [pc, #376]	@ (80013d0 <HAL_RCC_OscConfig+0x470>)
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	6713      	str	r3, [r2, #112]	@ 0x70
 800125e:	4b5c      	ldr	r3, [pc, #368]	@ (80013d0 <HAL_RCC_OscConfig+0x470>)
 8001260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001262:	4a5b      	ldr	r2, [pc, #364]	@ (80013d0 <HAL_RCC_OscConfig+0x470>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6713      	str	r3, [r2, #112]	@ 0x70
 800126a:	e00b      	b.n	8001284 <HAL_RCC_OscConfig+0x324>
 800126c:	4b58      	ldr	r3, [pc, #352]	@ (80013d0 <HAL_RCC_OscConfig+0x470>)
 800126e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001270:	4a57      	ldr	r2, [pc, #348]	@ (80013d0 <HAL_RCC_OscConfig+0x470>)
 8001272:	f023 0301 	bic.w	r3, r3, #1
 8001276:	6713      	str	r3, [r2, #112]	@ 0x70
 8001278:	4b55      	ldr	r3, [pc, #340]	@ (80013d0 <HAL_RCC_OscConfig+0x470>)
 800127a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800127c:	4a54      	ldr	r2, [pc, #336]	@ (80013d0 <HAL_RCC_OscConfig+0x470>)
 800127e:	f023 0304 	bic.w	r3, r3, #4
 8001282:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d015      	beq.n	80012b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800128c:	f7ff fbe6 	bl	8000a5c <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001292:	e00a      	b.n	80012aa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001294:	f7ff fbe2 	bl	8000a5c <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e0cb      	b.n	8001442 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012aa:	4b49      	ldr	r3, [pc, #292]	@ (80013d0 <HAL_RCC_OscConfig+0x470>)
 80012ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0ee      	beq.n	8001294 <HAL_RCC_OscConfig+0x334>
 80012b6:	e014      	b.n	80012e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b8:	f7ff fbd0 	bl	8000a5c <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012be:	e00a      	b.n	80012d6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012c0:	f7ff fbcc 	bl	8000a5c <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e0b5      	b.n	8001442 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d6:	4b3e      	ldr	r3, [pc, #248]	@ (80013d0 <HAL_RCC_OscConfig+0x470>)
 80012d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1ee      	bne.n	80012c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80012e2:	7dfb      	ldrb	r3, [r7, #23]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d105      	bne.n	80012f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e8:	4b39      	ldr	r3, [pc, #228]	@ (80013d0 <HAL_RCC_OscConfig+0x470>)
 80012ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ec:	4a38      	ldr	r2, [pc, #224]	@ (80013d0 <HAL_RCC_OscConfig+0x470>)
 80012ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 80a1 	beq.w	8001440 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012fe:	4b34      	ldr	r3, [pc, #208]	@ (80013d0 <HAL_RCC_OscConfig+0x470>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 030c 	and.w	r3, r3, #12
 8001306:	2b08      	cmp	r3, #8
 8001308:	d05c      	beq.n	80013c4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	2b02      	cmp	r3, #2
 8001310:	d141      	bne.n	8001396 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001312:	4b31      	ldr	r3, [pc, #196]	@ (80013d8 <HAL_RCC_OscConfig+0x478>)
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fba0 	bl	8000a5c <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001320:	f7ff fb9c 	bl	8000a5c <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e087      	b.n	8001442 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001332:	4b27      	ldr	r3, [pc, #156]	@ (80013d0 <HAL_RCC_OscConfig+0x470>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69da      	ldr	r2, [r3, #28]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	431a      	orrs	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800134c:	019b      	lsls	r3, r3, #6
 800134e:	431a      	orrs	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001354:	085b      	lsrs	r3, r3, #1
 8001356:	3b01      	subs	r3, #1
 8001358:	041b      	lsls	r3, r3, #16
 800135a:	431a      	orrs	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001360:	061b      	lsls	r3, r3, #24
 8001362:	491b      	ldr	r1, [pc, #108]	@ (80013d0 <HAL_RCC_OscConfig+0x470>)
 8001364:	4313      	orrs	r3, r2
 8001366:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001368:	4b1b      	ldr	r3, [pc, #108]	@ (80013d8 <HAL_RCC_OscConfig+0x478>)
 800136a:	2201      	movs	r2, #1
 800136c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136e:	f7ff fb75 	bl	8000a5c <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001376:	f7ff fb71 	bl	8000a5c <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e05c      	b.n	8001442 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001388:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <HAL_RCC_OscConfig+0x470>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0f0      	beq.n	8001376 <HAL_RCC_OscConfig+0x416>
 8001394:	e054      	b.n	8001440 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001396:	4b10      	ldr	r3, [pc, #64]	@ (80013d8 <HAL_RCC_OscConfig+0x478>)
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139c:	f7ff fb5e 	bl	8000a5c <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a4:	f7ff fb5a 	bl	8000a5c <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e045      	b.n	8001442 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013b6:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <HAL_RCC_OscConfig+0x470>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0x444>
 80013c2:	e03d      	b.n	8001440 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d107      	bne.n	80013dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e038      	b.n	8001442 <HAL_RCC_OscConfig+0x4e2>
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40007000 	.word	0x40007000
 80013d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013dc:	4b1b      	ldr	r3, [pc, #108]	@ (800144c <HAL_RCC_OscConfig+0x4ec>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d028      	beq.n	800143c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d121      	bne.n	800143c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001402:	429a      	cmp	r2, r3
 8001404:	d11a      	bne.n	800143c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800140c:	4013      	ands	r3, r2
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001412:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001414:	4293      	cmp	r3, r2
 8001416:	d111      	bne.n	800143c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001422:	085b      	lsrs	r3, r3, #1
 8001424:	3b01      	subs	r3, #1
 8001426:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001428:	429a      	cmp	r2, r3
 800142a:	d107      	bne.n	800143c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001436:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001438:	429a      	cmp	r2, r3
 800143a:	d001      	beq.n	8001440 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e000      	b.n	8001442 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800

08001450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e0cc      	b.n	80015fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001464:	4b68      	ldr	r3, [pc, #416]	@ (8001608 <HAL_RCC_ClockConfig+0x1b8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	429a      	cmp	r2, r3
 8001470:	d90c      	bls.n	800148c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001472:	4b65      	ldr	r3, [pc, #404]	@ (8001608 <HAL_RCC_ClockConfig+0x1b8>)
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800147a:	4b63      	ldr	r3, [pc, #396]	@ (8001608 <HAL_RCC_ClockConfig+0x1b8>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	429a      	cmp	r2, r3
 8001486:	d001      	beq.n	800148c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e0b8      	b.n	80015fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d020      	beq.n	80014da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d005      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014a4:	4b59      	ldr	r3, [pc, #356]	@ (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	4a58      	ldr	r2, [pc, #352]	@ (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80014aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80014ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0308 	and.w	r3, r3, #8
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d005      	beq.n	80014c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014bc:	4b53      	ldr	r3, [pc, #332]	@ (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	4a52      	ldr	r2, [pc, #328]	@ (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80014c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80014c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014c8:	4b50      	ldr	r3, [pc, #320]	@ (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	494d      	ldr	r1, [pc, #308]	@ (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d044      	beq.n	8001570 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d107      	bne.n	80014fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ee:	4b47      	ldr	r3, [pc, #284]	@ (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d119      	bne.n	800152e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e07f      	b.n	80015fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b02      	cmp	r3, #2
 8001504:	d003      	beq.n	800150e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800150a:	2b03      	cmp	r3, #3
 800150c:	d107      	bne.n	800151e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800150e:	4b3f      	ldr	r3, [pc, #252]	@ (800160c <HAL_RCC_ClockConfig+0x1bc>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d109      	bne.n	800152e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e06f      	b.n	80015fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151e:	4b3b      	ldr	r3, [pc, #236]	@ (800160c <HAL_RCC_ClockConfig+0x1bc>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e067      	b.n	80015fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800152e:	4b37      	ldr	r3, [pc, #220]	@ (800160c <HAL_RCC_ClockConfig+0x1bc>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f023 0203 	bic.w	r2, r3, #3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	4934      	ldr	r1, [pc, #208]	@ (800160c <HAL_RCC_ClockConfig+0x1bc>)
 800153c:	4313      	orrs	r3, r2
 800153e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001540:	f7ff fa8c 	bl	8000a5c <HAL_GetTick>
 8001544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001546:	e00a      	b.n	800155e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001548:	f7ff fa88 	bl	8000a5c <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001556:	4293      	cmp	r3, r2
 8001558:	d901      	bls.n	800155e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e04f      	b.n	80015fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800155e:	4b2b      	ldr	r3, [pc, #172]	@ (800160c <HAL_RCC_ClockConfig+0x1bc>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 020c 	and.w	r2, r3, #12
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	429a      	cmp	r2, r3
 800156e:	d1eb      	bne.n	8001548 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001570:	4b25      	ldr	r3, [pc, #148]	@ (8001608 <HAL_RCC_ClockConfig+0x1b8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	d20c      	bcs.n	8001598 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157e:	4b22      	ldr	r3, [pc, #136]	@ (8001608 <HAL_RCC_ClockConfig+0x1b8>)
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001586:	4b20      	ldr	r3, [pc, #128]	@ (8001608 <HAL_RCC_ClockConfig+0x1b8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	429a      	cmp	r2, r3
 8001592:	d001      	beq.n	8001598 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e032      	b.n	80015fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d008      	beq.n	80015b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015a4:	4b19      	ldr	r3, [pc, #100]	@ (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	4916      	ldr	r1, [pc, #88]	@ (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d009      	beq.n	80015d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015c2:	4b12      	ldr	r3, [pc, #72]	@ (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	490e      	ldr	r1, [pc, #56]	@ (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015d6:	f000 f821 	bl	800161c <HAL_RCC_GetSysClockFreq>
 80015da:	4602      	mov	r2, r0
 80015dc:	4b0b      	ldr	r3, [pc, #44]	@ (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	091b      	lsrs	r3, r3, #4
 80015e2:	f003 030f 	and.w	r3, r3, #15
 80015e6:	490a      	ldr	r1, [pc, #40]	@ (8001610 <HAL_RCC_ClockConfig+0x1c0>)
 80015e8:	5ccb      	ldrb	r3, [r1, r3]
 80015ea:	fa22 f303 	lsr.w	r3, r2, r3
 80015ee:	4a09      	ldr	r2, [pc, #36]	@ (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 80015f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80015f2:	4b09      	ldr	r3, [pc, #36]	@ (8001618 <HAL_RCC_ClockConfig+0x1c8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff f9ec 	bl	80009d4 <HAL_InitTick>

  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40023c00 	.word	0x40023c00
 800160c:	40023800 	.word	0x40023800
 8001610:	0800265c 	.word	0x0800265c
 8001614:	20000000 	.word	0x20000000
 8001618:	20000004 	.word	0x20000004

0800161c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800161c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001620:	b090      	sub	sp, #64	@ 0x40
 8001622:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800162c:	2300      	movs	r3, #0
 800162e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001634:	4b59      	ldr	r3, [pc, #356]	@ (800179c <HAL_RCC_GetSysClockFreq+0x180>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f003 030c 	and.w	r3, r3, #12
 800163c:	2b08      	cmp	r3, #8
 800163e:	d00d      	beq.n	800165c <HAL_RCC_GetSysClockFreq+0x40>
 8001640:	2b08      	cmp	r3, #8
 8001642:	f200 80a1 	bhi.w	8001788 <HAL_RCC_GetSysClockFreq+0x16c>
 8001646:	2b00      	cmp	r3, #0
 8001648:	d002      	beq.n	8001650 <HAL_RCC_GetSysClockFreq+0x34>
 800164a:	2b04      	cmp	r3, #4
 800164c:	d003      	beq.n	8001656 <HAL_RCC_GetSysClockFreq+0x3a>
 800164e:	e09b      	b.n	8001788 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001650:	4b53      	ldr	r3, [pc, #332]	@ (80017a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001652:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001654:	e09b      	b.n	800178e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001656:	4b53      	ldr	r3, [pc, #332]	@ (80017a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001658:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800165a:	e098      	b.n	800178e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800165c:	4b4f      	ldr	r3, [pc, #316]	@ (800179c <HAL_RCC_GetSysClockFreq+0x180>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001664:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001666:	4b4d      	ldr	r3, [pc, #308]	@ (800179c <HAL_RCC_GetSysClockFreq+0x180>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d028      	beq.n	80016c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001672:	4b4a      	ldr	r3, [pc, #296]	@ (800179c <HAL_RCC_GetSysClockFreq+0x180>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	099b      	lsrs	r3, r3, #6
 8001678:	2200      	movs	r2, #0
 800167a:	623b      	str	r3, [r7, #32]
 800167c:	627a      	str	r2, [r7, #36]	@ 0x24
 800167e:	6a3b      	ldr	r3, [r7, #32]
 8001680:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001684:	2100      	movs	r1, #0
 8001686:	4b47      	ldr	r3, [pc, #284]	@ (80017a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001688:	fb03 f201 	mul.w	r2, r3, r1
 800168c:	2300      	movs	r3, #0
 800168e:	fb00 f303 	mul.w	r3, r0, r3
 8001692:	4413      	add	r3, r2
 8001694:	4a43      	ldr	r2, [pc, #268]	@ (80017a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001696:	fba0 1202 	umull	r1, r2, r0, r2
 800169a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800169c:	460a      	mov	r2, r1
 800169e:	62ba      	str	r2, [r7, #40]	@ 0x28
 80016a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016a2:	4413      	add	r3, r2
 80016a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016a8:	2200      	movs	r2, #0
 80016aa:	61bb      	str	r3, [r7, #24]
 80016ac:	61fa      	str	r2, [r7, #28]
 80016ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80016b6:	f7fe fde3 	bl	8000280 <__aeabi_uldivmod>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4613      	mov	r3, r2
 80016c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016c2:	e053      	b.n	800176c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016c4:	4b35      	ldr	r3, [pc, #212]	@ (800179c <HAL_RCC_GetSysClockFreq+0x180>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	099b      	lsrs	r3, r3, #6
 80016ca:	2200      	movs	r2, #0
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	617a      	str	r2, [r7, #20]
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80016d6:	f04f 0b00 	mov.w	fp, #0
 80016da:	4652      	mov	r2, sl
 80016dc:	465b      	mov	r3, fp
 80016de:	f04f 0000 	mov.w	r0, #0
 80016e2:	f04f 0100 	mov.w	r1, #0
 80016e6:	0159      	lsls	r1, r3, #5
 80016e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016ec:	0150      	lsls	r0, r2, #5
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	ebb2 080a 	subs.w	r8, r2, sl
 80016f6:	eb63 090b 	sbc.w	r9, r3, fp
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001706:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800170a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800170e:	ebb2 0408 	subs.w	r4, r2, r8
 8001712:	eb63 0509 	sbc.w	r5, r3, r9
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	00eb      	lsls	r3, r5, #3
 8001720:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001724:	00e2      	lsls	r2, r4, #3
 8001726:	4614      	mov	r4, r2
 8001728:	461d      	mov	r5, r3
 800172a:	eb14 030a 	adds.w	r3, r4, sl
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	eb45 030b 	adc.w	r3, r5, fp
 8001734:	607b      	str	r3, [r7, #4]
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001742:	4629      	mov	r1, r5
 8001744:	028b      	lsls	r3, r1, #10
 8001746:	4621      	mov	r1, r4
 8001748:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800174c:	4621      	mov	r1, r4
 800174e:	028a      	lsls	r2, r1, #10
 8001750:	4610      	mov	r0, r2
 8001752:	4619      	mov	r1, r3
 8001754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001756:	2200      	movs	r2, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	60fa      	str	r2, [r7, #12]
 800175c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001760:	f7fe fd8e 	bl	8000280 <__aeabi_uldivmod>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4613      	mov	r3, r2
 800176a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800176c:	4b0b      	ldr	r3, [pc, #44]	@ (800179c <HAL_RCC_GetSysClockFreq+0x180>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	0c1b      	lsrs	r3, r3, #16
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	3301      	adds	r3, #1
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800177c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800177e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001780:	fbb2 f3f3 	udiv	r3, r2, r3
 8001784:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001786:	e002      	b.n	800178e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001788:	4b05      	ldr	r3, [pc, #20]	@ (80017a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800178a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800178c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800178e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001790:	4618      	mov	r0, r3
 8001792:	3740      	adds	r7, #64	@ 0x40
 8001794:	46bd      	mov	sp, r7
 8001796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800
 80017a0:	00f42400 	.word	0x00f42400
 80017a4:	017d7840 	.word	0x017d7840

080017a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017ac:	4b03      	ldr	r3, [pc, #12]	@ (80017bc <HAL_RCC_GetHCLKFreq+0x14>)
 80017ae:	681b      	ldr	r3, [r3, #0]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	20000000 	.word	0x20000000

080017c0 <std>:
 80017c0:	2300      	movs	r3, #0
 80017c2:	b510      	push	{r4, lr}
 80017c4:	4604      	mov	r4, r0
 80017c6:	e9c0 3300 	strd	r3, r3, [r0]
 80017ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80017ce:	6083      	str	r3, [r0, #8]
 80017d0:	8181      	strh	r1, [r0, #12]
 80017d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80017d4:	81c2      	strh	r2, [r0, #14]
 80017d6:	6183      	str	r3, [r0, #24]
 80017d8:	4619      	mov	r1, r3
 80017da:	2208      	movs	r2, #8
 80017dc:	305c      	adds	r0, #92	@ 0x5c
 80017de:	f000 f906 	bl	80019ee <memset>
 80017e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001818 <std+0x58>)
 80017e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80017e6:	4b0d      	ldr	r3, [pc, #52]	@ (800181c <std+0x5c>)
 80017e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80017ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001820 <std+0x60>)
 80017ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80017ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001824 <std+0x64>)
 80017f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80017f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001828 <std+0x68>)
 80017f4:	6224      	str	r4, [r4, #32]
 80017f6:	429c      	cmp	r4, r3
 80017f8:	d006      	beq.n	8001808 <std+0x48>
 80017fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80017fe:	4294      	cmp	r4, r2
 8001800:	d002      	beq.n	8001808 <std+0x48>
 8001802:	33d0      	adds	r3, #208	@ 0xd0
 8001804:	429c      	cmp	r4, r3
 8001806:	d105      	bne.n	8001814 <std+0x54>
 8001808:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800180c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001810:	f000 b966 	b.w	8001ae0 <__retarget_lock_init_recursive>
 8001814:	bd10      	pop	{r4, pc}
 8001816:	bf00      	nop
 8001818:	08001969 	.word	0x08001969
 800181c:	0800198b 	.word	0x0800198b
 8001820:	080019c3 	.word	0x080019c3
 8001824:	080019e7 	.word	0x080019e7
 8001828:	2000008c 	.word	0x2000008c

0800182c <stdio_exit_handler>:
 800182c:	4a02      	ldr	r2, [pc, #8]	@ (8001838 <stdio_exit_handler+0xc>)
 800182e:	4903      	ldr	r1, [pc, #12]	@ (800183c <stdio_exit_handler+0x10>)
 8001830:	4803      	ldr	r0, [pc, #12]	@ (8001840 <stdio_exit_handler+0x14>)
 8001832:	f000 b869 	b.w	8001908 <_fwalk_sglue>
 8001836:	bf00      	nop
 8001838:	2000000c 	.word	0x2000000c
 800183c:	0800237d 	.word	0x0800237d
 8001840:	2000001c 	.word	0x2000001c

08001844 <cleanup_stdio>:
 8001844:	6841      	ldr	r1, [r0, #4]
 8001846:	4b0c      	ldr	r3, [pc, #48]	@ (8001878 <cleanup_stdio+0x34>)
 8001848:	4299      	cmp	r1, r3
 800184a:	b510      	push	{r4, lr}
 800184c:	4604      	mov	r4, r0
 800184e:	d001      	beq.n	8001854 <cleanup_stdio+0x10>
 8001850:	f000 fd94 	bl	800237c <_fflush_r>
 8001854:	68a1      	ldr	r1, [r4, #8]
 8001856:	4b09      	ldr	r3, [pc, #36]	@ (800187c <cleanup_stdio+0x38>)
 8001858:	4299      	cmp	r1, r3
 800185a:	d002      	beq.n	8001862 <cleanup_stdio+0x1e>
 800185c:	4620      	mov	r0, r4
 800185e:	f000 fd8d 	bl	800237c <_fflush_r>
 8001862:	68e1      	ldr	r1, [r4, #12]
 8001864:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <cleanup_stdio+0x3c>)
 8001866:	4299      	cmp	r1, r3
 8001868:	d004      	beq.n	8001874 <cleanup_stdio+0x30>
 800186a:	4620      	mov	r0, r4
 800186c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001870:	f000 bd84 	b.w	800237c <_fflush_r>
 8001874:	bd10      	pop	{r4, pc}
 8001876:	bf00      	nop
 8001878:	2000008c 	.word	0x2000008c
 800187c:	200000f4 	.word	0x200000f4
 8001880:	2000015c 	.word	0x2000015c

08001884 <global_stdio_init.part.0>:
 8001884:	b510      	push	{r4, lr}
 8001886:	4b0b      	ldr	r3, [pc, #44]	@ (80018b4 <global_stdio_init.part.0+0x30>)
 8001888:	4c0b      	ldr	r4, [pc, #44]	@ (80018b8 <global_stdio_init.part.0+0x34>)
 800188a:	4a0c      	ldr	r2, [pc, #48]	@ (80018bc <global_stdio_init.part.0+0x38>)
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	4620      	mov	r0, r4
 8001890:	2200      	movs	r2, #0
 8001892:	2104      	movs	r1, #4
 8001894:	f7ff ff94 	bl	80017c0 <std>
 8001898:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800189c:	2201      	movs	r2, #1
 800189e:	2109      	movs	r1, #9
 80018a0:	f7ff ff8e 	bl	80017c0 <std>
 80018a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80018a8:	2202      	movs	r2, #2
 80018aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018ae:	2112      	movs	r1, #18
 80018b0:	f7ff bf86 	b.w	80017c0 <std>
 80018b4:	200001c4 	.word	0x200001c4
 80018b8:	2000008c 	.word	0x2000008c
 80018bc:	0800182d 	.word	0x0800182d

080018c0 <__sfp_lock_acquire>:
 80018c0:	4801      	ldr	r0, [pc, #4]	@ (80018c8 <__sfp_lock_acquire+0x8>)
 80018c2:	f000 b90e 	b.w	8001ae2 <__retarget_lock_acquire_recursive>
 80018c6:	bf00      	nop
 80018c8:	200001cd 	.word	0x200001cd

080018cc <__sfp_lock_release>:
 80018cc:	4801      	ldr	r0, [pc, #4]	@ (80018d4 <__sfp_lock_release+0x8>)
 80018ce:	f000 b909 	b.w	8001ae4 <__retarget_lock_release_recursive>
 80018d2:	bf00      	nop
 80018d4:	200001cd 	.word	0x200001cd

080018d8 <__sinit>:
 80018d8:	b510      	push	{r4, lr}
 80018da:	4604      	mov	r4, r0
 80018dc:	f7ff fff0 	bl	80018c0 <__sfp_lock_acquire>
 80018e0:	6a23      	ldr	r3, [r4, #32]
 80018e2:	b11b      	cbz	r3, 80018ec <__sinit+0x14>
 80018e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018e8:	f7ff bff0 	b.w	80018cc <__sfp_lock_release>
 80018ec:	4b04      	ldr	r3, [pc, #16]	@ (8001900 <__sinit+0x28>)
 80018ee:	6223      	str	r3, [r4, #32]
 80018f0:	4b04      	ldr	r3, [pc, #16]	@ (8001904 <__sinit+0x2c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1f5      	bne.n	80018e4 <__sinit+0xc>
 80018f8:	f7ff ffc4 	bl	8001884 <global_stdio_init.part.0>
 80018fc:	e7f2      	b.n	80018e4 <__sinit+0xc>
 80018fe:	bf00      	nop
 8001900:	08001845 	.word	0x08001845
 8001904:	200001c4 	.word	0x200001c4

08001908 <_fwalk_sglue>:
 8001908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800190c:	4607      	mov	r7, r0
 800190e:	4688      	mov	r8, r1
 8001910:	4614      	mov	r4, r2
 8001912:	2600      	movs	r6, #0
 8001914:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001918:	f1b9 0901 	subs.w	r9, r9, #1
 800191c:	d505      	bpl.n	800192a <_fwalk_sglue+0x22>
 800191e:	6824      	ldr	r4, [r4, #0]
 8001920:	2c00      	cmp	r4, #0
 8001922:	d1f7      	bne.n	8001914 <_fwalk_sglue+0xc>
 8001924:	4630      	mov	r0, r6
 8001926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800192a:	89ab      	ldrh	r3, [r5, #12]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d907      	bls.n	8001940 <_fwalk_sglue+0x38>
 8001930:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001934:	3301      	adds	r3, #1
 8001936:	d003      	beq.n	8001940 <_fwalk_sglue+0x38>
 8001938:	4629      	mov	r1, r5
 800193a:	4638      	mov	r0, r7
 800193c:	47c0      	blx	r8
 800193e:	4306      	orrs	r6, r0
 8001940:	3568      	adds	r5, #104	@ 0x68
 8001942:	e7e9      	b.n	8001918 <_fwalk_sglue+0x10>

08001944 <iprintf>:
 8001944:	b40f      	push	{r0, r1, r2, r3}
 8001946:	b507      	push	{r0, r1, r2, lr}
 8001948:	4906      	ldr	r1, [pc, #24]	@ (8001964 <iprintf+0x20>)
 800194a:	ab04      	add	r3, sp, #16
 800194c:	6808      	ldr	r0, [r1, #0]
 800194e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001952:	6881      	ldr	r1, [r0, #8]
 8001954:	9301      	str	r3, [sp, #4]
 8001956:	f000 f9e9 	bl	8001d2c <_vfiprintf_r>
 800195a:	b003      	add	sp, #12
 800195c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001960:	b004      	add	sp, #16
 8001962:	4770      	bx	lr
 8001964:	20000018 	.word	0x20000018

08001968 <__sread>:
 8001968:	b510      	push	{r4, lr}
 800196a:	460c      	mov	r4, r1
 800196c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001970:	f000 f868 	bl	8001a44 <_read_r>
 8001974:	2800      	cmp	r0, #0
 8001976:	bfab      	itete	ge
 8001978:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800197a:	89a3      	ldrhlt	r3, [r4, #12]
 800197c:	181b      	addge	r3, r3, r0
 800197e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001982:	bfac      	ite	ge
 8001984:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001986:	81a3      	strhlt	r3, [r4, #12]
 8001988:	bd10      	pop	{r4, pc}

0800198a <__swrite>:
 800198a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800198e:	461f      	mov	r7, r3
 8001990:	898b      	ldrh	r3, [r1, #12]
 8001992:	05db      	lsls	r3, r3, #23
 8001994:	4605      	mov	r5, r0
 8001996:	460c      	mov	r4, r1
 8001998:	4616      	mov	r6, r2
 800199a:	d505      	bpl.n	80019a8 <__swrite+0x1e>
 800199c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019a0:	2302      	movs	r3, #2
 80019a2:	2200      	movs	r2, #0
 80019a4:	f000 f83c 	bl	8001a20 <_lseek_r>
 80019a8:	89a3      	ldrh	r3, [r4, #12]
 80019aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80019ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80019b2:	81a3      	strh	r3, [r4, #12]
 80019b4:	4632      	mov	r2, r6
 80019b6:	463b      	mov	r3, r7
 80019b8:	4628      	mov	r0, r5
 80019ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80019be:	f000 b853 	b.w	8001a68 <_write_r>

080019c2 <__sseek>:
 80019c2:	b510      	push	{r4, lr}
 80019c4:	460c      	mov	r4, r1
 80019c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019ca:	f000 f829 	bl	8001a20 <_lseek_r>
 80019ce:	1c43      	adds	r3, r0, #1
 80019d0:	89a3      	ldrh	r3, [r4, #12]
 80019d2:	bf15      	itete	ne
 80019d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80019d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80019da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80019de:	81a3      	strheq	r3, [r4, #12]
 80019e0:	bf18      	it	ne
 80019e2:	81a3      	strhne	r3, [r4, #12]
 80019e4:	bd10      	pop	{r4, pc}

080019e6 <__sclose>:
 80019e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019ea:	f000 b809 	b.w	8001a00 <_close_r>

080019ee <memset>:
 80019ee:	4402      	add	r2, r0
 80019f0:	4603      	mov	r3, r0
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d100      	bne.n	80019f8 <memset+0xa>
 80019f6:	4770      	bx	lr
 80019f8:	f803 1b01 	strb.w	r1, [r3], #1
 80019fc:	e7f9      	b.n	80019f2 <memset+0x4>
	...

08001a00 <_close_r>:
 8001a00:	b538      	push	{r3, r4, r5, lr}
 8001a02:	4d06      	ldr	r5, [pc, #24]	@ (8001a1c <_close_r+0x1c>)
 8001a04:	2300      	movs	r3, #0
 8001a06:	4604      	mov	r4, r0
 8001a08:	4608      	mov	r0, r1
 8001a0a:	602b      	str	r3, [r5, #0]
 8001a0c:	f7fe ff11 	bl	8000832 <_close>
 8001a10:	1c43      	adds	r3, r0, #1
 8001a12:	d102      	bne.n	8001a1a <_close_r+0x1a>
 8001a14:	682b      	ldr	r3, [r5, #0]
 8001a16:	b103      	cbz	r3, 8001a1a <_close_r+0x1a>
 8001a18:	6023      	str	r3, [r4, #0]
 8001a1a:	bd38      	pop	{r3, r4, r5, pc}
 8001a1c:	200001c8 	.word	0x200001c8

08001a20 <_lseek_r>:
 8001a20:	b538      	push	{r3, r4, r5, lr}
 8001a22:	4d07      	ldr	r5, [pc, #28]	@ (8001a40 <_lseek_r+0x20>)
 8001a24:	4604      	mov	r4, r0
 8001a26:	4608      	mov	r0, r1
 8001a28:	4611      	mov	r1, r2
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	602a      	str	r2, [r5, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	f7fe ff26 	bl	8000880 <_lseek>
 8001a34:	1c43      	adds	r3, r0, #1
 8001a36:	d102      	bne.n	8001a3e <_lseek_r+0x1e>
 8001a38:	682b      	ldr	r3, [r5, #0]
 8001a3a:	b103      	cbz	r3, 8001a3e <_lseek_r+0x1e>
 8001a3c:	6023      	str	r3, [r4, #0]
 8001a3e:	bd38      	pop	{r3, r4, r5, pc}
 8001a40:	200001c8 	.word	0x200001c8

08001a44 <_read_r>:
 8001a44:	b538      	push	{r3, r4, r5, lr}
 8001a46:	4d07      	ldr	r5, [pc, #28]	@ (8001a64 <_read_r+0x20>)
 8001a48:	4604      	mov	r4, r0
 8001a4a:	4608      	mov	r0, r1
 8001a4c:	4611      	mov	r1, r2
 8001a4e:	2200      	movs	r2, #0
 8001a50:	602a      	str	r2, [r5, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	f7fe feb4 	bl	80007c0 <_read>
 8001a58:	1c43      	adds	r3, r0, #1
 8001a5a:	d102      	bne.n	8001a62 <_read_r+0x1e>
 8001a5c:	682b      	ldr	r3, [r5, #0]
 8001a5e:	b103      	cbz	r3, 8001a62 <_read_r+0x1e>
 8001a60:	6023      	str	r3, [r4, #0]
 8001a62:	bd38      	pop	{r3, r4, r5, pc}
 8001a64:	200001c8 	.word	0x200001c8

08001a68 <_write_r>:
 8001a68:	b538      	push	{r3, r4, r5, lr}
 8001a6a:	4d07      	ldr	r5, [pc, #28]	@ (8001a88 <_write_r+0x20>)
 8001a6c:	4604      	mov	r4, r0
 8001a6e:	4608      	mov	r0, r1
 8001a70:	4611      	mov	r1, r2
 8001a72:	2200      	movs	r2, #0
 8001a74:	602a      	str	r2, [r5, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	f7fe febf 	bl	80007fa <_write>
 8001a7c:	1c43      	adds	r3, r0, #1
 8001a7e:	d102      	bne.n	8001a86 <_write_r+0x1e>
 8001a80:	682b      	ldr	r3, [r5, #0]
 8001a82:	b103      	cbz	r3, 8001a86 <_write_r+0x1e>
 8001a84:	6023      	str	r3, [r4, #0]
 8001a86:	bd38      	pop	{r3, r4, r5, pc}
 8001a88:	200001c8 	.word	0x200001c8

08001a8c <__errno>:
 8001a8c:	4b01      	ldr	r3, [pc, #4]	@ (8001a94 <__errno+0x8>)
 8001a8e:	6818      	ldr	r0, [r3, #0]
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000018 	.word	0x20000018

08001a98 <__libc_init_array>:
 8001a98:	b570      	push	{r4, r5, r6, lr}
 8001a9a:	4d0d      	ldr	r5, [pc, #52]	@ (8001ad0 <__libc_init_array+0x38>)
 8001a9c:	4c0d      	ldr	r4, [pc, #52]	@ (8001ad4 <__libc_init_array+0x3c>)
 8001a9e:	1b64      	subs	r4, r4, r5
 8001aa0:	10a4      	asrs	r4, r4, #2
 8001aa2:	2600      	movs	r6, #0
 8001aa4:	42a6      	cmp	r6, r4
 8001aa6:	d109      	bne.n	8001abc <__libc_init_array+0x24>
 8001aa8:	4d0b      	ldr	r5, [pc, #44]	@ (8001ad8 <__libc_init_array+0x40>)
 8001aaa:	4c0c      	ldr	r4, [pc, #48]	@ (8001adc <__libc_init_array+0x44>)
 8001aac:	f000 fdb6 	bl	800261c <_init>
 8001ab0:	1b64      	subs	r4, r4, r5
 8001ab2:	10a4      	asrs	r4, r4, #2
 8001ab4:	2600      	movs	r6, #0
 8001ab6:	42a6      	cmp	r6, r4
 8001ab8:	d105      	bne.n	8001ac6 <__libc_init_array+0x2e>
 8001aba:	bd70      	pop	{r4, r5, r6, pc}
 8001abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ac0:	4798      	blx	r3
 8001ac2:	3601      	adds	r6, #1
 8001ac4:	e7ee      	b.n	8001aa4 <__libc_init_array+0xc>
 8001ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001aca:	4798      	blx	r3
 8001acc:	3601      	adds	r6, #1
 8001ace:	e7f2      	b.n	8001ab6 <__libc_init_array+0x1e>
 8001ad0:	080026a8 	.word	0x080026a8
 8001ad4:	080026a8 	.word	0x080026a8
 8001ad8:	080026a8 	.word	0x080026a8
 8001adc:	080026ac 	.word	0x080026ac

08001ae0 <__retarget_lock_init_recursive>:
 8001ae0:	4770      	bx	lr

08001ae2 <__retarget_lock_acquire_recursive>:
 8001ae2:	4770      	bx	lr

08001ae4 <__retarget_lock_release_recursive>:
 8001ae4:	4770      	bx	lr
	...

08001ae8 <_free_r>:
 8001ae8:	b538      	push	{r3, r4, r5, lr}
 8001aea:	4605      	mov	r5, r0
 8001aec:	2900      	cmp	r1, #0
 8001aee:	d041      	beq.n	8001b74 <_free_r+0x8c>
 8001af0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001af4:	1f0c      	subs	r4, r1, #4
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	bfb8      	it	lt
 8001afa:	18e4      	addlt	r4, r4, r3
 8001afc:	f000 f8e0 	bl	8001cc0 <__malloc_lock>
 8001b00:	4a1d      	ldr	r2, [pc, #116]	@ (8001b78 <_free_r+0x90>)
 8001b02:	6813      	ldr	r3, [r2, #0]
 8001b04:	b933      	cbnz	r3, 8001b14 <_free_r+0x2c>
 8001b06:	6063      	str	r3, [r4, #4]
 8001b08:	6014      	str	r4, [r2, #0]
 8001b0a:	4628      	mov	r0, r5
 8001b0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b10:	f000 b8dc 	b.w	8001ccc <__malloc_unlock>
 8001b14:	42a3      	cmp	r3, r4
 8001b16:	d908      	bls.n	8001b2a <_free_r+0x42>
 8001b18:	6820      	ldr	r0, [r4, #0]
 8001b1a:	1821      	adds	r1, r4, r0
 8001b1c:	428b      	cmp	r3, r1
 8001b1e:	bf01      	itttt	eq
 8001b20:	6819      	ldreq	r1, [r3, #0]
 8001b22:	685b      	ldreq	r3, [r3, #4]
 8001b24:	1809      	addeq	r1, r1, r0
 8001b26:	6021      	streq	r1, [r4, #0]
 8001b28:	e7ed      	b.n	8001b06 <_free_r+0x1e>
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	b10b      	cbz	r3, 8001b34 <_free_r+0x4c>
 8001b30:	42a3      	cmp	r3, r4
 8001b32:	d9fa      	bls.n	8001b2a <_free_r+0x42>
 8001b34:	6811      	ldr	r1, [r2, #0]
 8001b36:	1850      	adds	r0, r2, r1
 8001b38:	42a0      	cmp	r0, r4
 8001b3a:	d10b      	bne.n	8001b54 <_free_r+0x6c>
 8001b3c:	6820      	ldr	r0, [r4, #0]
 8001b3e:	4401      	add	r1, r0
 8001b40:	1850      	adds	r0, r2, r1
 8001b42:	4283      	cmp	r3, r0
 8001b44:	6011      	str	r1, [r2, #0]
 8001b46:	d1e0      	bne.n	8001b0a <_free_r+0x22>
 8001b48:	6818      	ldr	r0, [r3, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	6053      	str	r3, [r2, #4]
 8001b4e:	4408      	add	r0, r1
 8001b50:	6010      	str	r0, [r2, #0]
 8001b52:	e7da      	b.n	8001b0a <_free_r+0x22>
 8001b54:	d902      	bls.n	8001b5c <_free_r+0x74>
 8001b56:	230c      	movs	r3, #12
 8001b58:	602b      	str	r3, [r5, #0]
 8001b5a:	e7d6      	b.n	8001b0a <_free_r+0x22>
 8001b5c:	6820      	ldr	r0, [r4, #0]
 8001b5e:	1821      	adds	r1, r4, r0
 8001b60:	428b      	cmp	r3, r1
 8001b62:	bf04      	itt	eq
 8001b64:	6819      	ldreq	r1, [r3, #0]
 8001b66:	685b      	ldreq	r3, [r3, #4]
 8001b68:	6063      	str	r3, [r4, #4]
 8001b6a:	bf04      	itt	eq
 8001b6c:	1809      	addeq	r1, r1, r0
 8001b6e:	6021      	streq	r1, [r4, #0]
 8001b70:	6054      	str	r4, [r2, #4]
 8001b72:	e7ca      	b.n	8001b0a <_free_r+0x22>
 8001b74:	bd38      	pop	{r3, r4, r5, pc}
 8001b76:	bf00      	nop
 8001b78:	200001d4 	.word	0x200001d4

08001b7c <sbrk_aligned>:
 8001b7c:	b570      	push	{r4, r5, r6, lr}
 8001b7e:	4e0f      	ldr	r6, [pc, #60]	@ (8001bbc <sbrk_aligned+0x40>)
 8001b80:	460c      	mov	r4, r1
 8001b82:	6831      	ldr	r1, [r6, #0]
 8001b84:	4605      	mov	r5, r0
 8001b86:	b911      	cbnz	r1, 8001b8e <sbrk_aligned+0x12>
 8001b88:	f000 fcb4 	bl	80024f4 <_sbrk_r>
 8001b8c:	6030      	str	r0, [r6, #0]
 8001b8e:	4621      	mov	r1, r4
 8001b90:	4628      	mov	r0, r5
 8001b92:	f000 fcaf 	bl	80024f4 <_sbrk_r>
 8001b96:	1c43      	adds	r3, r0, #1
 8001b98:	d103      	bne.n	8001ba2 <sbrk_aligned+0x26>
 8001b9a:	f04f 34ff 	mov.w	r4, #4294967295
 8001b9e:	4620      	mov	r0, r4
 8001ba0:	bd70      	pop	{r4, r5, r6, pc}
 8001ba2:	1cc4      	adds	r4, r0, #3
 8001ba4:	f024 0403 	bic.w	r4, r4, #3
 8001ba8:	42a0      	cmp	r0, r4
 8001baa:	d0f8      	beq.n	8001b9e <sbrk_aligned+0x22>
 8001bac:	1a21      	subs	r1, r4, r0
 8001bae:	4628      	mov	r0, r5
 8001bb0:	f000 fca0 	bl	80024f4 <_sbrk_r>
 8001bb4:	3001      	adds	r0, #1
 8001bb6:	d1f2      	bne.n	8001b9e <sbrk_aligned+0x22>
 8001bb8:	e7ef      	b.n	8001b9a <sbrk_aligned+0x1e>
 8001bba:	bf00      	nop
 8001bbc:	200001d0 	.word	0x200001d0

08001bc0 <_malloc_r>:
 8001bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bc4:	1ccd      	adds	r5, r1, #3
 8001bc6:	f025 0503 	bic.w	r5, r5, #3
 8001bca:	3508      	adds	r5, #8
 8001bcc:	2d0c      	cmp	r5, #12
 8001bce:	bf38      	it	cc
 8001bd0:	250c      	movcc	r5, #12
 8001bd2:	2d00      	cmp	r5, #0
 8001bd4:	4606      	mov	r6, r0
 8001bd6:	db01      	blt.n	8001bdc <_malloc_r+0x1c>
 8001bd8:	42a9      	cmp	r1, r5
 8001bda:	d904      	bls.n	8001be6 <_malloc_r+0x26>
 8001bdc:	230c      	movs	r3, #12
 8001bde:	6033      	str	r3, [r6, #0]
 8001be0:	2000      	movs	r0, #0
 8001be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001be6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001cbc <_malloc_r+0xfc>
 8001bea:	f000 f869 	bl	8001cc0 <__malloc_lock>
 8001bee:	f8d8 3000 	ldr.w	r3, [r8]
 8001bf2:	461c      	mov	r4, r3
 8001bf4:	bb44      	cbnz	r4, 8001c48 <_malloc_r+0x88>
 8001bf6:	4629      	mov	r1, r5
 8001bf8:	4630      	mov	r0, r6
 8001bfa:	f7ff ffbf 	bl	8001b7c <sbrk_aligned>
 8001bfe:	1c43      	adds	r3, r0, #1
 8001c00:	4604      	mov	r4, r0
 8001c02:	d158      	bne.n	8001cb6 <_malloc_r+0xf6>
 8001c04:	f8d8 4000 	ldr.w	r4, [r8]
 8001c08:	4627      	mov	r7, r4
 8001c0a:	2f00      	cmp	r7, #0
 8001c0c:	d143      	bne.n	8001c96 <_malloc_r+0xd6>
 8001c0e:	2c00      	cmp	r4, #0
 8001c10:	d04b      	beq.n	8001caa <_malloc_r+0xea>
 8001c12:	6823      	ldr	r3, [r4, #0]
 8001c14:	4639      	mov	r1, r7
 8001c16:	4630      	mov	r0, r6
 8001c18:	eb04 0903 	add.w	r9, r4, r3
 8001c1c:	f000 fc6a 	bl	80024f4 <_sbrk_r>
 8001c20:	4581      	cmp	r9, r0
 8001c22:	d142      	bne.n	8001caa <_malloc_r+0xea>
 8001c24:	6821      	ldr	r1, [r4, #0]
 8001c26:	1a6d      	subs	r5, r5, r1
 8001c28:	4629      	mov	r1, r5
 8001c2a:	4630      	mov	r0, r6
 8001c2c:	f7ff ffa6 	bl	8001b7c <sbrk_aligned>
 8001c30:	3001      	adds	r0, #1
 8001c32:	d03a      	beq.n	8001caa <_malloc_r+0xea>
 8001c34:	6823      	ldr	r3, [r4, #0]
 8001c36:	442b      	add	r3, r5
 8001c38:	6023      	str	r3, [r4, #0]
 8001c3a:	f8d8 3000 	ldr.w	r3, [r8]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	bb62      	cbnz	r2, 8001c9c <_malloc_r+0xdc>
 8001c42:	f8c8 7000 	str.w	r7, [r8]
 8001c46:	e00f      	b.n	8001c68 <_malloc_r+0xa8>
 8001c48:	6822      	ldr	r2, [r4, #0]
 8001c4a:	1b52      	subs	r2, r2, r5
 8001c4c:	d420      	bmi.n	8001c90 <_malloc_r+0xd0>
 8001c4e:	2a0b      	cmp	r2, #11
 8001c50:	d917      	bls.n	8001c82 <_malloc_r+0xc2>
 8001c52:	1961      	adds	r1, r4, r5
 8001c54:	42a3      	cmp	r3, r4
 8001c56:	6025      	str	r5, [r4, #0]
 8001c58:	bf18      	it	ne
 8001c5a:	6059      	strne	r1, [r3, #4]
 8001c5c:	6863      	ldr	r3, [r4, #4]
 8001c5e:	bf08      	it	eq
 8001c60:	f8c8 1000 	streq.w	r1, [r8]
 8001c64:	5162      	str	r2, [r4, r5]
 8001c66:	604b      	str	r3, [r1, #4]
 8001c68:	4630      	mov	r0, r6
 8001c6a:	f000 f82f 	bl	8001ccc <__malloc_unlock>
 8001c6e:	f104 000b 	add.w	r0, r4, #11
 8001c72:	1d23      	adds	r3, r4, #4
 8001c74:	f020 0007 	bic.w	r0, r0, #7
 8001c78:	1ac2      	subs	r2, r0, r3
 8001c7a:	bf1c      	itt	ne
 8001c7c:	1a1b      	subne	r3, r3, r0
 8001c7e:	50a3      	strne	r3, [r4, r2]
 8001c80:	e7af      	b.n	8001be2 <_malloc_r+0x22>
 8001c82:	6862      	ldr	r2, [r4, #4]
 8001c84:	42a3      	cmp	r3, r4
 8001c86:	bf0c      	ite	eq
 8001c88:	f8c8 2000 	streq.w	r2, [r8]
 8001c8c:	605a      	strne	r2, [r3, #4]
 8001c8e:	e7eb      	b.n	8001c68 <_malloc_r+0xa8>
 8001c90:	4623      	mov	r3, r4
 8001c92:	6864      	ldr	r4, [r4, #4]
 8001c94:	e7ae      	b.n	8001bf4 <_malloc_r+0x34>
 8001c96:	463c      	mov	r4, r7
 8001c98:	687f      	ldr	r7, [r7, #4]
 8001c9a:	e7b6      	b.n	8001c0a <_malloc_r+0x4a>
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	42a3      	cmp	r3, r4
 8001ca2:	d1fb      	bne.n	8001c9c <_malloc_r+0xdc>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	6053      	str	r3, [r2, #4]
 8001ca8:	e7de      	b.n	8001c68 <_malloc_r+0xa8>
 8001caa:	230c      	movs	r3, #12
 8001cac:	6033      	str	r3, [r6, #0]
 8001cae:	4630      	mov	r0, r6
 8001cb0:	f000 f80c 	bl	8001ccc <__malloc_unlock>
 8001cb4:	e794      	b.n	8001be0 <_malloc_r+0x20>
 8001cb6:	6005      	str	r5, [r0, #0]
 8001cb8:	e7d6      	b.n	8001c68 <_malloc_r+0xa8>
 8001cba:	bf00      	nop
 8001cbc:	200001d4 	.word	0x200001d4

08001cc0 <__malloc_lock>:
 8001cc0:	4801      	ldr	r0, [pc, #4]	@ (8001cc8 <__malloc_lock+0x8>)
 8001cc2:	f7ff bf0e 	b.w	8001ae2 <__retarget_lock_acquire_recursive>
 8001cc6:	bf00      	nop
 8001cc8:	200001cc 	.word	0x200001cc

08001ccc <__malloc_unlock>:
 8001ccc:	4801      	ldr	r0, [pc, #4]	@ (8001cd4 <__malloc_unlock+0x8>)
 8001cce:	f7ff bf09 	b.w	8001ae4 <__retarget_lock_release_recursive>
 8001cd2:	bf00      	nop
 8001cd4:	200001cc 	.word	0x200001cc

08001cd8 <__sfputc_r>:
 8001cd8:	6893      	ldr	r3, [r2, #8]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	b410      	push	{r4}
 8001ce0:	6093      	str	r3, [r2, #8]
 8001ce2:	da08      	bge.n	8001cf6 <__sfputc_r+0x1e>
 8001ce4:	6994      	ldr	r4, [r2, #24]
 8001ce6:	42a3      	cmp	r3, r4
 8001ce8:	db01      	blt.n	8001cee <__sfputc_r+0x16>
 8001cea:	290a      	cmp	r1, #10
 8001cec:	d103      	bne.n	8001cf6 <__sfputc_r+0x1e>
 8001cee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001cf2:	f000 bb6b 	b.w	80023cc <__swbuf_r>
 8001cf6:	6813      	ldr	r3, [r2, #0]
 8001cf8:	1c58      	adds	r0, r3, #1
 8001cfa:	6010      	str	r0, [r2, #0]
 8001cfc:	7019      	strb	r1, [r3, #0]
 8001cfe:	4608      	mov	r0, r1
 8001d00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <__sfputs_r>:
 8001d06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d08:	4606      	mov	r6, r0
 8001d0a:	460f      	mov	r7, r1
 8001d0c:	4614      	mov	r4, r2
 8001d0e:	18d5      	adds	r5, r2, r3
 8001d10:	42ac      	cmp	r4, r5
 8001d12:	d101      	bne.n	8001d18 <__sfputs_r+0x12>
 8001d14:	2000      	movs	r0, #0
 8001d16:	e007      	b.n	8001d28 <__sfputs_r+0x22>
 8001d18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d1c:	463a      	mov	r2, r7
 8001d1e:	4630      	mov	r0, r6
 8001d20:	f7ff ffda 	bl	8001cd8 <__sfputc_r>
 8001d24:	1c43      	adds	r3, r0, #1
 8001d26:	d1f3      	bne.n	8001d10 <__sfputs_r+0xa>
 8001d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001d2c <_vfiprintf_r>:
 8001d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d30:	460d      	mov	r5, r1
 8001d32:	b09d      	sub	sp, #116	@ 0x74
 8001d34:	4614      	mov	r4, r2
 8001d36:	4698      	mov	r8, r3
 8001d38:	4606      	mov	r6, r0
 8001d3a:	b118      	cbz	r0, 8001d44 <_vfiprintf_r+0x18>
 8001d3c:	6a03      	ldr	r3, [r0, #32]
 8001d3e:	b90b      	cbnz	r3, 8001d44 <_vfiprintf_r+0x18>
 8001d40:	f7ff fdca 	bl	80018d8 <__sinit>
 8001d44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001d46:	07d9      	lsls	r1, r3, #31
 8001d48:	d405      	bmi.n	8001d56 <_vfiprintf_r+0x2a>
 8001d4a:	89ab      	ldrh	r3, [r5, #12]
 8001d4c:	059a      	lsls	r2, r3, #22
 8001d4e:	d402      	bmi.n	8001d56 <_vfiprintf_r+0x2a>
 8001d50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001d52:	f7ff fec6 	bl	8001ae2 <__retarget_lock_acquire_recursive>
 8001d56:	89ab      	ldrh	r3, [r5, #12]
 8001d58:	071b      	lsls	r3, r3, #28
 8001d5a:	d501      	bpl.n	8001d60 <_vfiprintf_r+0x34>
 8001d5c:	692b      	ldr	r3, [r5, #16]
 8001d5e:	b99b      	cbnz	r3, 8001d88 <_vfiprintf_r+0x5c>
 8001d60:	4629      	mov	r1, r5
 8001d62:	4630      	mov	r0, r6
 8001d64:	f000 fb70 	bl	8002448 <__swsetup_r>
 8001d68:	b170      	cbz	r0, 8001d88 <_vfiprintf_r+0x5c>
 8001d6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001d6c:	07dc      	lsls	r4, r3, #31
 8001d6e:	d504      	bpl.n	8001d7a <_vfiprintf_r+0x4e>
 8001d70:	f04f 30ff 	mov.w	r0, #4294967295
 8001d74:	b01d      	add	sp, #116	@ 0x74
 8001d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d7a:	89ab      	ldrh	r3, [r5, #12]
 8001d7c:	0598      	lsls	r0, r3, #22
 8001d7e:	d4f7      	bmi.n	8001d70 <_vfiprintf_r+0x44>
 8001d80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001d82:	f7ff feaf 	bl	8001ae4 <__retarget_lock_release_recursive>
 8001d86:	e7f3      	b.n	8001d70 <_vfiprintf_r+0x44>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8001d8c:	2320      	movs	r3, #32
 8001d8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001d92:	f8cd 800c 	str.w	r8, [sp, #12]
 8001d96:	2330      	movs	r3, #48	@ 0x30
 8001d98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001f48 <_vfiprintf_r+0x21c>
 8001d9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001da0:	f04f 0901 	mov.w	r9, #1
 8001da4:	4623      	mov	r3, r4
 8001da6:	469a      	mov	sl, r3
 8001da8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001dac:	b10a      	cbz	r2, 8001db2 <_vfiprintf_r+0x86>
 8001dae:	2a25      	cmp	r2, #37	@ 0x25
 8001db0:	d1f9      	bne.n	8001da6 <_vfiprintf_r+0x7a>
 8001db2:	ebba 0b04 	subs.w	fp, sl, r4
 8001db6:	d00b      	beq.n	8001dd0 <_vfiprintf_r+0xa4>
 8001db8:	465b      	mov	r3, fp
 8001dba:	4622      	mov	r2, r4
 8001dbc:	4629      	mov	r1, r5
 8001dbe:	4630      	mov	r0, r6
 8001dc0:	f7ff ffa1 	bl	8001d06 <__sfputs_r>
 8001dc4:	3001      	adds	r0, #1
 8001dc6:	f000 80a7 	beq.w	8001f18 <_vfiprintf_r+0x1ec>
 8001dca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001dcc:	445a      	add	r2, fp
 8001dce:	9209      	str	r2, [sp, #36]	@ 0x24
 8001dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 809f 	beq.w	8001f18 <_vfiprintf_r+0x1ec>
 8001dda:	2300      	movs	r3, #0
 8001ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8001de0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001de4:	f10a 0a01 	add.w	sl, sl, #1
 8001de8:	9304      	str	r3, [sp, #16]
 8001dea:	9307      	str	r3, [sp, #28]
 8001dec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001df0:	931a      	str	r3, [sp, #104]	@ 0x68
 8001df2:	4654      	mov	r4, sl
 8001df4:	2205      	movs	r2, #5
 8001df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001dfa:	4853      	ldr	r0, [pc, #332]	@ (8001f48 <_vfiprintf_r+0x21c>)
 8001dfc:	f7fe f9f0 	bl	80001e0 <memchr>
 8001e00:	9a04      	ldr	r2, [sp, #16]
 8001e02:	b9d8      	cbnz	r0, 8001e3c <_vfiprintf_r+0x110>
 8001e04:	06d1      	lsls	r1, r2, #27
 8001e06:	bf44      	itt	mi
 8001e08:	2320      	movmi	r3, #32
 8001e0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001e0e:	0713      	lsls	r3, r2, #28
 8001e10:	bf44      	itt	mi
 8001e12:	232b      	movmi	r3, #43	@ 0x2b
 8001e14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001e18:	f89a 3000 	ldrb.w	r3, [sl]
 8001e1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8001e1e:	d015      	beq.n	8001e4c <_vfiprintf_r+0x120>
 8001e20:	9a07      	ldr	r2, [sp, #28]
 8001e22:	4654      	mov	r4, sl
 8001e24:	2000      	movs	r0, #0
 8001e26:	f04f 0c0a 	mov.w	ip, #10
 8001e2a:	4621      	mov	r1, r4
 8001e2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001e30:	3b30      	subs	r3, #48	@ 0x30
 8001e32:	2b09      	cmp	r3, #9
 8001e34:	d94b      	bls.n	8001ece <_vfiprintf_r+0x1a2>
 8001e36:	b1b0      	cbz	r0, 8001e66 <_vfiprintf_r+0x13a>
 8001e38:	9207      	str	r2, [sp, #28]
 8001e3a:	e014      	b.n	8001e66 <_vfiprintf_r+0x13a>
 8001e3c:	eba0 0308 	sub.w	r3, r0, r8
 8001e40:	fa09 f303 	lsl.w	r3, r9, r3
 8001e44:	4313      	orrs	r3, r2
 8001e46:	9304      	str	r3, [sp, #16]
 8001e48:	46a2      	mov	sl, r4
 8001e4a:	e7d2      	b.n	8001df2 <_vfiprintf_r+0xc6>
 8001e4c:	9b03      	ldr	r3, [sp, #12]
 8001e4e:	1d19      	adds	r1, r3, #4
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	9103      	str	r1, [sp, #12]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	bfbb      	ittet	lt
 8001e58:	425b      	neglt	r3, r3
 8001e5a:	f042 0202 	orrlt.w	r2, r2, #2
 8001e5e:	9307      	strge	r3, [sp, #28]
 8001e60:	9307      	strlt	r3, [sp, #28]
 8001e62:	bfb8      	it	lt
 8001e64:	9204      	strlt	r2, [sp, #16]
 8001e66:	7823      	ldrb	r3, [r4, #0]
 8001e68:	2b2e      	cmp	r3, #46	@ 0x2e
 8001e6a:	d10a      	bne.n	8001e82 <_vfiprintf_r+0x156>
 8001e6c:	7863      	ldrb	r3, [r4, #1]
 8001e6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001e70:	d132      	bne.n	8001ed8 <_vfiprintf_r+0x1ac>
 8001e72:	9b03      	ldr	r3, [sp, #12]
 8001e74:	1d1a      	adds	r2, r3, #4
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	9203      	str	r2, [sp, #12]
 8001e7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001e7e:	3402      	adds	r4, #2
 8001e80:	9305      	str	r3, [sp, #20]
 8001e82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001f58 <_vfiprintf_r+0x22c>
 8001e86:	7821      	ldrb	r1, [r4, #0]
 8001e88:	2203      	movs	r2, #3
 8001e8a:	4650      	mov	r0, sl
 8001e8c:	f7fe f9a8 	bl	80001e0 <memchr>
 8001e90:	b138      	cbz	r0, 8001ea2 <_vfiprintf_r+0x176>
 8001e92:	9b04      	ldr	r3, [sp, #16]
 8001e94:	eba0 000a 	sub.w	r0, r0, sl
 8001e98:	2240      	movs	r2, #64	@ 0x40
 8001e9a:	4082      	lsls	r2, r0
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	3401      	adds	r4, #1
 8001ea0:	9304      	str	r3, [sp, #16]
 8001ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ea6:	4829      	ldr	r0, [pc, #164]	@ (8001f4c <_vfiprintf_r+0x220>)
 8001ea8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001eac:	2206      	movs	r2, #6
 8001eae:	f7fe f997 	bl	80001e0 <memchr>
 8001eb2:	2800      	cmp	r0, #0
 8001eb4:	d03f      	beq.n	8001f36 <_vfiprintf_r+0x20a>
 8001eb6:	4b26      	ldr	r3, [pc, #152]	@ (8001f50 <_vfiprintf_r+0x224>)
 8001eb8:	bb1b      	cbnz	r3, 8001f02 <_vfiprintf_r+0x1d6>
 8001eba:	9b03      	ldr	r3, [sp, #12]
 8001ebc:	3307      	adds	r3, #7
 8001ebe:	f023 0307 	bic.w	r3, r3, #7
 8001ec2:	3308      	adds	r3, #8
 8001ec4:	9303      	str	r3, [sp, #12]
 8001ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001ec8:	443b      	add	r3, r7
 8001eca:	9309      	str	r3, [sp, #36]	@ 0x24
 8001ecc:	e76a      	b.n	8001da4 <_vfiprintf_r+0x78>
 8001ece:	fb0c 3202 	mla	r2, ip, r2, r3
 8001ed2:	460c      	mov	r4, r1
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	e7a8      	b.n	8001e2a <_vfiprintf_r+0xfe>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	3401      	adds	r4, #1
 8001edc:	9305      	str	r3, [sp, #20]
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f04f 0c0a 	mov.w	ip, #10
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001eea:	3a30      	subs	r2, #48	@ 0x30
 8001eec:	2a09      	cmp	r2, #9
 8001eee:	d903      	bls.n	8001ef8 <_vfiprintf_r+0x1cc>
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0c6      	beq.n	8001e82 <_vfiprintf_r+0x156>
 8001ef4:	9105      	str	r1, [sp, #20]
 8001ef6:	e7c4      	b.n	8001e82 <_vfiprintf_r+0x156>
 8001ef8:	fb0c 2101 	mla	r1, ip, r1, r2
 8001efc:	4604      	mov	r4, r0
 8001efe:	2301      	movs	r3, #1
 8001f00:	e7f0      	b.n	8001ee4 <_vfiprintf_r+0x1b8>
 8001f02:	ab03      	add	r3, sp, #12
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	462a      	mov	r2, r5
 8001f08:	4b12      	ldr	r3, [pc, #72]	@ (8001f54 <_vfiprintf_r+0x228>)
 8001f0a:	a904      	add	r1, sp, #16
 8001f0c:	4630      	mov	r0, r6
 8001f0e:	f3af 8000 	nop.w
 8001f12:	4607      	mov	r7, r0
 8001f14:	1c78      	adds	r0, r7, #1
 8001f16:	d1d6      	bne.n	8001ec6 <_vfiprintf_r+0x19a>
 8001f18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001f1a:	07d9      	lsls	r1, r3, #31
 8001f1c:	d405      	bmi.n	8001f2a <_vfiprintf_r+0x1fe>
 8001f1e:	89ab      	ldrh	r3, [r5, #12]
 8001f20:	059a      	lsls	r2, r3, #22
 8001f22:	d402      	bmi.n	8001f2a <_vfiprintf_r+0x1fe>
 8001f24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001f26:	f7ff fddd 	bl	8001ae4 <__retarget_lock_release_recursive>
 8001f2a:	89ab      	ldrh	r3, [r5, #12]
 8001f2c:	065b      	lsls	r3, r3, #25
 8001f2e:	f53f af1f 	bmi.w	8001d70 <_vfiprintf_r+0x44>
 8001f32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001f34:	e71e      	b.n	8001d74 <_vfiprintf_r+0x48>
 8001f36:	ab03      	add	r3, sp, #12
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	462a      	mov	r2, r5
 8001f3c:	4b05      	ldr	r3, [pc, #20]	@ (8001f54 <_vfiprintf_r+0x228>)
 8001f3e:	a904      	add	r1, sp, #16
 8001f40:	4630      	mov	r0, r6
 8001f42:	f000 f879 	bl	8002038 <_printf_i>
 8001f46:	e7e4      	b.n	8001f12 <_vfiprintf_r+0x1e6>
 8001f48:	0800266c 	.word	0x0800266c
 8001f4c:	08002676 	.word	0x08002676
 8001f50:	00000000 	.word	0x00000000
 8001f54:	08001d07 	.word	0x08001d07
 8001f58:	08002672 	.word	0x08002672

08001f5c <_printf_common>:
 8001f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f60:	4616      	mov	r6, r2
 8001f62:	4698      	mov	r8, r3
 8001f64:	688a      	ldr	r2, [r1, #8]
 8001f66:	690b      	ldr	r3, [r1, #16]
 8001f68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	bfb8      	it	lt
 8001f70:	4613      	movlt	r3, r2
 8001f72:	6033      	str	r3, [r6, #0]
 8001f74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001f78:	4607      	mov	r7, r0
 8001f7a:	460c      	mov	r4, r1
 8001f7c:	b10a      	cbz	r2, 8001f82 <_printf_common+0x26>
 8001f7e:	3301      	adds	r3, #1
 8001f80:	6033      	str	r3, [r6, #0]
 8001f82:	6823      	ldr	r3, [r4, #0]
 8001f84:	0699      	lsls	r1, r3, #26
 8001f86:	bf42      	ittt	mi
 8001f88:	6833      	ldrmi	r3, [r6, #0]
 8001f8a:	3302      	addmi	r3, #2
 8001f8c:	6033      	strmi	r3, [r6, #0]
 8001f8e:	6825      	ldr	r5, [r4, #0]
 8001f90:	f015 0506 	ands.w	r5, r5, #6
 8001f94:	d106      	bne.n	8001fa4 <_printf_common+0x48>
 8001f96:	f104 0a19 	add.w	sl, r4, #25
 8001f9a:	68e3      	ldr	r3, [r4, #12]
 8001f9c:	6832      	ldr	r2, [r6, #0]
 8001f9e:	1a9b      	subs	r3, r3, r2
 8001fa0:	42ab      	cmp	r3, r5
 8001fa2:	dc26      	bgt.n	8001ff2 <_printf_common+0x96>
 8001fa4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001fa8:	6822      	ldr	r2, [r4, #0]
 8001faa:	3b00      	subs	r3, #0
 8001fac:	bf18      	it	ne
 8001fae:	2301      	movne	r3, #1
 8001fb0:	0692      	lsls	r2, r2, #26
 8001fb2:	d42b      	bmi.n	800200c <_printf_common+0xb0>
 8001fb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001fb8:	4641      	mov	r1, r8
 8001fba:	4638      	mov	r0, r7
 8001fbc:	47c8      	blx	r9
 8001fbe:	3001      	adds	r0, #1
 8001fc0:	d01e      	beq.n	8002000 <_printf_common+0xa4>
 8001fc2:	6823      	ldr	r3, [r4, #0]
 8001fc4:	6922      	ldr	r2, [r4, #16]
 8001fc6:	f003 0306 	and.w	r3, r3, #6
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	bf02      	ittt	eq
 8001fce:	68e5      	ldreq	r5, [r4, #12]
 8001fd0:	6833      	ldreq	r3, [r6, #0]
 8001fd2:	1aed      	subeq	r5, r5, r3
 8001fd4:	68a3      	ldr	r3, [r4, #8]
 8001fd6:	bf0c      	ite	eq
 8001fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001fdc:	2500      	movne	r5, #0
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	bfc4      	itt	gt
 8001fe2:	1a9b      	subgt	r3, r3, r2
 8001fe4:	18ed      	addgt	r5, r5, r3
 8001fe6:	2600      	movs	r6, #0
 8001fe8:	341a      	adds	r4, #26
 8001fea:	42b5      	cmp	r5, r6
 8001fec:	d11a      	bne.n	8002024 <_printf_common+0xc8>
 8001fee:	2000      	movs	r0, #0
 8001ff0:	e008      	b.n	8002004 <_printf_common+0xa8>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	4652      	mov	r2, sl
 8001ff6:	4641      	mov	r1, r8
 8001ff8:	4638      	mov	r0, r7
 8001ffa:	47c8      	blx	r9
 8001ffc:	3001      	adds	r0, #1
 8001ffe:	d103      	bne.n	8002008 <_printf_common+0xac>
 8002000:	f04f 30ff 	mov.w	r0, #4294967295
 8002004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002008:	3501      	adds	r5, #1
 800200a:	e7c6      	b.n	8001f9a <_printf_common+0x3e>
 800200c:	18e1      	adds	r1, r4, r3
 800200e:	1c5a      	adds	r2, r3, #1
 8002010:	2030      	movs	r0, #48	@ 0x30
 8002012:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002016:	4422      	add	r2, r4
 8002018:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800201c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002020:	3302      	adds	r3, #2
 8002022:	e7c7      	b.n	8001fb4 <_printf_common+0x58>
 8002024:	2301      	movs	r3, #1
 8002026:	4622      	mov	r2, r4
 8002028:	4641      	mov	r1, r8
 800202a:	4638      	mov	r0, r7
 800202c:	47c8      	blx	r9
 800202e:	3001      	adds	r0, #1
 8002030:	d0e6      	beq.n	8002000 <_printf_common+0xa4>
 8002032:	3601      	adds	r6, #1
 8002034:	e7d9      	b.n	8001fea <_printf_common+0x8e>
	...

08002038 <_printf_i>:
 8002038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800203c:	7e0f      	ldrb	r7, [r1, #24]
 800203e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002040:	2f78      	cmp	r7, #120	@ 0x78
 8002042:	4691      	mov	r9, r2
 8002044:	4680      	mov	r8, r0
 8002046:	460c      	mov	r4, r1
 8002048:	469a      	mov	sl, r3
 800204a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800204e:	d807      	bhi.n	8002060 <_printf_i+0x28>
 8002050:	2f62      	cmp	r7, #98	@ 0x62
 8002052:	d80a      	bhi.n	800206a <_printf_i+0x32>
 8002054:	2f00      	cmp	r7, #0
 8002056:	f000 80d1 	beq.w	80021fc <_printf_i+0x1c4>
 800205a:	2f58      	cmp	r7, #88	@ 0x58
 800205c:	f000 80b8 	beq.w	80021d0 <_printf_i+0x198>
 8002060:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002064:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002068:	e03a      	b.n	80020e0 <_printf_i+0xa8>
 800206a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800206e:	2b15      	cmp	r3, #21
 8002070:	d8f6      	bhi.n	8002060 <_printf_i+0x28>
 8002072:	a101      	add	r1, pc, #4	@ (adr r1, 8002078 <_printf_i+0x40>)
 8002074:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002078:	080020d1 	.word	0x080020d1
 800207c:	080020e5 	.word	0x080020e5
 8002080:	08002061 	.word	0x08002061
 8002084:	08002061 	.word	0x08002061
 8002088:	08002061 	.word	0x08002061
 800208c:	08002061 	.word	0x08002061
 8002090:	080020e5 	.word	0x080020e5
 8002094:	08002061 	.word	0x08002061
 8002098:	08002061 	.word	0x08002061
 800209c:	08002061 	.word	0x08002061
 80020a0:	08002061 	.word	0x08002061
 80020a4:	080021e3 	.word	0x080021e3
 80020a8:	0800210f 	.word	0x0800210f
 80020ac:	0800219d 	.word	0x0800219d
 80020b0:	08002061 	.word	0x08002061
 80020b4:	08002061 	.word	0x08002061
 80020b8:	08002205 	.word	0x08002205
 80020bc:	08002061 	.word	0x08002061
 80020c0:	0800210f 	.word	0x0800210f
 80020c4:	08002061 	.word	0x08002061
 80020c8:	08002061 	.word	0x08002061
 80020cc:	080021a5 	.word	0x080021a5
 80020d0:	6833      	ldr	r3, [r6, #0]
 80020d2:	1d1a      	adds	r2, r3, #4
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6032      	str	r2, [r6, #0]
 80020d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80020dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80020e0:	2301      	movs	r3, #1
 80020e2:	e09c      	b.n	800221e <_printf_i+0x1e6>
 80020e4:	6833      	ldr	r3, [r6, #0]
 80020e6:	6820      	ldr	r0, [r4, #0]
 80020e8:	1d19      	adds	r1, r3, #4
 80020ea:	6031      	str	r1, [r6, #0]
 80020ec:	0606      	lsls	r6, r0, #24
 80020ee:	d501      	bpl.n	80020f4 <_printf_i+0xbc>
 80020f0:	681d      	ldr	r5, [r3, #0]
 80020f2:	e003      	b.n	80020fc <_printf_i+0xc4>
 80020f4:	0645      	lsls	r5, r0, #25
 80020f6:	d5fb      	bpl.n	80020f0 <_printf_i+0xb8>
 80020f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80020fc:	2d00      	cmp	r5, #0
 80020fe:	da03      	bge.n	8002108 <_printf_i+0xd0>
 8002100:	232d      	movs	r3, #45	@ 0x2d
 8002102:	426d      	negs	r5, r5
 8002104:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002108:	4858      	ldr	r0, [pc, #352]	@ (800226c <_printf_i+0x234>)
 800210a:	230a      	movs	r3, #10
 800210c:	e011      	b.n	8002132 <_printf_i+0xfa>
 800210e:	6821      	ldr	r1, [r4, #0]
 8002110:	6833      	ldr	r3, [r6, #0]
 8002112:	0608      	lsls	r0, r1, #24
 8002114:	f853 5b04 	ldr.w	r5, [r3], #4
 8002118:	d402      	bmi.n	8002120 <_printf_i+0xe8>
 800211a:	0649      	lsls	r1, r1, #25
 800211c:	bf48      	it	mi
 800211e:	b2ad      	uxthmi	r5, r5
 8002120:	2f6f      	cmp	r7, #111	@ 0x6f
 8002122:	4852      	ldr	r0, [pc, #328]	@ (800226c <_printf_i+0x234>)
 8002124:	6033      	str	r3, [r6, #0]
 8002126:	bf14      	ite	ne
 8002128:	230a      	movne	r3, #10
 800212a:	2308      	moveq	r3, #8
 800212c:	2100      	movs	r1, #0
 800212e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002132:	6866      	ldr	r6, [r4, #4]
 8002134:	60a6      	str	r6, [r4, #8]
 8002136:	2e00      	cmp	r6, #0
 8002138:	db05      	blt.n	8002146 <_printf_i+0x10e>
 800213a:	6821      	ldr	r1, [r4, #0]
 800213c:	432e      	orrs	r6, r5
 800213e:	f021 0104 	bic.w	r1, r1, #4
 8002142:	6021      	str	r1, [r4, #0]
 8002144:	d04b      	beq.n	80021de <_printf_i+0x1a6>
 8002146:	4616      	mov	r6, r2
 8002148:	fbb5 f1f3 	udiv	r1, r5, r3
 800214c:	fb03 5711 	mls	r7, r3, r1, r5
 8002150:	5dc7      	ldrb	r7, [r0, r7]
 8002152:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002156:	462f      	mov	r7, r5
 8002158:	42bb      	cmp	r3, r7
 800215a:	460d      	mov	r5, r1
 800215c:	d9f4      	bls.n	8002148 <_printf_i+0x110>
 800215e:	2b08      	cmp	r3, #8
 8002160:	d10b      	bne.n	800217a <_printf_i+0x142>
 8002162:	6823      	ldr	r3, [r4, #0]
 8002164:	07df      	lsls	r7, r3, #31
 8002166:	d508      	bpl.n	800217a <_printf_i+0x142>
 8002168:	6923      	ldr	r3, [r4, #16]
 800216a:	6861      	ldr	r1, [r4, #4]
 800216c:	4299      	cmp	r1, r3
 800216e:	bfde      	ittt	le
 8002170:	2330      	movle	r3, #48	@ 0x30
 8002172:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002176:	f106 36ff 	addle.w	r6, r6, #4294967295
 800217a:	1b92      	subs	r2, r2, r6
 800217c:	6122      	str	r2, [r4, #16]
 800217e:	f8cd a000 	str.w	sl, [sp]
 8002182:	464b      	mov	r3, r9
 8002184:	aa03      	add	r2, sp, #12
 8002186:	4621      	mov	r1, r4
 8002188:	4640      	mov	r0, r8
 800218a:	f7ff fee7 	bl	8001f5c <_printf_common>
 800218e:	3001      	adds	r0, #1
 8002190:	d14a      	bne.n	8002228 <_printf_i+0x1f0>
 8002192:	f04f 30ff 	mov.w	r0, #4294967295
 8002196:	b004      	add	sp, #16
 8002198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800219c:	6823      	ldr	r3, [r4, #0]
 800219e:	f043 0320 	orr.w	r3, r3, #32
 80021a2:	6023      	str	r3, [r4, #0]
 80021a4:	4832      	ldr	r0, [pc, #200]	@ (8002270 <_printf_i+0x238>)
 80021a6:	2778      	movs	r7, #120	@ 0x78
 80021a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80021ac:	6823      	ldr	r3, [r4, #0]
 80021ae:	6831      	ldr	r1, [r6, #0]
 80021b0:	061f      	lsls	r7, r3, #24
 80021b2:	f851 5b04 	ldr.w	r5, [r1], #4
 80021b6:	d402      	bmi.n	80021be <_printf_i+0x186>
 80021b8:	065f      	lsls	r7, r3, #25
 80021ba:	bf48      	it	mi
 80021bc:	b2ad      	uxthmi	r5, r5
 80021be:	6031      	str	r1, [r6, #0]
 80021c0:	07d9      	lsls	r1, r3, #31
 80021c2:	bf44      	itt	mi
 80021c4:	f043 0320 	orrmi.w	r3, r3, #32
 80021c8:	6023      	strmi	r3, [r4, #0]
 80021ca:	b11d      	cbz	r5, 80021d4 <_printf_i+0x19c>
 80021cc:	2310      	movs	r3, #16
 80021ce:	e7ad      	b.n	800212c <_printf_i+0xf4>
 80021d0:	4826      	ldr	r0, [pc, #152]	@ (800226c <_printf_i+0x234>)
 80021d2:	e7e9      	b.n	80021a8 <_printf_i+0x170>
 80021d4:	6823      	ldr	r3, [r4, #0]
 80021d6:	f023 0320 	bic.w	r3, r3, #32
 80021da:	6023      	str	r3, [r4, #0]
 80021dc:	e7f6      	b.n	80021cc <_printf_i+0x194>
 80021de:	4616      	mov	r6, r2
 80021e0:	e7bd      	b.n	800215e <_printf_i+0x126>
 80021e2:	6833      	ldr	r3, [r6, #0]
 80021e4:	6825      	ldr	r5, [r4, #0]
 80021e6:	6961      	ldr	r1, [r4, #20]
 80021e8:	1d18      	adds	r0, r3, #4
 80021ea:	6030      	str	r0, [r6, #0]
 80021ec:	062e      	lsls	r6, r5, #24
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	d501      	bpl.n	80021f6 <_printf_i+0x1be>
 80021f2:	6019      	str	r1, [r3, #0]
 80021f4:	e002      	b.n	80021fc <_printf_i+0x1c4>
 80021f6:	0668      	lsls	r0, r5, #25
 80021f8:	d5fb      	bpl.n	80021f2 <_printf_i+0x1ba>
 80021fa:	8019      	strh	r1, [r3, #0]
 80021fc:	2300      	movs	r3, #0
 80021fe:	6123      	str	r3, [r4, #16]
 8002200:	4616      	mov	r6, r2
 8002202:	e7bc      	b.n	800217e <_printf_i+0x146>
 8002204:	6833      	ldr	r3, [r6, #0]
 8002206:	1d1a      	adds	r2, r3, #4
 8002208:	6032      	str	r2, [r6, #0]
 800220a:	681e      	ldr	r6, [r3, #0]
 800220c:	6862      	ldr	r2, [r4, #4]
 800220e:	2100      	movs	r1, #0
 8002210:	4630      	mov	r0, r6
 8002212:	f7fd ffe5 	bl	80001e0 <memchr>
 8002216:	b108      	cbz	r0, 800221c <_printf_i+0x1e4>
 8002218:	1b80      	subs	r0, r0, r6
 800221a:	6060      	str	r0, [r4, #4]
 800221c:	6863      	ldr	r3, [r4, #4]
 800221e:	6123      	str	r3, [r4, #16]
 8002220:	2300      	movs	r3, #0
 8002222:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002226:	e7aa      	b.n	800217e <_printf_i+0x146>
 8002228:	6923      	ldr	r3, [r4, #16]
 800222a:	4632      	mov	r2, r6
 800222c:	4649      	mov	r1, r9
 800222e:	4640      	mov	r0, r8
 8002230:	47d0      	blx	sl
 8002232:	3001      	adds	r0, #1
 8002234:	d0ad      	beq.n	8002192 <_printf_i+0x15a>
 8002236:	6823      	ldr	r3, [r4, #0]
 8002238:	079b      	lsls	r3, r3, #30
 800223a:	d413      	bmi.n	8002264 <_printf_i+0x22c>
 800223c:	68e0      	ldr	r0, [r4, #12]
 800223e:	9b03      	ldr	r3, [sp, #12]
 8002240:	4298      	cmp	r0, r3
 8002242:	bfb8      	it	lt
 8002244:	4618      	movlt	r0, r3
 8002246:	e7a6      	b.n	8002196 <_printf_i+0x15e>
 8002248:	2301      	movs	r3, #1
 800224a:	4632      	mov	r2, r6
 800224c:	4649      	mov	r1, r9
 800224e:	4640      	mov	r0, r8
 8002250:	47d0      	blx	sl
 8002252:	3001      	adds	r0, #1
 8002254:	d09d      	beq.n	8002192 <_printf_i+0x15a>
 8002256:	3501      	adds	r5, #1
 8002258:	68e3      	ldr	r3, [r4, #12]
 800225a:	9903      	ldr	r1, [sp, #12]
 800225c:	1a5b      	subs	r3, r3, r1
 800225e:	42ab      	cmp	r3, r5
 8002260:	dcf2      	bgt.n	8002248 <_printf_i+0x210>
 8002262:	e7eb      	b.n	800223c <_printf_i+0x204>
 8002264:	2500      	movs	r5, #0
 8002266:	f104 0619 	add.w	r6, r4, #25
 800226a:	e7f5      	b.n	8002258 <_printf_i+0x220>
 800226c:	0800267d 	.word	0x0800267d
 8002270:	0800268e 	.word	0x0800268e

08002274 <__sflush_r>:
 8002274:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800227c:	0716      	lsls	r6, r2, #28
 800227e:	4605      	mov	r5, r0
 8002280:	460c      	mov	r4, r1
 8002282:	d454      	bmi.n	800232e <__sflush_r+0xba>
 8002284:	684b      	ldr	r3, [r1, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	dc02      	bgt.n	8002290 <__sflush_r+0x1c>
 800228a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800228c:	2b00      	cmp	r3, #0
 800228e:	dd48      	ble.n	8002322 <__sflush_r+0xae>
 8002290:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002292:	2e00      	cmp	r6, #0
 8002294:	d045      	beq.n	8002322 <__sflush_r+0xae>
 8002296:	2300      	movs	r3, #0
 8002298:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800229c:	682f      	ldr	r7, [r5, #0]
 800229e:	6a21      	ldr	r1, [r4, #32]
 80022a0:	602b      	str	r3, [r5, #0]
 80022a2:	d030      	beq.n	8002306 <__sflush_r+0x92>
 80022a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80022a6:	89a3      	ldrh	r3, [r4, #12]
 80022a8:	0759      	lsls	r1, r3, #29
 80022aa:	d505      	bpl.n	80022b8 <__sflush_r+0x44>
 80022ac:	6863      	ldr	r3, [r4, #4]
 80022ae:	1ad2      	subs	r2, r2, r3
 80022b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80022b2:	b10b      	cbz	r3, 80022b8 <__sflush_r+0x44>
 80022b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80022b6:	1ad2      	subs	r2, r2, r3
 80022b8:	2300      	movs	r3, #0
 80022ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80022bc:	6a21      	ldr	r1, [r4, #32]
 80022be:	4628      	mov	r0, r5
 80022c0:	47b0      	blx	r6
 80022c2:	1c43      	adds	r3, r0, #1
 80022c4:	89a3      	ldrh	r3, [r4, #12]
 80022c6:	d106      	bne.n	80022d6 <__sflush_r+0x62>
 80022c8:	6829      	ldr	r1, [r5, #0]
 80022ca:	291d      	cmp	r1, #29
 80022cc:	d82b      	bhi.n	8002326 <__sflush_r+0xb2>
 80022ce:	4a2a      	ldr	r2, [pc, #168]	@ (8002378 <__sflush_r+0x104>)
 80022d0:	40ca      	lsrs	r2, r1
 80022d2:	07d6      	lsls	r6, r2, #31
 80022d4:	d527      	bpl.n	8002326 <__sflush_r+0xb2>
 80022d6:	2200      	movs	r2, #0
 80022d8:	6062      	str	r2, [r4, #4]
 80022da:	04d9      	lsls	r1, r3, #19
 80022dc:	6922      	ldr	r2, [r4, #16]
 80022de:	6022      	str	r2, [r4, #0]
 80022e0:	d504      	bpl.n	80022ec <__sflush_r+0x78>
 80022e2:	1c42      	adds	r2, r0, #1
 80022e4:	d101      	bne.n	80022ea <__sflush_r+0x76>
 80022e6:	682b      	ldr	r3, [r5, #0]
 80022e8:	b903      	cbnz	r3, 80022ec <__sflush_r+0x78>
 80022ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80022ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80022ee:	602f      	str	r7, [r5, #0]
 80022f0:	b1b9      	cbz	r1, 8002322 <__sflush_r+0xae>
 80022f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80022f6:	4299      	cmp	r1, r3
 80022f8:	d002      	beq.n	8002300 <__sflush_r+0x8c>
 80022fa:	4628      	mov	r0, r5
 80022fc:	f7ff fbf4 	bl	8001ae8 <_free_r>
 8002300:	2300      	movs	r3, #0
 8002302:	6363      	str	r3, [r4, #52]	@ 0x34
 8002304:	e00d      	b.n	8002322 <__sflush_r+0xae>
 8002306:	2301      	movs	r3, #1
 8002308:	4628      	mov	r0, r5
 800230a:	47b0      	blx	r6
 800230c:	4602      	mov	r2, r0
 800230e:	1c50      	adds	r0, r2, #1
 8002310:	d1c9      	bne.n	80022a6 <__sflush_r+0x32>
 8002312:	682b      	ldr	r3, [r5, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0c6      	beq.n	80022a6 <__sflush_r+0x32>
 8002318:	2b1d      	cmp	r3, #29
 800231a:	d001      	beq.n	8002320 <__sflush_r+0xac>
 800231c:	2b16      	cmp	r3, #22
 800231e:	d11e      	bne.n	800235e <__sflush_r+0xea>
 8002320:	602f      	str	r7, [r5, #0]
 8002322:	2000      	movs	r0, #0
 8002324:	e022      	b.n	800236c <__sflush_r+0xf8>
 8002326:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800232a:	b21b      	sxth	r3, r3
 800232c:	e01b      	b.n	8002366 <__sflush_r+0xf2>
 800232e:	690f      	ldr	r7, [r1, #16]
 8002330:	2f00      	cmp	r7, #0
 8002332:	d0f6      	beq.n	8002322 <__sflush_r+0xae>
 8002334:	0793      	lsls	r3, r2, #30
 8002336:	680e      	ldr	r6, [r1, #0]
 8002338:	bf08      	it	eq
 800233a:	694b      	ldreq	r3, [r1, #20]
 800233c:	600f      	str	r7, [r1, #0]
 800233e:	bf18      	it	ne
 8002340:	2300      	movne	r3, #0
 8002342:	eba6 0807 	sub.w	r8, r6, r7
 8002346:	608b      	str	r3, [r1, #8]
 8002348:	f1b8 0f00 	cmp.w	r8, #0
 800234c:	dde9      	ble.n	8002322 <__sflush_r+0xae>
 800234e:	6a21      	ldr	r1, [r4, #32]
 8002350:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002352:	4643      	mov	r3, r8
 8002354:	463a      	mov	r2, r7
 8002356:	4628      	mov	r0, r5
 8002358:	47b0      	blx	r6
 800235a:	2800      	cmp	r0, #0
 800235c:	dc08      	bgt.n	8002370 <__sflush_r+0xfc>
 800235e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002362:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002366:	81a3      	strh	r3, [r4, #12]
 8002368:	f04f 30ff 	mov.w	r0, #4294967295
 800236c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002370:	4407      	add	r7, r0
 8002372:	eba8 0800 	sub.w	r8, r8, r0
 8002376:	e7e7      	b.n	8002348 <__sflush_r+0xd4>
 8002378:	20400001 	.word	0x20400001

0800237c <_fflush_r>:
 800237c:	b538      	push	{r3, r4, r5, lr}
 800237e:	690b      	ldr	r3, [r1, #16]
 8002380:	4605      	mov	r5, r0
 8002382:	460c      	mov	r4, r1
 8002384:	b913      	cbnz	r3, 800238c <_fflush_r+0x10>
 8002386:	2500      	movs	r5, #0
 8002388:	4628      	mov	r0, r5
 800238a:	bd38      	pop	{r3, r4, r5, pc}
 800238c:	b118      	cbz	r0, 8002396 <_fflush_r+0x1a>
 800238e:	6a03      	ldr	r3, [r0, #32]
 8002390:	b90b      	cbnz	r3, 8002396 <_fflush_r+0x1a>
 8002392:	f7ff faa1 	bl	80018d8 <__sinit>
 8002396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f3      	beq.n	8002386 <_fflush_r+0xa>
 800239e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80023a0:	07d0      	lsls	r0, r2, #31
 80023a2:	d404      	bmi.n	80023ae <_fflush_r+0x32>
 80023a4:	0599      	lsls	r1, r3, #22
 80023a6:	d402      	bmi.n	80023ae <_fflush_r+0x32>
 80023a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80023aa:	f7ff fb9a 	bl	8001ae2 <__retarget_lock_acquire_recursive>
 80023ae:	4628      	mov	r0, r5
 80023b0:	4621      	mov	r1, r4
 80023b2:	f7ff ff5f 	bl	8002274 <__sflush_r>
 80023b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80023b8:	07da      	lsls	r2, r3, #31
 80023ba:	4605      	mov	r5, r0
 80023bc:	d4e4      	bmi.n	8002388 <_fflush_r+0xc>
 80023be:	89a3      	ldrh	r3, [r4, #12]
 80023c0:	059b      	lsls	r3, r3, #22
 80023c2:	d4e1      	bmi.n	8002388 <_fflush_r+0xc>
 80023c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80023c6:	f7ff fb8d 	bl	8001ae4 <__retarget_lock_release_recursive>
 80023ca:	e7dd      	b.n	8002388 <_fflush_r+0xc>

080023cc <__swbuf_r>:
 80023cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ce:	460e      	mov	r6, r1
 80023d0:	4614      	mov	r4, r2
 80023d2:	4605      	mov	r5, r0
 80023d4:	b118      	cbz	r0, 80023de <__swbuf_r+0x12>
 80023d6:	6a03      	ldr	r3, [r0, #32]
 80023d8:	b90b      	cbnz	r3, 80023de <__swbuf_r+0x12>
 80023da:	f7ff fa7d 	bl	80018d8 <__sinit>
 80023de:	69a3      	ldr	r3, [r4, #24]
 80023e0:	60a3      	str	r3, [r4, #8]
 80023e2:	89a3      	ldrh	r3, [r4, #12]
 80023e4:	071a      	lsls	r2, r3, #28
 80023e6:	d501      	bpl.n	80023ec <__swbuf_r+0x20>
 80023e8:	6923      	ldr	r3, [r4, #16]
 80023ea:	b943      	cbnz	r3, 80023fe <__swbuf_r+0x32>
 80023ec:	4621      	mov	r1, r4
 80023ee:	4628      	mov	r0, r5
 80023f0:	f000 f82a 	bl	8002448 <__swsetup_r>
 80023f4:	b118      	cbz	r0, 80023fe <__swbuf_r+0x32>
 80023f6:	f04f 37ff 	mov.w	r7, #4294967295
 80023fa:	4638      	mov	r0, r7
 80023fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023fe:	6823      	ldr	r3, [r4, #0]
 8002400:	6922      	ldr	r2, [r4, #16]
 8002402:	1a98      	subs	r0, r3, r2
 8002404:	6963      	ldr	r3, [r4, #20]
 8002406:	b2f6      	uxtb	r6, r6
 8002408:	4283      	cmp	r3, r0
 800240a:	4637      	mov	r7, r6
 800240c:	dc05      	bgt.n	800241a <__swbuf_r+0x4e>
 800240e:	4621      	mov	r1, r4
 8002410:	4628      	mov	r0, r5
 8002412:	f7ff ffb3 	bl	800237c <_fflush_r>
 8002416:	2800      	cmp	r0, #0
 8002418:	d1ed      	bne.n	80023f6 <__swbuf_r+0x2a>
 800241a:	68a3      	ldr	r3, [r4, #8]
 800241c:	3b01      	subs	r3, #1
 800241e:	60a3      	str	r3, [r4, #8]
 8002420:	6823      	ldr	r3, [r4, #0]
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	6022      	str	r2, [r4, #0]
 8002426:	701e      	strb	r6, [r3, #0]
 8002428:	6962      	ldr	r2, [r4, #20]
 800242a:	1c43      	adds	r3, r0, #1
 800242c:	429a      	cmp	r2, r3
 800242e:	d004      	beq.n	800243a <__swbuf_r+0x6e>
 8002430:	89a3      	ldrh	r3, [r4, #12]
 8002432:	07db      	lsls	r3, r3, #31
 8002434:	d5e1      	bpl.n	80023fa <__swbuf_r+0x2e>
 8002436:	2e0a      	cmp	r6, #10
 8002438:	d1df      	bne.n	80023fa <__swbuf_r+0x2e>
 800243a:	4621      	mov	r1, r4
 800243c:	4628      	mov	r0, r5
 800243e:	f7ff ff9d 	bl	800237c <_fflush_r>
 8002442:	2800      	cmp	r0, #0
 8002444:	d0d9      	beq.n	80023fa <__swbuf_r+0x2e>
 8002446:	e7d6      	b.n	80023f6 <__swbuf_r+0x2a>

08002448 <__swsetup_r>:
 8002448:	b538      	push	{r3, r4, r5, lr}
 800244a:	4b29      	ldr	r3, [pc, #164]	@ (80024f0 <__swsetup_r+0xa8>)
 800244c:	4605      	mov	r5, r0
 800244e:	6818      	ldr	r0, [r3, #0]
 8002450:	460c      	mov	r4, r1
 8002452:	b118      	cbz	r0, 800245c <__swsetup_r+0x14>
 8002454:	6a03      	ldr	r3, [r0, #32]
 8002456:	b90b      	cbnz	r3, 800245c <__swsetup_r+0x14>
 8002458:	f7ff fa3e 	bl	80018d8 <__sinit>
 800245c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002460:	0719      	lsls	r1, r3, #28
 8002462:	d422      	bmi.n	80024aa <__swsetup_r+0x62>
 8002464:	06da      	lsls	r2, r3, #27
 8002466:	d407      	bmi.n	8002478 <__swsetup_r+0x30>
 8002468:	2209      	movs	r2, #9
 800246a:	602a      	str	r2, [r5, #0]
 800246c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002470:	81a3      	strh	r3, [r4, #12]
 8002472:	f04f 30ff 	mov.w	r0, #4294967295
 8002476:	e033      	b.n	80024e0 <__swsetup_r+0x98>
 8002478:	0758      	lsls	r0, r3, #29
 800247a:	d512      	bpl.n	80024a2 <__swsetup_r+0x5a>
 800247c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800247e:	b141      	cbz	r1, 8002492 <__swsetup_r+0x4a>
 8002480:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002484:	4299      	cmp	r1, r3
 8002486:	d002      	beq.n	800248e <__swsetup_r+0x46>
 8002488:	4628      	mov	r0, r5
 800248a:	f7ff fb2d 	bl	8001ae8 <_free_r>
 800248e:	2300      	movs	r3, #0
 8002490:	6363      	str	r3, [r4, #52]	@ 0x34
 8002492:	89a3      	ldrh	r3, [r4, #12]
 8002494:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002498:	81a3      	strh	r3, [r4, #12]
 800249a:	2300      	movs	r3, #0
 800249c:	6063      	str	r3, [r4, #4]
 800249e:	6923      	ldr	r3, [r4, #16]
 80024a0:	6023      	str	r3, [r4, #0]
 80024a2:	89a3      	ldrh	r3, [r4, #12]
 80024a4:	f043 0308 	orr.w	r3, r3, #8
 80024a8:	81a3      	strh	r3, [r4, #12]
 80024aa:	6923      	ldr	r3, [r4, #16]
 80024ac:	b94b      	cbnz	r3, 80024c2 <__swsetup_r+0x7a>
 80024ae:	89a3      	ldrh	r3, [r4, #12]
 80024b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80024b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024b8:	d003      	beq.n	80024c2 <__swsetup_r+0x7a>
 80024ba:	4621      	mov	r1, r4
 80024bc:	4628      	mov	r0, r5
 80024be:	f000 f84f 	bl	8002560 <__smakebuf_r>
 80024c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024c6:	f013 0201 	ands.w	r2, r3, #1
 80024ca:	d00a      	beq.n	80024e2 <__swsetup_r+0x9a>
 80024cc:	2200      	movs	r2, #0
 80024ce:	60a2      	str	r2, [r4, #8]
 80024d0:	6962      	ldr	r2, [r4, #20]
 80024d2:	4252      	negs	r2, r2
 80024d4:	61a2      	str	r2, [r4, #24]
 80024d6:	6922      	ldr	r2, [r4, #16]
 80024d8:	b942      	cbnz	r2, 80024ec <__swsetup_r+0xa4>
 80024da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80024de:	d1c5      	bne.n	800246c <__swsetup_r+0x24>
 80024e0:	bd38      	pop	{r3, r4, r5, pc}
 80024e2:	0799      	lsls	r1, r3, #30
 80024e4:	bf58      	it	pl
 80024e6:	6962      	ldrpl	r2, [r4, #20]
 80024e8:	60a2      	str	r2, [r4, #8]
 80024ea:	e7f4      	b.n	80024d6 <__swsetup_r+0x8e>
 80024ec:	2000      	movs	r0, #0
 80024ee:	e7f7      	b.n	80024e0 <__swsetup_r+0x98>
 80024f0:	20000018 	.word	0x20000018

080024f4 <_sbrk_r>:
 80024f4:	b538      	push	{r3, r4, r5, lr}
 80024f6:	4d06      	ldr	r5, [pc, #24]	@ (8002510 <_sbrk_r+0x1c>)
 80024f8:	2300      	movs	r3, #0
 80024fa:	4604      	mov	r4, r0
 80024fc:	4608      	mov	r0, r1
 80024fe:	602b      	str	r3, [r5, #0]
 8002500:	f7fe f9cc 	bl	800089c <_sbrk>
 8002504:	1c43      	adds	r3, r0, #1
 8002506:	d102      	bne.n	800250e <_sbrk_r+0x1a>
 8002508:	682b      	ldr	r3, [r5, #0]
 800250a:	b103      	cbz	r3, 800250e <_sbrk_r+0x1a>
 800250c:	6023      	str	r3, [r4, #0]
 800250e:	bd38      	pop	{r3, r4, r5, pc}
 8002510:	200001c8 	.word	0x200001c8

08002514 <__swhatbuf_r>:
 8002514:	b570      	push	{r4, r5, r6, lr}
 8002516:	460c      	mov	r4, r1
 8002518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800251c:	2900      	cmp	r1, #0
 800251e:	b096      	sub	sp, #88	@ 0x58
 8002520:	4615      	mov	r5, r2
 8002522:	461e      	mov	r6, r3
 8002524:	da0d      	bge.n	8002542 <__swhatbuf_r+0x2e>
 8002526:	89a3      	ldrh	r3, [r4, #12]
 8002528:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800252c:	f04f 0100 	mov.w	r1, #0
 8002530:	bf14      	ite	ne
 8002532:	2340      	movne	r3, #64	@ 0x40
 8002534:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002538:	2000      	movs	r0, #0
 800253a:	6031      	str	r1, [r6, #0]
 800253c:	602b      	str	r3, [r5, #0]
 800253e:	b016      	add	sp, #88	@ 0x58
 8002540:	bd70      	pop	{r4, r5, r6, pc}
 8002542:	466a      	mov	r2, sp
 8002544:	f000 f848 	bl	80025d8 <_fstat_r>
 8002548:	2800      	cmp	r0, #0
 800254a:	dbec      	blt.n	8002526 <__swhatbuf_r+0x12>
 800254c:	9901      	ldr	r1, [sp, #4]
 800254e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002552:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002556:	4259      	negs	r1, r3
 8002558:	4159      	adcs	r1, r3
 800255a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800255e:	e7eb      	b.n	8002538 <__swhatbuf_r+0x24>

08002560 <__smakebuf_r>:
 8002560:	898b      	ldrh	r3, [r1, #12]
 8002562:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002564:	079d      	lsls	r5, r3, #30
 8002566:	4606      	mov	r6, r0
 8002568:	460c      	mov	r4, r1
 800256a:	d507      	bpl.n	800257c <__smakebuf_r+0x1c>
 800256c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002570:	6023      	str	r3, [r4, #0]
 8002572:	6123      	str	r3, [r4, #16]
 8002574:	2301      	movs	r3, #1
 8002576:	6163      	str	r3, [r4, #20]
 8002578:	b003      	add	sp, #12
 800257a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800257c:	ab01      	add	r3, sp, #4
 800257e:	466a      	mov	r2, sp
 8002580:	f7ff ffc8 	bl	8002514 <__swhatbuf_r>
 8002584:	9f00      	ldr	r7, [sp, #0]
 8002586:	4605      	mov	r5, r0
 8002588:	4639      	mov	r1, r7
 800258a:	4630      	mov	r0, r6
 800258c:	f7ff fb18 	bl	8001bc0 <_malloc_r>
 8002590:	b948      	cbnz	r0, 80025a6 <__smakebuf_r+0x46>
 8002592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002596:	059a      	lsls	r2, r3, #22
 8002598:	d4ee      	bmi.n	8002578 <__smakebuf_r+0x18>
 800259a:	f023 0303 	bic.w	r3, r3, #3
 800259e:	f043 0302 	orr.w	r3, r3, #2
 80025a2:	81a3      	strh	r3, [r4, #12]
 80025a4:	e7e2      	b.n	800256c <__smakebuf_r+0xc>
 80025a6:	89a3      	ldrh	r3, [r4, #12]
 80025a8:	6020      	str	r0, [r4, #0]
 80025aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025ae:	81a3      	strh	r3, [r4, #12]
 80025b0:	9b01      	ldr	r3, [sp, #4]
 80025b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80025b6:	b15b      	cbz	r3, 80025d0 <__smakebuf_r+0x70>
 80025b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80025bc:	4630      	mov	r0, r6
 80025be:	f000 f81d 	bl	80025fc <_isatty_r>
 80025c2:	b128      	cbz	r0, 80025d0 <__smakebuf_r+0x70>
 80025c4:	89a3      	ldrh	r3, [r4, #12]
 80025c6:	f023 0303 	bic.w	r3, r3, #3
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	81a3      	strh	r3, [r4, #12]
 80025d0:	89a3      	ldrh	r3, [r4, #12]
 80025d2:	431d      	orrs	r5, r3
 80025d4:	81a5      	strh	r5, [r4, #12]
 80025d6:	e7cf      	b.n	8002578 <__smakebuf_r+0x18>

080025d8 <_fstat_r>:
 80025d8:	b538      	push	{r3, r4, r5, lr}
 80025da:	4d07      	ldr	r5, [pc, #28]	@ (80025f8 <_fstat_r+0x20>)
 80025dc:	2300      	movs	r3, #0
 80025de:	4604      	mov	r4, r0
 80025e0:	4608      	mov	r0, r1
 80025e2:	4611      	mov	r1, r2
 80025e4:	602b      	str	r3, [r5, #0]
 80025e6:	f7fe f930 	bl	800084a <_fstat>
 80025ea:	1c43      	adds	r3, r0, #1
 80025ec:	d102      	bne.n	80025f4 <_fstat_r+0x1c>
 80025ee:	682b      	ldr	r3, [r5, #0]
 80025f0:	b103      	cbz	r3, 80025f4 <_fstat_r+0x1c>
 80025f2:	6023      	str	r3, [r4, #0]
 80025f4:	bd38      	pop	{r3, r4, r5, pc}
 80025f6:	bf00      	nop
 80025f8:	200001c8 	.word	0x200001c8

080025fc <_isatty_r>:
 80025fc:	b538      	push	{r3, r4, r5, lr}
 80025fe:	4d06      	ldr	r5, [pc, #24]	@ (8002618 <_isatty_r+0x1c>)
 8002600:	2300      	movs	r3, #0
 8002602:	4604      	mov	r4, r0
 8002604:	4608      	mov	r0, r1
 8002606:	602b      	str	r3, [r5, #0]
 8002608:	f7fe f92f 	bl	800086a <_isatty>
 800260c:	1c43      	adds	r3, r0, #1
 800260e:	d102      	bne.n	8002616 <_isatty_r+0x1a>
 8002610:	682b      	ldr	r3, [r5, #0]
 8002612:	b103      	cbz	r3, 8002616 <_isatty_r+0x1a>
 8002614:	6023      	str	r3, [r4, #0]
 8002616:	bd38      	pop	{r3, r4, r5, pc}
 8002618:	200001c8 	.word	0x200001c8

0800261c <_init>:
 800261c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261e:	bf00      	nop
 8002620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002622:	bc08      	pop	{r3}
 8002624:	469e      	mov	lr, r3
 8002626:	4770      	bx	lr

08002628 <_fini>:
 8002628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800262a:	bf00      	nop
 800262c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800262e:	bc08      	pop	{r3}
 8002630:	469e      	mov	lr, r3
 8002632:	4770      	bx	lr
