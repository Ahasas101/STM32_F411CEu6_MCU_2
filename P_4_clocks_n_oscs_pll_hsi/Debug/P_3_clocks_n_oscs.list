
P_3_clocks_n_oscs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002524  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080026c4  080026c4  000036c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002768  08002768  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002768  08002768  00003768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002770  08002770  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002770  08002770  00003770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002774  08002774  00003774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002778  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000068  080027e0  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  080027e0  000041d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003a36  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ff0  00000000  00000000  00007ace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000470  00000000  00000000  00008ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000032c  00000000  00000000  00008f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015afb  00000000  00000000  0000925c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004f5e  00000000  00000000  0001ed57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084e08  00000000  00000000  00023cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a8abd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001824  00000000  00000000  000a8b00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000aa324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080026ac 	.word	0x080026ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080026ac 	.word	0x080026ac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <SysTick_Handler>:
void SysTick_Handler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80005b0:	f000 fa02 	bl	80009b8 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80005b4:	f000 fb05 	bl	8000bc2 <HAL_SYSTICK_IRQHandler>
}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}

080005bc <main>:
void Error_Handler(void);
void GPIO_SWO(void);


int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b092      	sub	sp, #72	@ 0x48
 80005c0:	af00      	add	r7, sp, #0

	HAL_Init();
 80005c2:	f000 f99f 	bl	8000904 <HAL_Init>
	GPIO_SWO();
 80005c6:	f000 f869 	bl	800069c <GPIO_SWO>
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;
	memset(&osc_init, 0, sizeof(osc_init));
 80005ca:	f107 0318 	add.w	r3, r7, #24
 80005ce:	2230      	movs	r2, #48	@ 0x30
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fae8 	bl	8001ba8 <memset>
	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d8:	2301      	movs	r3, #1
 80005da:	61bb      	str	r3, [r7, #24]
	osc_init.HSEState = RCC_HSE_ON;
 80005dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005e0:	61fb      	str	r3, [r7, #28]
	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 80005e2:	f107 0318 	add.w	r3, r7, #24
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 fc7c 	bl	8000ee4 <HAL_RCC_OscConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <main+0x3a>
	{
		Error_Handler();
 80005f2:	f000 f87b 	bl	80006ec <Error_Handler>
	}

	clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80005f6:	2301      	movs	r3, #1
 80005f8:	60bb      	str	r3, [r7, #8]
	clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 80005fa:	230f      	movs	r3, #15
 80005fc:	607b      	str	r3, [r7, #4]
						RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
	clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000602:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000606:	613b      	str	r3, [r7, #16]
	clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000608:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800060c:	617b      	str	r3, [r7, #20]
	if(	HAL_RCC_ClockConfig(&clk_init, FLASH_ACR_LATENCY_0WS) != HAL_OK)
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f000 fede 	bl	80013d4 <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <main+0x66>
	{
		Error_Handler();
 800061e:	f000 f865 	bl	80006ec <Error_Handler>
	}
	__HAL_RCC_HSI_DISABLE();
 8000622:	4b17      	ldr	r3, [pc, #92]	@ (8000680 <main+0xc4>)
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]

	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000628:	f001 f880 	bl	800172c <HAL_RCC_GetHCLKFreq>
 800062c:	4603      	mov	r3, r0
 800062e:	4a15      	ldr	r2, [pc, #84]	@ (8000684 <main+0xc8>)
 8000630:	fba2 2303 	umull	r2, r3, r2, r3
 8000634:	099b      	lsrs	r3, r3, #6
 8000636:	4618      	mov	r0, r3
 8000638:	f000 fab7 	bl	8000baa <HAL_SYSTICK_Config>

	printf("Hello\n");
 800063c:	4812      	ldr	r0, [pc, #72]	@ (8000688 <main+0xcc>)
 800063e:	f001 f9d3 	bl	80019e8 <puts>

	printf("Sysclk freq  = %lu\n", HAL_RCC_GetSysClockFreq());
 8000642:	f000 ffad 	bl	80015a0 <HAL_RCC_GetSysClockFreq>
 8000646:	4603      	mov	r3, r0
 8000648:	4619      	mov	r1, r3
 800064a:	4810      	ldr	r0, [pc, #64]	@ (800068c <main+0xd0>)
 800064c:	f001 f964 	bl	8001918 <iprintf>
	printf("pclk1 freq = %lu\n", HAL_RCC_GetPCLK1Freq());
 8000650:	f001 f878 	bl	8001744 <HAL_RCC_GetPCLK1Freq>
 8000654:	4603      	mov	r3, r0
 8000656:	4619      	mov	r1, r3
 8000658:	480d      	ldr	r0, [pc, #52]	@ (8000690 <main+0xd4>)
 800065a:	f001 f95d 	bl	8001918 <iprintf>
	printf("pclk2 freq = %lu\n", HAL_RCC_GetPCLK2Freq());
 800065e:	f001 f885 	bl	800176c <HAL_RCC_GetPCLK2Freq>
 8000662:	4603      	mov	r3, r0
 8000664:	4619      	mov	r1, r3
 8000666:	480b      	ldr	r0, [pc, #44]	@ (8000694 <main+0xd8>)
 8000668:	f001 f956 	bl	8001918 <iprintf>
	printf("hclk freq = %lu\n", HAL_RCC_GetHCLKFreq());
 800066c:	f001 f85e 	bl	800172c <HAL_RCC_GetHCLKFreq>
 8000670:	4603      	mov	r3, r0
 8000672:	4619      	mov	r1, r3
 8000674:	4808      	ldr	r0, [pc, #32]	@ (8000698 <main+0xdc>)
 8000676:	f001 f94f 	bl	8001918 <iprintf>

while(1);
 800067a:	bf00      	nop
 800067c:	e7fd      	b.n	800067a <main+0xbe>
 800067e:	bf00      	nop
 8000680:	42470000 	.word	0x42470000
 8000684:	10624dd3 	.word	0x10624dd3
 8000688:	080026c4 	.word	0x080026c4
 800068c:	080026cc 	.word	0x080026cc
 8000690:	080026e0 	.word	0x080026e0
 8000694:	080026f4 	.word	0x080026f4
 8000698:	08002708 	.word	0x08002708

0800069c <GPIO_SWO>:

}

void GPIO_SWO(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	4b0f      	ldr	r3, [pc, #60]	@ (80006e4 <GPIO_SWO+0x48>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	4a0e      	ldr	r2, [pc, #56]	@ (80006e4 <GPIO_SWO+0x48>)
 80006ac:	f043 0302 	orr.w	r3, r3, #2
 80006b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b2:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <GPIO_SWO+0x48>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	f003 0302 	and.w	r3, r3, #2
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef gpio_swo;
	gpio_swo.Mode = GPIO_MODE_AF_PP;
 80006be:	2302      	movs	r3, #2
 80006c0:	60bb      	str	r3, [r7, #8]
	gpio_swo.Pin = GPIO_PIN_3;
 80006c2:	2308      	movs	r3, #8
 80006c4:	607b      	str	r3, [r7, #4]
	gpio_swo.Alternate = GPIO_AF0_SWJ;
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
	gpio_swo.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
	gpio_swo.Speed = GPIO_SPEED_FREQ_LOW;
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(GPIOB, &gpio_swo);
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	4619      	mov	r1, r3
 80006d6:	4804      	ldr	r0, [pc, #16]	@ (80006e8 <GPIO_SWO+0x4c>)
 80006d8:	f000 fa80 	bl	8000bdc <HAL_GPIO_Init>
}
 80006dc:	bf00      	nop
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40020400 	.word	0x40020400

080006ec <Error_Handler>:

void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
	while(1);
 80006f0:	bf00      	nop
 80006f2:	e7fd      	b.n	80006f0 <Error_Handler+0x4>

080006f4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80006fe:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <ITM_SendChar+0x48>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4a0e      	ldr	r2, [pc, #56]	@ (800073c <ITM_SendChar+0x48>)
 8000704:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000708:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800070a:	4b0d      	ldr	r3, [pc, #52]	@ (8000740 <ITM_SendChar+0x4c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a0c      	ldr	r2, [pc, #48]	@ (8000740 <ITM_SendChar+0x4c>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000716:	bf00      	nop
 8000718:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	2b00      	cmp	r3, #0
 8000724:	d0f8      	beq.n	8000718 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000726:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	6013      	str	r3, [r2, #0]
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	e000edfc 	.word	0xe000edfc
 8000740:	e0000e00 	.word	0xe0000e00

08000744 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	e00a      	b.n	800076c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000756:	f3af 8000 	nop.w
 800075a:	4601      	mov	r1, r0
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	1c5a      	adds	r2, r3, #1
 8000760:	60ba      	str	r2, [r7, #8]
 8000762:	b2ca      	uxtb	r2, r1
 8000764:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	3301      	adds	r3, #1
 800076a:	617b      	str	r3, [r7, #20]
 800076c:	697a      	ldr	r2, [r7, #20]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	429a      	cmp	r2, r3
 8000772:	dbf0      	blt.n	8000756 <_read+0x12>
  }

  return len;
 8000774:	687b      	ldr	r3, [r7, #4]
}
 8000776:	4618      	mov	r0, r3
 8000778:	3718      	adds	r7, #24
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	b086      	sub	sp, #24
 8000782:	af00      	add	r7, sp, #0
 8000784:	60f8      	str	r0, [r7, #12]
 8000786:	60b9      	str	r1, [r7, #8]
 8000788:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
 800078e:	e009      	b.n	80007a4 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	1c5a      	adds	r2, r3, #1
 8000794:	60ba      	str	r2, [r7, #8]
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ffab 	bl	80006f4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	3301      	adds	r3, #1
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	697a      	ldr	r2, [r7, #20]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	dbf1      	blt.n	8000790 <_write+0x12>
  }
  return len;
 80007ac:	687b      	ldr	r3, [r7, #4]
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3718      	adds	r7, #24
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <_close>:

int _close(int file)
{
 80007b6:	b480      	push	{r7}
 80007b8:	b083      	sub	sp, #12
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr

080007ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007ce:	b480      	push	{r7}
 80007d0:	b083      	sub	sp, #12
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
 80007d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007de:	605a      	str	r2, [r3, #4]
  return 0;
 80007e0:	2300      	movs	r3, #0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <_isatty>:

int _isatty(int file)
{
 80007ee:	b480      	push	{r7}
 80007f0:	b083      	sub	sp, #12
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007f6:	2301      	movs	r3, #1
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000810:	2300      	movs	r3, #0
}
 8000812:	4618      	mov	r0, r3
 8000814:	3714      	adds	r7, #20
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
	...

08000820 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000828:	4a14      	ldr	r2, [pc, #80]	@ (800087c <_sbrk+0x5c>)
 800082a:	4b15      	ldr	r3, [pc, #84]	@ (8000880 <_sbrk+0x60>)
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000834:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <_sbrk+0x64>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d102      	bne.n	8000842 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800083c:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <_sbrk+0x64>)
 800083e:	4a12      	ldr	r2, [pc, #72]	@ (8000888 <_sbrk+0x68>)
 8000840:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000842:	4b10      	ldr	r3, [pc, #64]	@ (8000884 <_sbrk+0x64>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4413      	add	r3, r2
 800084a:	693a      	ldr	r2, [r7, #16]
 800084c:	429a      	cmp	r2, r3
 800084e:	d207      	bcs.n	8000860 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000850:	f001 f9f8 	bl	8001c44 <__errno>
 8000854:	4603      	mov	r3, r0
 8000856:	220c      	movs	r2, #12
 8000858:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800085a:	f04f 33ff 	mov.w	r3, #4294967295
 800085e:	e009      	b.n	8000874 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000860:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <_sbrk+0x64>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000866:	4b07      	ldr	r3, [pc, #28]	@ (8000884 <_sbrk+0x64>)
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4413      	add	r3, r2
 800086e:	4a05      	ldr	r2, [pc, #20]	@ (8000884 <_sbrk+0x64>)
 8000870:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000872:	68fb      	ldr	r3, [r7, #12]
}
 8000874:	4618      	mov	r0, r3
 8000876:	3718      	adds	r7, #24
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20020000 	.word	0x20020000
 8000880:	00000400 	.word	0x00000400
 8000884:	20000084 	.word	0x20000084
 8000888:	200001d8 	.word	0x200001d8

0800088c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000890:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <SystemInit+0x20>)
 8000892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000896:	4a05      	ldr	r2, [pc, #20]	@ (80008ac <SystemInit+0x20>)
 8000898:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800089c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008b4:	f7ff ffea 	bl	800088c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008b8:	480c      	ldr	r0, [pc, #48]	@ (80008ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008ba:	490d      	ldr	r1, [pc, #52]	@ (80008f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008bc:	4a0d      	ldr	r2, [pc, #52]	@ (80008f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c0:	e002      	b.n	80008c8 <LoopCopyDataInit>

080008c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c6:	3304      	adds	r3, #4

080008c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008cc:	d3f9      	bcc.n	80008c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ce:	4a0a      	ldr	r2, [pc, #40]	@ (80008f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008d0:	4c0a      	ldr	r4, [pc, #40]	@ (80008fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d4:	e001      	b.n	80008da <LoopFillZerobss>

080008d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d8:	3204      	adds	r2, #4

080008da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008dc:	d3fb      	bcc.n	80008d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008de:	f001 f9b7 	bl	8001c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008e2:	f7ff fe6b 	bl	80005bc <main>
  bx  lr    
 80008e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80008e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80008f4:	08002778 	.word	0x08002778
  ldr r2, =_sbss
 80008f8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80008fc:	200001d8 	.word	0x200001d8

08000900 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000900:	e7fe      	b.n	8000900 <ADC_IRQHandler>
	...

08000904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000908:	4b0e      	ldr	r3, [pc, #56]	@ (8000944 <HAL_Init+0x40>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a0d      	ldr	r2, [pc, #52]	@ (8000944 <HAL_Init+0x40>)
 800090e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000912:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000914:	4b0b      	ldr	r3, [pc, #44]	@ (8000944 <HAL_Init+0x40>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a0a      	ldr	r2, [pc, #40]	@ (8000944 <HAL_Init+0x40>)
 800091a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800091e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000920:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <HAL_Init+0x40>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a07      	ldr	r2, [pc, #28]	@ (8000944 <HAL_Init+0x40>)
 8000926:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800092a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800092c:	2003      	movs	r0, #3
 800092e:	f000 f915 	bl	8000b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000932:	200f      	movs	r0, #15
 8000934:	f000 f810 	bl	8000958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000938:	f000 f806 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023c00 	.word	0x40023c00

08000948 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
	...

08000958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000960:	4b12      	ldr	r3, [pc, #72]	@ (80009ac <HAL_InitTick+0x54>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b12      	ldr	r3, [pc, #72]	@ (80009b0 <HAL_InitTick+0x58>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800096e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000972:	fbb2 f3f3 	udiv	r3, r2, r3
 8000976:	4618      	mov	r0, r3
 8000978:	f000 f917 	bl	8000baa <HAL_SYSTICK_Config>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e00e      	b.n	80009a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b0f      	cmp	r3, #15
 800098a:	d80a      	bhi.n	80009a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800098c:	2200      	movs	r2, #0
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	f000 f8ed 	bl	8000b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000998:	4a06      	ldr	r2, [pc, #24]	@ (80009b4 <HAL_InitTick+0x5c>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800099e:	2300      	movs	r3, #0
 80009a0:	e000      	b.n	80009a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000000 	.word	0x20000000
 80009b0:	20000008 	.word	0x20000008
 80009b4:	20000004 	.word	0x20000004

080009b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009bc:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <HAL_IncTick+0x20>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <HAL_IncTick+0x24>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4413      	add	r3, r2
 80009c8:	4a04      	ldr	r2, [pc, #16]	@ (80009dc <HAL_IncTick+0x24>)
 80009ca:	6013      	str	r3, [r2, #0]
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000008 	.word	0x20000008
 80009dc:	20000088 	.word	0x20000088

080009e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return uwTick;
 80009e4:	4b03      	ldr	r3, [pc, #12]	@ (80009f4 <HAL_GetTick+0x14>)
 80009e6:	681b      	ldr	r3, [r3, #0]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000088 	.word	0x20000088

080009f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f003 0307 	and.w	r3, r3, #7
 8000a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a08:	4b0c      	ldr	r3, [pc, #48]	@ (8000a3c <__NVIC_SetPriorityGrouping+0x44>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0e:	68ba      	ldr	r2, [r7, #8]
 8000a10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a14:	4013      	ands	r3, r2
 8000a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a2a:	4a04      	ldr	r2, [pc, #16]	@ (8000a3c <__NVIC_SetPriorityGrouping+0x44>)
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	60d3      	str	r3, [r2, #12]
}
 8000a30:	bf00      	nop
 8000a32:	3714      	adds	r7, #20
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a44:	4b04      	ldr	r3, [pc, #16]	@ (8000a58 <__NVIC_GetPriorityGrouping+0x18>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	0a1b      	lsrs	r3, r3, #8
 8000a4a:	f003 0307 	and.w	r3, r3, #7
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	6039      	str	r1, [r7, #0]
 8000a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	db0a      	blt.n	8000a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	490c      	ldr	r1, [pc, #48]	@ (8000aa8 <__NVIC_SetPriority+0x4c>)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	0112      	lsls	r2, r2, #4
 8000a7c:	b2d2      	uxtb	r2, r2
 8000a7e:	440b      	add	r3, r1
 8000a80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a84:	e00a      	b.n	8000a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	4908      	ldr	r1, [pc, #32]	@ (8000aac <__NVIC_SetPriority+0x50>)
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	f003 030f 	and.w	r3, r3, #15
 8000a92:	3b04      	subs	r3, #4
 8000a94:	0112      	lsls	r2, r2, #4
 8000a96:	b2d2      	uxtb	r2, r2
 8000a98:	440b      	add	r3, r1
 8000a9a:	761a      	strb	r2, [r3, #24]
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000e100 	.word	0xe000e100
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b089      	sub	sp, #36	@ 0x24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	f1c3 0307 	rsb	r3, r3, #7
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	bf28      	it	cs
 8000ace:	2304      	movcs	r3, #4
 8000ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	2b06      	cmp	r3, #6
 8000ad8:	d902      	bls.n	8000ae0 <NVIC_EncodePriority+0x30>
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3b03      	subs	r3, #3
 8000ade:	e000      	b.n	8000ae2 <NVIC_EncodePriority+0x32>
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	43da      	mvns	r2, r3
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	401a      	ands	r2, r3
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af8:	f04f 31ff 	mov.w	r1, #4294967295
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	fa01 f303 	lsl.w	r3, r1, r3
 8000b02:	43d9      	mvns	r1, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	4313      	orrs	r3, r2
         );
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3724      	adds	r7, #36	@ 0x24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
	...

08000b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b28:	d301      	bcc.n	8000b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e00f      	b.n	8000b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b58 <SysTick_Config+0x40>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b36:	210f      	movs	r1, #15
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	f7ff ff8e 	bl	8000a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b40:	4b05      	ldr	r3, [pc, #20]	@ (8000b58 <SysTick_Config+0x40>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b46:	4b04      	ldr	r3, [pc, #16]	@ (8000b58 <SysTick_Config+0x40>)
 8000b48:	2207      	movs	r2, #7
 8000b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	e000e010 	.word	0xe000e010

08000b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f7ff ff47 	bl	80009f8 <__NVIC_SetPriorityGrouping>
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b086      	sub	sp, #24
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	4603      	mov	r3, r0
 8000b7a:	60b9      	str	r1, [r7, #8]
 8000b7c:	607a      	str	r2, [r7, #4]
 8000b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b84:	f7ff ff5c 	bl	8000a40 <__NVIC_GetPriorityGrouping>
 8000b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	68b9      	ldr	r1, [r7, #8]
 8000b8e:	6978      	ldr	r0, [r7, #20]
 8000b90:	f7ff ff8e 	bl	8000ab0 <NVIC_EncodePriority>
 8000b94:	4602      	mov	r2, r0
 8000b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ff5d 	bl	8000a5c <__NVIC_SetPriority>
}
 8000ba2:	bf00      	nop
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff ffb0 	bl	8000b18 <SysTick_Config>
 8000bb8:	4603      	mov	r3, r0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000bc6:	f000 f802 	bl	8000bce <HAL_SYSTICK_Callback>
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b089      	sub	sp, #36	@ 0x24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
 8000bf6:	e159      	b.n	8000eac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	697a      	ldr	r2, [r7, #20]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	f040 8148 	bne.w	8000ea6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f003 0303 	and.w	r3, r3, #3
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d005      	beq.n	8000c2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d130      	bne.n	8000c90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	2203      	movs	r2, #3
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	4013      	ands	r3, r2
 8000c44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	68da      	ldr	r2, [r3, #12]
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c64:	2201      	movs	r2, #1
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	69ba      	ldr	r2, [r7, #24]
 8000c70:	4013      	ands	r3, r2
 8000c72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	091b      	lsrs	r3, r3, #4
 8000c7a:	f003 0201 	and.w	r2, r3, #1
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f003 0303 	and.w	r3, r3, #3
 8000c98:	2b03      	cmp	r3, #3
 8000c9a:	d017      	beq.n	8000ccc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	69ba      	ldr	r2, [r7, #24]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	689a      	ldr	r2, [r3, #8]
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f003 0303 	and.w	r3, r3, #3
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d123      	bne.n	8000d20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	08da      	lsrs	r2, r3, #3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3208      	adds	r2, #8
 8000ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	f003 0307 	and.w	r3, r3, #7
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	220f      	movs	r2, #15
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	691a      	ldr	r2, [r3, #16]
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	08da      	lsrs	r2, r3, #3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	3208      	adds	r2, #8
 8000d1a:	69b9      	ldr	r1, [r7, #24]
 8000d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 0203 	and.w	r2, r3, #3
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	f000 80a2 	beq.w	8000ea6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b57      	ldr	r3, [pc, #348]	@ (8000ec4 <HAL_GPIO_Init+0x2e8>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6a:	4a56      	ldr	r2, [pc, #344]	@ (8000ec4 <HAL_GPIO_Init+0x2e8>)
 8000d6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d72:	4b54      	ldr	r3, [pc, #336]	@ (8000ec4 <HAL_GPIO_Init+0x2e8>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d7e:	4a52      	ldr	r2, [pc, #328]	@ (8000ec8 <HAL_GPIO_Init+0x2ec>)
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	089b      	lsrs	r3, r3, #2
 8000d84:	3302      	adds	r3, #2
 8000d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f003 0303 	and.w	r3, r3, #3
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	220f      	movs	r2, #15
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a49      	ldr	r2, [pc, #292]	@ (8000ecc <HAL_GPIO_Init+0x2f0>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d019      	beq.n	8000dde <HAL_GPIO_Init+0x202>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a48      	ldr	r2, [pc, #288]	@ (8000ed0 <HAL_GPIO_Init+0x2f4>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d013      	beq.n	8000dda <HAL_GPIO_Init+0x1fe>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a47      	ldr	r2, [pc, #284]	@ (8000ed4 <HAL_GPIO_Init+0x2f8>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d00d      	beq.n	8000dd6 <HAL_GPIO_Init+0x1fa>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a46      	ldr	r2, [pc, #280]	@ (8000ed8 <HAL_GPIO_Init+0x2fc>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d007      	beq.n	8000dd2 <HAL_GPIO_Init+0x1f6>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a45      	ldr	r2, [pc, #276]	@ (8000edc <HAL_GPIO_Init+0x300>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d101      	bne.n	8000dce <HAL_GPIO_Init+0x1f2>
 8000dca:	2304      	movs	r3, #4
 8000dcc:	e008      	b.n	8000de0 <HAL_GPIO_Init+0x204>
 8000dce:	2307      	movs	r3, #7
 8000dd0:	e006      	b.n	8000de0 <HAL_GPIO_Init+0x204>
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e004      	b.n	8000de0 <HAL_GPIO_Init+0x204>
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	e002      	b.n	8000de0 <HAL_GPIO_Init+0x204>
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e000      	b.n	8000de0 <HAL_GPIO_Init+0x204>
 8000dde:	2300      	movs	r3, #0
 8000de0:	69fa      	ldr	r2, [r7, #28]
 8000de2:	f002 0203 	and.w	r2, r2, #3
 8000de6:	0092      	lsls	r2, r2, #2
 8000de8:	4093      	lsls	r3, r2
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000df0:	4935      	ldr	r1, [pc, #212]	@ (8000ec8 <HAL_GPIO_Init+0x2ec>)
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	089b      	lsrs	r3, r3, #2
 8000df6:	3302      	adds	r3, #2
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dfe:	4b38      	ldr	r3, [pc, #224]	@ (8000ee0 <HAL_GPIO_Init+0x304>)
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	43db      	mvns	r3, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d003      	beq.n	8000e22 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e22:	4a2f      	ldr	r2, [pc, #188]	@ (8000ee0 <HAL_GPIO_Init+0x304>)
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e28:	4b2d      	ldr	r3, [pc, #180]	@ (8000ee0 <HAL_GPIO_Init+0x304>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d003      	beq.n	8000e4c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e4c:	4a24      	ldr	r2, [pc, #144]	@ (8000ee0 <HAL_GPIO_Init+0x304>)
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e52:	4b23      	ldr	r3, [pc, #140]	@ (8000ee0 <HAL_GPIO_Init+0x304>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d003      	beq.n	8000e76 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e76:	4a1a      	ldr	r2, [pc, #104]	@ (8000ee0 <HAL_GPIO_Init+0x304>)
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ee0 <HAL_GPIO_Init+0x304>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d003      	beq.n	8000ea0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ea0:	4a0f      	ldr	r2, [pc, #60]	@ (8000ee0 <HAL_GPIO_Init+0x304>)
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	61fb      	str	r3, [r7, #28]
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	2b0f      	cmp	r3, #15
 8000eb0:	f67f aea2 	bls.w	8000bf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	bf00      	nop
 8000eb8:	3724      	adds	r7, #36	@ 0x24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40013800 	.word	0x40013800
 8000ecc:	40020000 	.word	0x40020000
 8000ed0:	40020400 	.word	0x40020400
 8000ed4:	40020800 	.word	0x40020800
 8000ed8:	40020c00 	.word	0x40020c00
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40013c00 	.word	0x40013c00

08000ee4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e267      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d075      	beq.n	8000fee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f02:	4b88      	ldr	r3, [pc, #544]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f003 030c 	and.w	r3, r3, #12
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	d00c      	beq.n	8000f28 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f0e:	4b85      	ldr	r3, [pc, #532]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f16:	2b08      	cmp	r3, #8
 8000f18:	d112      	bne.n	8000f40 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f1a:	4b82      	ldr	r3, [pc, #520]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000f26:	d10b      	bne.n	8000f40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f28:	4b7e      	ldr	r3, [pc, #504]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d05b      	beq.n	8000fec <HAL_RCC_OscConfig+0x108>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d157      	bne.n	8000fec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e242      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f48:	d106      	bne.n	8000f58 <HAL_RCC_OscConfig+0x74>
 8000f4a:	4b76      	ldr	r3, [pc, #472]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a75      	ldr	r2, [pc, #468]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f54:	6013      	str	r3, [r2, #0]
 8000f56:	e01d      	b.n	8000f94 <HAL_RCC_OscConfig+0xb0>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f60:	d10c      	bne.n	8000f7c <HAL_RCC_OscConfig+0x98>
 8000f62:	4b70      	ldr	r3, [pc, #448]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a6f      	ldr	r2, [pc, #444]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f6c:	6013      	str	r3, [r2, #0]
 8000f6e:	4b6d      	ldr	r3, [pc, #436]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a6c      	ldr	r2, [pc, #432]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	e00b      	b.n	8000f94 <HAL_RCC_OscConfig+0xb0>
 8000f7c:	4b69      	ldr	r3, [pc, #420]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a68      	ldr	r2, [pc, #416]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f86:	6013      	str	r3, [r2, #0]
 8000f88:	4b66      	ldr	r3, [pc, #408]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a65      	ldr	r2, [pc, #404]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000f8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d013      	beq.n	8000fc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fd20 	bl	80009e0 <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa2:	e008      	b.n	8000fb6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fa4:	f7ff fd1c 	bl	80009e0 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b64      	cmp	r3, #100	@ 0x64
 8000fb0:	d901      	bls.n	8000fb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e207      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb6:	4b5b      	ldr	r3, [pc, #364]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d0f0      	beq.n	8000fa4 <HAL_RCC_OscConfig+0xc0>
 8000fc2:	e014      	b.n	8000fee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fd0c 	bl	80009e0 <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fcc:	f7ff fd08 	bl	80009e0 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b64      	cmp	r3, #100	@ 0x64
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e1f3      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fde:	4b51      	ldr	r3, [pc, #324]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1f0      	bne.n	8000fcc <HAL_RCC_OscConfig+0xe8>
 8000fea:	e000      	b.n	8000fee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d063      	beq.n	80010c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000ffa:	4b4a      	ldr	r3, [pc, #296]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f003 030c 	and.w	r3, r3, #12
 8001002:	2b00      	cmp	r3, #0
 8001004:	d00b      	beq.n	800101e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001006:	4b47      	ldr	r3, [pc, #284]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800100e:	2b08      	cmp	r3, #8
 8001010:	d11c      	bne.n	800104c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001012:	4b44      	ldr	r3, [pc, #272]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d116      	bne.n	800104c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800101e:	4b41      	ldr	r3, [pc, #260]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d005      	beq.n	8001036 <HAL_RCC_OscConfig+0x152>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d001      	beq.n	8001036 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e1c7      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001036:	4b3b      	ldr	r3, [pc, #236]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	691b      	ldr	r3, [r3, #16]
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	4937      	ldr	r1, [pc, #220]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8001046:	4313      	orrs	r3, r2
 8001048:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800104a:	e03a      	b.n	80010c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d020      	beq.n	8001096 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001054:	4b34      	ldr	r3, [pc, #208]	@ (8001128 <HAL_RCC_OscConfig+0x244>)
 8001056:	2201      	movs	r2, #1
 8001058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800105a:	f7ff fcc1 	bl	80009e0 <HAL_GetTick>
 800105e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001060:	e008      	b.n	8001074 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001062:	f7ff fcbd 	bl	80009e0 <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b02      	cmp	r3, #2
 800106e:	d901      	bls.n	8001074 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001070:	2303      	movs	r3, #3
 8001072:	e1a8      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001074:	4b2b      	ldr	r3, [pc, #172]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d0f0      	beq.n	8001062 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001080:	4b28      	ldr	r3, [pc, #160]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	4925      	ldr	r1, [pc, #148]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 8001090:	4313      	orrs	r3, r2
 8001092:	600b      	str	r3, [r1, #0]
 8001094:	e015      	b.n	80010c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001096:	4b24      	ldr	r3, [pc, #144]	@ (8001128 <HAL_RCC_OscConfig+0x244>)
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800109c:	f7ff fca0 	bl	80009e0 <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010a4:	f7ff fc9c 	bl	80009e0 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e187      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1f0      	bne.n	80010a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d036      	beq.n	800113c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d016      	beq.n	8001104 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010d6:	4b15      	ldr	r3, [pc, #84]	@ (800112c <HAL_RCC_OscConfig+0x248>)
 80010d8:	2201      	movs	r2, #1
 80010da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010dc:	f7ff fc80 	bl	80009e0 <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010e2:	e008      	b.n	80010f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e4:	f7ff fc7c 	bl	80009e0 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e167      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <HAL_RCC_OscConfig+0x240>)
 80010f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0f0      	beq.n	80010e4 <HAL_RCC_OscConfig+0x200>
 8001102:	e01b      	b.n	800113c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001104:	4b09      	ldr	r3, [pc, #36]	@ (800112c <HAL_RCC_OscConfig+0x248>)
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800110a:	f7ff fc69 	bl	80009e0 <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001110:	e00e      	b.n	8001130 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001112:	f7ff fc65 	bl	80009e0 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d907      	bls.n	8001130 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e150      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
 8001124:	40023800 	.word	0x40023800
 8001128:	42470000 	.word	0x42470000
 800112c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001130:	4b88      	ldr	r3, [pc, #544]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 8001132:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1ea      	bne.n	8001112 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 8097 	beq.w	8001278 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800114a:	2300      	movs	r3, #0
 800114c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800114e:	4b81      	ldr	r3, [pc, #516]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10f      	bne.n	800117a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	4b7d      	ldr	r3, [pc, #500]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001162:	4a7c      	ldr	r2, [pc, #496]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 8001164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001168:	6413      	str	r3, [r2, #64]	@ 0x40
 800116a:	4b7a      	ldr	r3, [pc, #488]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001176:	2301      	movs	r3, #1
 8001178:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117a:	4b77      	ldr	r3, [pc, #476]	@ (8001358 <HAL_RCC_OscConfig+0x474>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001182:	2b00      	cmp	r3, #0
 8001184:	d118      	bne.n	80011b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001186:	4b74      	ldr	r3, [pc, #464]	@ (8001358 <HAL_RCC_OscConfig+0x474>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a73      	ldr	r2, [pc, #460]	@ (8001358 <HAL_RCC_OscConfig+0x474>)
 800118c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001192:	f7ff fc25 	bl	80009e0 <HAL_GetTick>
 8001196:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800119a:	f7ff fc21 	bl	80009e0 <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e10c      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ac:	4b6a      	ldr	r3, [pc, #424]	@ (8001358 <HAL_RCC_OscConfig+0x474>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0f0      	beq.n	800119a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d106      	bne.n	80011ce <HAL_RCC_OscConfig+0x2ea>
 80011c0:	4b64      	ldr	r3, [pc, #400]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011c4:	4a63      	ldr	r2, [pc, #396]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80011cc:	e01c      	b.n	8001208 <HAL_RCC_OscConfig+0x324>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	2b05      	cmp	r3, #5
 80011d4:	d10c      	bne.n	80011f0 <HAL_RCC_OscConfig+0x30c>
 80011d6:	4b5f      	ldr	r3, [pc, #380]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011da:	4a5e      	ldr	r2, [pc, #376]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80011e2:	4b5c      	ldr	r3, [pc, #368]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011e6:	4a5b      	ldr	r2, [pc, #364]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80011ee:	e00b      	b.n	8001208 <HAL_RCC_OscConfig+0x324>
 80011f0:	4b58      	ldr	r3, [pc, #352]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011f4:	4a57      	ldr	r2, [pc, #348]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011f6:	f023 0301 	bic.w	r3, r3, #1
 80011fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80011fc:	4b55      	ldr	r3, [pc, #340]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80011fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001200:	4a54      	ldr	r2, [pc, #336]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 8001202:	f023 0304 	bic.w	r3, r3, #4
 8001206:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d015      	beq.n	800123c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001210:	f7ff fbe6 	bl	80009e0 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001216:	e00a      	b.n	800122e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001218:	f7ff fbe2 	bl	80009e0 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001226:	4293      	cmp	r3, r2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e0cb      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800122e:	4b49      	ldr	r3, [pc, #292]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 8001230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0ee      	beq.n	8001218 <HAL_RCC_OscConfig+0x334>
 800123a:	e014      	b.n	8001266 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123c:	f7ff fbd0 	bl	80009e0 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001242:	e00a      	b.n	800125a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001244:	f7ff fbcc 	bl	80009e0 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001252:	4293      	cmp	r3, r2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e0b5      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800125a:	4b3e      	ldr	r3, [pc, #248]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 800125c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1ee      	bne.n	8001244 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001266:	7dfb      	ldrb	r3, [r7, #23]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d105      	bne.n	8001278 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800126c:	4b39      	ldr	r3, [pc, #228]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001270:	4a38      	ldr	r2, [pc, #224]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 8001272:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001276:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	2b00      	cmp	r3, #0
 800127e:	f000 80a1 	beq.w	80013c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001282:	4b34      	ldr	r3, [pc, #208]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 030c 	and.w	r3, r3, #12
 800128a:	2b08      	cmp	r3, #8
 800128c:	d05c      	beq.n	8001348 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	2b02      	cmp	r3, #2
 8001294:	d141      	bne.n	800131a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001296:	4b31      	ldr	r3, [pc, #196]	@ (800135c <HAL_RCC_OscConfig+0x478>)
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129c:	f7ff fba0 	bl	80009e0 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a4:	f7ff fb9c 	bl	80009e0 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e087      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012b6:	4b27      	ldr	r3, [pc, #156]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f0      	bne.n	80012a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69da      	ldr	r2, [r3, #28]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a1b      	ldr	r3, [r3, #32]
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d0:	019b      	lsls	r3, r3, #6
 80012d2:	431a      	orrs	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012d8:	085b      	lsrs	r3, r3, #1
 80012da:	3b01      	subs	r3, #1
 80012dc:	041b      	lsls	r3, r3, #16
 80012de:	431a      	orrs	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012e4:	061b      	lsls	r3, r3, #24
 80012e6:	491b      	ldr	r1, [pc, #108]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012ec:	4b1b      	ldr	r3, [pc, #108]	@ (800135c <HAL_RCC_OscConfig+0x478>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f2:	f7ff fb75 	bl	80009e0 <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012f8:	e008      	b.n	800130c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012fa:	f7ff fb71 	bl	80009e0 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e05c      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800130c:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0f0      	beq.n	80012fa <HAL_RCC_OscConfig+0x416>
 8001318:	e054      	b.n	80013c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800131a:	4b10      	ldr	r3, [pc, #64]	@ (800135c <HAL_RCC_OscConfig+0x478>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001320:	f7ff fb5e 	bl	80009e0 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001328:	f7ff fb5a 	bl	80009e0 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e045      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800133a:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <HAL_RCC_OscConfig+0x470>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f0      	bne.n	8001328 <HAL_RCC_OscConfig+0x444>
 8001346:	e03d      	b.n	80013c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d107      	bne.n	8001360 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e038      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
 8001354:	40023800 	.word	0x40023800
 8001358:	40007000 	.word	0x40007000
 800135c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001360:	4b1b      	ldr	r3, [pc, #108]	@ (80013d0 <HAL_RCC_OscConfig+0x4ec>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d028      	beq.n	80013c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001378:	429a      	cmp	r2, r3
 800137a:	d121      	bne.n	80013c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001386:	429a      	cmp	r2, r3
 8001388:	d11a      	bne.n	80013c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001390:	4013      	ands	r3, r2
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001396:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001398:	4293      	cmp	r3, r2
 800139a:	d111      	bne.n	80013c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013a6:	085b      	lsrs	r3, r3, #1
 80013a8:	3b01      	subs	r3, #1
 80013aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d107      	bne.n	80013c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013bc:	429a      	cmp	r2, r3
 80013be:	d001      	beq.n	80013c4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e000      	b.n	80013c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800

080013d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e0cc      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013e8:	4b68      	ldr	r3, [pc, #416]	@ (800158c <HAL_RCC_ClockConfig+0x1b8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0307 	and.w	r3, r3, #7
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d90c      	bls.n	8001410 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f6:	4b65      	ldr	r3, [pc, #404]	@ (800158c <HAL_RCC_ClockConfig+0x1b8>)
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fe:	4b63      	ldr	r3, [pc, #396]	@ (800158c <HAL_RCC_ClockConfig+0x1b8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d001      	beq.n	8001410 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e0b8      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d020      	beq.n	800145e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b00      	cmp	r3, #0
 8001426:	d005      	beq.n	8001434 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001428:	4b59      	ldr	r3, [pc, #356]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	4a58      	ldr	r2, [pc, #352]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800142e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001432:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0308 	and.w	r3, r3, #8
 800143c:	2b00      	cmp	r3, #0
 800143e:	d005      	beq.n	800144c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001440:	4b53      	ldr	r3, [pc, #332]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	4a52      	ldr	r2, [pc, #328]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001446:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800144a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800144c:	4b50      	ldr	r3, [pc, #320]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	494d      	ldr	r1, [pc, #308]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800145a:	4313      	orrs	r3, r2
 800145c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d044      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d107      	bne.n	8001482 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001472:	4b47      	ldr	r3, [pc, #284]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d119      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e07f      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d003      	beq.n	8001492 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800148e:	2b03      	cmp	r3, #3
 8001490:	d107      	bne.n	80014a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001492:	4b3f      	ldr	r3, [pc, #252]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d109      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e06f      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e067      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014b2:	4b37      	ldr	r3, [pc, #220]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f023 0203 	bic.w	r2, r3, #3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	4934      	ldr	r1, [pc, #208]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014c4:	f7ff fa8c 	bl	80009e0 <HAL_GetTick>
 80014c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ca:	e00a      	b.n	80014e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014cc:	f7ff fa88 	bl	80009e0 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014da:	4293      	cmp	r3, r2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e04f      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 020c 	and.w	r2, r3, #12
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d1eb      	bne.n	80014cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014f4:	4b25      	ldr	r3, [pc, #148]	@ (800158c <HAL_RCC_ClockConfig+0x1b8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d20c      	bcs.n	800151c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001502:	4b22      	ldr	r3, [pc, #136]	@ (800158c <HAL_RCC_ClockConfig+0x1b8>)
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800150a:	4b20      	ldr	r3, [pc, #128]	@ (800158c <HAL_RCC_ClockConfig+0x1b8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d001      	beq.n	800151c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e032      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	d008      	beq.n	800153a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001528:	4b19      	ldr	r3, [pc, #100]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	4916      	ldr	r1, [pc, #88]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001536:	4313      	orrs	r3, r2
 8001538:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	2b00      	cmp	r3, #0
 8001544:	d009      	beq.n	800155a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001546:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	490e      	ldr	r1, [pc, #56]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	4313      	orrs	r3, r2
 8001558:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800155a:	f000 f821 	bl	80015a0 <HAL_RCC_GetSysClockFreq>
 800155e:	4602      	mov	r2, r0
 8001560:	4b0b      	ldr	r3, [pc, #44]	@ (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	091b      	lsrs	r3, r3, #4
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	490a      	ldr	r1, [pc, #40]	@ (8001594 <HAL_RCC_ClockConfig+0x1c0>)
 800156c:	5ccb      	ldrb	r3, [r1, r3]
 800156e:	fa22 f303 	lsr.w	r3, r2, r3
 8001572:	4a09      	ldr	r2, [pc, #36]	@ (8001598 <HAL_RCC_ClockConfig+0x1c4>)
 8001574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001576:	4b09      	ldr	r3, [pc, #36]	@ (800159c <HAL_RCC_ClockConfig+0x1c8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff f9ec 	bl	8000958 <HAL_InitTick>

  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40023c00 	.word	0x40023c00
 8001590:	40023800 	.word	0x40023800
 8001594:	0800271c 	.word	0x0800271c
 8001598:	20000000 	.word	0x20000000
 800159c:	20000004 	.word	0x20000004

080015a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015a4:	b090      	sub	sp, #64	@ 0x40
 80015a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80015ac:	2300      	movs	r3, #0
 80015ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015b8:	4b59      	ldr	r3, [pc, #356]	@ (8001720 <HAL_RCC_GetSysClockFreq+0x180>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 030c 	and.w	r3, r3, #12
 80015c0:	2b08      	cmp	r3, #8
 80015c2:	d00d      	beq.n	80015e0 <HAL_RCC_GetSysClockFreq+0x40>
 80015c4:	2b08      	cmp	r3, #8
 80015c6:	f200 80a1 	bhi.w	800170c <HAL_RCC_GetSysClockFreq+0x16c>
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d002      	beq.n	80015d4 <HAL_RCC_GetSysClockFreq+0x34>
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	d003      	beq.n	80015da <HAL_RCC_GetSysClockFreq+0x3a>
 80015d2:	e09b      	b.n	800170c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015d4:	4b53      	ldr	r3, [pc, #332]	@ (8001724 <HAL_RCC_GetSysClockFreq+0x184>)
 80015d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80015d8:	e09b      	b.n	8001712 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015da:	4b53      	ldr	r3, [pc, #332]	@ (8001728 <HAL_RCC_GetSysClockFreq+0x188>)
 80015dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80015de:	e098      	b.n	8001712 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015e0:	4b4f      	ldr	r3, [pc, #316]	@ (8001720 <HAL_RCC_GetSysClockFreq+0x180>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015e8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015ea:	4b4d      	ldr	r3, [pc, #308]	@ (8001720 <HAL_RCC_GetSysClockFreq+0x180>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d028      	beq.n	8001648 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015f6:	4b4a      	ldr	r3, [pc, #296]	@ (8001720 <HAL_RCC_GetSysClockFreq+0x180>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	099b      	lsrs	r3, r3, #6
 80015fc:	2200      	movs	r2, #0
 80015fe:	623b      	str	r3, [r7, #32]
 8001600:	627a      	str	r2, [r7, #36]	@ 0x24
 8001602:	6a3b      	ldr	r3, [r7, #32]
 8001604:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001608:	2100      	movs	r1, #0
 800160a:	4b47      	ldr	r3, [pc, #284]	@ (8001728 <HAL_RCC_GetSysClockFreq+0x188>)
 800160c:	fb03 f201 	mul.w	r2, r3, r1
 8001610:	2300      	movs	r3, #0
 8001612:	fb00 f303 	mul.w	r3, r0, r3
 8001616:	4413      	add	r3, r2
 8001618:	4a43      	ldr	r2, [pc, #268]	@ (8001728 <HAL_RCC_GetSysClockFreq+0x188>)
 800161a:	fba0 1202 	umull	r1, r2, r0, r2
 800161e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001620:	460a      	mov	r2, r1
 8001622:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001624:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001626:	4413      	add	r3, r2
 8001628:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800162a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800162c:	2200      	movs	r2, #0
 800162e:	61bb      	str	r3, [r7, #24]
 8001630:	61fa      	str	r2, [r7, #28]
 8001632:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001636:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800163a:	f7fe fe21 	bl	8000280 <__aeabi_uldivmod>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4613      	mov	r3, r2
 8001644:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001646:	e053      	b.n	80016f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001648:	4b35      	ldr	r3, [pc, #212]	@ (8001720 <HAL_RCC_GetSysClockFreq+0x180>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	099b      	lsrs	r3, r3, #6
 800164e:	2200      	movs	r2, #0
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	617a      	str	r2, [r7, #20]
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800165a:	f04f 0b00 	mov.w	fp, #0
 800165e:	4652      	mov	r2, sl
 8001660:	465b      	mov	r3, fp
 8001662:	f04f 0000 	mov.w	r0, #0
 8001666:	f04f 0100 	mov.w	r1, #0
 800166a:	0159      	lsls	r1, r3, #5
 800166c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001670:	0150      	lsls	r0, r2, #5
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	ebb2 080a 	subs.w	r8, r2, sl
 800167a:	eb63 090b 	sbc.w	r9, r3, fp
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	f04f 0300 	mov.w	r3, #0
 8001686:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800168a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800168e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001692:	ebb2 0408 	subs.w	r4, r2, r8
 8001696:	eb63 0509 	sbc.w	r5, r3, r9
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	00eb      	lsls	r3, r5, #3
 80016a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016a8:	00e2      	lsls	r2, r4, #3
 80016aa:	4614      	mov	r4, r2
 80016ac:	461d      	mov	r5, r3
 80016ae:	eb14 030a 	adds.w	r3, r4, sl
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	eb45 030b 	adc.w	r3, r5, fp
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	f04f 0300 	mov.w	r3, #0
 80016c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016c6:	4629      	mov	r1, r5
 80016c8:	028b      	lsls	r3, r1, #10
 80016ca:	4621      	mov	r1, r4
 80016cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016d0:	4621      	mov	r1, r4
 80016d2:	028a      	lsls	r2, r1, #10
 80016d4:	4610      	mov	r0, r2
 80016d6:	4619      	mov	r1, r3
 80016d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016da:	2200      	movs	r2, #0
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	60fa      	str	r2, [r7, #12]
 80016e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016e4:	f7fe fdcc 	bl	8000280 <__aeabi_uldivmod>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4613      	mov	r3, r2
 80016ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80016f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001720 <HAL_RCC_GetSysClockFreq+0x180>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	0c1b      	lsrs	r3, r3, #16
 80016f6:	f003 0303 	and.w	r3, r3, #3
 80016fa:	3301      	adds	r3, #1
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001700:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001704:	fbb2 f3f3 	udiv	r3, r2, r3
 8001708:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800170a:	e002      	b.n	8001712 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800170c:	4b05      	ldr	r3, [pc, #20]	@ (8001724 <HAL_RCC_GetSysClockFreq+0x184>)
 800170e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001710:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001714:	4618      	mov	r0, r3
 8001716:	3740      	adds	r7, #64	@ 0x40
 8001718:	46bd      	mov	sp, r7
 800171a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800
 8001724:	00f42400 	.word	0x00f42400
 8001728:	017d7840 	.word	0x017d7840

0800172c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001730:	4b03      	ldr	r3, [pc, #12]	@ (8001740 <HAL_RCC_GetHCLKFreq+0x14>)
 8001732:	681b      	ldr	r3, [r3, #0]
}
 8001734:	4618      	mov	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20000000 	.word	0x20000000

08001744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001748:	f7ff fff0 	bl	800172c <HAL_RCC_GetHCLKFreq>
 800174c:	4602      	mov	r2, r0
 800174e:	4b05      	ldr	r3, [pc, #20]	@ (8001764 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	0a9b      	lsrs	r3, r3, #10
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	4903      	ldr	r1, [pc, #12]	@ (8001768 <HAL_RCC_GetPCLK1Freq+0x24>)
 800175a:	5ccb      	ldrb	r3, [r1, r3]
 800175c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001760:	4618      	mov	r0, r3
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40023800 	.word	0x40023800
 8001768:	0800272c 	.word	0x0800272c

0800176c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001770:	f7ff ffdc 	bl	800172c <HAL_RCC_GetHCLKFreq>
 8001774:	4602      	mov	r2, r0
 8001776:	4b05      	ldr	r3, [pc, #20]	@ (800178c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	0b5b      	lsrs	r3, r3, #13
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	4903      	ldr	r1, [pc, #12]	@ (8001790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001782:	5ccb      	ldrb	r3, [r1, r3]
 8001784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001788:	4618      	mov	r0, r3
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40023800 	.word	0x40023800
 8001790:	0800272c 	.word	0x0800272c

08001794 <std>:
 8001794:	2300      	movs	r3, #0
 8001796:	b510      	push	{r4, lr}
 8001798:	4604      	mov	r4, r0
 800179a:	e9c0 3300 	strd	r3, r3, [r0]
 800179e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80017a2:	6083      	str	r3, [r0, #8]
 80017a4:	8181      	strh	r1, [r0, #12]
 80017a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80017a8:	81c2      	strh	r2, [r0, #14]
 80017aa:	6183      	str	r3, [r0, #24]
 80017ac:	4619      	mov	r1, r3
 80017ae:	2208      	movs	r2, #8
 80017b0:	305c      	adds	r0, #92	@ 0x5c
 80017b2:	f000 f9f9 	bl	8001ba8 <memset>
 80017b6:	4b0d      	ldr	r3, [pc, #52]	@ (80017ec <std+0x58>)
 80017b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80017ba:	4b0d      	ldr	r3, [pc, #52]	@ (80017f0 <std+0x5c>)
 80017bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80017be:	4b0d      	ldr	r3, [pc, #52]	@ (80017f4 <std+0x60>)
 80017c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80017c2:	4b0d      	ldr	r3, [pc, #52]	@ (80017f8 <std+0x64>)
 80017c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80017c6:	4b0d      	ldr	r3, [pc, #52]	@ (80017fc <std+0x68>)
 80017c8:	6224      	str	r4, [r4, #32]
 80017ca:	429c      	cmp	r4, r3
 80017cc:	d006      	beq.n	80017dc <std+0x48>
 80017ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80017d2:	4294      	cmp	r4, r2
 80017d4:	d002      	beq.n	80017dc <std+0x48>
 80017d6:	33d0      	adds	r3, #208	@ 0xd0
 80017d8:	429c      	cmp	r4, r3
 80017da:	d105      	bne.n	80017e8 <std+0x54>
 80017dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80017e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017e4:	f000 ba58 	b.w	8001c98 <__retarget_lock_init_recursive>
 80017e8:	bd10      	pop	{r4, pc}
 80017ea:	bf00      	nop
 80017ec:	080019f9 	.word	0x080019f9
 80017f0:	08001a1b 	.word	0x08001a1b
 80017f4:	08001a53 	.word	0x08001a53
 80017f8:	08001a77 	.word	0x08001a77
 80017fc:	2000008c 	.word	0x2000008c

08001800 <stdio_exit_handler>:
 8001800:	4a02      	ldr	r2, [pc, #8]	@ (800180c <stdio_exit_handler+0xc>)
 8001802:	4903      	ldr	r1, [pc, #12]	@ (8001810 <stdio_exit_handler+0x10>)
 8001804:	4803      	ldr	r0, [pc, #12]	@ (8001814 <stdio_exit_handler+0x14>)
 8001806:	f000 b869 	b.w	80018dc <_fwalk_sglue>
 800180a:	bf00      	nop
 800180c:	2000000c 	.word	0x2000000c
 8001810:	08002535 	.word	0x08002535
 8001814:	2000001c 	.word	0x2000001c

08001818 <cleanup_stdio>:
 8001818:	6841      	ldr	r1, [r0, #4]
 800181a:	4b0c      	ldr	r3, [pc, #48]	@ (800184c <cleanup_stdio+0x34>)
 800181c:	4299      	cmp	r1, r3
 800181e:	b510      	push	{r4, lr}
 8001820:	4604      	mov	r4, r0
 8001822:	d001      	beq.n	8001828 <cleanup_stdio+0x10>
 8001824:	f000 fe86 	bl	8002534 <_fflush_r>
 8001828:	68a1      	ldr	r1, [r4, #8]
 800182a:	4b09      	ldr	r3, [pc, #36]	@ (8001850 <cleanup_stdio+0x38>)
 800182c:	4299      	cmp	r1, r3
 800182e:	d002      	beq.n	8001836 <cleanup_stdio+0x1e>
 8001830:	4620      	mov	r0, r4
 8001832:	f000 fe7f 	bl	8002534 <_fflush_r>
 8001836:	68e1      	ldr	r1, [r4, #12]
 8001838:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <cleanup_stdio+0x3c>)
 800183a:	4299      	cmp	r1, r3
 800183c:	d004      	beq.n	8001848 <cleanup_stdio+0x30>
 800183e:	4620      	mov	r0, r4
 8001840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001844:	f000 be76 	b.w	8002534 <_fflush_r>
 8001848:	bd10      	pop	{r4, pc}
 800184a:	bf00      	nop
 800184c:	2000008c 	.word	0x2000008c
 8001850:	200000f4 	.word	0x200000f4
 8001854:	2000015c 	.word	0x2000015c

08001858 <global_stdio_init.part.0>:
 8001858:	b510      	push	{r4, lr}
 800185a:	4b0b      	ldr	r3, [pc, #44]	@ (8001888 <global_stdio_init.part.0+0x30>)
 800185c:	4c0b      	ldr	r4, [pc, #44]	@ (800188c <global_stdio_init.part.0+0x34>)
 800185e:	4a0c      	ldr	r2, [pc, #48]	@ (8001890 <global_stdio_init.part.0+0x38>)
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	4620      	mov	r0, r4
 8001864:	2200      	movs	r2, #0
 8001866:	2104      	movs	r1, #4
 8001868:	f7ff ff94 	bl	8001794 <std>
 800186c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001870:	2201      	movs	r2, #1
 8001872:	2109      	movs	r1, #9
 8001874:	f7ff ff8e 	bl	8001794 <std>
 8001878:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800187c:	2202      	movs	r2, #2
 800187e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001882:	2112      	movs	r1, #18
 8001884:	f7ff bf86 	b.w	8001794 <std>
 8001888:	200001c4 	.word	0x200001c4
 800188c:	2000008c 	.word	0x2000008c
 8001890:	08001801 	.word	0x08001801

08001894 <__sfp_lock_acquire>:
 8001894:	4801      	ldr	r0, [pc, #4]	@ (800189c <__sfp_lock_acquire+0x8>)
 8001896:	f000 ba00 	b.w	8001c9a <__retarget_lock_acquire_recursive>
 800189a:	bf00      	nop
 800189c:	200001cd 	.word	0x200001cd

080018a0 <__sfp_lock_release>:
 80018a0:	4801      	ldr	r0, [pc, #4]	@ (80018a8 <__sfp_lock_release+0x8>)
 80018a2:	f000 b9fb 	b.w	8001c9c <__retarget_lock_release_recursive>
 80018a6:	bf00      	nop
 80018a8:	200001cd 	.word	0x200001cd

080018ac <__sinit>:
 80018ac:	b510      	push	{r4, lr}
 80018ae:	4604      	mov	r4, r0
 80018b0:	f7ff fff0 	bl	8001894 <__sfp_lock_acquire>
 80018b4:	6a23      	ldr	r3, [r4, #32]
 80018b6:	b11b      	cbz	r3, 80018c0 <__sinit+0x14>
 80018b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018bc:	f7ff bff0 	b.w	80018a0 <__sfp_lock_release>
 80018c0:	4b04      	ldr	r3, [pc, #16]	@ (80018d4 <__sinit+0x28>)
 80018c2:	6223      	str	r3, [r4, #32]
 80018c4:	4b04      	ldr	r3, [pc, #16]	@ (80018d8 <__sinit+0x2c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1f5      	bne.n	80018b8 <__sinit+0xc>
 80018cc:	f7ff ffc4 	bl	8001858 <global_stdio_init.part.0>
 80018d0:	e7f2      	b.n	80018b8 <__sinit+0xc>
 80018d2:	bf00      	nop
 80018d4:	08001819 	.word	0x08001819
 80018d8:	200001c4 	.word	0x200001c4

080018dc <_fwalk_sglue>:
 80018dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018e0:	4607      	mov	r7, r0
 80018e2:	4688      	mov	r8, r1
 80018e4:	4614      	mov	r4, r2
 80018e6:	2600      	movs	r6, #0
 80018e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80018ec:	f1b9 0901 	subs.w	r9, r9, #1
 80018f0:	d505      	bpl.n	80018fe <_fwalk_sglue+0x22>
 80018f2:	6824      	ldr	r4, [r4, #0]
 80018f4:	2c00      	cmp	r4, #0
 80018f6:	d1f7      	bne.n	80018e8 <_fwalk_sglue+0xc>
 80018f8:	4630      	mov	r0, r6
 80018fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80018fe:	89ab      	ldrh	r3, [r5, #12]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d907      	bls.n	8001914 <_fwalk_sglue+0x38>
 8001904:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001908:	3301      	adds	r3, #1
 800190a:	d003      	beq.n	8001914 <_fwalk_sglue+0x38>
 800190c:	4629      	mov	r1, r5
 800190e:	4638      	mov	r0, r7
 8001910:	47c0      	blx	r8
 8001912:	4306      	orrs	r6, r0
 8001914:	3568      	adds	r5, #104	@ 0x68
 8001916:	e7e9      	b.n	80018ec <_fwalk_sglue+0x10>

08001918 <iprintf>:
 8001918:	b40f      	push	{r0, r1, r2, r3}
 800191a:	b507      	push	{r0, r1, r2, lr}
 800191c:	4906      	ldr	r1, [pc, #24]	@ (8001938 <iprintf+0x20>)
 800191e:	ab04      	add	r3, sp, #16
 8001920:	6808      	ldr	r0, [r1, #0]
 8001922:	f853 2b04 	ldr.w	r2, [r3], #4
 8001926:	6881      	ldr	r1, [r0, #8]
 8001928:	9301      	str	r3, [sp, #4]
 800192a:	f000 fadb 	bl	8001ee4 <_vfiprintf_r>
 800192e:	b003      	add	sp, #12
 8001930:	f85d eb04 	ldr.w	lr, [sp], #4
 8001934:	b004      	add	sp, #16
 8001936:	4770      	bx	lr
 8001938:	20000018 	.word	0x20000018

0800193c <_puts_r>:
 800193c:	6a03      	ldr	r3, [r0, #32]
 800193e:	b570      	push	{r4, r5, r6, lr}
 8001940:	6884      	ldr	r4, [r0, #8]
 8001942:	4605      	mov	r5, r0
 8001944:	460e      	mov	r6, r1
 8001946:	b90b      	cbnz	r3, 800194c <_puts_r+0x10>
 8001948:	f7ff ffb0 	bl	80018ac <__sinit>
 800194c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800194e:	07db      	lsls	r3, r3, #31
 8001950:	d405      	bmi.n	800195e <_puts_r+0x22>
 8001952:	89a3      	ldrh	r3, [r4, #12]
 8001954:	0598      	lsls	r0, r3, #22
 8001956:	d402      	bmi.n	800195e <_puts_r+0x22>
 8001958:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800195a:	f000 f99e 	bl	8001c9a <__retarget_lock_acquire_recursive>
 800195e:	89a3      	ldrh	r3, [r4, #12]
 8001960:	0719      	lsls	r1, r3, #28
 8001962:	d502      	bpl.n	800196a <_puts_r+0x2e>
 8001964:	6923      	ldr	r3, [r4, #16]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d135      	bne.n	80019d6 <_puts_r+0x9a>
 800196a:	4621      	mov	r1, r4
 800196c:	4628      	mov	r0, r5
 800196e:	f000 f8c5 	bl	8001afc <__swsetup_r>
 8001972:	b380      	cbz	r0, 80019d6 <_puts_r+0x9a>
 8001974:	f04f 35ff 	mov.w	r5, #4294967295
 8001978:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800197a:	07da      	lsls	r2, r3, #31
 800197c:	d405      	bmi.n	800198a <_puts_r+0x4e>
 800197e:	89a3      	ldrh	r3, [r4, #12]
 8001980:	059b      	lsls	r3, r3, #22
 8001982:	d402      	bmi.n	800198a <_puts_r+0x4e>
 8001984:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001986:	f000 f989 	bl	8001c9c <__retarget_lock_release_recursive>
 800198a:	4628      	mov	r0, r5
 800198c:	bd70      	pop	{r4, r5, r6, pc}
 800198e:	2b00      	cmp	r3, #0
 8001990:	da04      	bge.n	800199c <_puts_r+0x60>
 8001992:	69a2      	ldr	r2, [r4, #24]
 8001994:	429a      	cmp	r2, r3
 8001996:	dc17      	bgt.n	80019c8 <_puts_r+0x8c>
 8001998:	290a      	cmp	r1, #10
 800199a:	d015      	beq.n	80019c8 <_puts_r+0x8c>
 800199c:	6823      	ldr	r3, [r4, #0]
 800199e:	1c5a      	adds	r2, r3, #1
 80019a0:	6022      	str	r2, [r4, #0]
 80019a2:	7019      	strb	r1, [r3, #0]
 80019a4:	68a3      	ldr	r3, [r4, #8]
 80019a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80019aa:	3b01      	subs	r3, #1
 80019ac:	60a3      	str	r3, [r4, #8]
 80019ae:	2900      	cmp	r1, #0
 80019b0:	d1ed      	bne.n	800198e <_puts_r+0x52>
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	da11      	bge.n	80019da <_puts_r+0x9e>
 80019b6:	4622      	mov	r2, r4
 80019b8:	210a      	movs	r1, #10
 80019ba:	4628      	mov	r0, r5
 80019bc:	f000 f85f 	bl	8001a7e <__swbuf_r>
 80019c0:	3001      	adds	r0, #1
 80019c2:	d0d7      	beq.n	8001974 <_puts_r+0x38>
 80019c4:	250a      	movs	r5, #10
 80019c6:	e7d7      	b.n	8001978 <_puts_r+0x3c>
 80019c8:	4622      	mov	r2, r4
 80019ca:	4628      	mov	r0, r5
 80019cc:	f000 f857 	bl	8001a7e <__swbuf_r>
 80019d0:	3001      	adds	r0, #1
 80019d2:	d1e7      	bne.n	80019a4 <_puts_r+0x68>
 80019d4:	e7ce      	b.n	8001974 <_puts_r+0x38>
 80019d6:	3e01      	subs	r6, #1
 80019d8:	e7e4      	b.n	80019a4 <_puts_r+0x68>
 80019da:	6823      	ldr	r3, [r4, #0]
 80019dc:	1c5a      	adds	r2, r3, #1
 80019de:	6022      	str	r2, [r4, #0]
 80019e0:	220a      	movs	r2, #10
 80019e2:	701a      	strb	r2, [r3, #0]
 80019e4:	e7ee      	b.n	80019c4 <_puts_r+0x88>
	...

080019e8 <puts>:
 80019e8:	4b02      	ldr	r3, [pc, #8]	@ (80019f4 <puts+0xc>)
 80019ea:	4601      	mov	r1, r0
 80019ec:	6818      	ldr	r0, [r3, #0]
 80019ee:	f7ff bfa5 	b.w	800193c <_puts_r>
 80019f2:	bf00      	nop
 80019f4:	20000018 	.word	0x20000018

080019f8 <__sread>:
 80019f8:	b510      	push	{r4, lr}
 80019fa:	460c      	mov	r4, r1
 80019fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a00:	f000 f8fc 	bl	8001bfc <_read_r>
 8001a04:	2800      	cmp	r0, #0
 8001a06:	bfab      	itete	ge
 8001a08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001a0a:	89a3      	ldrhlt	r3, [r4, #12]
 8001a0c:	181b      	addge	r3, r3, r0
 8001a0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001a12:	bfac      	ite	ge
 8001a14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001a16:	81a3      	strhlt	r3, [r4, #12]
 8001a18:	bd10      	pop	{r4, pc}

08001a1a <__swrite>:
 8001a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a1e:	461f      	mov	r7, r3
 8001a20:	898b      	ldrh	r3, [r1, #12]
 8001a22:	05db      	lsls	r3, r3, #23
 8001a24:	4605      	mov	r5, r0
 8001a26:	460c      	mov	r4, r1
 8001a28:	4616      	mov	r6, r2
 8001a2a:	d505      	bpl.n	8001a38 <__swrite+0x1e>
 8001a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a30:	2302      	movs	r3, #2
 8001a32:	2200      	movs	r2, #0
 8001a34:	f000 f8d0 	bl	8001bd8 <_lseek_r>
 8001a38:	89a3      	ldrh	r3, [r4, #12]
 8001a3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a42:	81a3      	strh	r3, [r4, #12]
 8001a44:	4632      	mov	r2, r6
 8001a46:	463b      	mov	r3, r7
 8001a48:	4628      	mov	r0, r5
 8001a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001a4e:	f000 b8e7 	b.w	8001c20 <_write_r>

08001a52 <__sseek>:
 8001a52:	b510      	push	{r4, lr}
 8001a54:	460c      	mov	r4, r1
 8001a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a5a:	f000 f8bd 	bl	8001bd8 <_lseek_r>
 8001a5e:	1c43      	adds	r3, r0, #1
 8001a60:	89a3      	ldrh	r3, [r4, #12]
 8001a62:	bf15      	itete	ne
 8001a64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001a66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001a6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001a6e:	81a3      	strheq	r3, [r4, #12]
 8001a70:	bf18      	it	ne
 8001a72:	81a3      	strhne	r3, [r4, #12]
 8001a74:	bd10      	pop	{r4, pc}

08001a76 <__sclose>:
 8001a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a7a:	f000 b89d 	b.w	8001bb8 <_close_r>

08001a7e <__swbuf_r>:
 8001a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a80:	460e      	mov	r6, r1
 8001a82:	4614      	mov	r4, r2
 8001a84:	4605      	mov	r5, r0
 8001a86:	b118      	cbz	r0, 8001a90 <__swbuf_r+0x12>
 8001a88:	6a03      	ldr	r3, [r0, #32]
 8001a8a:	b90b      	cbnz	r3, 8001a90 <__swbuf_r+0x12>
 8001a8c:	f7ff ff0e 	bl	80018ac <__sinit>
 8001a90:	69a3      	ldr	r3, [r4, #24]
 8001a92:	60a3      	str	r3, [r4, #8]
 8001a94:	89a3      	ldrh	r3, [r4, #12]
 8001a96:	071a      	lsls	r2, r3, #28
 8001a98:	d501      	bpl.n	8001a9e <__swbuf_r+0x20>
 8001a9a:	6923      	ldr	r3, [r4, #16]
 8001a9c:	b943      	cbnz	r3, 8001ab0 <__swbuf_r+0x32>
 8001a9e:	4621      	mov	r1, r4
 8001aa0:	4628      	mov	r0, r5
 8001aa2:	f000 f82b 	bl	8001afc <__swsetup_r>
 8001aa6:	b118      	cbz	r0, 8001ab0 <__swbuf_r+0x32>
 8001aa8:	f04f 37ff 	mov.w	r7, #4294967295
 8001aac:	4638      	mov	r0, r7
 8001aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ab0:	6823      	ldr	r3, [r4, #0]
 8001ab2:	6922      	ldr	r2, [r4, #16]
 8001ab4:	1a98      	subs	r0, r3, r2
 8001ab6:	6963      	ldr	r3, [r4, #20]
 8001ab8:	b2f6      	uxtb	r6, r6
 8001aba:	4283      	cmp	r3, r0
 8001abc:	4637      	mov	r7, r6
 8001abe:	dc05      	bgt.n	8001acc <__swbuf_r+0x4e>
 8001ac0:	4621      	mov	r1, r4
 8001ac2:	4628      	mov	r0, r5
 8001ac4:	f000 fd36 	bl	8002534 <_fflush_r>
 8001ac8:	2800      	cmp	r0, #0
 8001aca:	d1ed      	bne.n	8001aa8 <__swbuf_r+0x2a>
 8001acc:	68a3      	ldr	r3, [r4, #8]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	60a3      	str	r3, [r4, #8]
 8001ad2:	6823      	ldr	r3, [r4, #0]
 8001ad4:	1c5a      	adds	r2, r3, #1
 8001ad6:	6022      	str	r2, [r4, #0]
 8001ad8:	701e      	strb	r6, [r3, #0]
 8001ada:	6962      	ldr	r2, [r4, #20]
 8001adc:	1c43      	adds	r3, r0, #1
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d004      	beq.n	8001aec <__swbuf_r+0x6e>
 8001ae2:	89a3      	ldrh	r3, [r4, #12]
 8001ae4:	07db      	lsls	r3, r3, #31
 8001ae6:	d5e1      	bpl.n	8001aac <__swbuf_r+0x2e>
 8001ae8:	2e0a      	cmp	r6, #10
 8001aea:	d1df      	bne.n	8001aac <__swbuf_r+0x2e>
 8001aec:	4621      	mov	r1, r4
 8001aee:	4628      	mov	r0, r5
 8001af0:	f000 fd20 	bl	8002534 <_fflush_r>
 8001af4:	2800      	cmp	r0, #0
 8001af6:	d0d9      	beq.n	8001aac <__swbuf_r+0x2e>
 8001af8:	e7d6      	b.n	8001aa8 <__swbuf_r+0x2a>
	...

08001afc <__swsetup_r>:
 8001afc:	b538      	push	{r3, r4, r5, lr}
 8001afe:	4b29      	ldr	r3, [pc, #164]	@ (8001ba4 <__swsetup_r+0xa8>)
 8001b00:	4605      	mov	r5, r0
 8001b02:	6818      	ldr	r0, [r3, #0]
 8001b04:	460c      	mov	r4, r1
 8001b06:	b118      	cbz	r0, 8001b10 <__swsetup_r+0x14>
 8001b08:	6a03      	ldr	r3, [r0, #32]
 8001b0a:	b90b      	cbnz	r3, 8001b10 <__swsetup_r+0x14>
 8001b0c:	f7ff fece 	bl	80018ac <__sinit>
 8001b10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b14:	0719      	lsls	r1, r3, #28
 8001b16:	d422      	bmi.n	8001b5e <__swsetup_r+0x62>
 8001b18:	06da      	lsls	r2, r3, #27
 8001b1a:	d407      	bmi.n	8001b2c <__swsetup_r+0x30>
 8001b1c:	2209      	movs	r2, #9
 8001b1e:	602a      	str	r2, [r5, #0]
 8001b20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b24:	81a3      	strh	r3, [r4, #12]
 8001b26:	f04f 30ff 	mov.w	r0, #4294967295
 8001b2a:	e033      	b.n	8001b94 <__swsetup_r+0x98>
 8001b2c:	0758      	lsls	r0, r3, #29
 8001b2e:	d512      	bpl.n	8001b56 <__swsetup_r+0x5a>
 8001b30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001b32:	b141      	cbz	r1, 8001b46 <__swsetup_r+0x4a>
 8001b34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001b38:	4299      	cmp	r1, r3
 8001b3a:	d002      	beq.n	8001b42 <__swsetup_r+0x46>
 8001b3c:	4628      	mov	r0, r5
 8001b3e:	f000 f8af 	bl	8001ca0 <_free_r>
 8001b42:	2300      	movs	r3, #0
 8001b44:	6363      	str	r3, [r4, #52]	@ 0x34
 8001b46:	89a3      	ldrh	r3, [r4, #12]
 8001b48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001b4c:	81a3      	strh	r3, [r4, #12]
 8001b4e:	2300      	movs	r3, #0
 8001b50:	6063      	str	r3, [r4, #4]
 8001b52:	6923      	ldr	r3, [r4, #16]
 8001b54:	6023      	str	r3, [r4, #0]
 8001b56:	89a3      	ldrh	r3, [r4, #12]
 8001b58:	f043 0308 	orr.w	r3, r3, #8
 8001b5c:	81a3      	strh	r3, [r4, #12]
 8001b5e:	6923      	ldr	r3, [r4, #16]
 8001b60:	b94b      	cbnz	r3, 8001b76 <__swsetup_r+0x7a>
 8001b62:	89a3      	ldrh	r3, [r4, #12]
 8001b64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001b68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b6c:	d003      	beq.n	8001b76 <__swsetup_r+0x7a>
 8001b6e:	4621      	mov	r1, r4
 8001b70:	4628      	mov	r0, r5
 8001b72:	f000 fd2d 	bl	80025d0 <__smakebuf_r>
 8001b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b7a:	f013 0201 	ands.w	r2, r3, #1
 8001b7e:	d00a      	beq.n	8001b96 <__swsetup_r+0x9a>
 8001b80:	2200      	movs	r2, #0
 8001b82:	60a2      	str	r2, [r4, #8]
 8001b84:	6962      	ldr	r2, [r4, #20]
 8001b86:	4252      	negs	r2, r2
 8001b88:	61a2      	str	r2, [r4, #24]
 8001b8a:	6922      	ldr	r2, [r4, #16]
 8001b8c:	b942      	cbnz	r2, 8001ba0 <__swsetup_r+0xa4>
 8001b8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001b92:	d1c5      	bne.n	8001b20 <__swsetup_r+0x24>
 8001b94:	bd38      	pop	{r3, r4, r5, pc}
 8001b96:	0799      	lsls	r1, r3, #30
 8001b98:	bf58      	it	pl
 8001b9a:	6962      	ldrpl	r2, [r4, #20]
 8001b9c:	60a2      	str	r2, [r4, #8]
 8001b9e:	e7f4      	b.n	8001b8a <__swsetup_r+0x8e>
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	e7f7      	b.n	8001b94 <__swsetup_r+0x98>
 8001ba4:	20000018 	.word	0x20000018

08001ba8 <memset>:
 8001ba8:	4402      	add	r2, r0
 8001baa:	4603      	mov	r3, r0
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d100      	bne.n	8001bb2 <memset+0xa>
 8001bb0:	4770      	bx	lr
 8001bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8001bb6:	e7f9      	b.n	8001bac <memset+0x4>

08001bb8 <_close_r>:
 8001bb8:	b538      	push	{r3, r4, r5, lr}
 8001bba:	4d06      	ldr	r5, [pc, #24]	@ (8001bd4 <_close_r+0x1c>)
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	4604      	mov	r4, r0
 8001bc0:	4608      	mov	r0, r1
 8001bc2:	602b      	str	r3, [r5, #0]
 8001bc4:	f7fe fdf7 	bl	80007b6 <_close>
 8001bc8:	1c43      	adds	r3, r0, #1
 8001bca:	d102      	bne.n	8001bd2 <_close_r+0x1a>
 8001bcc:	682b      	ldr	r3, [r5, #0]
 8001bce:	b103      	cbz	r3, 8001bd2 <_close_r+0x1a>
 8001bd0:	6023      	str	r3, [r4, #0]
 8001bd2:	bd38      	pop	{r3, r4, r5, pc}
 8001bd4:	200001c8 	.word	0x200001c8

08001bd8 <_lseek_r>:
 8001bd8:	b538      	push	{r3, r4, r5, lr}
 8001bda:	4d07      	ldr	r5, [pc, #28]	@ (8001bf8 <_lseek_r+0x20>)
 8001bdc:	4604      	mov	r4, r0
 8001bde:	4608      	mov	r0, r1
 8001be0:	4611      	mov	r1, r2
 8001be2:	2200      	movs	r2, #0
 8001be4:	602a      	str	r2, [r5, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	f7fe fe0c 	bl	8000804 <_lseek>
 8001bec:	1c43      	adds	r3, r0, #1
 8001bee:	d102      	bne.n	8001bf6 <_lseek_r+0x1e>
 8001bf0:	682b      	ldr	r3, [r5, #0]
 8001bf2:	b103      	cbz	r3, 8001bf6 <_lseek_r+0x1e>
 8001bf4:	6023      	str	r3, [r4, #0]
 8001bf6:	bd38      	pop	{r3, r4, r5, pc}
 8001bf8:	200001c8 	.word	0x200001c8

08001bfc <_read_r>:
 8001bfc:	b538      	push	{r3, r4, r5, lr}
 8001bfe:	4d07      	ldr	r5, [pc, #28]	@ (8001c1c <_read_r+0x20>)
 8001c00:	4604      	mov	r4, r0
 8001c02:	4608      	mov	r0, r1
 8001c04:	4611      	mov	r1, r2
 8001c06:	2200      	movs	r2, #0
 8001c08:	602a      	str	r2, [r5, #0]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	f7fe fd9a 	bl	8000744 <_read>
 8001c10:	1c43      	adds	r3, r0, #1
 8001c12:	d102      	bne.n	8001c1a <_read_r+0x1e>
 8001c14:	682b      	ldr	r3, [r5, #0]
 8001c16:	b103      	cbz	r3, 8001c1a <_read_r+0x1e>
 8001c18:	6023      	str	r3, [r4, #0]
 8001c1a:	bd38      	pop	{r3, r4, r5, pc}
 8001c1c:	200001c8 	.word	0x200001c8

08001c20 <_write_r>:
 8001c20:	b538      	push	{r3, r4, r5, lr}
 8001c22:	4d07      	ldr	r5, [pc, #28]	@ (8001c40 <_write_r+0x20>)
 8001c24:	4604      	mov	r4, r0
 8001c26:	4608      	mov	r0, r1
 8001c28:	4611      	mov	r1, r2
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	602a      	str	r2, [r5, #0]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	f7fe fda5 	bl	800077e <_write>
 8001c34:	1c43      	adds	r3, r0, #1
 8001c36:	d102      	bne.n	8001c3e <_write_r+0x1e>
 8001c38:	682b      	ldr	r3, [r5, #0]
 8001c3a:	b103      	cbz	r3, 8001c3e <_write_r+0x1e>
 8001c3c:	6023      	str	r3, [r4, #0]
 8001c3e:	bd38      	pop	{r3, r4, r5, pc}
 8001c40:	200001c8 	.word	0x200001c8

08001c44 <__errno>:
 8001c44:	4b01      	ldr	r3, [pc, #4]	@ (8001c4c <__errno+0x8>)
 8001c46:	6818      	ldr	r0, [r3, #0]
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20000018 	.word	0x20000018

08001c50 <__libc_init_array>:
 8001c50:	b570      	push	{r4, r5, r6, lr}
 8001c52:	4d0d      	ldr	r5, [pc, #52]	@ (8001c88 <__libc_init_array+0x38>)
 8001c54:	4c0d      	ldr	r4, [pc, #52]	@ (8001c8c <__libc_init_array+0x3c>)
 8001c56:	1b64      	subs	r4, r4, r5
 8001c58:	10a4      	asrs	r4, r4, #2
 8001c5a:	2600      	movs	r6, #0
 8001c5c:	42a6      	cmp	r6, r4
 8001c5e:	d109      	bne.n	8001c74 <__libc_init_array+0x24>
 8001c60:	4d0b      	ldr	r5, [pc, #44]	@ (8001c90 <__libc_init_array+0x40>)
 8001c62:	4c0c      	ldr	r4, [pc, #48]	@ (8001c94 <__libc_init_array+0x44>)
 8001c64:	f000 fd22 	bl	80026ac <_init>
 8001c68:	1b64      	subs	r4, r4, r5
 8001c6a:	10a4      	asrs	r4, r4, #2
 8001c6c:	2600      	movs	r6, #0
 8001c6e:	42a6      	cmp	r6, r4
 8001c70:	d105      	bne.n	8001c7e <__libc_init_array+0x2e>
 8001c72:	bd70      	pop	{r4, r5, r6, pc}
 8001c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c78:	4798      	blx	r3
 8001c7a:	3601      	adds	r6, #1
 8001c7c:	e7ee      	b.n	8001c5c <__libc_init_array+0xc>
 8001c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c82:	4798      	blx	r3
 8001c84:	3601      	adds	r6, #1
 8001c86:	e7f2      	b.n	8001c6e <__libc_init_array+0x1e>
 8001c88:	08002770 	.word	0x08002770
 8001c8c:	08002770 	.word	0x08002770
 8001c90:	08002770 	.word	0x08002770
 8001c94:	08002774 	.word	0x08002774

08001c98 <__retarget_lock_init_recursive>:
 8001c98:	4770      	bx	lr

08001c9a <__retarget_lock_acquire_recursive>:
 8001c9a:	4770      	bx	lr

08001c9c <__retarget_lock_release_recursive>:
 8001c9c:	4770      	bx	lr
	...

08001ca0 <_free_r>:
 8001ca0:	b538      	push	{r3, r4, r5, lr}
 8001ca2:	4605      	mov	r5, r0
 8001ca4:	2900      	cmp	r1, #0
 8001ca6:	d041      	beq.n	8001d2c <_free_r+0x8c>
 8001ca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001cac:	1f0c      	subs	r4, r1, #4
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	bfb8      	it	lt
 8001cb2:	18e4      	addlt	r4, r4, r3
 8001cb4:	f000 f8e0 	bl	8001e78 <__malloc_lock>
 8001cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8001d30 <_free_r+0x90>)
 8001cba:	6813      	ldr	r3, [r2, #0]
 8001cbc:	b933      	cbnz	r3, 8001ccc <_free_r+0x2c>
 8001cbe:	6063      	str	r3, [r4, #4]
 8001cc0:	6014      	str	r4, [r2, #0]
 8001cc2:	4628      	mov	r0, r5
 8001cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001cc8:	f000 b8dc 	b.w	8001e84 <__malloc_unlock>
 8001ccc:	42a3      	cmp	r3, r4
 8001cce:	d908      	bls.n	8001ce2 <_free_r+0x42>
 8001cd0:	6820      	ldr	r0, [r4, #0]
 8001cd2:	1821      	adds	r1, r4, r0
 8001cd4:	428b      	cmp	r3, r1
 8001cd6:	bf01      	itttt	eq
 8001cd8:	6819      	ldreq	r1, [r3, #0]
 8001cda:	685b      	ldreq	r3, [r3, #4]
 8001cdc:	1809      	addeq	r1, r1, r0
 8001cde:	6021      	streq	r1, [r4, #0]
 8001ce0:	e7ed      	b.n	8001cbe <_free_r+0x1e>
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	b10b      	cbz	r3, 8001cec <_free_r+0x4c>
 8001ce8:	42a3      	cmp	r3, r4
 8001cea:	d9fa      	bls.n	8001ce2 <_free_r+0x42>
 8001cec:	6811      	ldr	r1, [r2, #0]
 8001cee:	1850      	adds	r0, r2, r1
 8001cf0:	42a0      	cmp	r0, r4
 8001cf2:	d10b      	bne.n	8001d0c <_free_r+0x6c>
 8001cf4:	6820      	ldr	r0, [r4, #0]
 8001cf6:	4401      	add	r1, r0
 8001cf8:	1850      	adds	r0, r2, r1
 8001cfa:	4283      	cmp	r3, r0
 8001cfc:	6011      	str	r1, [r2, #0]
 8001cfe:	d1e0      	bne.n	8001cc2 <_free_r+0x22>
 8001d00:	6818      	ldr	r0, [r3, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	6053      	str	r3, [r2, #4]
 8001d06:	4408      	add	r0, r1
 8001d08:	6010      	str	r0, [r2, #0]
 8001d0a:	e7da      	b.n	8001cc2 <_free_r+0x22>
 8001d0c:	d902      	bls.n	8001d14 <_free_r+0x74>
 8001d0e:	230c      	movs	r3, #12
 8001d10:	602b      	str	r3, [r5, #0]
 8001d12:	e7d6      	b.n	8001cc2 <_free_r+0x22>
 8001d14:	6820      	ldr	r0, [r4, #0]
 8001d16:	1821      	adds	r1, r4, r0
 8001d18:	428b      	cmp	r3, r1
 8001d1a:	bf04      	itt	eq
 8001d1c:	6819      	ldreq	r1, [r3, #0]
 8001d1e:	685b      	ldreq	r3, [r3, #4]
 8001d20:	6063      	str	r3, [r4, #4]
 8001d22:	bf04      	itt	eq
 8001d24:	1809      	addeq	r1, r1, r0
 8001d26:	6021      	streq	r1, [r4, #0]
 8001d28:	6054      	str	r4, [r2, #4]
 8001d2a:	e7ca      	b.n	8001cc2 <_free_r+0x22>
 8001d2c:	bd38      	pop	{r3, r4, r5, pc}
 8001d2e:	bf00      	nop
 8001d30:	200001d4 	.word	0x200001d4

08001d34 <sbrk_aligned>:
 8001d34:	b570      	push	{r4, r5, r6, lr}
 8001d36:	4e0f      	ldr	r6, [pc, #60]	@ (8001d74 <sbrk_aligned+0x40>)
 8001d38:	460c      	mov	r4, r1
 8001d3a:	6831      	ldr	r1, [r6, #0]
 8001d3c:	4605      	mov	r5, r0
 8001d3e:	b911      	cbnz	r1, 8001d46 <sbrk_aligned+0x12>
 8001d40:	f000 fca4 	bl	800268c <_sbrk_r>
 8001d44:	6030      	str	r0, [r6, #0]
 8001d46:	4621      	mov	r1, r4
 8001d48:	4628      	mov	r0, r5
 8001d4a:	f000 fc9f 	bl	800268c <_sbrk_r>
 8001d4e:	1c43      	adds	r3, r0, #1
 8001d50:	d103      	bne.n	8001d5a <sbrk_aligned+0x26>
 8001d52:	f04f 34ff 	mov.w	r4, #4294967295
 8001d56:	4620      	mov	r0, r4
 8001d58:	bd70      	pop	{r4, r5, r6, pc}
 8001d5a:	1cc4      	adds	r4, r0, #3
 8001d5c:	f024 0403 	bic.w	r4, r4, #3
 8001d60:	42a0      	cmp	r0, r4
 8001d62:	d0f8      	beq.n	8001d56 <sbrk_aligned+0x22>
 8001d64:	1a21      	subs	r1, r4, r0
 8001d66:	4628      	mov	r0, r5
 8001d68:	f000 fc90 	bl	800268c <_sbrk_r>
 8001d6c:	3001      	adds	r0, #1
 8001d6e:	d1f2      	bne.n	8001d56 <sbrk_aligned+0x22>
 8001d70:	e7ef      	b.n	8001d52 <sbrk_aligned+0x1e>
 8001d72:	bf00      	nop
 8001d74:	200001d0 	.word	0x200001d0

08001d78 <_malloc_r>:
 8001d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d7c:	1ccd      	adds	r5, r1, #3
 8001d7e:	f025 0503 	bic.w	r5, r5, #3
 8001d82:	3508      	adds	r5, #8
 8001d84:	2d0c      	cmp	r5, #12
 8001d86:	bf38      	it	cc
 8001d88:	250c      	movcc	r5, #12
 8001d8a:	2d00      	cmp	r5, #0
 8001d8c:	4606      	mov	r6, r0
 8001d8e:	db01      	blt.n	8001d94 <_malloc_r+0x1c>
 8001d90:	42a9      	cmp	r1, r5
 8001d92:	d904      	bls.n	8001d9e <_malloc_r+0x26>
 8001d94:	230c      	movs	r3, #12
 8001d96:	6033      	str	r3, [r6, #0]
 8001d98:	2000      	movs	r0, #0
 8001d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001e74 <_malloc_r+0xfc>
 8001da2:	f000 f869 	bl	8001e78 <__malloc_lock>
 8001da6:	f8d8 3000 	ldr.w	r3, [r8]
 8001daa:	461c      	mov	r4, r3
 8001dac:	bb44      	cbnz	r4, 8001e00 <_malloc_r+0x88>
 8001dae:	4629      	mov	r1, r5
 8001db0:	4630      	mov	r0, r6
 8001db2:	f7ff ffbf 	bl	8001d34 <sbrk_aligned>
 8001db6:	1c43      	adds	r3, r0, #1
 8001db8:	4604      	mov	r4, r0
 8001dba:	d158      	bne.n	8001e6e <_malloc_r+0xf6>
 8001dbc:	f8d8 4000 	ldr.w	r4, [r8]
 8001dc0:	4627      	mov	r7, r4
 8001dc2:	2f00      	cmp	r7, #0
 8001dc4:	d143      	bne.n	8001e4e <_malloc_r+0xd6>
 8001dc6:	2c00      	cmp	r4, #0
 8001dc8:	d04b      	beq.n	8001e62 <_malloc_r+0xea>
 8001dca:	6823      	ldr	r3, [r4, #0]
 8001dcc:	4639      	mov	r1, r7
 8001dce:	4630      	mov	r0, r6
 8001dd0:	eb04 0903 	add.w	r9, r4, r3
 8001dd4:	f000 fc5a 	bl	800268c <_sbrk_r>
 8001dd8:	4581      	cmp	r9, r0
 8001dda:	d142      	bne.n	8001e62 <_malloc_r+0xea>
 8001ddc:	6821      	ldr	r1, [r4, #0]
 8001dde:	1a6d      	subs	r5, r5, r1
 8001de0:	4629      	mov	r1, r5
 8001de2:	4630      	mov	r0, r6
 8001de4:	f7ff ffa6 	bl	8001d34 <sbrk_aligned>
 8001de8:	3001      	adds	r0, #1
 8001dea:	d03a      	beq.n	8001e62 <_malloc_r+0xea>
 8001dec:	6823      	ldr	r3, [r4, #0]
 8001dee:	442b      	add	r3, r5
 8001df0:	6023      	str	r3, [r4, #0]
 8001df2:	f8d8 3000 	ldr.w	r3, [r8]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	bb62      	cbnz	r2, 8001e54 <_malloc_r+0xdc>
 8001dfa:	f8c8 7000 	str.w	r7, [r8]
 8001dfe:	e00f      	b.n	8001e20 <_malloc_r+0xa8>
 8001e00:	6822      	ldr	r2, [r4, #0]
 8001e02:	1b52      	subs	r2, r2, r5
 8001e04:	d420      	bmi.n	8001e48 <_malloc_r+0xd0>
 8001e06:	2a0b      	cmp	r2, #11
 8001e08:	d917      	bls.n	8001e3a <_malloc_r+0xc2>
 8001e0a:	1961      	adds	r1, r4, r5
 8001e0c:	42a3      	cmp	r3, r4
 8001e0e:	6025      	str	r5, [r4, #0]
 8001e10:	bf18      	it	ne
 8001e12:	6059      	strne	r1, [r3, #4]
 8001e14:	6863      	ldr	r3, [r4, #4]
 8001e16:	bf08      	it	eq
 8001e18:	f8c8 1000 	streq.w	r1, [r8]
 8001e1c:	5162      	str	r2, [r4, r5]
 8001e1e:	604b      	str	r3, [r1, #4]
 8001e20:	4630      	mov	r0, r6
 8001e22:	f000 f82f 	bl	8001e84 <__malloc_unlock>
 8001e26:	f104 000b 	add.w	r0, r4, #11
 8001e2a:	1d23      	adds	r3, r4, #4
 8001e2c:	f020 0007 	bic.w	r0, r0, #7
 8001e30:	1ac2      	subs	r2, r0, r3
 8001e32:	bf1c      	itt	ne
 8001e34:	1a1b      	subne	r3, r3, r0
 8001e36:	50a3      	strne	r3, [r4, r2]
 8001e38:	e7af      	b.n	8001d9a <_malloc_r+0x22>
 8001e3a:	6862      	ldr	r2, [r4, #4]
 8001e3c:	42a3      	cmp	r3, r4
 8001e3e:	bf0c      	ite	eq
 8001e40:	f8c8 2000 	streq.w	r2, [r8]
 8001e44:	605a      	strne	r2, [r3, #4]
 8001e46:	e7eb      	b.n	8001e20 <_malloc_r+0xa8>
 8001e48:	4623      	mov	r3, r4
 8001e4a:	6864      	ldr	r4, [r4, #4]
 8001e4c:	e7ae      	b.n	8001dac <_malloc_r+0x34>
 8001e4e:	463c      	mov	r4, r7
 8001e50:	687f      	ldr	r7, [r7, #4]
 8001e52:	e7b6      	b.n	8001dc2 <_malloc_r+0x4a>
 8001e54:	461a      	mov	r2, r3
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	42a3      	cmp	r3, r4
 8001e5a:	d1fb      	bne.n	8001e54 <_malloc_r+0xdc>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	6053      	str	r3, [r2, #4]
 8001e60:	e7de      	b.n	8001e20 <_malloc_r+0xa8>
 8001e62:	230c      	movs	r3, #12
 8001e64:	6033      	str	r3, [r6, #0]
 8001e66:	4630      	mov	r0, r6
 8001e68:	f000 f80c 	bl	8001e84 <__malloc_unlock>
 8001e6c:	e794      	b.n	8001d98 <_malloc_r+0x20>
 8001e6e:	6005      	str	r5, [r0, #0]
 8001e70:	e7d6      	b.n	8001e20 <_malloc_r+0xa8>
 8001e72:	bf00      	nop
 8001e74:	200001d4 	.word	0x200001d4

08001e78 <__malloc_lock>:
 8001e78:	4801      	ldr	r0, [pc, #4]	@ (8001e80 <__malloc_lock+0x8>)
 8001e7a:	f7ff bf0e 	b.w	8001c9a <__retarget_lock_acquire_recursive>
 8001e7e:	bf00      	nop
 8001e80:	200001cc 	.word	0x200001cc

08001e84 <__malloc_unlock>:
 8001e84:	4801      	ldr	r0, [pc, #4]	@ (8001e8c <__malloc_unlock+0x8>)
 8001e86:	f7ff bf09 	b.w	8001c9c <__retarget_lock_release_recursive>
 8001e8a:	bf00      	nop
 8001e8c:	200001cc 	.word	0x200001cc

08001e90 <__sfputc_r>:
 8001e90:	6893      	ldr	r3, [r2, #8]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	b410      	push	{r4}
 8001e98:	6093      	str	r3, [r2, #8]
 8001e9a:	da08      	bge.n	8001eae <__sfputc_r+0x1e>
 8001e9c:	6994      	ldr	r4, [r2, #24]
 8001e9e:	42a3      	cmp	r3, r4
 8001ea0:	db01      	blt.n	8001ea6 <__sfputc_r+0x16>
 8001ea2:	290a      	cmp	r1, #10
 8001ea4:	d103      	bne.n	8001eae <__sfputc_r+0x1e>
 8001ea6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001eaa:	f7ff bde8 	b.w	8001a7e <__swbuf_r>
 8001eae:	6813      	ldr	r3, [r2, #0]
 8001eb0:	1c58      	adds	r0, r3, #1
 8001eb2:	6010      	str	r0, [r2, #0]
 8001eb4:	7019      	strb	r1, [r3, #0]
 8001eb6:	4608      	mov	r0, r1
 8001eb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <__sfputs_r>:
 8001ebe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ec0:	4606      	mov	r6, r0
 8001ec2:	460f      	mov	r7, r1
 8001ec4:	4614      	mov	r4, r2
 8001ec6:	18d5      	adds	r5, r2, r3
 8001ec8:	42ac      	cmp	r4, r5
 8001eca:	d101      	bne.n	8001ed0 <__sfputs_r+0x12>
 8001ecc:	2000      	movs	r0, #0
 8001ece:	e007      	b.n	8001ee0 <__sfputs_r+0x22>
 8001ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ed4:	463a      	mov	r2, r7
 8001ed6:	4630      	mov	r0, r6
 8001ed8:	f7ff ffda 	bl	8001e90 <__sfputc_r>
 8001edc:	1c43      	adds	r3, r0, #1
 8001ede:	d1f3      	bne.n	8001ec8 <__sfputs_r+0xa>
 8001ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001ee4 <_vfiprintf_r>:
 8001ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ee8:	460d      	mov	r5, r1
 8001eea:	b09d      	sub	sp, #116	@ 0x74
 8001eec:	4614      	mov	r4, r2
 8001eee:	4698      	mov	r8, r3
 8001ef0:	4606      	mov	r6, r0
 8001ef2:	b118      	cbz	r0, 8001efc <_vfiprintf_r+0x18>
 8001ef4:	6a03      	ldr	r3, [r0, #32]
 8001ef6:	b90b      	cbnz	r3, 8001efc <_vfiprintf_r+0x18>
 8001ef8:	f7ff fcd8 	bl	80018ac <__sinit>
 8001efc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001efe:	07d9      	lsls	r1, r3, #31
 8001f00:	d405      	bmi.n	8001f0e <_vfiprintf_r+0x2a>
 8001f02:	89ab      	ldrh	r3, [r5, #12]
 8001f04:	059a      	lsls	r2, r3, #22
 8001f06:	d402      	bmi.n	8001f0e <_vfiprintf_r+0x2a>
 8001f08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001f0a:	f7ff fec6 	bl	8001c9a <__retarget_lock_acquire_recursive>
 8001f0e:	89ab      	ldrh	r3, [r5, #12]
 8001f10:	071b      	lsls	r3, r3, #28
 8001f12:	d501      	bpl.n	8001f18 <_vfiprintf_r+0x34>
 8001f14:	692b      	ldr	r3, [r5, #16]
 8001f16:	b99b      	cbnz	r3, 8001f40 <_vfiprintf_r+0x5c>
 8001f18:	4629      	mov	r1, r5
 8001f1a:	4630      	mov	r0, r6
 8001f1c:	f7ff fdee 	bl	8001afc <__swsetup_r>
 8001f20:	b170      	cbz	r0, 8001f40 <_vfiprintf_r+0x5c>
 8001f22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001f24:	07dc      	lsls	r4, r3, #31
 8001f26:	d504      	bpl.n	8001f32 <_vfiprintf_r+0x4e>
 8001f28:	f04f 30ff 	mov.w	r0, #4294967295
 8001f2c:	b01d      	add	sp, #116	@ 0x74
 8001f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f32:	89ab      	ldrh	r3, [r5, #12]
 8001f34:	0598      	lsls	r0, r3, #22
 8001f36:	d4f7      	bmi.n	8001f28 <_vfiprintf_r+0x44>
 8001f38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001f3a:	f7ff feaf 	bl	8001c9c <__retarget_lock_release_recursive>
 8001f3e:	e7f3      	b.n	8001f28 <_vfiprintf_r+0x44>
 8001f40:	2300      	movs	r3, #0
 8001f42:	9309      	str	r3, [sp, #36]	@ 0x24
 8001f44:	2320      	movs	r3, #32
 8001f46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001f4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8001f4e:	2330      	movs	r3, #48	@ 0x30
 8001f50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002100 <_vfiprintf_r+0x21c>
 8001f54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001f58:	f04f 0901 	mov.w	r9, #1
 8001f5c:	4623      	mov	r3, r4
 8001f5e:	469a      	mov	sl, r3
 8001f60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f64:	b10a      	cbz	r2, 8001f6a <_vfiprintf_r+0x86>
 8001f66:	2a25      	cmp	r2, #37	@ 0x25
 8001f68:	d1f9      	bne.n	8001f5e <_vfiprintf_r+0x7a>
 8001f6a:	ebba 0b04 	subs.w	fp, sl, r4
 8001f6e:	d00b      	beq.n	8001f88 <_vfiprintf_r+0xa4>
 8001f70:	465b      	mov	r3, fp
 8001f72:	4622      	mov	r2, r4
 8001f74:	4629      	mov	r1, r5
 8001f76:	4630      	mov	r0, r6
 8001f78:	f7ff ffa1 	bl	8001ebe <__sfputs_r>
 8001f7c:	3001      	adds	r0, #1
 8001f7e:	f000 80a7 	beq.w	80020d0 <_vfiprintf_r+0x1ec>
 8001f82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001f84:	445a      	add	r2, fp
 8001f86:	9209      	str	r2, [sp, #36]	@ 0x24
 8001f88:	f89a 3000 	ldrb.w	r3, [sl]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 809f 	beq.w	80020d0 <_vfiprintf_r+0x1ec>
 8001f92:	2300      	movs	r3, #0
 8001f94:	f04f 32ff 	mov.w	r2, #4294967295
 8001f98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f9c:	f10a 0a01 	add.w	sl, sl, #1
 8001fa0:	9304      	str	r3, [sp, #16]
 8001fa2:	9307      	str	r3, [sp, #28]
 8001fa4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001fa8:	931a      	str	r3, [sp, #104]	@ 0x68
 8001faa:	4654      	mov	r4, sl
 8001fac:	2205      	movs	r2, #5
 8001fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fb2:	4853      	ldr	r0, [pc, #332]	@ (8002100 <_vfiprintf_r+0x21c>)
 8001fb4:	f7fe f914 	bl	80001e0 <memchr>
 8001fb8:	9a04      	ldr	r2, [sp, #16]
 8001fba:	b9d8      	cbnz	r0, 8001ff4 <_vfiprintf_r+0x110>
 8001fbc:	06d1      	lsls	r1, r2, #27
 8001fbe:	bf44      	itt	mi
 8001fc0:	2320      	movmi	r3, #32
 8001fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001fc6:	0713      	lsls	r3, r2, #28
 8001fc8:	bf44      	itt	mi
 8001fca:	232b      	movmi	r3, #43	@ 0x2b
 8001fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8001fd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8001fd6:	d015      	beq.n	8002004 <_vfiprintf_r+0x120>
 8001fd8:	9a07      	ldr	r2, [sp, #28]
 8001fda:	4654      	mov	r4, sl
 8001fdc:	2000      	movs	r0, #0
 8001fde:	f04f 0c0a 	mov.w	ip, #10
 8001fe2:	4621      	mov	r1, r4
 8001fe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001fe8:	3b30      	subs	r3, #48	@ 0x30
 8001fea:	2b09      	cmp	r3, #9
 8001fec:	d94b      	bls.n	8002086 <_vfiprintf_r+0x1a2>
 8001fee:	b1b0      	cbz	r0, 800201e <_vfiprintf_r+0x13a>
 8001ff0:	9207      	str	r2, [sp, #28]
 8001ff2:	e014      	b.n	800201e <_vfiprintf_r+0x13a>
 8001ff4:	eba0 0308 	sub.w	r3, r0, r8
 8001ff8:	fa09 f303 	lsl.w	r3, r9, r3
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	9304      	str	r3, [sp, #16]
 8002000:	46a2      	mov	sl, r4
 8002002:	e7d2      	b.n	8001faa <_vfiprintf_r+0xc6>
 8002004:	9b03      	ldr	r3, [sp, #12]
 8002006:	1d19      	adds	r1, r3, #4
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	9103      	str	r1, [sp, #12]
 800200c:	2b00      	cmp	r3, #0
 800200e:	bfbb      	ittet	lt
 8002010:	425b      	neglt	r3, r3
 8002012:	f042 0202 	orrlt.w	r2, r2, #2
 8002016:	9307      	strge	r3, [sp, #28]
 8002018:	9307      	strlt	r3, [sp, #28]
 800201a:	bfb8      	it	lt
 800201c:	9204      	strlt	r2, [sp, #16]
 800201e:	7823      	ldrb	r3, [r4, #0]
 8002020:	2b2e      	cmp	r3, #46	@ 0x2e
 8002022:	d10a      	bne.n	800203a <_vfiprintf_r+0x156>
 8002024:	7863      	ldrb	r3, [r4, #1]
 8002026:	2b2a      	cmp	r3, #42	@ 0x2a
 8002028:	d132      	bne.n	8002090 <_vfiprintf_r+0x1ac>
 800202a:	9b03      	ldr	r3, [sp, #12]
 800202c:	1d1a      	adds	r2, r3, #4
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	9203      	str	r2, [sp, #12]
 8002032:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002036:	3402      	adds	r4, #2
 8002038:	9305      	str	r3, [sp, #20]
 800203a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002110 <_vfiprintf_r+0x22c>
 800203e:	7821      	ldrb	r1, [r4, #0]
 8002040:	2203      	movs	r2, #3
 8002042:	4650      	mov	r0, sl
 8002044:	f7fe f8cc 	bl	80001e0 <memchr>
 8002048:	b138      	cbz	r0, 800205a <_vfiprintf_r+0x176>
 800204a:	9b04      	ldr	r3, [sp, #16]
 800204c:	eba0 000a 	sub.w	r0, r0, sl
 8002050:	2240      	movs	r2, #64	@ 0x40
 8002052:	4082      	lsls	r2, r0
 8002054:	4313      	orrs	r3, r2
 8002056:	3401      	adds	r4, #1
 8002058:	9304      	str	r3, [sp, #16]
 800205a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800205e:	4829      	ldr	r0, [pc, #164]	@ (8002104 <_vfiprintf_r+0x220>)
 8002060:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002064:	2206      	movs	r2, #6
 8002066:	f7fe f8bb 	bl	80001e0 <memchr>
 800206a:	2800      	cmp	r0, #0
 800206c:	d03f      	beq.n	80020ee <_vfiprintf_r+0x20a>
 800206e:	4b26      	ldr	r3, [pc, #152]	@ (8002108 <_vfiprintf_r+0x224>)
 8002070:	bb1b      	cbnz	r3, 80020ba <_vfiprintf_r+0x1d6>
 8002072:	9b03      	ldr	r3, [sp, #12]
 8002074:	3307      	adds	r3, #7
 8002076:	f023 0307 	bic.w	r3, r3, #7
 800207a:	3308      	adds	r3, #8
 800207c:	9303      	str	r3, [sp, #12]
 800207e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002080:	443b      	add	r3, r7
 8002082:	9309      	str	r3, [sp, #36]	@ 0x24
 8002084:	e76a      	b.n	8001f5c <_vfiprintf_r+0x78>
 8002086:	fb0c 3202 	mla	r2, ip, r2, r3
 800208a:	460c      	mov	r4, r1
 800208c:	2001      	movs	r0, #1
 800208e:	e7a8      	b.n	8001fe2 <_vfiprintf_r+0xfe>
 8002090:	2300      	movs	r3, #0
 8002092:	3401      	adds	r4, #1
 8002094:	9305      	str	r3, [sp, #20]
 8002096:	4619      	mov	r1, r3
 8002098:	f04f 0c0a 	mov.w	ip, #10
 800209c:	4620      	mov	r0, r4
 800209e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80020a2:	3a30      	subs	r2, #48	@ 0x30
 80020a4:	2a09      	cmp	r2, #9
 80020a6:	d903      	bls.n	80020b0 <_vfiprintf_r+0x1cc>
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0c6      	beq.n	800203a <_vfiprintf_r+0x156>
 80020ac:	9105      	str	r1, [sp, #20]
 80020ae:	e7c4      	b.n	800203a <_vfiprintf_r+0x156>
 80020b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80020b4:	4604      	mov	r4, r0
 80020b6:	2301      	movs	r3, #1
 80020b8:	e7f0      	b.n	800209c <_vfiprintf_r+0x1b8>
 80020ba:	ab03      	add	r3, sp, #12
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	462a      	mov	r2, r5
 80020c0:	4b12      	ldr	r3, [pc, #72]	@ (800210c <_vfiprintf_r+0x228>)
 80020c2:	a904      	add	r1, sp, #16
 80020c4:	4630      	mov	r0, r6
 80020c6:	f3af 8000 	nop.w
 80020ca:	4607      	mov	r7, r0
 80020cc:	1c78      	adds	r0, r7, #1
 80020ce:	d1d6      	bne.n	800207e <_vfiprintf_r+0x19a>
 80020d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80020d2:	07d9      	lsls	r1, r3, #31
 80020d4:	d405      	bmi.n	80020e2 <_vfiprintf_r+0x1fe>
 80020d6:	89ab      	ldrh	r3, [r5, #12]
 80020d8:	059a      	lsls	r2, r3, #22
 80020da:	d402      	bmi.n	80020e2 <_vfiprintf_r+0x1fe>
 80020dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80020de:	f7ff fddd 	bl	8001c9c <__retarget_lock_release_recursive>
 80020e2:	89ab      	ldrh	r3, [r5, #12]
 80020e4:	065b      	lsls	r3, r3, #25
 80020e6:	f53f af1f 	bmi.w	8001f28 <_vfiprintf_r+0x44>
 80020ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80020ec:	e71e      	b.n	8001f2c <_vfiprintf_r+0x48>
 80020ee:	ab03      	add	r3, sp, #12
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	462a      	mov	r2, r5
 80020f4:	4b05      	ldr	r3, [pc, #20]	@ (800210c <_vfiprintf_r+0x228>)
 80020f6:	a904      	add	r1, sp, #16
 80020f8:	4630      	mov	r0, r6
 80020fa:	f000 f879 	bl	80021f0 <_printf_i>
 80020fe:	e7e4      	b.n	80020ca <_vfiprintf_r+0x1e6>
 8002100:	08002734 	.word	0x08002734
 8002104:	0800273e 	.word	0x0800273e
 8002108:	00000000 	.word	0x00000000
 800210c:	08001ebf 	.word	0x08001ebf
 8002110:	0800273a 	.word	0x0800273a

08002114 <_printf_common>:
 8002114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002118:	4616      	mov	r6, r2
 800211a:	4698      	mov	r8, r3
 800211c:	688a      	ldr	r2, [r1, #8]
 800211e:	690b      	ldr	r3, [r1, #16]
 8002120:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002124:	4293      	cmp	r3, r2
 8002126:	bfb8      	it	lt
 8002128:	4613      	movlt	r3, r2
 800212a:	6033      	str	r3, [r6, #0]
 800212c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002130:	4607      	mov	r7, r0
 8002132:	460c      	mov	r4, r1
 8002134:	b10a      	cbz	r2, 800213a <_printf_common+0x26>
 8002136:	3301      	adds	r3, #1
 8002138:	6033      	str	r3, [r6, #0]
 800213a:	6823      	ldr	r3, [r4, #0]
 800213c:	0699      	lsls	r1, r3, #26
 800213e:	bf42      	ittt	mi
 8002140:	6833      	ldrmi	r3, [r6, #0]
 8002142:	3302      	addmi	r3, #2
 8002144:	6033      	strmi	r3, [r6, #0]
 8002146:	6825      	ldr	r5, [r4, #0]
 8002148:	f015 0506 	ands.w	r5, r5, #6
 800214c:	d106      	bne.n	800215c <_printf_common+0x48>
 800214e:	f104 0a19 	add.w	sl, r4, #25
 8002152:	68e3      	ldr	r3, [r4, #12]
 8002154:	6832      	ldr	r2, [r6, #0]
 8002156:	1a9b      	subs	r3, r3, r2
 8002158:	42ab      	cmp	r3, r5
 800215a:	dc26      	bgt.n	80021aa <_printf_common+0x96>
 800215c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002160:	6822      	ldr	r2, [r4, #0]
 8002162:	3b00      	subs	r3, #0
 8002164:	bf18      	it	ne
 8002166:	2301      	movne	r3, #1
 8002168:	0692      	lsls	r2, r2, #26
 800216a:	d42b      	bmi.n	80021c4 <_printf_common+0xb0>
 800216c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002170:	4641      	mov	r1, r8
 8002172:	4638      	mov	r0, r7
 8002174:	47c8      	blx	r9
 8002176:	3001      	adds	r0, #1
 8002178:	d01e      	beq.n	80021b8 <_printf_common+0xa4>
 800217a:	6823      	ldr	r3, [r4, #0]
 800217c:	6922      	ldr	r2, [r4, #16]
 800217e:	f003 0306 	and.w	r3, r3, #6
 8002182:	2b04      	cmp	r3, #4
 8002184:	bf02      	ittt	eq
 8002186:	68e5      	ldreq	r5, [r4, #12]
 8002188:	6833      	ldreq	r3, [r6, #0]
 800218a:	1aed      	subeq	r5, r5, r3
 800218c:	68a3      	ldr	r3, [r4, #8]
 800218e:	bf0c      	ite	eq
 8002190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002194:	2500      	movne	r5, #0
 8002196:	4293      	cmp	r3, r2
 8002198:	bfc4      	itt	gt
 800219a:	1a9b      	subgt	r3, r3, r2
 800219c:	18ed      	addgt	r5, r5, r3
 800219e:	2600      	movs	r6, #0
 80021a0:	341a      	adds	r4, #26
 80021a2:	42b5      	cmp	r5, r6
 80021a4:	d11a      	bne.n	80021dc <_printf_common+0xc8>
 80021a6:	2000      	movs	r0, #0
 80021a8:	e008      	b.n	80021bc <_printf_common+0xa8>
 80021aa:	2301      	movs	r3, #1
 80021ac:	4652      	mov	r2, sl
 80021ae:	4641      	mov	r1, r8
 80021b0:	4638      	mov	r0, r7
 80021b2:	47c8      	blx	r9
 80021b4:	3001      	adds	r0, #1
 80021b6:	d103      	bne.n	80021c0 <_printf_common+0xac>
 80021b8:	f04f 30ff 	mov.w	r0, #4294967295
 80021bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021c0:	3501      	adds	r5, #1
 80021c2:	e7c6      	b.n	8002152 <_printf_common+0x3e>
 80021c4:	18e1      	adds	r1, r4, r3
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	2030      	movs	r0, #48	@ 0x30
 80021ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80021ce:	4422      	add	r2, r4
 80021d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80021d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80021d8:	3302      	adds	r3, #2
 80021da:	e7c7      	b.n	800216c <_printf_common+0x58>
 80021dc:	2301      	movs	r3, #1
 80021de:	4622      	mov	r2, r4
 80021e0:	4641      	mov	r1, r8
 80021e2:	4638      	mov	r0, r7
 80021e4:	47c8      	blx	r9
 80021e6:	3001      	adds	r0, #1
 80021e8:	d0e6      	beq.n	80021b8 <_printf_common+0xa4>
 80021ea:	3601      	adds	r6, #1
 80021ec:	e7d9      	b.n	80021a2 <_printf_common+0x8e>
	...

080021f0 <_printf_i>:
 80021f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80021f4:	7e0f      	ldrb	r7, [r1, #24]
 80021f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80021f8:	2f78      	cmp	r7, #120	@ 0x78
 80021fa:	4691      	mov	r9, r2
 80021fc:	4680      	mov	r8, r0
 80021fe:	460c      	mov	r4, r1
 8002200:	469a      	mov	sl, r3
 8002202:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002206:	d807      	bhi.n	8002218 <_printf_i+0x28>
 8002208:	2f62      	cmp	r7, #98	@ 0x62
 800220a:	d80a      	bhi.n	8002222 <_printf_i+0x32>
 800220c:	2f00      	cmp	r7, #0
 800220e:	f000 80d1 	beq.w	80023b4 <_printf_i+0x1c4>
 8002212:	2f58      	cmp	r7, #88	@ 0x58
 8002214:	f000 80b8 	beq.w	8002388 <_printf_i+0x198>
 8002218:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800221c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002220:	e03a      	b.n	8002298 <_printf_i+0xa8>
 8002222:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002226:	2b15      	cmp	r3, #21
 8002228:	d8f6      	bhi.n	8002218 <_printf_i+0x28>
 800222a:	a101      	add	r1, pc, #4	@ (adr r1, 8002230 <_printf_i+0x40>)
 800222c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002230:	08002289 	.word	0x08002289
 8002234:	0800229d 	.word	0x0800229d
 8002238:	08002219 	.word	0x08002219
 800223c:	08002219 	.word	0x08002219
 8002240:	08002219 	.word	0x08002219
 8002244:	08002219 	.word	0x08002219
 8002248:	0800229d 	.word	0x0800229d
 800224c:	08002219 	.word	0x08002219
 8002250:	08002219 	.word	0x08002219
 8002254:	08002219 	.word	0x08002219
 8002258:	08002219 	.word	0x08002219
 800225c:	0800239b 	.word	0x0800239b
 8002260:	080022c7 	.word	0x080022c7
 8002264:	08002355 	.word	0x08002355
 8002268:	08002219 	.word	0x08002219
 800226c:	08002219 	.word	0x08002219
 8002270:	080023bd 	.word	0x080023bd
 8002274:	08002219 	.word	0x08002219
 8002278:	080022c7 	.word	0x080022c7
 800227c:	08002219 	.word	0x08002219
 8002280:	08002219 	.word	0x08002219
 8002284:	0800235d 	.word	0x0800235d
 8002288:	6833      	ldr	r3, [r6, #0]
 800228a:	1d1a      	adds	r2, r3, #4
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6032      	str	r2, [r6, #0]
 8002290:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002294:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002298:	2301      	movs	r3, #1
 800229a:	e09c      	b.n	80023d6 <_printf_i+0x1e6>
 800229c:	6833      	ldr	r3, [r6, #0]
 800229e:	6820      	ldr	r0, [r4, #0]
 80022a0:	1d19      	adds	r1, r3, #4
 80022a2:	6031      	str	r1, [r6, #0]
 80022a4:	0606      	lsls	r6, r0, #24
 80022a6:	d501      	bpl.n	80022ac <_printf_i+0xbc>
 80022a8:	681d      	ldr	r5, [r3, #0]
 80022aa:	e003      	b.n	80022b4 <_printf_i+0xc4>
 80022ac:	0645      	lsls	r5, r0, #25
 80022ae:	d5fb      	bpl.n	80022a8 <_printf_i+0xb8>
 80022b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80022b4:	2d00      	cmp	r5, #0
 80022b6:	da03      	bge.n	80022c0 <_printf_i+0xd0>
 80022b8:	232d      	movs	r3, #45	@ 0x2d
 80022ba:	426d      	negs	r5, r5
 80022bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80022c0:	4858      	ldr	r0, [pc, #352]	@ (8002424 <_printf_i+0x234>)
 80022c2:	230a      	movs	r3, #10
 80022c4:	e011      	b.n	80022ea <_printf_i+0xfa>
 80022c6:	6821      	ldr	r1, [r4, #0]
 80022c8:	6833      	ldr	r3, [r6, #0]
 80022ca:	0608      	lsls	r0, r1, #24
 80022cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80022d0:	d402      	bmi.n	80022d8 <_printf_i+0xe8>
 80022d2:	0649      	lsls	r1, r1, #25
 80022d4:	bf48      	it	mi
 80022d6:	b2ad      	uxthmi	r5, r5
 80022d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80022da:	4852      	ldr	r0, [pc, #328]	@ (8002424 <_printf_i+0x234>)
 80022dc:	6033      	str	r3, [r6, #0]
 80022de:	bf14      	ite	ne
 80022e0:	230a      	movne	r3, #10
 80022e2:	2308      	moveq	r3, #8
 80022e4:	2100      	movs	r1, #0
 80022e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80022ea:	6866      	ldr	r6, [r4, #4]
 80022ec:	60a6      	str	r6, [r4, #8]
 80022ee:	2e00      	cmp	r6, #0
 80022f0:	db05      	blt.n	80022fe <_printf_i+0x10e>
 80022f2:	6821      	ldr	r1, [r4, #0]
 80022f4:	432e      	orrs	r6, r5
 80022f6:	f021 0104 	bic.w	r1, r1, #4
 80022fa:	6021      	str	r1, [r4, #0]
 80022fc:	d04b      	beq.n	8002396 <_printf_i+0x1a6>
 80022fe:	4616      	mov	r6, r2
 8002300:	fbb5 f1f3 	udiv	r1, r5, r3
 8002304:	fb03 5711 	mls	r7, r3, r1, r5
 8002308:	5dc7      	ldrb	r7, [r0, r7]
 800230a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800230e:	462f      	mov	r7, r5
 8002310:	42bb      	cmp	r3, r7
 8002312:	460d      	mov	r5, r1
 8002314:	d9f4      	bls.n	8002300 <_printf_i+0x110>
 8002316:	2b08      	cmp	r3, #8
 8002318:	d10b      	bne.n	8002332 <_printf_i+0x142>
 800231a:	6823      	ldr	r3, [r4, #0]
 800231c:	07df      	lsls	r7, r3, #31
 800231e:	d508      	bpl.n	8002332 <_printf_i+0x142>
 8002320:	6923      	ldr	r3, [r4, #16]
 8002322:	6861      	ldr	r1, [r4, #4]
 8002324:	4299      	cmp	r1, r3
 8002326:	bfde      	ittt	le
 8002328:	2330      	movle	r3, #48	@ 0x30
 800232a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800232e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002332:	1b92      	subs	r2, r2, r6
 8002334:	6122      	str	r2, [r4, #16]
 8002336:	f8cd a000 	str.w	sl, [sp]
 800233a:	464b      	mov	r3, r9
 800233c:	aa03      	add	r2, sp, #12
 800233e:	4621      	mov	r1, r4
 8002340:	4640      	mov	r0, r8
 8002342:	f7ff fee7 	bl	8002114 <_printf_common>
 8002346:	3001      	adds	r0, #1
 8002348:	d14a      	bne.n	80023e0 <_printf_i+0x1f0>
 800234a:	f04f 30ff 	mov.w	r0, #4294967295
 800234e:	b004      	add	sp, #16
 8002350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002354:	6823      	ldr	r3, [r4, #0]
 8002356:	f043 0320 	orr.w	r3, r3, #32
 800235a:	6023      	str	r3, [r4, #0]
 800235c:	4832      	ldr	r0, [pc, #200]	@ (8002428 <_printf_i+0x238>)
 800235e:	2778      	movs	r7, #120	@ 0x78
 8002360:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002364:	6823      	ldr	r3, [r4, #0]
 8002366:	6831      	ldr	r1, [r6, #0]
 8002368:	061f      	lsls	r7, r3, #24
 800236a:	f851 5b04 	ldr.w	r5, [r1], #4
 800236e:	d402      	bmi.n	8002376 <_printf_i+0x186>
 8002370:	065f      	lsls	r7, r3, #25
 8002372:	bf48      	it	mi
 8002374:	b2ad      	uxthmi	r5, r5
 8002376:	6031      	str	r1, [r6, #0]
 8002378:	07d9      	lsls	r1, r3, #31
 800237a:	bf44      	itt	mi
 800237c:	f043 0320 	orrmi.w	r3, r3, #32
 8002380:	6023      	strmi	r3, [r4, #0]
 8002382:	b11d      	cbz	r5, 800238c <_printf_i+0x19c>
 8002384:	2310      	movs	r3, #16
 8002386:	e7ad      	b.n	80022e4 <_printf_i+0xf4>
 8002388:	4826      	ldr	r0, [pc, #152]	@ (8002424 <_printf_i+0x234>)
 800238a:	e7e9      	b.n	8002360 <_printf_i+0x170>
 800238c:	6823      	ldr	r3, [r4, #0]
 800238e:	f023 0320 	bic.w	r3, r3, #32
 8002392:	6023      	str	r3, [r4, #0]
 8002394:	e7f6      	b.n	8002384 <_printf_i+0x194>
 8002396:	4616      	mov	r6, r2
 8002398:	e7bd      	b.n	8002316 <_printf_i+0x126>
 800239a:	6833      	ldr	r3, [r6, #0]
 800239c:	6825      	ldr	r5, [r4, #0]
 800239e:	6961      	ldr	r1, [r4, #20]
 80023a0:	1d18      	adds	r0, r3, #4
 80023a2:	6030      	str	r0, [r6, #0]
 80023a4:	062e      	lsls	r6, r5, #24
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	d501      	bpl.n	80023ae <_printf_i+0x1be>
 80023aa:	6019      	str	r1, [r3, #0]
 80023ac:	e002      	b.n	80023b4 <_printf_i+0x1c4>
 80023ae:	0668      	lsls	r0, r5, #25
 80023b0:	d5fb      	bpl.n	80023aa <_printf_i+0x1ba>
 80023b2:	8019      	strh	r1, [r3, #0]
 80023b4:	2300      	movs	r3, #0
 80023b6:	6123      	str	r3, [r4, #16]
 80023b8:	4616      	mov	r6, r2
 80023ba:	e7bc      	b.n	8002336 <_printf_i+0x146>
 80023bc:	6833      	ldr	r3, [r6, #0]
 80023be:	1d1a      	adds	r2, r3, #4
 80023c0:	6032      	str	r2, [r6, #0]
 80023c2:	681e      	ldr	r6, [r3, #0]
 80023c4:	6862      	ldr	r2, [r4, #4]
 80023c6:	2100      	movs	r1, #0
 80023c8:	4630      	mov	r0, r6
 80023ca:	f7fd ff09 	bl	80001e0 <memchr>
 80023ce:	b108      	cbz	r0, 80023d4 <_printf_i+0x1e4>
 80023d0:	1b80      	subs	r0, r0, r6
 80023d2:	6060      	str	r0, [r4, #4]
 80023d4:	6863      	ldr	r3, [r4, #4]
 80023d6:	6123      	str	r3, [r4, #16]
 80023d8:	2300      	movs	r3, #0
 80023da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80023de:	e7aa      	b.n	8002336 <_printf_i+0x146>
 80023e0:	6923      	ldr	r3, [r4, #16]
 80023e2:	4632      	mov	r2, r6
 80023e4:	4649      	mov	r1, r9
 80023e6:	4640      	mov	r0, r8
 80023e8:	47d0      	blx	sl
 80023ea:	3001      	adds	r0, #1
 80023ec:	d0ad      	beq.n	800234a <_printf_i+0x15a>
 80023ee:	6823      	ldr	r3, [r4, #0]
 80023f0:	079b      	lsls	r3, r3, #30
 80023f2:	d413      	bmi.n	800241c <_printf_i+0x22c>
 80023f4:	68e0      	ldr	r0, [r4, #12]
 80023f6:	9b03      	ldr	r3, [sp, #12]
 80023f8:	4298      	cmp	r0, r3
 80023fa:	bfb8      	it	lt
 80023fc:	4618      	movlt	r0, r3
 80023fe:	e7a6      	b.n	800234e <_printf_i+0x15e>
 8002400:	2301      	movs	r3, #1
 8002402:	4632      	mov	r2, r6
 8002404:	4649      	mov	r1, r9
 8002406:	4640      	mov	r0, r8
 8002408:	47d0      	blx	sl
 800240a:	3001      	adds	r0, #1
 800240c:	d09d      	beq.n	800234a <_printf_i+0x15a>
 800240e:	3501      	adds	r5, #1
 8002410:	68e3      	ldr	r3, [r4, #12]
 8002412:	9903      	ldr	r1, [sp, #12]
 8002414:	1a5b      	subs	r3, r3, r1
 8002416:	42ab      	cmp	r3, r5
 8002418:	dcf2      	bgt.n	8002400 <_printf_i+0x210>
 800241a:	e7eb      	b.n	80023f4 <_printf_i+0x204>
 800241c:	2500      	movs	r5, #0
 800241e:	f104 0619 	add.w	r6, r4, #25
 8002422:	e7f5      	b.n	8002410 <_printf_i+0x220>
 8002424:	08002745 	.word	0x08002745
 8002428:	08002756 	.word	0x08002756

0800242c <__sflush_r>:
 800242c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002434:	0716      	lsls	r6, r2, #28
 8002436:	4605      	mov	r5, r0
 8002438:	460c      	mov	r4, r1
 800243a:	d454      	bmi.n	80024e6 <__sflush_r+0xba>
 800243c:	684b      	ldr	r3, [r1, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	dc02      	bgt.n	8002448 <__sflush_r+0x1c>
 8002442:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002444:	2b00      	cmp	r3, #0
 8002446:	dd48      	ble.n	80024da <__sflush_r+0xae>
 8002448:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800244a:	2e00      	cmp	r6, #0
 800244c:	d045      	beq.n	80024da <__sflush_r+0xae>
 800244e:	2300      	movs	r3, #0
 8002450:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002454:	682f      	ldr	r7, [r5, #0]
 8002456:	6a21      	ldr	r1, [r4, #32]
 8002458:	602b      	str	r3, [r5, #0]
 800245a:	d030      	beq.n	80024be <__sflush_r+0x92>
 800245c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800245e:	89a3      	ldrh	r3, [r4, #12]
 8002460:	0759      	lsls	r1, r3, #29
 8002462:	d505      	bpl.n	8002470 <__sflush_r+0x44>
 8002464:	6863      	ldr	r3, [r4, #4]
 8002466:	1ad2      	subs	r2, r2, r3
 8002468:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800246a:	b10b      	cbz	r3, 8002470 <__sflush_r+0x44>
 800246c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800246e:	1ad2      	subs	r2, r2, r3
 8002470:	2300      	movs	r3, #0
 8002472:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002474:	6a21      	ldr	r1, [r4, #32]
 8002476:	4628      	mov	r0, r5
 8002478:	47b0      	blx	r6
 800247a:	1c43      	adds	r3, r0, #1
 800247c:	89a3      	ldrh	r3, [r4, #12]
 800247e:	d106      	bne.n	800248e <__sflush_r+0x62>
 8002480:	6829      	ldr	r1, [r5, #0]
 8002482:	291d      	cmp	r1, #29
 8002484:	d82b      	bhi.n	80024de <__sflush_r+0xb2>
 8002486:	4a2a      	ldr	r2, [pc, #168]	@ (8002530 <__sflush_r+0x104>)
 8002488:	40ca      	lsrs	r2, r1
 800248a:	07d6      	lsls	r6, r2, #31
 800248c:	d527      	bpl.n	80024de <__sflush_r+0xb2>
 800248e:	2200      	movs	r2, #0
 8002490:	6062      	str	r2, [r4, #4]
 8002492:	04d9      	lsls	r1, r3, #19
 8002494:	6922      	ldr	r2, [r4, #16]
 8002496:	6022      	str	r2, [r4, #0]
 8002498:	d504      	bpl.n	80024a4 <__sflush_r+0x78>
 800249a:	1c42      	adds	r2, r0, #1
 800249c:	d101      	bne.n	80024a2 <__sflush_r+0x76>
 800249e:	682b      	ldr	r3, [r5, #0]
 80024a0:	b903      	cbnz	r3, 80024a4 <__sflush_r+0x78>
 80024a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80024a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80024a6:	602f      	str	r7, [r5, #0]
 80024a8:	b1b9      	cbz	r1, 80024da <__sflush_r+0xae>
 80024aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80024ae:	4299      	cmp	r1, r3
 80024b0:	d002      	beq.n	80024b8 <__sflush_r+0x8c>
 80024b2:	4628      	mov	r0, r5
 80024b4:	f7ff fbf4 	bl	8001ca0 <_free_r>
 80024b8:	2300      	movs	r3, #0
 80024ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80024bc:	e00d      	b.n	80024da <__sflush_r+0xae>
 80024be:	2301      	movs	r3, #1
 80024c0:	4628      	mov	r0, r5
 80024c2:	47b0      	blx	r6
 80024c4:	4602      	mov	r2, r0
 80024c6:	1c50      	adds	r0, r2, #1
 80024c8:	d1c9      	bne.n	800245e <__sflush_r+0x32>
 80024ca:	682b      	ldr	r3, [r5, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0c6      	beq.n	800245e <__sflush_r+0x32>
 80024d0:	2b1d      	cmp	r3, #29
 80024d2:	d001      	beq.n	80024d8 <__sflush_r+0xac>
 80024d4:	2b16      	cmp	r3, #22
 80024d6:	d11e      	bne.n	8002516 <__sflush_r+0xea>
 80024d8:	602f      	str	r7, [r5, #0]
 80024da:	2000      	movs	r0, #0
 80024dc:	e022      	b.n	8002524 <__sflush_r+0xf8>
 80024de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024e2:	b21b      	sxth	r3, r3
 80024e4:	e01b      	b.n	800251e <__sflush_r+0xf2>
 80024e6:	690f      	ldr	r7, [r1, #16]
 80024e8:	2f00      	cmp	r7, #0
 80024ea:	d0f6      	beq.n	80024da <__sflush_r+0xae>
 80024ec:	0793      	lsls	r3, r2, #30
 80024ee:	680e      	ldr	r6, [r1, #0]
 80024f0:	bf08      	it	eq
 80024f2:	694b      	ldreq	r3, [r1, #20]
 80024f4:	600f      	str	r7, [r1, #0]
 80024f6:	bf18      	it	ne
 80024f8:	2300      	movne	r3, #0
 80024fa:	eba6 0807 	sub.w	r8, r6, r7
 80024fe:	608b      	str	r3, [r1, #8]
 8002500:	f1b8 0f00 	cmp.w	r8, #0
 8002504:	dde9      	ble.n	80024da <__sflush_r+0xae>
 8002506:	6a21      	ldr	r1, [r4, #32]
 8002508:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800250a:	4643      	mov	r3, r8
 800250c:	463a      	mov	r2, r7
 800250e:	4628      	mov	r0, r5
 8002510:	47b0      	blx	r6
 8002512:	2800      	cmp	r0, #0
 8002514:	dc08      	bgt.n	8002528 <__sflush_r+0xfc>
 8002516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800251a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800251e:	81a3      	strh	r3, [r4, #12]
 8002520:	f04f 30ff 	mov.w	r0, #4294967295
 8002524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002528:	4407      	add	r7, r0
 800252a:	eba8 0800 	sub.w	r8, r8, r0
 800252e:	e7e7      	b.n	8002500 <__sflush_r+0xd4>
 8002530:	20400001 	.word	0x20400001

08002534 <_fflush_r>:
 8002534:	b538      	push	{r3, r4, r5, lr}
 8002536:	690b      	ldr	r3, [r1, #16]
 8002538:	4605      	mov	r5, r0
 800253a:	460c      	mov	r4, r1
 800253c:	b913      	cbnz	r3, 8002544 <_fflush_r+0x10>
 800253e:	2500      	movs	r5, #0
 8002540:	4628      	mov	r0, r5
 8002542:	bd38      	pop	{r3, r4, r5, pc}
 8002544:	b118      	cbz	r0, 800254e <_fflush_r+0x1a>
 8002546:	6a03      	ldr	r3, [r0, #32]
 8002548:	b90b      	cbnz	r3, 800254e <_fflush_r+0x1a>
 800254a:	f7ff f9af 	bl	80018ac <__sinit>
 800254e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f3      	beq.n	800253e <_fflush_r+0xa>
 8002556:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002558:	07d0      	lsls	r0, r2, #31
 800255a:	d404      	bmi.n	8002566 <_fflush_r+0x32>
 800255c:	0599      	lsls	r1, r3, #22
 800255e:	d402      	bmi.n	8002566 <_fflush_r+0x32>
 8002560:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002562:	f7ff fb9a 	bl	8001c9a <__retarget_lock_acquire_recursive>
 8002566:	4628      	mov	r0, r5
 8002568:	4621      	mov	r1, r4
 800256a:	f7ff ff5f 	bl	800242c <__sflush_r>
 800256e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002570:	07da      	lsls	r2, r3, #31
 8002572:	4605      	mov	r5, r0
 8002574:	d4e4      	bmi.n	8002540 <_fflush_r+0xc>
 8002576:	89a3      	ldrh	r3, [r4, #12]
 8002578:	059b      	lsls	r3, r3, #22
 800257a:	d4e1      	bmi.n	8002540 <_fflush_r+0xc>
 800257c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800257e:	f7ff fb8d 	bl	8001c9c <__retarget_lock_release_recursive>
 8002582:	e7dd      	b.n	8002540 <_fflush_r+0xc>

08002584 <__swhatbuf_r>:
 8002584:	b570      	push	{r4, r5, r6, lr}
 8002586:	460c      	mov	r4, r1
 8002588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800258c:	2900      	cmp	r1, #0
 800258e:	b096      	sub	sp, #88	@ 0x58
 8002590:	4615      	mov	r5, r2
 8002592:	461e      	mov	r6, r3
 8002594:	da0d      	bge.n	80025b2 <__swhatbuf_r+0x2e>
 8002596:	89a3      	ldrh	r3, [r4, #12]
 8002598:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800259c:	f04f 0100 	mov.w	r1, #0
 80025a0:	bf14      	ite	ne
 80025a2:	2340      	movne	r3, #64	@ 0x40
 80025a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80025a8:	2000      	movs	r0, #0
 80025aa:	6031      	str	r1, [r6, #0]
 80025ac:	602b      	str	r3, [r5, #0]
 80025ae:	b016      	add	sp, #88	@ 0x58
 80025b0:	bd70      	pop	{r4, r5, r6, pc}
 80025b2:	466a      	mov	r2, sp
 80025b4:	f000 f848 	bl	8002648 <_fstat_r>
 80025b8:	2800      	cmp	r0, #0
 80025ba:	dbec      	blt.n	8002596 <__swhatbuf_r+0x12>
 80025bc:	9901      	ldr	r1, [sp, #4]
 80025be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80025c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80025c6:	4259      	negs	r1, r3
 80025c8:	4159      	adcs	r1, r3
 80025ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025ce:	e7eb      	b.n	80025a8 <__swhatbuf_r+0x24>

080025d0 <__smakebuf_r>:
 80025d0:	898b      	ldrh	r3, [r1, #12]
 80025d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80025d4:	079d      	lsls	r5, r3, #30
 80025d6:	4606      	mov	r6, r0
 80025d8:	460c      	mov	r4, r1
 80025da:	d507      	bpl.n	80025ec <__smakebuf_r+0x1c>
 80025dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80025e0:	6023      	str	r3, [r4, #0]
 80025e2:	6123      	str	r3, [r4, #16]
 80025e4:	2301      	movs	r3, #1
 80025e6:	6163      	str	r3, [r4, #20]
 80025e8:	b003      	add	sp, #12
 80025ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ec:	ab01      	add	r3, sp, #4
 80025ee:	466a      	mov	r2, sp
 80025f0:	f7ff ffc8 	bl	8002584 <__swhatbuf_r>
 80025f4:	9f00      	ldr	r7, [sp, #0]
 80025f6:	4605      	mov	r5, r0
 80025f8:	4639      	mov	r1, r7
 80025fa:	4630      	mov	r0, r6
 80025fc:	f7ff fbbc 	bl	8001d78 <_malloc_r>
 8002600:	b948      	cbnz	r0, 8002616 <__smakebuf_r+0x46>
 8002602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002606:	059a      	lsls	r2, r3, #22
 8002608:	d4ee      	bmi.n	80025e8 <__smakebuf_r+0x18>
 800260a:	f023 0303 	bic.w	r3, r3, #3
 800260e:	f043 0302 	orr.w	r3, r3, #2
 8002612:	81a3      	strh	r3, [r4, #12]
 8002614:	e7e2      	b.n	80025dc <__smakebuf_r+0xc>
 8002616:	89a3      	ldrh	r3, [r4, #12]
 8002618:	6020      	str	r0, [r4, #0]
 800261a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800261e:	81a3      	strh	r3, [r4, #12]
 8002620:	9b01      	ldr	r3, [sp, #4]
 8002622:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002626:	b15b      	cbz	r3, 8002640 <__smakebuf_r+0x70>
 8002628:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800262c:	4630      	mov	r0, r6
 800262e:	f000 f81d 	bl	800266c <_isatty_r>
 8002632:	b128      	cbz	r0, 8002640 <__smakebuf_r+0x70>
 8002634:	89a3      	ldrh	r3, [r4, #12]
 8002636:	f023 0303 	bic.w	r3, r3, #3
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	81a3      	strh	r3, [r4, #12]
 8002640:	89a3      	ldrh	r3, [r4, #12]
 8002642:	431d      	orrs	r5, r3
 8002644:	81a5      	strh	r5, [r4, #12]
 8002646:	e7cf      	b.n	80025e8 <__smakebuf_r+0x18>

08002648 <_fstat_r>:
 8002648:	b538      	push	{r3, r4, r5, lr}
 800264a:	4d07      	ldr	r5, [pc, #28]	@ (8002668 <_fstat_r+0x20>)
 800264c:	2300      	movs	r3, #0
 800264e:	4604      	mov	r4, r0
 8002650:	4608      	mov	r0, r1
 8002652:	4611      	mov	r1, r2
 8002654:	602b      	str	r3, [r5, #0]
 8002656:	f7fe f8ba 	bl	80007ce <_fstat>
 800265a:	1c43      	adds	r3, r0, #1
 800265c:	d102      	bne.n	8002664 <_fstat_r+0x1c>
 800265e:	682b      	ldr	r3, [r5, #0]
 8002660:	b103      	cbz	r3, 8002664 <_fstat_r+0x1c>
 8002662:	6023      	str	r3, [r4, #0]
 8002664:	bd38      	pop	{r3, r4, r5, pc}
 8002666:	bf00      	nop
 8002668:	200001c8 	.word	0x200001c8

0800266c <_isatty_r>:
 800266c:	b538      	push	{r3, r4, r5, lr}
 800266e:	4d06      	ldr	r5, [pc, #24]	@ (8002688 <_isatty_r+0x1c>)
 8002670:	2300      	movs	r3, #0
 8002672:	4604      	mov	r4, r0
 8002674:	4608      	mov	r0, r1
 8002676:	602b      	str	r3, [r5, #0]
 8002678:	f7fe f8b9 	bl	80007ee <_isatty>
 800267c:	1c43      	adds	r3, r0, #1
 800267e:	d102      	bne.n	8002686 <_isatty_r+0x1a>
 8002680:	682b      	ldr	r3, [r5, #0]
 8002682:	b103      	cbz	r3, 8002686 <_isatty_r+0x1a>
 8002684:	6023      	str	r3, [r4, #0]
 8002686:	bd38      	pop	{r3, r4, r5, pc}
 8002688:	200001c8 	.word	0x200001c8

0800268c <_sbrk_r>:
 800268c:	b538      	push	{r3, r4, r5, lr}
 800268e:	4d06      	ldr	r5, [pc, #24]	@ (80026a8 <_sbrk_r+0x1c>)
 8002690:	2300      	movs	r3, #0
 8002692:	4604      	mov	r4, r0
 8002694:	4608      	mov	r0, r1
 8002696:	602b      	str	r3, [r5, #0]
 8002698:	f7fe f8c2 	bl	8000820 <_sbrk>
 800269c:	1c43      	adds	r3, r0, #1
 800269e:	d102      	bne.n	80026a6 <_sbrk_r+0x1a>
 80026a0:	682b      	ldr	r3, [r5, #0]
 80026a2:	b103      	cbz	r3, 80026a6 <_sbrk_r+0x1a>
 80026a4:	6023      	str	r3, [r4, #0]
 80026a6:	bd38      	pop	{r3, r4, r5, pc}
 80026a8:	200001c8 	.word	0x200001c8

080026ac <_init>:
 80026ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ae:	bf00      	nop
 80026b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026b2:	bc08      	pop	{r3}
 80026b4:	469e      	mov	lr, r3
 80026b6:	4770      	bx	lr

080026b8 <_fini>:
 80026b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ba:	bf00      	nop
 80026bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026be:	bc08      	pop	{r3}
 80026c0:	469e      	mov	lr, r3
 80026c2:	4770      	bx	lr
