
P_9_timers_output_compare.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003158  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080032f8  080032f8  000042f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800334c  0800334c  00005078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800334c  0800334c  0000434c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003354  08003354  00005078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003354  08003354  00004354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003358  08003358  00004358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800335c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000078  080033d4  00005078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  080033d4  00005234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009163  00000000  00000000  000050a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001861  00000000  00000000  0000e20b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  0000fa70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000797  00000000  00000000  00010458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016bad  00000000  00000000  00010bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae33  00000000  00000000  0002779c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d7a8  00000000  00000000  000325cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bfd77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003090  00000000  00000000  000bfdbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000c2e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080032e0 	.word	0x080032e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080032e0 	.word	0x080032e0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <SysTick_Handler>:
#include "stm32f4xx_hal.h"

extern TIM_HandleTypeDef tim2;
void SysTick_Handler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80005b0:	f000 fb10 	bl	8000bd4 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80005b4:	f000 fc3f 	bl	8000e36 <HAL_SYSTICK_IRQHandler>
}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}

080005bc <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&tim2);
 80005c0:	4802      	ldr	r0, [pc, #8]	@ (80005cc <TIM2_IRQHandler+0x10>)
 80005c2:	f001 fb5b 	bl	8001c7c <HAL_TIM_IRQHandler>
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000098 	.word	0x20000098

080005d0 <main>:

uint32_t ccr_content;
TIM_HandleTypeDef tim2;

int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	HAL_Init();
 80005d4:	f000 faa4 	bl	8000b20 <HAL_Init>
	GPIO_SWO();
 80005d8:	f000 f930 	bl	800083c <GPIO_SWO>
	SysClk_config();
 80005dc:	f000 f8f6 	bl	80007cc <SysClk_config>
	Timer2_init();
 80005e0:	f000 f832 	bl	8000648 <Timer2_init>
	printf("%lu\n",HAL_RCC_GetPCLK1Freq());
 80005e4:	f001 f9e8 	bl	80019b8 <HAL_RCC_GetPCLK1Freq>
 80005e8:	4603      	mov	r3, r0
 80005ea:	4619      	mov	r1, r3
 80005ec:	4814      	ldr	r0, [pc, #80]	@ (8000640 <main+0x70>)
 80005ee:	f002 f80b 	bl	8002608 <iprintf>
	if(HAL_TIM_OC_Start_IT(&tim2, TIM_CHANNEL_1) != HAL_OK) Error_handler();
 80005f2:	2100      	movs	r1, #0
 80005f4:	4813      	ldr	r0, [pc, #76]	@ (8000644 <main+0x74>)
 80005f6:	f001 fa43 	bl	8001a80 <HAL_TIM_OC_Start_IT>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <main+0x34>
 8000600:	f000 f944 	bl	800088c <Error_handler>
	if(HAL_TIM_OC_Start_IT(&tim2, TIM_CHANNEL_2) != HAL_OK) Error_handler();
 8000604:	2104      	movs	r1, #4
 8000606:	480f      	ldr	r0, [pc, #60]	@ (8000644 <main+0x74>)
 8000608:	f001 fa3a 	bl	8001a80 <HAL_TIM_OC_Start_IT>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <main+0x46>
 8000612:	f000 f93b 	bl	800088c <Error_handler>
	if(HAL_TIM_OC_Start_IT(&tim2, TIM_CHANNEL_3) != HAL_OK) Error_handler();
 8000616:	2108      	movs	r1, #8
 8000618:	480a      	ldr	r0, [pc, #40]	@ (8000644 <main+0x74>)
 800061a:	f001 fa31 	bl	8001a80 <HAL_TIM_OC_Start_IT>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <main+0x58>
 8000624:	f000 f932 	bl	800088c <Error_handler>
	if(HAL_TIM_OC_Start_IT(&tim2, TIM_CHANNEL_4) != HAL_OK) Error_handler();
 8000628:	210c      	movs	r1, #12
 800062a:	4806      	ldr	r0, [pc, #24]	@ (8000644 <main+0x74>)
 800062c:	f001 fa28 	bl	8001a80 <HAL_TIM_OC_Start_IT>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d002      	beq.n	800063c <main+0x6c>
 8000636:	f000 f929 	bl	800088c <Error_handler>
	while(1);
 800063a:	bf00      	nop
 800063c:	bf00      	nop
 800063e:	e7fd      	b.n	800063c <main+0x6c>
 8000640:	080032f8 	.word	0x080032f8
 8000644:	20000098 	.word	0x20000098

08000648 <Timer2_init>:

}

void Timer2_init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af00      	add	r7, sp, #0

	tim2.Instance = TIM2;
 800064e:	4b2b      	ldr	r3, [pc, #172]	@ (80006fc <Timer2_init+0xb4>)
 8000650:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000654:	601a      	str	r2, [r3, #0]
	tim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000656:	4b29      	ldr	r3, [pc, #164]	@ (80006fc <Timer2_init+0xb4>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
	tim2.Init.Period = 0xFFFFFFFF;
 800065c:	4b27      	ldr	r3, [pc, #156]	@ (80006fc <Timer2_init+0xb4>)
 800065e:	f04f 32ff 	mov.w	r2, #4294967295
 8000662:	60da      	str	r2, [r3, #12]
	tim2.Init.Prescaler = 0;
 8000664:	4b25      	ldr	r3, [pc, #148]	@ (80006fc <Timer2_init+0xb4>)
 8000666:	2200      	movs	r2, #0
 8000668:	605a      	str	r2, [r3, #4]
	if(HAL_TIM_OC_Init(&tim2) != HAL_OK) Error_handler();
 800066a:	4824      	ldr	r0, [pc, #144]	@ (80006fc <Timer2_init+0xb4>)
 800066c:	f001 f9b8 	bl	80019e0 <HAL_TIM_OC_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <Timer2_init+0x32>
 8000676:	f000 f909 	bl	800088c <Error_handler>

	TIM_OC_InitTypeDef tim2oc_init;
	tim2oc_init.OCMode = TIM_OCMODE_TOGGLE;
 800067a:	2330      	movs	r3, #48	@ 0x30
 800067c:	607b      	str	r3, [r7, #4]
	tim2oc_init.OCPolarity = TIM_OCPOLARITY_HIGH;
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
	tim2oc_init.Pulse = pulse1_value;
 8000682:	4b1f      	ldr	r3, [pc, #124]	@ (8000700 <Timer2_init+0xb8>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_OC_ConfigChannel(&tim2, &tim2oc_init, TIM_CHANNEL_1) != HAL_OK) Error_handler();
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	2200      	movs	r2, #0
 800068c:	4619      	mov	r1, r3
 800068e:	481b      	ldr	r0, [pc, #108]	@ (80006fc <Timer2_init+0xb4>)
 8000690:	f001 fbe4 	bl	8001e5c <HAL_TIM_OC_ConfigChannel>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <Timer2_init+0x56>
 800069a:	f000 f8f7 	bl	800088c <Error_handler>
	tim2oc_init.Pulse = pulse2_value;
 800069e:	4b19      	ldr	r3, [pc, #100]	@ (8000704 <Timer2_init+0xbc>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_OC_ConfigChannel(&tim2, &tim2oc_init, TIM_CHANNEL_2) != HAL_OK) Error_handler();
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	2204      	movs	r2, #4
 80006a8:	4619      	mov	r1, r3
 80006aa:	4814      	ldr	r0, [pc, #80]	@ (80006fc <Timer2_init+0xb4>)
 80006ac:	f001 fbd6 	bl	8001e5c <HAL_TIM_OC_ConfigChannel>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <Timer2_init+0x72>
 80006b6:	f000 f8e9 	bl	800088c <Error_handler>
	tim2oc_init.Pulse = pulse3_value;
 80006ba:	4b13      	ldr	r3, [pc, #76]	@ (8000708 <Timer2_init+0xc0>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_OC_ConfigChannel(&tim2, &tim2oc_init, TIM_CHANNEL_3) != HAL_OK) Error_handler();
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2208      	movs	r2, #8
 80006c4:	4619      	mov	r1, r3
 80006c6:	480d      	ldr	r0, [pc, #52]	@ (80006fc <Timer2_init+0xb4>)
 80006c8:	f001 fbc8 	bl	8001e5c <HAL_TIM_OC_ConfigChannel>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <Timer2_init+0x8e>
 80006d2:	f000 f8db 	bl	800088c <Error_handler>
	tim2oc_init.Pulse = pulse4_value;
 80006d6:	4b0d      	ldr	r3, [pc, #52]	@ (800070c <Timer2_init+0xc4>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_OC_ConfigChannel(&tim2, &tim2oc_init, TIM_CHANNEL_4) != HAL_OK) Error_handler();
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	220c      	movs	r2, #12
 80006e0:	4619      	mov	r1, r3
 80006e2:	4806      	ldr	r0, [pc, #24]	@ (80006fc <Timer2_init+0xb4>)
 80006e4:	f001 fbba 	bl	8001e5c <HAL_TIM_OC_ConfigChannel>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <Timer2_init+0xaa>
 80006ee:	f000 f8cd 	bl	800088c <Error_handler>



}
 80006f2:	bf00      	nop
 80006f4:	3720      	adds	r7, #32
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000098 	.word	0x20000098
 8000700:	20000000 	.word	0x20000000
 8000704:	20000004 	.word	0x20000004
 8000708:	20000008 	.word	0x20000008
 800070c:	2000000c 	.word	0x2000000c

08000710 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	7f1b      	ldrb	r3, [r3, #28]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d10e      	bne.n	800073e <HAL_TIM_OC_DelayElapsedCallback+0x2e>
	{
		ccr_content = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000720:	2100      	movs	r1, #0
 8000722:	6878      	ldr	r0, [r7, #4]
 8000724:	f001 fbf6 	bl	8001f14 <HAL_TIM_ReadCapturedValue>
 8000728:	4603      	mov	r3, r0
 800072a:	4a23      	ldr	r2, [pc, #140]	@ (80007b8 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 800072c:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, ccr_content + pulse1_value);
 800072e:	4b22      	ldr	r3, [pc, #136]	@ (80007b8 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8000730:	6819      	ldr	r1, [r3, #0]
 8000732:	4b22      	ldr	r3, [pc, #136]	@ (80007bc <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	440a      	add	r2, r1
 800073c:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	7f1b      	ldrb	r3, [r3, #28]
 8000742:	2b02      	cmp	r3, #2
 8000744:	d10e      	bne.n	8000764 <HAL_TIM_OC_DelayElapsedCallback+0x54>
	{
		ccr_content = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000746:	2104      	movs	r1, #4
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f001 fbe3 	bl	8001f14 <HAL_TIM_ReadCapturedValue>
 800074e:	4603      	mov	r3, r0
 8000750:	4a19      	ldr	r2, [pc, #100]	@ (80007b8 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8000752:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, ccr_content + pulse2_value);
 8000754:	4b18      	ldr	r3, [pc, #96]	@ (80007b8 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8000756:	6819      	ldr	r1, [r3, #0]
 8000758:	4b19      	ldr	r3, [pc, #100]	@ (80007c0 <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	440a      	add	r2, r1
 8000762:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	7f1b      	ldrb	r3, [r3, #28]
 8000768:	2b04      	cmp	r3, #4
 800076a:	d10e      	bne.n	800078a <HAL_TIM_OC_DelayElapsedCallback+0x7a>
	{
		ccr_content = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 800076c:	2108      	movs	r1, #8
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f001 fbd0 	bl	8001f14 <HAL_TIM_ReadCapturedValue>
 8000774:	4603      	mov	r3, r0
 8000776:	4a10      	ldr	r2, [pc, #64]	@ (80007b8 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8000778:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, ccr_content + pulse3_value);
 800077a:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 800077c:	6819      	ldr	r1, [r3, #0]
 800077e:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	440a      	add	r2, r1
 8000788:	63da      	str	r2, [r3, #60]	@ 0x3c

	}
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	7f1b      	ldrb	r3, [r3, #28]
 800078e:	2b08      	cmp	r3, #8
 8000790:	d10e      	bne.n	80007b0 <HAL_TIM_OC_DelayElapsedCallback+0xa0>
	{
		ccr_content = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8000792:	210c      	movs	r1, #12
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f001 fbbd 	bl	8001f14 <HAL_TIM_ReadCapturedValue>
 800079a:	4603      	mov	r3, r0
 800079c:	4a06      	ldr	r2, [pc, #24]	@ (80007b8 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 800079e:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_4, ccr_content + pulse4_value);
 80007a0:	4b05      	ldr	r3, [pc, #20]	@ (80007b8 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 80007a2:	6819      	ldr	r1, [r3, #0]
 80007a4:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	440a      	add	r2, r1
 80007ae:	641a      	str	r2, [r3, #64]	@ 0x40

	}
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000094 	.word	0x20000094
 80007bc:	20000000 	.word	0x20000000
 80007c0:	20000004 	.word	0x20000004
 80007c4:	20000008 	.word	0x20000008
 80007c8:	2000000c 	.word	0x2000000c

080007cc <SysClk_config>:

void SysClk_config(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b092      	sub	sp, #72	@ 0x48
 80007d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef hse;
	memset(&hse, 0, sizeof(hse));
 80007d2:	f107 0318 	add.w	r3, r7, #24
 80007d6:	2230      	movs	r2, #48	@ 0x30
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f001 ff69 	bl	80026b2 <memset>
	hse.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e0:	2301      	movs	r3, #1
 80007e2:	61bb      	str	r3, [r7, #24]
	hse.HSEState = RCC_HSE_ON;
 80007e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007e8:	61fb      	str	r3, [r7, #28]
	hse.PLL.PLLState = RCC_PLL_NONE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	633b      	str	r3, [r7, #48]	@ 0x30
	if(HAL_RCC_OscConfig(&hse) != HAL_OK) Error_handler();
 80007ee:	f107 0318 	add.w	r3, r7, #24
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 fcb0 	bl	8001158 <HAL_RCC_OscConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SysClk_config+0x36>
 80007fe:	f000 f845 	bl	800088c <Error_handler>
	RCC_ClkInitTypeDef clk;
	clk.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000802:	2301      	movs	r3, #1
 8000804:	60bb      	str	r3, [r7, #8]
	clk.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8000806:	230f      	movs	r3, #15
 8000808:	607b      	str	r3, [r7, #4]
			RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	clk.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
	clk.APB1CLKDivider = RCC_HCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
	clk.APB2CLKDivider = RCC_HCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
	if(HAL_RCC_ClockConfig(&clk, FLASH_ACR_LATENCY_0WS) != HAL_OK) Error_handler();
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f000 ff14 	bl	8001648 <HAL_RCC_ClockConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SysClk_config+0x5e>
 8000826:	f000 f831 	bl	800088c <Error_handler>
	__HAL_RCC_HSI_DISABLE();// always disable hsi after making hse as clock source not before that
 800082a:	4b03      	ldr	r3, [pc, #12]	@ (8000838 <SysClk_config+0x6c>)
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]

}
 8000830:	bf00      	nop
 8000832:	3748      	adds	r7, #72	@ 0x48
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	42470000 	.word	0x42470000

0800083c <GPIO_SWO>:

void GPIO_SWO(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	603b      	str	r3, [r7, #0]
 8000846:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <GPIO_SWO+0x48>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a0e      	ldr	r2, [pc, #56]	@ (8000884 <GPIO_SWO+0x48>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <GPIO_SWO+0x48>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef gpio_swo;
	gpio_swo.Mode = GPIO_MODE_AF_PP;
 800085e:	2302      	movs	r3, #2
 8000860:	60bb      	str	r3, [r7, #8]
	gpio_swo.Pin = GPIO_PIN_3;
 8000862:	2308      	movs	r3, #8
 8000864:	607b      	str	r3, [r7, #4]
	gpio_swo.Alternate = GPIO_AF0_SWJ;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
	gpio_swo.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
	gpio_swo.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(GPIOB, &gpio_swo);
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	4619      	mov	r1, r3
 8000876:	4804      	ldr	r0, [pc, #16]	@ (8000888 <GPIO_SWO+0x4c>)
 8000878:	f000 faea 	bl	8000e50 <HAL_GPIO_Init>
}
 800087c:	bf00      	nop
 800087e:	3718      	adds	r7, #24
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40023800 	.word	0x40023800
 8000888:	40020400 	.word	0x40020400

0800088c <Error_handler>:

void Error_handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
	while(1);
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <Error_handler+0x4>

08000894 <HAL_TIM_OC_MspInit>:
//void HAL_MspInit(void)
//{
//}

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	@ 0x28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	//1. Enable the peripheral clock
	__HAL_RCC_TIM2_CLK_ENABLE();
 800089c:	2300      	movs	r3, #0
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	4b19      	ldr	r3, [pc, #100]	@ (8000908 <HAL_TIM_OC_MspInit+0x74>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a4:	4a18      	ldr	r2, [pc, #96]	@ (8000908 <HAL_TIM_OC_MspInit+0x74>)
 80008a6:	f043 0301 	orr.w	r3, r3, #1
 80008aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ac:	4b16      	ldr	r3, [pc, #88]	@ (8000908 <HAL_TIM_OC_MspInit+0x74>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b0:	f003 0301 	and.w	r3, r3, #1
 80008b4:	613b      	str	r3, [r7, #16]
 80008b6:	693b      	ldr	r3, [r7, #16]

	//2. Initialize the gpio pins for the purpose..
	GPIO_InitTypeDef gpiotim;
	gpiotim.Alternate = GPIO_AF1_TIM2 ;
 80008b8:	2301      	movs	r3, #1
 80008ba:	627b      	str	r3, [r7, #36]	@ 0x24
	gpiotim.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3;
 80008bc:	230f      	movs	r3, #15
 80008be:	617b      	str	r3, [r7, #20]
	gpiotim.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	61bb      	str	r3, [r7, #24]
	gpiotim.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <HAL_TIM_OC_MspInit+0x74>)
 80008ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000908 <HAL_TIM_OC_MspInit+0x74>)
 80008d2:	f043 0301 	orr.w	r3, r3, #1
 80008d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000908 <HAL_TIM_OC_MspInit+0x74>)
 80008da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008dc:	f003 0301 	and.w	r3, r3, #1
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	68fb      	ldr	r3, [r7, #12]

	HAL_GPIO_Init(GPIOA,  &gpiotim);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	4808      	ldr	r0, [pc, #32]	@ (800090c <HAL_TIM_OC_MspInit+0x78>)
 80008ec:	f000 fab0 	bl	8000e50 <HAL_GPIO_Init>

	//3. Interrupt config
	HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	210f      	movs	r1, #15
 80008f4:	201c      	movs	r0, #28
 80008f6:	f000 fa68 	bl	8000dca <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008fa:	201c      	movs	r0, #28
 80008fc:	f000 fa81 	bl	8000e02 <HAL_NVIC_EnableIRQ>

}
 8000900:	bf00      	nop
 8000902:	3728      	adds	r7, #40	@ 0x28
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40023800 	.word	0x40023800
 800090c:	40020000 	.word	0x40020000

08000910 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800091a:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <ITM_SendChar+0x48>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a0e      	ldr	r2, [pc, #56]	@ (8000958 <ITM_SendChar+0x48>)
 8000920:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000924:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000926:	4b0d      	ldr	r3, [pc, #52]	@ (800095c <ITM_SendChar+0x4c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a0c      	ldr	r2, [pc, #48]	@ (800095c <ITM_SendChar+0x4c>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000932:	bf00      	nop
 8000934:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	2b00      	cmp	r3, #0
 8000940:	d0f8      	beq.n	8000934 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000942:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	6013      	str	r3, [r2, #0]
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	e000edfc 	.word	0xe000edfc
 800095c:	e0000e00 	.word	0xe0000e00

08000960 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	e00a      	b.n	8000988 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000972:	f3af 8000 	nop.w
 8000976:	4601      	mov	r1, r0
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	1c5a      	adds	r2, r3, #1
 800097c:	60ba      	str	r2, [r7, #8]
 800097e:	b2ca      	uxtb	r2, r1
 8000980:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	3301      	adds	r3, #1
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	697a      	ldr	r2, [r7, #20]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	429a      	cmp	r2, r3
 800098e:	dbf0      	blt.n	8000972 <_read+0x12>
  }

  return len;
 8000990:	687b      	ldr	r3, [r7, #4]
}
 8000992:	4618      	mov	r0, r3
 8000994:	3718      	adds	r7, #24
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b086      	sub	sp, #24
 800099e:	af00      	add	r7, sp, #0
 80009a0:	60f8      	str	r0, [r7, #12]
 80009a2:	60b9      	str	r1, [r7, #8]
 80009a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	e009      	b.n	80009c0 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	1c5a      	adds	r2, r3, #1
 80009b0:	60ba      	str	r2, [r7, #8]
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff ffab 	bl	8000910 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	3301      	adds	r3, #1
 80009be:	617b      	str	r3, [r7, #20]
 80009c0:	697a      	ldr	r2, [r7, #20]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	dbf1      	blt.n	80009ac <_write+0x12>
  }
  return len;
 80009c8:	687b      	ldr	r3, [r7, #4]
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3718      	adds	r7, #24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <_close>:

int _close(int file)
{
 80009d2:	b480      	push	{r7}
 80009d4:	b083      	sub	sp, #12
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009de:	4618      	mov	r0, r3
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009ea:	b480      	push	{r7}
 80009ec:	b083      	sub	sp, #12
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
 80009f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009fa:	605a      	str	r2, [r3, #4]
  return 0;
 80009fc:	2300      	movs	r3, #0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <_isatty>:

int _isatty(int file)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	b083      	sub	sp, #12
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a12:	2301      	movs	r3, #1
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3714      	adds	r7, #20
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
	...

08000a3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a44:	4a14      	ldr	r2, [pc, #80]	@ (8000a98 <_sbrk+0x5c>)
 8000a46:	4b15      	ldr	r3, [pc, #84]	@ (8000a9c <_sbrk+0x60>)
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a50:	4b13      	ldr	r3, [pc, #76]	@ (8000aa0 <_sbrk+0x64>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d102      	bne.n	8000a5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a58:	4b11      	ldr	r3, [pc, #68]	@ (8000aa0 <_sbrk+0x64>)
 8000a5a:	4a12      	ldr	r2, [pc, #72]	@ (8000aa4 <_sbrk+0x68>)
 8000a5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a5e:	4b10      	ldr	r3, [pc, #64]	@ (8000aa0 <_sbrk+0x64>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4413      	add	r3, r2
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d207      	bcs.n	8000a7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a6c:	f001 fe70 	bl	8002750 <__errno>
 8000a70:	4603      	mov	r3, r0
 8000a72:	220c      	movs	r2, #12
 8000a74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a76:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7a:	e009      	b.n	8000a90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a7c:	4b08      	ldr	r3, [pc, #32]	@ (8000aa0 <_sbrk+0x64>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a82:	4b07      	ldr	r3, [pc, #28]	@ (8000aa0 <_sbrk+0x64>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4413      	add	r3, r2
 8000a8a:	4a05      	ldr	r2, [pc, #20]	@ (8000aa0 <_sbrk+0x64>)
 8000a8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3718      	adds	r7, #24
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20020000 	.word	0x20020000
 8000a9c:	00000400 	.word	0x00000400
 8000aa0:	200000e0 	.word	0x200000e0
 8000aa4:	20000238 	.word	0x20000238

08000aa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aac:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <SystemInit+0x20>)
 8000aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ab2:	4a05      	ldr	r2, [pc, #20]	@ (8000ac8 <SystemInit+0x20>)
 8000ab4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ab8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000acc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ad0:	f7ff ffea 	bl	8000aa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ad4:	480c      	ldr	r0, [pc, #48]	@ (8000b08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ad6:	490d      	ldr	r1, [pc, #52]	@ (8000b0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8000b10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000adc:	e002      	b.n	8000ae4 <LoopCopyDataInit>

08000ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae2:	3304      	adds	r3, #4

08000ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae8:	d3f9      	bcc.n	8000ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aea:	4a0a      	ldr	r2, [pc, #40]	@ (8000b14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000aec:	4c0a      	ldr	r4, [pc, #40]	@ (8000b18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af0:	e001      	b.n	8000af6 <LoopFillZerobss>

08000af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af4:	3204      	adds	r2, #4

08000af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af8:	d3fb      	bcc.n	8000af2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000afa:	f001 fe2f 	bl	800275c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000afe:	f7ff fd67 	bl	80005d0 <main>
  bx  lr    
 8000b02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b0c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000b10:	0800335c 	.word	0x0800335c
  ldr r2, =_sbss
 8000b14:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000b18:	20000234 	.word	0x20000234

08000b1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b1c:	e7fe      	b.n	8000b1c <ADC_IRQHandler>
	...

08000b20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b24:	4b0e      	ldr	r3, [pc, #56]	@ (8000b60 <HAL_Init+0x40>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a0d      	ldr	r2, [pc, #52]	@ (8000b60 <HAL_Init+0x40>)
 8000b2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b30:	4b0b      	ldr	r3, [pc, #44]	@ (8000b60 <HAL_Init+0x40>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0a      	ldr	r2, [pc, #40]	@ (8000b60 <HAL_Init+0x40>)
 8000b36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b3c:	4b08      	ldr	r3, [pc, #32]	@ (8000b60 <HAL_Init+0x40>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a07      	ldr	r2, [pc, #28]	@ (8000b60 <HAL_Init+0x40>)
 8000b42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b48:	2003      	movs	r0, #3
 8000b4a:	f000 f933 	bl	8000db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b4e:	200f      	movs	r0, #15
 8000b50:	f000 f810 	bl	8000b74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b54:	f000 f806 	bl	8000b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40023c00 	.word	0x40023c00

08000b64 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
	...

08000b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b7c:	4b12      	ldr	r3, [pc, #72]	@ (8000bc8 <HAL_InitTick+0x54>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <HAL_InitTick+0x58>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	4619      	mov	r1, r3
 8000b86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 f943 	bl	8000e1e <HAL_SYSTICK_Config>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e00e      	b.n	8000bc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2b0f      	cmp	r3, #15
 8000ba6:	d80a      	bhi.n	8000bbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	f000 f90b 	bl	8000dca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb4:	4a06      	ldr	r2, [pc, #24]	@ (8000bd0 <HAL_InitTick+0x5c>)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e000      	b.n	8000bc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000010 	.word	0x20000010
 8000bcc:	20000018 	.word	0x20000018
 8000bd0:	20000014 	.word	0x20000014

08000bd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <HAL_IncTick+0x20>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <HAL_IncTick+0x24>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4413      	add	r3, r2
 8000be4:	4a04      	ldr	r2, [pc, #16]	@ (8000bf8 <HAL_IncTick+0x24>)
 8000be6:	6013      	str	r3, [r2, #0]
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000018 	.word	0x20000018
 8000bf8:	200000e4 	.word	0x200000e4

08000bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000c00:	4b03      	ldr	r3, [pc, #12]	@ (8000c10 <HAL_GetTick+0x14>)
 8000c02:	681b      	ldr	r3, [r3, #0]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	200000e4 	.word	0x200000e4

08000c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c24:	4b0c      	ldr	r3, [pc, #48]	@ (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c30:	4013      	ands	r3, r2
 8000c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c46:	4a04      	ldr	r2, [pc, #16]	@ (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	60d3      	str	r3, [r2, #12]
}
 8000c4c:	bf00      	nop
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c60:	4b04      	ldr	r3, [pc, #16]	@ (8000c74 <__NVIC_GetPriorityGrouping+0x18>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	0a1b      	lsrs	r3, r3, #8
 8000c66:	f003 0307 	and.w	r3, r3, #7
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db0b      	blt.n	8000ca2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	f003 021f 	and.w	r2, r3, #31
 8000c90:	4907      	ldr	r1, [pc, #28]	@ (8000cb0 <__NVIC_EnableIRQ+0x38>)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	095b      	lsrs	r3, r3, #5
 8000c98:	2001      	movs	r0, #1
 8000c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000e100 	.word	0xe000e100

08000cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	db0a      	blt.n	8000cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	490c      	ldr	r1, [pc, #48]	@ (8000d00 <__NVIC_SetPriority+0x4c>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	0112      	lsls	r2, r2, #4
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cdc:	e00a      	b.n	8000cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4908      	ldr	r1, [pc, #32]	@ (8000d04 <__NVIC_SetPriority+0x50>)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	3b04      	subs	r3, #4
 8000cec:	0112      	lsls	r2, r2, #4
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	761a      	strb	r2, [r3, #24]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000e100 	.word	0xe000e100
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	@ 0x24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f1c3 0307 	rsb	r3, r3, #7
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	bf28      	it	cs
 8000d26:	2304      	movcs	r3, #4
 8000d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	2b06      	cmp	r3, #6
 8000d30:	d902      	bls.n	8000d38 <NVIC_EncodePriority+0x30>
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3b03      	subs	r3, #3
 8000d36:	e000      	b.n	8000d3a <NVIC_EncodePriority+0x32>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43da      	mvns	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d50:	f04f 31ff 	mov.w	r1, #4294967295
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5a:	43d9      	mvns	r1, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	4313      	orrs	r3, r2
         );
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3724      	adds	r7, #36	@ 0x24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d80:	d301      	bcc.n	8000d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00f      	b.n	8000da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d86:	4a0a      	ldr	r2, [pc, #40]	@ (8000db0 <SysTick_Config+0x40>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8e:	210f      	movs	r1, #15
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f7ff ff8e 	bl	8000cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d98:	4b05      	ldr	r3, [pc, #20]	@ (8000db0 <SysTick_Config+0x40>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9e:	4b04      	ldr	r3, [pc, #16]	@ (8000db0 <SysTick_Config+0x40>)
 8000da0:	2207      	movs	r2, #7
 8000da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	e000e010 	.word	0xe000e010

08000db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ff29 	bl	8000c14 <__NVIC_SetPriorityGrouping>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ddc:	f7ff ff3e 	bl	8000c5c <__NVIC_GetPriorityGrouping>
 8000de0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	68b9      	ldr	r1, [r7, #8]
 8000de6:	6978      	ldr	r0, [r7, #20]
 8000de8:	f7ff ff8e 	bl	8000d08 <NVIC_EncodePriority>
 8000dec:	4602      	mov	r2, r0
 8000dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df2:	4611      	mov	r1, r2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff5d 	bl	8000cb4 <__NVIC_SetPriority>
}
 8000dfa:	bf00      	nop
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	4603      	mov	r3, r0
 8000e0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff31 	bl	8000c78 <__NVIC_EnableIRQ>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff ffa2 	bl	8000d70 <SysTick_Config>
 8000e2c:	4603      	mov	r3, r0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000e3a:	f000 f802 	bl	8000e42 <HAL_SYSTICK_Callback>
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b089      	sub	sp, #36	@ 0x24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
 8000e6a:	e159      	b.n	8001120 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	697a      	ldr	r2, [r7, #20]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	f040 8148 	bne.w	800111a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f003 0303 	and.w	r3, r3, #3
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d005      	beq.n	8000ea2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d130      	bne.n	8000f04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	2203      	movs	r2, #3
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	68da      	ldr	r2, [r3, #12]
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ed8:	2201      	movs	r2, #1
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	091b      	lsrs	r3, r3, #4
 8000eee:	f003 0201 	and.w	r2, r3, #1
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 0303 	and.w	r3, r3, #3
 8000f0c:	2b03      	cmp	r3, #3
 8000f0e:	d017      	beq.n	8000f40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4013      	ands	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	689a      	ldr	r2, [r3, #8]
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 0303 	and.w	r3, r3, #3
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d123      	bne.n	8000f94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	08da      	lsrs	r2, r3, #3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3208      	adds	r2, #8
 8000f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	f003 0307 	and.w	r3, r3, #7
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	220f      	movs	r2, #15
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	691a      	ldr	r2, [r3, #16]
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	08da      	lsrs	r2, r3, #3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3208      	adds	r2, #8
 8000f8e:	69b9      	ldr	r1, [r7, #24]
 8000f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0203 	and.w	r2, r3, #3
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	f000 80a2 	beq.w	800111a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	4b57      	ldr	r3, [pc, #348]	@ (8001138 <HAL_GPIO_Init+0x2e8>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fde:	4a56      	ldr	r2, [pc, #344]	@ (8001138 <HAL_GPIO_Init+0x2e8>)
 8000fe0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fe4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fe6:	4b54      	ldr	r3, [pc, #336]	@ (8001138 <HAL_GPIO_Init+0x2e8>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ff2:	4a52      	ldr	r2, [pc, #328]	@ (800113c <HAL_GPIO_Init+0x2ec>)
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	089b      	lsrs	r3, r3, #2
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f003 0303 	and.w	r3, r3, #3
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	220f      	movs	r2, #15
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4013      	ands	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a49      	ldr	r2, [pc, #292]	@ (8001140 <HAL_GPIO_Init+0x2f0>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d019      	beq.n	8001052 <HAL_GPIO_Init+0x202>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a48      	ldr	r2, [pc, #288]	@ (8001144 <HAL_GPIO_Init+0x2f4>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d013      	beq.n	800104e <HAL_GPIO_Init+0x1fe>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a47      	ldr	r2, [pc, #284]	@ (8001148 <HAL_GPIO_Init+0x2f8>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d00d      	beq.n	800104a <HAL_GPIO_Init+0x1fa>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a46      	ldr	r2, [pc, #280]	@ (800114c <HAL_GPIO_Init+0x2fc>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d007      	beq.n	8001046 <HAL_GPIO_Init+0x1f6>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a45      	ldr	r2, [pc, #276]	@ (8001150 <HAL_GPIO_Init+0x300>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d101      	bne.n	8001042 <HAL_GPIO_Init+0x1f2>
 800103e:	2304      	movs	r3, #4
 8001040:	e008      	b.n	8001054 <HAL_GPIO_Init+0x204>
 8001042:	2307      	movs	r3, #7
 8001044:	e006      	b.n	8001054 <HAL_GPIO_Init+0x204>
 8001046:	2303      	movs	r3, #3
 8001048:	e004      	b.n	8001054 <HAL_GPIO_Init+0x204>
 800104a:	2302      	movs	r3, #2
 800104c:	e002      	b.n	8001054 <HAL_GPIO_Init+0x204>
 800104e:	2301      	movs	r3, #1
 8001050:	e000      	b.n	8001054 <HAL_GPIO_Init+0x204>
 8001052:	2300      	movs	r3, #0
 8001054:	69fa      	ldr	r2, [r7, #28]
 8001056:	f002 0203 	and.w	r2, r2, #3
 800105a:	0092      	lsls	r2, r2, #2
 800105c:	4093      	lsls	r3, r2
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001064:	4935      	ldr	r1, [pc, #212]	@ (800113c <HAL_GPIO_Init+0x2ec>)
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	089b      	lsrs	r3, r3, #2
 800106a:	3302      	adds	r3, #2
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001072:	4b38      	ldr	r3, [pc, #224]	@ (8001154 <HAL_GPIO_Init+0x304>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	43db      	mvns	r3, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4013      	ands	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001096:	4a2f      	ldr	r2, [pc, #188]	@ (8001154 <HAL_GPIO_Init+0x304>)
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800109c:	4b2d      	ldr	r3, [pc, #180]	@ (8001154 <HAL_GPIO_Init+0x304>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010c0:	4a24      	ldr	r2, [pc, #144]	@ (8001154 <HAL_GPIO_Init+0x304>)
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010c6:	4b23      	ldr	r3, [pc, #140]	@ (8001154 <HAL_GPIO_Init+0x304>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ea:	4a1a      	ldr	r2, [pc, #104]	@ (8001154 <HAL_GPIO_Init+0x304>)
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010f0:	4b18      	ldr	r3, [pc, #96]	@ (8001154 <HAL_GPIO_Init+0x304>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001114:	4a0f      	ldr	r2, [pc, #60]	@ (8001154 <HAL_GPIO_Init+0x304>)
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3301      	adds	r3, #1
 800111e:	61fb      	str	r3, [r7, #28]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	2b0f      	cmp	r3, #15
 8001124:	f67f aea2 	bls.w	8000e6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	3724      	adds	r7, #36	@ 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800
 800113c:	40013800 	.word	0x40013800
 8001140:	40020000 	.word	0x40020000
 8001144:	40020400 	.word	0x40020400
 8001148:	40020800 	.word	0x40020800
 800114c:	40020c00 	.word	0x40020c00
 8001150:	40021000 	.word	0x40021000
 8001154:	40013c00 	.word	0x40013c00

08001158 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e267      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b00      	cmp	r3, #0
 8001174:	d075      	beq.n	8001262 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001176:	4b88      	ldr	r3, [pc, #544]	@ (8001398 <HAL_RCC_OscConfig+0x240>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 030c 	and.w	r3, r3, #12
 800117e:	2b04      	cmp	r3, #4
 8001180:	d00c      	beq.n	800119c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001182:	4b85      	ldr	r3, [pc, #532]	@ (8001398 <HAL_RCC_OscConfig+0x240>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800118a:	2b08      	cmp	r3, #8
 800118c:	d112      	bne.n	80011b4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800118e:	4b82      	ldr	r3, [pc, #520]	@ (8001398 <HAL_RCC_OscConfig+0x240>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001196:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800119a:	d10b      	bne.n	80011b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800119c:	4b7e      	ldr	r3, [pc, #504]	@ (8001398 <HAL_RCC_OscConfig+0x240>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d05b      	beq.n	8001260 <HAL_RCC_OscConfig+0x108>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d157      	bne.n	8001260 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e242      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011bc:	d106      	bne.n	80011cc <HAL_RCC_OscConfig+0x74>
 80011be:	4b76      	ldr	r3, [pc, #472]	@ (8001398 <HAL_RCC_OscConfig+0x240>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a75      	ldr	r2, [pc, #468]	@ (8001398 <HAL_RCC_OscConfig+0x240>)
 80011c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	e01d      	b.n	8001208 <HAL_RCC_OscConfig+0xb0>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011d4:	d10c      	bne.n	80011f0 <HAL_RCC_OscConfig+0x98>
 80011d6:	4b70      	ldr	r3, [pc, #448]	@ (8001398 <HAL_RCC_OscConfig+0x240>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a6f      	ldr	r2, [pc, #444]	@ (8001398 <HAL_RCC_OscConfig+0x240>)
 80011dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	4b6d      	ldr	r3, [pc, #436]	@ (8001398 <HAL_RCC_OscConfig+0x240>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a6c      	ldr	r2, [pc, #432]	@ (8001398 <HAL_RCC_OscConfig+0x240>)
 80011e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	e00b      	b.n	8001208 <HAL_RCC_OscConfig+0xb0>
 80011f0:	4b69      	ldr	r3, [pc, #420]	@ (8001398 <HAL_RCC_OscConfig+0x240>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a68      	ldr	r2, [pc, #416]	@ (8001398 <HAL_RCC_OscConfig+0x240>)
 80011f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	4b66      	ldr	r3, [pc, #408]	@ (8001398 <HAL_RCC_OscConfig+0x240>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a65      	ldr	r2, [pc, #404]	@ (8001398 <HAL_RCC_OscConfig+0x240>)
 8001202:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d013      	beq.n	8001238 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001210:	f7ff fcf4 	bl	8000bfc <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001218:	f7ff fcf0 	bl	8000bfc <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b64      	cmp	r3, #100	@ 0x64
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e207      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122a:	4b5b      	ldr	r3, [pc, #364]	@ (8001398 <HAL_RCC_OscConfig+0x240>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0f0      	beq.n	8001218 <HAL_RCC_OscConfig+0xc0>
 8001236:	e014      	b.n	8001262 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001238:	f7ff fce0 	bl	8000bfc <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001240:	f7ff fcdc 	bl	8000bfc <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b64      	cmp	r3, #100	@ 0x64
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e1f3      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001252:	4b51      	ldr	r3, [pc, #324]	@ (8001398 <HAL_RCC_OscConfig+0x240>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1f0      	bne.n	8001240 <HAL_RCC_OscConfig+0xe8>
 800125e:	e000      	b.n	8001262 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d063      	beq.n	8001336 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800126e:	4b4a      	ldr	r3, [pc, #296]	@ (8001398 <HAL_RCC_OscConfig+0x240>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00b      	beq.n	8001292 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800127a:	4b47      	ldr	r3, [pc, #284]	@ (8001398 <HAL_RCC_OscConfig+0x240>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001282:	2b08      	cmp	r3, #8
 8001284:	d11c      	bne.n	80012c0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001286:	4b44      	ldr	r3, [pc, #272]	@ (8001398 <HAL_RCC_OscConfig+0x240>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d116      	bne.n	80012c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001292:	4b41      	ldr	r3, [pc, #260]	@ (8001398 <HAL_RCC_OscConfig+0x240>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d005      	beq.n	80012aa <HAL_RCC_OscConfig+0x152>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d001      	beq.n	80012aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e1c7      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001398 <HAL_RCC_OscConfig+0x240>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	4937      	ldr	r1, [pc, #220]	@ (8001398 <HAL_RCC_OscConfig+0x240>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012be:	e03a      	b.n	8001336 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d020      	beq.n	800130a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c8:	4b34      	ldr	r3, [pc, #208]	@ (800139c <HAL_RCC_OscConfig+0x244>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ce:	f7ff fc95 	bl	8000bfc <HAL_GetTick>
 80012d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d4:	e008      	b.n	80012e8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012d6:	f7ff fc91 	bl	8000bfc <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e1a8      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001398 <HAL_RCC_OscConfig+0x240>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0f0      	beq.n	80012d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f4:	4b28      	ldr	r3, [pc, #160]	@ (8001398 <HAL_RCC_OscConfig+0x240>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	4925      	ldr	r1, [pc, #148]	@ (8001398 <HAL_RCC_OscConfig+0x240>)
 8001304:	4313      	orrs	r3, r2
 8001306:	600b      	str	r3, [r1, #0]
 8001308:	e015      	b.n	8001336 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800130a:	4b24      	ldr	r3, [pc, #144]	@ (800139c <HAL_RCC_OscConfig+0x244>)
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001310:	f7ff fc74 	bl	8000bfc <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001318:	f7ff fc70 	bl	8000bfc <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e187      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132a:	4b1b      	ldr	r3, [pc, #108]	@ (8001398 <HAL_RCC_OscConfig+0x240>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f0      	bne.n	8001318 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	2b00      	cmp	r3, #0
 8001340:	d036      	beq.n	80013b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d016      	beq.n	8001378 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800134a:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <HAL_RCC_OscConfig+0x248>)
 800134c:	2201      	movs	r2, #1
 800134e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001350:	f7ff fc54 	bl	8000bfc <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001358:	f7ff fc50 	bl	8000bfc <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e167      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136a:	4b0b      	ldr	r3, [pc, #44]	@ (8001398 <HAL_RCC_OscConfig+0x240>)
 800136c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0x200>
 8001376:	e01b      	b.n	80013b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001378:	4b09      	ldr	r3, [pc, #36]	@ (80013a0 <HAL_RCC_OscConfig+0x248>)
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137e:	f7ff fc3d 	bl	8000bfc <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001384:	e00e      	b.n	80013a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001386:	f7ff fc39 	bl	8000bfc <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d907      	bls.n	80013a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e150      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
 8001398:	40023800 	.word	0x40023800
 800139c:	42470000 	.word	0x42470000
 80013a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a4:	4b88      	ldr	r3, [pc, #544]	@ (80015c8 <HAL_RCC_OscConfig+0x470>)
 80013a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1ea      	bne.n	8001386 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 8097 	beq.w	80014ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013be:	2300      	movs	r3, #0
 80013c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013c2:	4b81      	ldr	r3, [pc, #516]	@ (80015c8 <HAL_RCC_OscConfig+0x470>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10f      	bne.n	80013ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	4b7d      	ldr	r3, [pc, #500]	@ (80015c8 <HAL_RCC_OscConfig+0x470>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d6:	4a7c      	ldr	r2, [pc, #496]	@ (80015c8 <HAL_RCC_OscConfig+0x470>)
 80013d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013de:	4b7a      	ldr	r3, [pc, #488]	@ (80015c8 <HAL_RCC_OscConfig+0x470>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013ea:	2301      	movs	r3, #1
 80013ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ee:	4b77      	ldr	r3, [pc, #476]	@ (80015cc <HAL_RCC_OscConfig+0x474>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d118      	bne.n	800142c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013fa:	4b74      	ldr	r3, [pc, #464]	@ (80015cc <HAL_RCC_OscConfig+0x474>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a73      	ldr	r2, [pc, #460]	@ (80015cc <HAL_RCC_OscConfig+0x474>)
 8001400:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001406:	f7ff fbf9 	bl	8000bfc <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800140e:	f7ff fbf5 	bl	8000bfc <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e10c      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001420:	4b6a      	ldr	r3, [pc, #424]	@ (80015cc <HAL_RCC_OscConfig+0x474>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f0      	beq.n	800140e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d106      	bne.n	8001442 <HAL_RCC_OscConfig+0x2ea>
 8001434:	4b64      	ldr	r3, [pc, #400]	@ (80015c8 <HAL_RCC_OscConfig+0x470>)
 8001436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001438:	4a63      	ldr	r2, [pc, #396]	@ (80015c8 <HAL_RCC_OscConfig+0x470>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001440:	e01c      	b.n	800147c <HAL_RCC_OscConfig+0x324>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b05      	cmp	r3, #5
 8001448:	d10c      	bne.n	8001464 <HAL_RCC_OscConfig+0x30c>
 800144a:	4b5f      	ldr	r3, [pc, #380]	@ (80015c8 <HAL_RCC_OscConfig+0x470>)
 800144c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800144e:	4a5e      	ldr	r2, [pc, #376]	@ (80015c8 <HAL_RCC_OscConfig+0x470>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	6713      	str	r3, [r2, #112]	@ 0x70
 8001456:	4b5c      	ldr	r3, [pc, #368]	@ (80015c8 <HAL_RCC_OscConfig+0x470>)
 8001458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800145a:	4a5b      	ldr	r2, [pc, #364]	@ (80015c8 <HAL_RCC_OscConfig+0x470>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6713      	str	r3, [r2, #112]	@ 0x70
 8001462:	e00b      	b.n	800147c <HAL_RCC_OscConfig+0x324>
 8001464:	4b58      	ldr	r3, [pc, #352]	@ (80015c8 <HAL_RCC_OscConfig+0x470>)
 8001466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001468:	4a57      	ldr	r2, [pc, #348]	@ (80015c8 <HAL_RCC_OscConfig+0x470>)
 800146a:	f023 0301 	bic.w	r3, r3, #1
 800146e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001470:	4b55      	ldr	r3, [pc, #340]	@ (80015c8 <HAL_RCC_OscConfig+0x470>)
 8001472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001474:	4a54      	ldr	r2, [pc, #336]	@ (80015c8 <HAL_RCC_OscConfig+0x470>)
 8001476:	f023 0304 	bic.w	r3, r3, #4
 800147a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d015      	beq.n	80014b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001484:	f7ff fbba 	bl	8000bfc <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800148a:	e00a      	b.n	80014a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800148c:	f7ff fbb6 	bl	8000bfc <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	f241 3288 	movw	r2, #5000	@ 0x1388
 800149a:	4293      	cmp	r3, r2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e0cb      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a2:	4b49      	ldr	r3, [pc, #292]	@ (80015c8 <HAL_RCC_OscConfig+0x470>)
 80014a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0ee      	beq.n	800148c <HAL_RCC_OscConfig+0x334>
 80014ae:	e014      	b.n	80014da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b0:	f7ff fba4 	bl	8000bfc <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014b6:	e00a      	b.n	80014ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014b8:	f7ff fba0 	bl	8000bfc <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e0b5      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ce:	4b3e      	ldr	r3, [pc, #248]	@ (80015c8 <HAL_RCC_OscConfig+0x470>)
 80014d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1ee      	bne.n	80014b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014da:	7dfb      	ldrb	r3, [r7, #23]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d105      	bne.n	80014ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014e0:	4b39      	ldr	r3, [pc, #228]	@ (80015c8 <HAL_RCC_OscConfig+0x470>)
 80014e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e4:	4a38      	ldr	r2, [pc, #224]	@ (80015c8 <HAL_RCC_OscConfig+0x470>)
 80014e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f000 80a1 	beq.w	8001638 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014f6:	4b34      	ldr	r3, [pc, #208]	@ (80015c8 <HAL_RCC_OscConfig+0x470>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 030c 	and.w	r3, r3, #12
 80014fe:	2b08      	cmp	r3, #8
 8001500:	d05c      	beq.n	80015bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	2b02      	cmp	r3, #2
 8001508:	d141      	bne.n	800158e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800150a:	4b31      	ldr	r3, [pc, #196]	@ (80015d0 <HAL_RCC_OscConfig+0x478>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7ff fb74 	bl	8000bfc <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001518:	f7ff fb70 	bl	8000bfc <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e087      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800152a:	4b27      	ldr	r3, [pc, #156]	@ (80015c8 <HAL_RCC_OscConfig+0x470>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69da      	ldr	r2, [r3, #28]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001544:	019b      	lsls	r3, r3, #6
 8001546:	431a      	orrs	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800154c:	085b      	lsrs	r3, r3, #1
 800154e:	3b01      	subs	r3, #1
 8001550:	041b      	lsls	r3, r3, #16
 8001552:	431a      	orrs	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001558:	061b      	lsls	r3, r3, #24
 800155a:	491b      	ldr	r1, [pc, #108]	@ (80015c8 <HAL_RCC_OscConfig+0x470>)
 800155c:	4313      	orrs	r3, r2
 800155e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001560:	4b1b      	ldr	r3, [pc, #108]	@ (80015d0 <HAL_RCC_OscConfig+0x478>)
 8001562:	2201      	movs	r2, #1
 8001564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001566:	f7ff fb49 	bl	8000bfc <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800156e:	f7ff fb45 	bl	8000bfc <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e05c      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001580:	4b11      	ldr	r3, [pc, #68]	@ (80015c8 <HAL_RCC_OscConfig+0x470>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0f0      	beq.n	800156e <HAL_RCC_OscConfig+0x416>
 800158c:	e054      	b.n	8001638 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800158e:	4b10      	ldr	r3, [pc, #64]	@ (80015d0 <HAL_RCC_OscConfig+0x478>)
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001594:	f7ff fb32 	bl	8000bfc <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800159c:	f7ff fb2e 	bl	8000bfc <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e045      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ae:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <HAL_RCC_OscConfig+0x470>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0x444>
 80015ba:	e03d      	b.n	8001638 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d107      	bne.n	80015d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e038      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40007000 	.word	0x40007000
 80015d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001644 <HAL_RCC_OscConfig+0x4ec>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d028      	beq.n	8001634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d121      	bne.n	8001634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d11a      	bne.n	8001634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001604:	4013      	ands	r3, r2
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800160a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800160c:	4293      	cmp	r3, r2
 800160e:	d111      	bne.n	8001634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800161a:	085b      	lsrs	r3, r3, #1
 800161c:	3b01      	subs	r3, #1
 800161e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001620:	429a      	cmp	r2, r3
 8001622:	d107      	bne.n	8001634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800162e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001630:	429a      	cmp	r2, r3
 8001632:	d001      	beq.n	8001638 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e000      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800

08001648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e0cc      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800165c:	4b68      	ldr	r3, [pc, #416]	@ (8001800 <HAL_RCC_ClockConfig+0x1b8>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0307 	and.w	r3, r3, #7
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	429a      	cmp	r2, r3
 8001668:	d90c      	bls.n	8001684 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166a:	4b65      	ldr	r3, [pc, #404]	@ (8001800 <HAL_RCC_ClockConfig+0x1b8>)
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001672:	4b63      	ldr	r3, [pc, #396]	@ (8001800 <HAL_RCC_ClockConfig+0x1b8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	d001      	beq.n	8001684 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e0b8      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d020      	beq.n	80016d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800169c:	4b59      	ldr	r3, [pc, #356]	@ (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	4a58      	ldr	r2, [pc, #352]	@ (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80016a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80016a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016b4:	4b53      	ldr	r3, [pc, #332]	@ (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	4a52      	ldr	r2, [pc, #328]	@ (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80016be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016c0:	4b50      	ldr	r3, [pc, #320]	@ (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	494d      	ldr	r1, [pc, #308]	@ (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d044      	beq.n	8001768 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d107      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e6:	4b47      	ldr	r3, [pc, #284]	@ (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d119      	bne.n	8001726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e07f      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d003      	beq.n	8001706 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001702:	2b03      	cmp	r3, #3
 8001704:	d107      	bne.n	8001716 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001706:	4b3f      	ldr	r3, [pc, #252]	@ (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d109      	bne.n	8001726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e06f      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001716:	4b3b      	ldr	r3, [pc, #236]	@ (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e067      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001726:	4b37      	ldr	r3, [pc, #220]	@ (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f023 0203 	bic.w	r2, r3, #3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	4934      	ldr	r1, [pc, #208]	@ (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 8001734:	4313      	orrs	r3, r2
 8001736:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001738:	f7ff fa60 	bl	8000bfc <HAL_GetTick>
 800173c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800173e:	e00a      	b.n	8001756 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001740:	f7ff fa5c 	bl	8000bfc <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800174e:	4293      	cmp	r3, r2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e04f      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001756:	4b2b      	ldr	r3, [pc, #172]	@ (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 020c 	and.w	r2, r3, #12
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	429a      	cmp	r2, r3
 8001766:	d1eb      	bne.n	8001740 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001768:	4b25      	ldr	r3, [pc, #148]	@ (8001800 <HAL_RCC_ClockConfig+0x1b8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	d20c      	bcs.n	8001790 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001776:	4b22      	ldr	r3, [pc, #136]	@ (8001800 <HAL_RCC_ClockConfig+0x1b8>)
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800177e:	4b20      	ldr	r3, [pc, #128]	@ (8001800 <HAL_RCC_ClockConfig+0x1b8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	d001      	beq.n	8001790 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e032      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b00      	cmp	r3, #0
 800179a:	d008      	beq.n	80017ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800179c:	4b19      	ldr	r3, [pc, #100]	@ (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	4916      	ldr	r1, [pc, #88]	@ (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d009      	beq.n	80017ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ba:	4b12      	ldr	r3, [pc, #72]	@ (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	490e      	ldr	r1, [pc, #56]	@ (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017ce:	f000 f821 	bl	8001814 <HAL_RCC_GetSysClockFreq>
 80017d2:	4602      	mov	r2, r0
 80017d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	091b      	lsrs	r3, r3, #4
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	490a      	ldr	r1, [pc, #40]	@ (8001808 <HAL_RCC_ClockConfig+0x1c0>)
 80017e0:	5ccb      	ldrb	r3, [r1, r3]
 80017e2:	fa22 f303 	lsr.w	r3, r2, r3
 80017e6:	4a09      	ldr	r2, [pc, #36]	@ (800180c <HAL_RCC_ClockConfig+0x1c4>)
 80017e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80017ea:	4b09      	ldr	r3, [pc, #36]	@ (8001810 <HAL_RCC_ClockConfig+0x1c8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff f9c0 	bl	8000b74 <HAL_InitTick>

  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40023c00 	.word	0x40023c00
 8001804:	40023800 	.word	0x40023800
 8001808:	08003300 	.word	0x08003300
 800180c:	20000010 	.word	0x20000010
 8001810:	20000014 	.word	0x20000014

08001814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001818:	b090      	sub	sp, #64	@ 0x40
 800181a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800181c:	2300      	movs	r3, #0
 800181e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001824:	2300      	movs	r3, #0
 8001826:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001828:	2300      	movs	r3, #0
 800182a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800182c:	4b59      	ldr	r3, [pc, #356]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x180>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 030c 	and.w	r3, r3, #12
 8001834:	2b08      	cmp	r3, #8
 8001836:	d00d      	beq.n	8001854 <HAL_RCC_GetSysClockFreq+0x40>
 8001838:	2b08      	cmp	r3, #8
 800183a:	f200 80a1 	bhi.w	8001980 <HAL_RCC_GetSysClockFreq+0x16c>
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <HAL_RCC_GetSysClockFreq+0x34>
 8001842:	2b04      	cmp	r3, #4
 8001844:	d003      	beq.n	800184e <HAL_RCC_GetSysClockFreq+0x3a>
 8001846:	e09b      	b.n	8001980 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001848:	4b53      	ldr	r3, [pc, #332]	@ (8001998 <HAL_RCC_GetSysClockFreq+0x184>)
 800184a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800184c:	e09b      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800184e:	4b53      	ldr	r3, [pc, #332]	@ (800199c <HAL_RCC_GetSysClockFreq+0x188>)
 8001850:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001852:	e098      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001854:	4b4f      	ldr	r3, [pc, #316]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x180>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800185c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800185e:	4b4d      	ldr	r3, [pc, #308]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x180>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d028      	beq.n	80018bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800186a:	4b4a      	ldr	r3, [pc, #296]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x180>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	099b      	lsrs	r3, r3, #6
 8001870:	2200      	movs	r2, #0
 8001872:	623b      	str	r3, [r7, #32]
 8001874:	627a      	str	r2, [r7, #36]	@ 0x24
 8001876:	6a3b      	ldr	r3, [r7, #32]
 8001878:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800187c:	2100      	movs	r1, #0
 800187e:	4b47      	ldr	r3, [pc, #284]	@ (800199c <HAL_RCC_GetSysClockFreq+0x188>)
 8001880:	fb03 f201 	mul.w	r2, r3, r1
 8001884:	2300      	movs	r3, #0
 8001886:	fb00 f303 	mul.w	r3, r0, r3
 800188a:	4413      	add	r3, r2
 800188c:	4a43      	ldr	r2, [pc, #268]	@ (800199c <HAL_RCC_GetSysClockFreq+0x188>)
 800188e:	fba0 1202 	umull	r1, r2, r0, r2
 8001892:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001894:	460a      	mov	r2, r1
 8001896:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001898:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800189a:	4413      	add	r3, r2
 800189c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800189e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018a0:	2200      	movs	r2, #0
 80018a2:	61bb      	str	r3, [r7, #24]
 80018a4:	61fa      	str	r2, [r7, #28]
 80018a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80018ae:	f7fe fce7 	bl	8000280 <__aeabi_uldivmod>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4613      	mov	r3, r2
 80018b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018ba:	e053      	b.n	8001964 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018bc:	4b35      	ldr	r3, [pc, #212]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x180>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	099b      	lsrs	r3, r3, #6
 80018c2:	2200      	movs	r2, #0
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	617a      	str	r2, [r7, #20]
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80018ce:	f04f 0b00 	mov.w	fp, #0
 80018d2:	4652      	mov	r2, sl
 80018d4:	465b      	mov	r3, fp
 80018d6:	f04f 0000 	mov.w	r0, #0
 80018da:	f04f 0100 	mov.w	r1, #0
 80018de:	0159      	lsls	r1, r3, #5
 80018e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018e4:	0150      	lsls	r0, r2, #5
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	ebb2 080a 	subs.w	r8, r2, sl
 80018ee:	eb63 090b 	sbc.w	r9, r3, fp
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80018fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001902:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001906:	ebb2 0408 	subs.w	r4, r2, r8
 800190a:	eb63 0509 	sbc.w	r5, r3, r9
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	f04f 0300 	mov.w	r3, #0
 8001916:	00eb      	lsls	r3, r5, #3
 8001918:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800191c:	00e2      	lsls	r2, r4, #3
 800191e:	4614      	mov	r4, r2
 8001920:	461d      	mov	r5, r3
 8001922:	eb14 030a 	adds.w	r3, r4, sl
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	eb45 030b 	adc.w	r3, r5, fp
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	f04f 0300 	mov.w	r3, #0
 8001936:	e9d7 4500 	ldrd	r4, r5, [r7]
 800193a:	4629      	mov	r1, r5
 800193c:	028b      	lsls	r3, r1, #10
 800193e:	4621      	mov	r1, r4
 8001940:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001944:	4621      	mov	r1, r4
 8001946:	028a      	lsls	r2, r1, #10
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800194e:	2200      	movs	r2, #0
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	60fa      	str	r2, [r7, #12]
 8001954:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001958:	f7fe fc92 	bl	8000280 <__aeabi_uldivmod>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4613      	mov	r3, r2
 8001962:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001964:	4b0b      	ldr	r3, [pc, #44]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x180>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	0c1b      	lsrs	r3, r3, #16
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	3301      	adds	r3, #1
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001974:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001978:	fbb2 f3f3 	udiv	r3, r2, r3
 800197c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800197e:	e002      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001980:	4b05      	ldr	r3, [pc, #20]	@ (8001998 <HAL_RCC_GetSysClockFreq+0x184>)
 8001982:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001988:	4618      	mov	r0, r3
 800198a:	3740      	adds	r7, #64	@ 0x40
 800198c:	46bd      	mov	sp, r7
 800198e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800
 8001998:	00f42400 	.word	0x00f42400
 800199c:	017d7840 	.word	0x017d7840

080019a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019a4:	4b03      	ldr	r3, [pc, #12]	@ (80019b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80019a6:	681b      	ldr	r3, [r3, #0]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	20000010 	.word	0x20000010

080019b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019bc:	f7ff fff0 	bl	80019a0 <HAL_RCC_GetHCLKFreq>
 80019c0:	4602      	mov	r2, r0
 80019c2:	4b05      	ldr	r3, [pc, #20]	@ (80019d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	0a9b      	lsrs	r3, r3, #10
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	4903      	ldr	r1, [pc, #12]	@ (80019dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ce:	5ccb      	ldrb	r3, [r1, r3]
 80019d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40023800 	.word	0x40023800
 80019dc:	08003310 	.word	0x08003310

080019e0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e041      	b.n	8001a76 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d106      	bne.n	8001a0c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7fe ff44 	bl	8000894 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2202      	movs	r2, #2
 8001a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3304      	adds	r3, #4
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4610      	mov	r0, r2
 8001a20:	f000 fae4 	bl	8001fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d109      	bne.n	8001aa8 <HAL_TIM_OC_Start_IT+0x28>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	bf14      	ite	ne
 8001aa0:	2301      	movne	r3, #1
 8001aa2:	2300      	moveq	r3, #0
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	e022      	b.n	8001aee <HAL_TIM_OC_Start_IT+0x6e>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	d109      	bne.n	8001ac2 <HAL_TIM_OC_Start_IT+0x42>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	bf14      	ite	ne
 8001aba:	2301      	movne	r3, #1
 8001abc:	2300      	moveq	r3, #0
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	e015      	b.n	8001aee <HAL_TIM_OC_Start_IT+0x6e>
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	d109      	bne.n	8001adc <HAL_TIM_OC_Start_IT+0x5c>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	bf14      	ite	ne
 8001ad4:	2301      	movne	r3, #1
 8001ad6:	2300      	moveq	r3, #0
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	e008      	b.n	8001aee <HAL_TIM_OC_Start_IT+0x6e>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	bf14      	ite	ne
 8001ae8:	2301      	movne	r3, #1
 8001aea:	2300      	moveq	r3, #0
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e0b3      	b.n	8001c5e <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d104      	bne.n	8001b06 <HAL_TIM_OC_Start_IT+0x86>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2202      	movs	r2, #2
 8001b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b04:	e013      	b.n	8001b2e <HAL_TIM_OC_Start_IT+0xae>
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d104      	bne.n	8001b16 <HAL_TIM_OC_Start_IT+0x96>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2202      	movs	r2, #2
 8001b10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b14:	e00b      	b.n	8001b2e <HAL_TIM_OC_Start_IT+0xae>
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d104      	bne.n	8001b26 <HAL_TIM_OC_Start_IT+0xa6>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2202      	movs	r2, #2
 8001b20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b24:	e003      	b.n	8001b2e <HAL_TIM_OC_Start_IT+0xae>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2202      	movs	r2, #2
 8001b2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	2b0c      	cmp	r3, #12
 8001b32:	d841      	bhi.n	8001bb8 <HAL_TIM_OC_Start_IT+0x138>
 8001b34:	a201      	add	r2, pc, #4	@ (adr r2, 8001b3c <HAL_TIM_OC_Start_IT+0xbc>)
 8001b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b3a:	bf00      	nop
 8001b3c:	08001b71 	.word	0x08001b71
 8001b40:	08001bb9 	.word	0x08001bb9
 8001b44:	08001bb9 	.word	0x08001bb9
 8001b48:	08001bb9 	.word	0x08001bb9
 8001b4c:	08001b83 	.word	0x08001b83
 8001b50:	08001bb9 	.word	0x08001bb9
 8001b54:	08001bb9 	.word	0x08001bb9
 8001b58:	08001bb9 	.word	0x08001bb9
 8001b5c:	08001b95 	.word	0x08001b95
 8001b60:	08001bb9 	.word	0x08001bb9
 8001b64:	08001bb9 	.word	0x08001bb9
 8001b68:	08001bb9 	.word	0x08001bb9
 8001b6c:	08001ba7 	.word	0x08001ba7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0202 	orr.w	r2, r2, #2
 8001b7e:	60da      	str	r2, [r3, #12]
      break;
 8001b80:	e01d      	b.n	8001bbe <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68da      	ldr	r2, [r3, #12]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f042 0204 	orr.w	r2, r2, #4
 8001b90:	60da      	str	r2, [r3, #12]
      break;
 8001b92:	e014      	b.n	8001bbe <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0208 	orr.w	r2, r2, #8
 8001ba2:	60da      	str	r2, [r3, #12]
      break;
 8001ba4:	e00b      	b.n	8001bbe <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f042 0210 	orr.w	r2, r2, #16
 8001bb4:	60da      	str	r2, [r3, #12]
      break;
 8001bb6:	e002      	b.n	8001bbe <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	73fb      	strb	r3, [r7, #15]
      break;
 8001bbc:	bf00      	nop
  }

  if (status == HAL_OK)
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d14b      	bne.n	8001c5c <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	6839      	ldr	r1, [r7, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f000 fc1f 	bl	8002410 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a24      	ldr	r2, [pc, #144]	@ (8001c68 <HAL_TIM_OC_Start_IT+0x1e8>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d107      	bne.n	8001bec <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001bea:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c68 <HAL_TIM_OC_Start_IT+0x1e8>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d018      	beq.n	8001c28 <HAL_TIM_OC_Start_IT+0x1a8>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bfe:	d013      	beq.n	8001c28 <HAL_TIM_OC_Start_IT+0x1a8>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a19      	ldr	r2, [pc, #100]	@ (8001c6c <HAL_TIM_OC_Start_IT+0x1ec>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d00e      	beq.n	8001c28 <HAL_TIM_OC_Start_IT+0x1a8>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a18      	ldr	r2, [pc, #96]	@ (8001c70 <HAL_TIM_OC_Start_IT+0x1f0>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d009      	beq.n	8001c28 <HAL_TIM_OC_Start_IT+0x1a8>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a16      	ldr	r2, [pc, #88]	@ (8001c74 <HAL_TIM_OC_Start_IT+0x1f4>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d004      	beq.n	8001c28 <HAL_TIM_OC_Start_IT+0x1a8>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a15      	ldr	r2, [pc, #84]	@ (8001c78 <HAL_TIM_OC_Start_IT+0x1f8>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d111      	bne.n	8001c4c <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	2b06      	cmp	r3, #6
 8001c38:	d010      	beq.n	8001c5c <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f042 0201 	orr.w	r2, r2, #1
 8001c48:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c4a:	e007      	b.n	8001c5c <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 0201 	orr.w	r2, r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40010000 	.word	0x40010000
 8001c6c:	40000400 	.word	0x40000400
 8001c70:	40000800 	.word	0x40000800
 8001c74:	40000c00 	.word	0x40000c00
 8001c78:	40014000 	.word	0x40014000

08001c7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d020      	beq.n	8001ce0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d01b      	beq.n	8001ce0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f06f 0202 	mvn.w	r2, #2
 8001cb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f972 	bl	8001fb0 <HAL_TIM_IC_CaptureCallback>
 8001ccc:	e005      	b.n	8001cda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7fe fd1e 	bl	8000710 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f975 	bl	8001fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d020      	beq.n	8001d2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d01b      	beq.n	8001d2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f06f 0204 	mvn.w	r2, #4
 8001cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2202      	movs	r2, #2
 8001d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f94c 	bl	8001fb0 <HAL_TIM_IC_CaptureCallback>
 8001d18:	e005      	b.n	8001d26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7fe fcf8 	bl	8000710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f94f 	bl	8001fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	f003 0308 	and.w	r3, r3, #8
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d020      	beq.n	8001d78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f003 0308 	and.w	r3, r3, #8
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d01b      	beq.n	8001d78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f06f 0208 	mvn.w	r2, #8
 8001d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2204      	movs	r2, #4
 8001d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f926 	bl	8001fb0 <HAL_TIM_IC_CaptureCallback>
 8001d64:	e005      	b.n	8001d72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7fe fcd2 	bl	8000710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f929 	bl	8001fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f003 0310 	and.w	r3, r3, #16
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d020      	beq.n	8001dc4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f003 0310 	and.w	r3, r3, #16
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d01b      	beq.n	8001dc4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f06f 0210 	mvn.w	r2, #16
 8001d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2208      	movs	r2, #8
 8001d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f900 	bl	8001fb0 <HAL_TIM_IC_CaptureCallback>
 8001db0:	e005      	b.n	8001dbe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7fe fcac 	bl	8000710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f903 	bl	8001fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00c      	beq.n	8001de8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d007      	beq.n	8001de8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0201 	mvn.w	r2, #1
 8001de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f8da 	bl	8001f9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00c      	beq.n	8001e0c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d007      	beq.n	8001e0c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 fb31 	bl	800246e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00c      	beq.n	8001e30 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d007      	beq.n	8001e30 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f8d4 	bl	8001fd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	f003 0320 	and.w	r3, r3, #32
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00c      	beq.n	8001e54 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f003 0320 	and.w	r3, r3, #32
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d007      	beq.n	8001e54 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f06f 0220 	mvn.w	r2, #32
 8001e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 fb03 	bl	800245a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e54:	bf00      	nop
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d101      	bne.n	8001e7a <HAL_TIM_OC_ConfigChannel+0x1e>
 8001e76:	2302      	movs	r3, #2
 8001e78:	e048      	b.n	8001f0c <HAL_TIM_OC_ConfigChannel+0xb0>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b0c      	cmp	r3, #12
 8001e86:	d839      	bhi.n	8001efc <HAL_TIM_OC_ConfigChannel+0xa0>
 8001e88:	a201      	add	r2, pc, #4	@ (adr r2, 8001e90 <HAL_TIM_OC_ConfigChannel+0x34>)
 8001e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e8e:	bf00      	nop
 8001e90:	08001ec5 	.word	0x08001ec5
 8001e94:	08001efd 	.word	0x08001efd
 8001e98:	08001efd 	.word	0x08001efd
 8001e9c:	08001efd 	.word	0x08001efd
 8001ea0:	08001ed3 	.word	0x08001ed3
 8001ea4:	08001efd 	.word	0x08001efd
 8001ea8:	08001efd 	.word	0x08001efd
 8001eac:	08001efd 	.word	0x08001efd
 8001eb0:	08001ee1 	.word	0x08001ee1
 8001eb4:	08001efd 	.word	0x08001efd
 8001eb8:	08001efd 	.word	0x08001efd
 8001ebc:	08001efd 	.word	0x08001efd
 8001ec0:	08001eef 	.word	0x08001eef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 f914 	bl	80020f8 <TIM_OC1_SetConfig>
      break;
 8001ed0:	e017      	b.n	8001f02 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68b9      	ldr	r1, [r7, #8]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 f973 	bl	80021c4 <TIM_OC2_SetConfig>
      break;
 8001ede:	e010      	b.n	8001f02 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 f9d8 	bl	800229c <TIM_OC3_SetConfig>
      break;
 8001eec:	e009      	b.n	8001f02 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68b9      	ldr	r1, [r7, #8]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f000 fa3b 	bl	8002370 <TIM_OC4_SetConfig>
      break;
 8001efa:	e002      	b.n	8001f02 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	75fb      	strb	r3, [r7, #23]
      break;
 8001f00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	2b0c      	cmp	r3, #12
 8001f26:	d831      	bhi.n	8001f8c <HAL_TIM_ReadCapturedValue+0x78>
 8001f28:	a201      	add	r2, pc, #4	@ (adr r2, 8001f30 <HAL_TIM_ReadCapturedValue+0x1c>)
 8001f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f2e:	bf00      	nop
 8001f30:	08001f65 	.word	0x08001f65
 8001f34:	08001f8d 	.word	0x08001f8d
 8001f38:	08001f8d 	.word	0x08001f8d
 8001f3c:	08001f8d 	.word	0x08001f8d
 8001f40:	08001f6f 	.word	0x08001f6f
 8001f44:	08001f8d 	.word	0x08001f8d
 8001f48:	08001f8d 	.word	0x08001f8d
 8001f4c:	08001f8d 	.word	0x08001f8d
 8001f50:	08001f79 	.word	0x08001f79
 8001f54:	08001f8d 	.word	0x08001f8d
 8001f58:	08001f8d 	.word	0x08001f8d
 8001f5c:	08001f8d 	.word	0x08001f8d
 8001f60:	08001f83 	.word	0x08001f83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f6a:	60fb      	str	r3, [r7, #12]

      break;
 8001f6c:	e00f      	b.n	8001f8e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f74:	60fb      	str	r3, [r7, #12]

      break;
 8001f76:	e00a      	b.n	8001f8e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f7e:	60fb      	str	r3, [r7, #12]

      break;
 8001f80:	e005      	b.n	8001f8e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f88:	60fb      	str	r3, [r7, #12]

      break;
 8001f8a:	e000      	b.n	8001f8e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8001f8c:	bf00      	nop
  }

  return tmpreg;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a37      	ldr	r2, [pc, #220]	@ (80020dc <TIM_Base_SetConfig+0xf0>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d00f      	beq.n	8002024 <TIM_Base_SetConfig+0x38>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800200a:	d00b      	beq.n	8002024 <TIM_Base_SetConfig+0x38>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a34      	ldr	r2, [pc, #208]	@ (80020e0 <TIM_Base_SetConfig+0xf4>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d007      	beq.n	8002024 <TIM_Base_SetConfig+0x38>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a33      	ldr	r2, [pc, #204]	@ (80020e4 <TIM_Base_SetConfig+0xf8>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d003      	beq.n	8002024 <TIM_Base_SetConfig+0x38>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a32      	ldr	r2, [pc, #200]	@ (80020e8 <TIM_Base_SetConfig+0xfc>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d108      	bne.n	8002036 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800202a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	4313      	orrs	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a28      	ldr	r2, [pc, #160]	@ (80020dc <TIM_Base_SetConfig+0xf0>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d01b      	beq.n	8002076 <TIM_Base_SetConfig+0x8a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002044:	d017      	beq.n	8002076 <TIM_Base_SetConfig+0x8a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a25      	ldr	r2, [pc, #148]	@ (80020e0 <TIM_Base_SetConfig+0xf4>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d013      	beq.n	8002076 <TIM_Base_SetConfig+0x8a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a24      	ldr	r2, [pc, #144]	@ (80020e4 <TIM_Base_SetConfig+0xf8>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d00f      	beq.n	8002076 <TIM_Base_SetConfig+0x8a>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a23      	ldr	r2, [pc, #140]	@ (80020e8 <TIM_Base_SetConfig+0xfc>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d00b      	beq.n	8002076 <TIM_Base_SetConfig+0x8a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a22      	ldr	r2, [pc, #136]	@ (80020ec <TIM_Base_SetConfig+0x100>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d007      	beq.n	8002076 <TIM_Base_SetConfig+0x8a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a21      	ldr	r2, [pc, #132]	@ (80020f0 <TIM_Base_SetConfig+0x104>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d003      	beq.n	8002076 <TIM_Base_SetConfig+0x8a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a20      	ldr	r2, [pc, #128]	@ (80020f4 <TIM_Base_SetConfig+0x108>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d108      	bne.n	8002088 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800207c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	4313      	orrs	r3, r2
 8002086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	4313      	orrs	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a0c      	ldr	r2, [pc, #48]	@ (80020dc <TIM_Base_SetConfig+0xf0>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d103      	bne.n	80020b6 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	691a      	ldr	r2, [r3, #16]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f043 0204 	orr.w	r2, r3, #4
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	601a      	str	r2, [r3, #0]
}
 80020ce:	bf00      	nop
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40010000 	.word	0x40010000
 80020e0:	40000400 	.word	0x40000400
 80020e4:	40000800 	.word	0x40000800
 80020e8:	40000c00 	.word	0x40000c00
 80020ec:	40014000 	.word	0x40014000
 80020f0:	40014400 	.word	0x40014400
 80020f4:	40014800 	.word	0x40014800

080020f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b087      	sub	sp, #28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	f023 0201 	bic.w	r2, r3, #1
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f023 0303 	bic.w	r3, r3, #3
 800212e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f023 0302 	bic.w	r3, r3, #2
 8002140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	4313      	orrs	r3, r2
 800214a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a1c      	ldr	r2, [pc, #112]	@ (80021c0 <TIM_OC1_SetConfig+0xc8>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d10c      	bne.n	800216e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f023 0308 	bic.w	r3, r3, #8
 800215a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	4313      	orrs	r3, r2
 8002164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f023 0304 	bic.w	r3, r3, #4
 800216c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a13      	ldr	r2, [pc, #76]	@ (80021c0 <TIM_OC1_SetConfig+0xc8>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d111      	bne.n	800219a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800217c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	621a      	str	r2, [r3, #32]
}
 80021b4:	bf00      	nop
 80021b6:	371c      	adds	r7, #28
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	40010000 	.word	0x40010000

080021c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	f023 0210 	bic.w	r2, r3, #16
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80021f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	021b      	lsls	r3, r3, #8
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	4313      	orrs	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	f023 0320 	bic.w	r3, r3, #32
 800220e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	4313      	orrs	r3, r2
 800221a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a1e      	ldr	r2, [pc, #120]	@ (8002298 <TIM_OC2_SetConfig+0xd4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d10d      	bne.n	8002240 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800222a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	4313      	orrs	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800223e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a15      	ldr	r2, [pc, #84]	@ (8002298 <TIM_OC2_SetConfig+0xd4>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d113      	bne.n	8002270 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800224e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002256:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	4313      	orrs	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4313      	orrs	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	621a      	str	r2, [r3, #32]
}
 800228a:	bf00      	nop
 800228c:	371c      	adds	r7, #28
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40010000 	.word	0x40010000

0800229c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800229c:	b480      	push	{r7}
 800229e:	b087      	sub	sp, #28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f023 0303 	bic.w	r3, r3, #3
 80022d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	4313      	orrs	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80022e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	021b      	lsls	r3, r3, #8
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a1d      	ldr	r2, [pc, #116]	@ (800236c <TIM_OC3_SetConfig+0xd0>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d10d      	bne.n	8002316 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002300:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	021b      	lsls	r3, r3, #8
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	4313      	orrs	r3, r2
 800230c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002314:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a14      	ldr	r2, [pc, #80]	@ (800236c <TIM_OC3_SetConfig+0xd0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d113      	bne.n	8002346 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800232c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	011b      	lsls	r3, r3, #4
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	4313      	orrs	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	4313      	orrs	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	621a      	str	r2, [r3, #32]
}
 8002360:	bf00      	nop
 8002362:	371c      	adds	r7, #28
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	40010000 	.word	0x40010000

08002370 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002370:	b480      	push	{r7}
 8002372:	b087      	sub	sp, #28
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800239e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	021b      	lsls	r3, r3, #8
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80023ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	031b      	lsls	r3, r3, #12
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a10      	ldr	r2, [pc, #64]	@ (800240c <TIM_OC4_SetConfig+0x9c>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d109      	bne.n	80023e4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80023d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	019b      	lsls	r3, r3, #6
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	621a      	str	r2, [r3, #32]
}
 80023fe:	bf00      	nop
 8002400:	371c      	adds	r7, #28
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40010000 	.word	0x40010000

08002410 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002410:	b480      	push	{r7}
 8002412:	b087      	sub	sp, #28
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	f003 031f 	and.w	r3, r3, #31
 8002422:	2201      	movs	r2, #1
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6a1a      	ldr	r2, [r3, #32]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	43db      	mvns	r3, r3
 8002432:	401a      	ands	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6a1a      	ldr	r2, [r3, #32]
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f003 031f 	and.w	r3, r3, #31
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	fa01 f303 	lsl.w	r3, r1, r3
 8002448:	431a      	orrs	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	621a      	str	r2, [r3, #32]
}
 800244e:	bf00      	nop
 8002450:	371c      	adds	r7, #28
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
	...

08002484 <std>:
 8002484:	2300      	movs	r3, #0
 8002486:	b510      	push	{r4, lr}
 8002488:	4604      	mov	r4, r0
 800248a:	e9c0 3300 	strd	r3, r3, [r0]
 800248e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002492:	6083      	str	r3, [r0, #8]
 8002494:	8181      	strh	r1, [r0, #12]
 8002496:	6643      	str	r3, [r0, #100]	@ 0x64
 8002498:	81c2      	strh	r2, [r0, #14]
 800249a:	6183      	str	r3, [r0, #24]
 800249c:	4619      	mov	r1, r3
 800249e:	2208      	movs	r2, #8
 80024a0:	305c      	adds	r0, #92	@ 0x5c
 80024a2:	f000 f906 	bl	80026b2 <memset>
 80024a6:	4b0d      	ldr	r3, [pc, #52]	@ (80024dc <std+0x58>)
 80024a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80024aa:	4b0d      	ldr	r3, [pc, #52]	@ (80024e0 <std+0x5c>)
 80024ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80024ae:	4b0d      	ldr	r3, [pc, #52]	@ (80024e4 <std+0x60>)
 80024b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80024b2:	4b0d      	ldr	r3, [pc, #52]	@ (80024e8 <std+0x64>)
 80024b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80024b6:	4b0d      	ldr	r3, [pc, #52]	@ (80024ec <std+0x68>)
 80024b8:	6224      	str	r4, [r4, #32]
 80024ba:	429c      	cmp	r4, r3
 80024bc:	d006      	beq.n	80024cc <std+0x48>
 80024be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80024c2:	4294      	cmp	r4, r2
 80024c4:	d002      	beq.n	80024cc <std+0x48>
 80024c6:	33d0      	adds	r3, #208	@ 0xd0
 80024c8:	429c      	cmp	r4, r3
 80024ca:	d105      	bne.n	80024d8 <std+0x54>
 80024cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80024d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024d4:	f000 b966 	b.w	80027a4 <__retarget_lock_init_recursive>
 80024d8:	bd10      	pop	{r4, pc}
 80024da:	bf00      	nop
 80024dc:	0800262d 	.word	0x0800262d
 80024e0:	0800264f 	.word	0x0800264f
 80024e4:	08002687 	.word	0x08002687
 80024e8:	080026ab 	.word	0x080026ab
 80024ec:	200000e8 	.word	0x200000e8

080024f0 <stdio_exit_handler>:
 80024f0:	4a02      	ldr	r2, [pc, #8]	@ (80024fc <stdio_exit_handler+0xc>)
 80024f2:	4903      	ldr	r1, [pc, #12]	@ (8002500 <stdio_exit_handler+0x10>)
 80024f4:	4803      	ldr	r0, [pc, #12]	@ (8002504 <stdio_exit_handler+0x14>)
 80024f6:	f000 b869 	b.w	80025cc <_fwalk_sglue>
 80024fa:	bf00      	nop
 80024fc:	2000001c 	.word	0x2000001c
 8002500:	08003041 	.word	0x08003041
 8002504:	2000002c 	.word	0x2000002c

08002508 <cleanup_stdio>:
 8002508:	6841      	ldr	r1, [r0, #4]
 800250a:	4b0c      	ldr	r3, [pc, #48]	@ (800253c <cleanup_stdio+0x34>)
 800250c:	4299      	cmp	r1, r3
 800250e:	b510      	push	{r4, lr}
 8002510:	4604      	mov	r4, r0
 8002512:	d001      	beq.n	8002518 <cleanup_stdio+0x10>
 8002514:	f000 fd94 	bl	8003040 <_fflush_r>
 8002518:	68a1      	ldr	r1, [r4, #8]
 800251a:	4b09      	ldr	r3, [pc, #36]	@ (8002540 <cleanup_stdio+0x38>)
 800251c:	4299      	cmp	r1, r3
 800251e:	d002      	beq.n	8002526 <cleanup_stdio+0x1e>
 8002520:	4620      	mov	r0, r4
 8002522:	f000 fd8d 	bl	8003040 <_fflush_r>
 8002526:	68e1      	ldr	r1, [r4, #12]
 8002528:	4b06      	ldr	r3, [pc, #24]	@ (8002544 <cleanup_stdio+0x3c>)
 800252a:	4299      	cmp	r1, r3
 800252c:	d004      	beq.n	8002538 <cleanup_stdio+0x30>
 800252e:	4620      	mov	r0, r4
 8002530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002534:	f000 bd84 	b.w	8003040 <_fflush_r>
 8002538:	bd10      	pop	{r4, pc}
 800253a:	bf00      	nop
 800253c:	200000e8 	.word	0x200000e8
 8002540:	20000150 	.word	0x20000150
 8002544:	200001b8 	.word	0x200001b8

08002548 <global_stdio_init.part.0>:
 8002548:	b510      	push	{r4, lr}
 800254a:	4b0b      	ldr	r3, [pc, #44]	@ (8002578 <global_stdio_init.part.0+0x30>)
 800254c:	4c0b      	ldr	r4, [pc, #44]	@ (800257c <global_stdio_init.part.0+0x34>)
 800254e:	4a0c      	ldr	r2, [pc, #48]	@ (8002580 <global_stdio_init.part.0+0x38>)
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	4620      	mov	r0, r4
 8002554:	2200      	movs	r2, #0
 8002556:	2104      	movs	r1, #4
 8002558:	f7ff ff94 	bl	8002484 <std>
 800255c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002560:	2201      	movs	r2, #1
 8002562:	2109      	movs	r1, #9
 8002564:	f7ff ff8e 	bl	8002484 <std>
 8002568:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800256c:	2202      	movs	r2, #2
 800256e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002572:	2112      	movs	r1, #18
 8002574:	f7ff bf86 	b.w	8002484 <std>
 8002578:	20000220 	.word	0x20000220
 800257c:	200000e8 	.word	0x200000e8
 8002580:	080024f1 	.word	0x080024f1

08002584 <__sfp_lock_acquire>:
 8002584:	4801      	ldr	r0, [pc, #4]	@ (800258c <__sfp_lock_acquire+0x8>)
 8002586:	f000 b90e 	b.w	80027a6 <__retarget_lock_acquire_recursive>
 800258a:	bf00      	nop
 800258c:	20000229 	.word	0x20000229

08002590 <__sfp_lock_release>:
 8002590:	4801      	ldr	r0, [pc, #4]	@ (8002598 <__sfp_lock_release+0x8>)
 8002592:	f000 b909 	b.w	80027a8 <__retarget_lock_release_recursive>
 8002596:	bf00      	nop
 8002598:	20000229 	.word	0x20000229

0800259c <__sinit>:
 800259c:	b510      	push	{r4, lr}
 800259e:	4604      	mov	r4, r0
 80025a0:	f7ff fff0 	bl	8002584 <__sfp_lock_acquire>
 80025a4:	6a23      	ldr	r3, [r4, #32]
 80025a6:	b11b      	cbz	r3, 80025b0 <__sinit+0x14>
 80025a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025ac:	f7ff bff0 	b.w	8002590 <__sfp_lock_release>
 80025b0:	4b04      	ldr	r3, [pc, #16]	@ (80025c4 <__sinit+0x28>)
 80025b2:	6223      	str	r3, [r4, #32]
 80025b4:	4b04      	ldr	r3, [pc, #16]	@ (80025c8 <__sinit+0x2c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1f5      	bne.n	80025a8 <__sinit+0xc>
 80025bc:	f7ff ffc4 	bl	8002548 <global_stdio_init.part.0>
 80025c0:	e7f2      	b.n	80025a8 <__sinit+0xc>
 80025c2:	bf00      	nop
 80025c4:	08002509 	.word	0x08002509
 80025c8:	20000220 	.word	0x20000220

080025cc <_fwalk_sglue>:
 80025cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80025d0:	4607      	mov	r7, r0
 80025d2:	4688      	mov	r8, r1
 80025d4:	4614      	mov	r4, r2
 80025d6:	2600      	movs	r6, #0
 80025d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80025dc:	f1b9 0901 	subs.w	r9, r9, #1
 80025e0:	d505      	bpl.n	80025ee <_fwalk_sglue+0x22>
 80025e2:	6824      	ldr	r4, [r4, #0]
 80025e4:	2c00      	cmp	r4, #0
 80025e6:	d1f7      	bne.n	80025d8 <_fwalk_sglue+0xc>
 80025e8:	4630      	mov	r0, r6
 80025ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80025ee:	89ab      	ldrh	r3, [r5, #12]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d907      	bls.n	8002604 <_fwalk_sglue+0x38>
 80025f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80025f8:	3301      	adds	r3, #1
 80025fa:	d003      	beq.n	8002604 <_fwalk_sglue+0x38>
 80025fc:	4629      	mov	r1, r5
 80025fe:	4638      	mov	r0, r7
 8002600:	47c0      	blx	r8
 8002602:	4306      	orrs	r6, r0
 8002604:	3568      	adds	r5, #104	@ 0x68
 8002606:	e7e9      	b.n	80025dc <_fwalk_sglue+0x10>

08002608 <iprintf>:
 8002608:	b40f      	push	{r0, r1, r2, r3}
 800260a:	b507      	push	{r0, r1, r2, lr}
 800260c:	4906      	ldr	r1, [pc, #24]	@ (8002628 <iprintf+0x20>)
 800260e:	ab04      	add	r3, sp, #16
 8002610:	6808      	ldr	r0, [r1, #0]
 8002612:	f853 2b04 	ldr.w	r2, [r3], #4
 8002616:	6881      	ldr	r1, [r0, #8]
 8002618:	9301      	str	r3, [sp, #4]
 800261a:	f000 f9e9 	bl	80029f0 <_vfiprintf_r>
 800261e:	b003      	add	sp, #12
 8002620:	f85d eb04 	ldr.w	lr, [sp], #4
 8002624:	b004      	add	sp, #16
 8002626:	4770      	bx	lr
 8002628:	20000028 	.word	0x20000028

0800262c <__sread>:
 800262c:	b510      	push	{r4, lr}
 800262e:	460c      	mov	r4, r1
 8002630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002634:	f000 f868 	bl	8002708 <_read_r>
 8002638:	2800      	cmp	r0, #0
 800263a:	bfab      	itete	ge
 800263c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800263e:	89a3      	ldrhlt	r3, [r4, #12]
 8002640:	181b      	addge	r3, r3, r0
 8002642:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002646:	bfac      	ite	ge
 8002648:	6563      	strge	r3, [r4, #84]	@ 0x54
 800264a:	81a3      	strhlt	r3, [r4, #12]
 800264c:	bd10      	pop	{r4, pc}

0800264e <__swrite>:
 800264e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002652:	461f      	mov	r7, r3
 8002654:	898b      	ldrh	r3, [r1, #12]
 8002656:	05db      	lsls	r3, r3, #23
 8002658:	4605      	mov	r5, r0
 800265a:	460c      	mov	r4, r1
 800265c:	4616      	mov	r6, r2
 800265e:	d505      	bpl.n	800266c <__swrite+0x1e>
 8002660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002664:	2302      	movs	r3, #2
 8002666:	2200      	movs	r2, #0
 8002668:	f000 f83c 	bl	80026e4 <_lseek_r>
 800266c:	89a3      	ldrh	r3, [r4, #12]
 800266e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002672:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002676:	81a3      	strh	r3, [r4, #12]
 8002678:	4632      	mov	r2, r6
 800267a:	463b      	mov	r3, r7
 800267c:	4628      	mov	r0, r5
 800267e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002682:	f000 b853 	b.w	800272c <_write_r>

08002686 <__sseek>:
 8002686:	b510      	push	{r4, lr}
 8002688:	460c      	mov	r4, r1
 800268a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800268e:	f000 f829 	bl	80026e4 <_lseek_r>
 8002692:	1c43      	adds	r3, r0, #1
 8002694:	89a3      	ldrh	r3, [r4, #12]
 8002696:	bf15      	itete	ne
 8002698:	6560      	strne	r0, [r4, #84]	@ 0x54
 800269a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800269e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80026a2:	81a3      	strheq	r3, [r4, #12]
 80026a4:	bf18      	it	ne
 80026a6:	81a3      	strhne	r3, [r4, #12]
 80026a8:	bd10      	pop	{r4, pc}

080026aa <__sclose>:
 80026aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026ae:	f000 b809 	b.w	80026c4 <_close_r>

080026b2 <memset>:
 80026b2:	4402      	add	r2, r0
 80026b4:	4603      	mov	r3, r0
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d100      	bne.n	80026bc <memset+0xa>
 80026ba:	4770      	bx	lr
 80026bc:	f803 1b01 	strb.w	r1, [r3], #1
 80026c0:	e7f9      	b.n	80026b6 <memset+0x4>
	...

080026c4 <_close_r>:
 80026c4:	b538      	push	{r3, r4, r5, lr}
 80026c6:	4d06      	ldr	r5, [pc, #24]	@ (80026e0 <_close_r+0x1c>)
 80026c8:	2300      	movs	r3, #0
 80026ca:	4604      	mov	r4, r0
 80026cc:	4608      	mov	r0, r1
 80026ce:	602b      	str	r3, [r5, #0]
 80026d0:	f7fe f97f 	bl	80009d2 <_close>
 80026d4:	1c43      	adds	r3, r0, #1
 80026d6:	d102      	bne.n	80026de <_close_r+0x1a>
 80026d8:	682b      	ldr	r3, [r5, #0]
 80026da:	b103      	cbz	r3, 80026de <_close_r+0x1a>
 80026dc:	6023      	str	r3, [r4, #0]
 80026de:	bd38      	pop	{r3, r4, r5, pc}
 80026e0:	20000224 	.word	0x20000224

080026e4 <_lseek_r>:
 80026e4:	b538      	push	{r3, r4, r5, lr}
 80026e6:	4d07      	ldr	r5, [pc, #28]	@ (8002704 <_lseek_r+0x20>)
 80026e8:	4604      	mov	r4, r0
 80026ea:	4608      	mov	r0, r1
 80026ec:	4611      	mov	r1, r2
 80026ee:	2200      	movs	r2, #0
 80026f0:	602a      	str	r2, [r5, #0]
 80026f2:	461a      	mov	r2, r3
 80026f4:	f7fe f994 	bl	8000a20 <_lseek>
 80026f8:	1c43      	adds	r3, r0, #1
 80026fa:	d102      	bne.n	8002702 <_lseek_r+0x1e>
 80026fc:	682b      	ldr	r3, [r5, #0]
 80026fe:	b103      	cbz	r3, 8002702 <_lseek_r+0x1e>
 8002700:	6023      	str	r3, [r4, #0]
 8002702:	bd38      	pop	{r3, r4, r5, pc}
 8002704:	20000224 	.word	0x20000224

08002708 <_read_r>:
 8002708:	b538      	push	{r3, r4, r5, lr}
 800270a:	4d07      	ldr	r5, [pc, #28]	@ (8002728 <_read_r+0x20>)
 800270c:	4604      	mov	r4, r0
 800270e:	4608      	mov	r0, r1
 8002710:	4611      	mov	r1, r2
 8002712:	2200      	movs	r2, #0
 8002714:	602a      	str	r2, [r5, #0]
 8002716:	461a      	mov	r2, r3
 8002718:	f7fe f922 	bl	8000960 <_read>
 800271c:	1c43      	adds	r3, r0, #1
 800271e:	d102      	bne.n	8002726 <_read_r+0x1e>
 8002720:	682b      	ldr	r3, [r5, #0]
 8002722:	b103      	cbz	r3, 8002726 <_read_r+0x1e>
 8002724:	6023      	str	r3, [r4, #0]
 8002726:	bd38      	pop	{r3, r4, r5, pc}
 8002728:	20000224 	.word	0x20000224

0800272c <_write_r>:
 800272c:	b538      	push	{r3, r4, r5, lr}
 800272e:	4d07      	ldr	r5, [pc, #28]	@ (800274c <_write_r+0x20>)
 8002730:	4604      	mov	r4, r0
 8002732:	4608      	mov	r0, r1
 8002734:	4611      	mov	r1, r2
 8002736:	2200      	movs	r2, #0
 8002738:	602a      	str	r2, [r5, #0]
 800273a:	461a      	mov	r2, r3
 800273c:	f7fe f92d 	bl	800099a <_write>
 8002740:	1c43      	adds	r3, r0, #1
 8002742:	d102      	bne.n	800274a <_write_r+0x1e>
 8002744:	682b      	ldr	r3, [r5, #0]
 8002746:	b103      	cbz	r3, 800274a <_write_r+0x1e>
 8002748:	6023      	str	r3, [r4, #0]
 800274a:	bd38      	pop	{r3, r4, r5, pc}
 800274c:	20000224 	.word	0x20000224

08002750 <__errno>:
 8002750:	4b01      	ldr	r3, [pc, #4]	@ (8002758 <__errno+0x8>)
 8002752:	6818      	ldr	r0, [r3, #0]
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	20000028 	.word	0x20000028

0800275c <__libc_init_array>:
 800275c:	b570      	push	{r4, r5, r6, lr}
 800275e:	4d0d      	ldr	r5, [pc, #52]	@ (8002794 <__libc_init_array+0x38>)
 8002760:	4c0d      	ldr	r4, [pc, #52]	@ (8002798 <__libc_init_array+0x3c>)
 8002762:	1b64      	subs	r4, r4, r5
 8002764:	10a4      	asrs	r4, r4, #2
 8002766:	2600      	movs	r6, #0
 8002768:	42a6      	cmp	r6, r4
 800276a:	d109      	bne.n	8002780 <__libc_init_array+0x24>
 800276c:	4d0b      	ldr	r5, [pc, #44]	@ (800279c <__libc_init_array+0x40>)
 800276e:	4c0c      	ldr	r4, [pc, #48]	@ (80027a0 <__libc_init_array+0x44>)
 8002770:	f000 fdb6 	bl	80032e0 <_init>
 8002774:	1b64      	subs	r4, r4, r5
 8002776:	10a4      	asrs	r4, r4, #2
 8002778:	2600      	movs	r6, #0
 800277a:	42a6      	cmp	r6, r4
 800277c:	d105      	bne.n	800278a <__libc_init_array+0x2e>
 800277e:	bd70      	pop	{r4, r5, r6, pc}
 8002780:	f855 3b04 	ldr.w	r3, [r5], #4
 8002784:	4798      	blx	r3
 8002786:	3601      	adds	r6, #1
 8002788:	e7ee      	b.n	8002768 <__libc_init_array+0xc>
 800278a:	f855 3b04 	ldr.w	r3, [r5], #4
 800278e:	4798      	blx	r3
 8002790:	3601      	adds	r6, #1
 8002792:	e7f2      	b.n	800277a <__libc_init_array+0x1e>
 8002794:	08003354 	.word	0x08003354
 8002798:	08003354 	.word	0x08003354
 800279c:	08003354 	.word	0x08003354
 80027a0:	08003358 	.word	0x08003358

080027a4 <__retarget_lock_init_recursive>:
 80027a4:	4770      	bx	lr

080027a6 <__retarget_lock_acquire_recursive>:
 80027a6:	4770      	bx	lr

080027a8 <__retarget_lock_release_recursive>:
 80027a8:	4770      	bx	lr
	...

080027ac <_free_r>:
 80027ac:	b538      	push	{r3, r4, r5, lr}
 80027ae:	4605      	mov	r5, r0
 80027b0:	2900      	cmp	r1, #0
 80027b2:	d041      	beq.n	8002838 <_free_r+0x8c>
 80027b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027b8:	1f0c      	subs	r4, r1, #4
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	bfb8      	it	lt
 80027be:	18e4      	addlt	r4, r4, r3
 80027c0:	f000 f8e0 	bl	8002984 <__malloc_lock>
 80027c4:	4a1d      	ldr	r2, [pc, #116]	@ (800283c <_free_r+0x90>)
 80027c6:	6813      	ldr	r3, [r2, #0]
 80027c8:	b933      	cbnz	r3, 80027d8 <_free_r+0x2c>
 80027ca:	6063      	str	r3, [r4, #4]
 80027cc:	6014      	str	r4, [r2, #0]
 80027ce:	4628      	mov	r0, r5
 80027d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027d4:	f000 b8dc 	b.w	8002990 <__malloc_unlock>
 80027d8:	42a3      	cmp	r3, r4
 80027da:	d908      	bls.n	80027ee <_free_r+0x42>
 80027dc:	6820      	ldr	r0, [r4, #0]
 80027de:	1821      	adds	r1, r4, r0
 80027e0:	428b      	cmp	r3, r1
 80027e2:	bf01      	itttt	eq
 80027e4:	6819      	ldreq	r1, [r3, #0]
 80027e6:	685b      	ldreq	r3, [r3, #4]
 80027e8:	1809      	addeq	r1, r1, r0
 80027ea:	6021      	streq	r1, [r4, #0]
 80027ec:	e7ed      	b.n	80027ca <_free_r+0x1e>
 80027ee:	461a      	mov	r2, r3
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	b10b      	cbz	r3, 80027f8 <_free_r+0x4c>
 80027f4:	42a3      	cmp	r3, r4
 80027f6:	d9fa      	bls.n	80027ee <_free_r+0x42>
 80027f8:	6811      	ldr	r1, [r2, #0]
 80027fa:	1850      	adds	r0, r2, r1
 80027fc:	42a0      	cmp	r0, r4
 80027fe:	d10b      	bne.n	8002818 <_free_r+0x6c>
 8002800:	6820      	ldr	r0, [r4, #0]
 8002802:	4401      	add	r1, r0
 8002804:	1850      	adds	r0, r2, r1
 8002806:	4283      	cmp	r3, r0
 8002808:	6011      	str	r1, [r2, #0]
 800280a:	d1e0      	bne.n	80027ce <_free_r+0x22>
 800280c:	6818      	ldr	r0, [r3, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	6053      	str	r3, [r2, #4]
 8002812:	4408      	add	r0, r1
 8002814:	6010      	str	r0, [r2, #0]
 8002816:	e7da      	b.n	80027ce <_free_r+0x22>
 8002818:	d902      	bls.n	8002820 <_free_r+0x74>
 800281a:	230c      	movs	r3, #12
 800281c:	602b      	str	r3, [r5, #0]
 800281e:	e7d6      	b.n	80027ce <_free_r+0x22>
 8002820:	6820      	ldr	r0, [r4, #0]
 8002822:	1821      	adds	r1, r4, r0
 8002824:	428b      	cmp	r3, r1
 8002826:	bf04      	itt	eq
 8002828:	6819      	ldreq	r1, [r3, #0]
 800282a:	685b      	ldreq	r3, [r3, #4]
 800282c:	6063      	str	r3, [r4, #4]
 800282e:	bf04      	itt	eq
 8002830:	1809      	addeq	r1, r1, r0
 8002832:	6021      	streq	r1, [r4, #0]
 8002834:	6054      	str	r4, [r2, #4]
 8002836:	e7ca      	b.n	80027ce <_free_r+0x22>
 8002838:	bd38      	pop	{r3, r4, r5, pc}
 800283a:	bf00      	nop
 800283c:	20000230 	.word	0x20000230

08002840 <sbrk_aligned>:
 8002840:	b570      	push	{r4, r5, r6, lr}
 8002842:	4e0f      	ldr	r6, [pc, #60]	@ (8002880 <sbrk_aligned+0x40>)
 8002844:	460c      	mov	r4, r1
 8002846:	6831      	ldr	r1, [r6, #0]
 8002848:	4605      	mov	r5, r0
 800284a:	b911      	cbnz	r1, 8002852 <sbrk_aligned+0x12>
 800284c:	f000 fcb4 	bl	80031b8 <_sbrk_r>
 8002850:	6030      	str	r0, [r6, #0]
 8002852:	4621      	mov	r1, r4
 8002854:	4628      	mov	r0, r5
 8002856:	f000 fcaf 	bl	80031b8 <_sbrk_r>
 800285a:	1c43      	adds	r3, r0, #1
 800285c:	d103      	bne.n	8002866 <sbrk_aligned+0x26>
 800285e:	f04f 34ff 	mov.w	r4, #4294967295
 8002862:	4620      	mov	r0, r4
 8002864:	bd70      	pop	{r4, r5, r6, pc}
 8002866:	1cc4      	adds	r4, r0, #3
 8002868:	f024 0403 	bic.w	r4, r4, #3
 800286c:	42a0      	cmp	r0, r4
 800286e:	d0f8      	beq.n	8002862 <sbrk_aligned+0x22>
 8002870:	1a21      	subs	r1, r4, r0
 8002872:	4628      	mov	r0, r5
 8002874:	f000 fca0 	bl	80031b8 <_sbrk_r>
 8002878:	3001      	adds	r0, #1
 800287a:	d1f2      	bne.n	8002862 <sbrk_aligned+0x22>
 800287c:	e7ef      	b.n	800285e <sbrk_aligned+0x1e>
 800287e:	bf00      	nop
 8002880:	2000022c 	.word	0x2000022c

08002884 <_malloc_r>:
 8002884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002888:	1ccd      	adds	r5, r1, #3
 800288a:	f025 0503 	bic.w	r5, r5, #3
 800288e:	3508      	adds	r5, #8
 8002890:	2d0c      	cmp	r5, #12
 8002892:	bf38      	it	cc
 8002894:	250c      	movcc	r5, #12
 8002896:	2d00      	cmp	r5, #0
 8002898:	4606      	mov	r6, r0
 800289a:	db01      	blt.n	80028a0 <_malloc_r+0x1c>
 800289c:	42a9      	cmp	r1, r5
 800289e:	d904      	bls.n	80028aa <_malloc_r+0x26>
 80028a0:	230c      	movs	r3, #12
 80028a2:	6033      	str	r3, [r6, #0]
 80028a4:	2000      	movs	r0, #0
 80028a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002980 <_malloc_r+0xfc>
 80028ae:	f000 f869 	bl	8002984 <__malloc_lock>
 80028b2:	f8d8 3000 	ldr.w	r3, [r8]
 80028b6:	461c      	mov	r4, r3
 80028b8:	bb44      	cbnz	r4, 800290c <_malloc_r+0x88>
 80028ba:	4629      	mov	r1, r5
 80028bc:	4630      	mov	r0, r6
 80028be:	f7ff ffbf 	bl	8002840 <sbrk_aligned>
 80028c2:	1c43      	adds	r3, r0, #1
 80028c4:	4604      	mov	r4, r0
 80028c6:	d158      	bne.n	800297a <_malloc_r+0xf6>
 80028c8:	f8d8 4000 	ldr.w	r4, [r8]
 80028cc:	4627      	mov	r7, r4
 80028ce:	2f00      	cmp	r7, #0
 80028d0:	d143      	bne.n	800295a <_malloc_r+0xd6>
 80028d2:	2c00      	cmp	r4, #0
 80028d4:	d04b      	beq.n	800296e <_malloc_r+0xea>
 80028d6:	6823      	ldr	r3, [r4, #0]
 80028d8:	4639      	mov	r1, r7
 80028da:	4630      	mov	r0, r6
 80028dc:	eb04 0903 	add.w	r9, r4, r3
 80028e0:	f000 fc6a 	bl	80031b8 <_sbrk_r>
 80028e4:	4581      	cmp	r9, r0
 80028e6:	d142      	bne.n	800296e <_malloc_r+0xea>
 80028e8:	6821      	ldr	r1, [r4, #0]
 80028ea:	1a6d      	subs	r5, r5, r1
 80028ec:	4629      	mov	r1, r5
 80028ee:	4630      	mov	r0, r6
 80028f0:	f7ff ffa6 	bl	8002840 <sbrk_aligned>
 80028f4:	3001      	adds	r0, #1
 80028f6:	d03a      	beq.n	800296e <_malloc_r+0xea>
 80028f8:	6823      	ldr	r3, [r4, #0]
 80028fa:	442b      	add	r3, r5
 80028fc:	6023      	str	r3, [r4, #0]
 80028fe:	f8d8 3000 	ldr.w	r3, [r8]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	bb62      	cbnz	r2, 8002960 <_malloc_r+0xdc>
 8002906:	f8c8 7000 	str.w	r7, [r8]
 800290a:	e00f      	b.n	800292c <_malloc_r+0xa8>
 800290c:	6822      	ldr	r2, [r4, #0]
 800290e:	1b52      	subs	r2, r2, r5
 8002910:	d420      	bmi.n	8002954 <_malloc_r+0xd0>
 8002912:	2a0b      	cmp	r2, #11
 8002914:	d917      	bls.n	8002946 <_malloc_r+0xc2>
 8002916:	1961      	adds	r1, r4, r5
 8002918:	42a3      	cmp	r3, r4
 800291a:	6025      	str	r5, [r4, #0]
 800291c:	bf18      	it	ne
 800291e:	6059      	strne	r1, [r3, #4]
 8002920:	6863      	ldr	r3, [r4, #4]
 8002922:	bf08      	it	eq
 8002924:	f8c8 1000 	streq.w	r1, [r8]
 8002928:	5162      	str	r2, [r4, r5]
 800292a:	604b      	str	r3, [r1, #4]
 800292c:	4630      	mov	r0, r6
 800292e:	f000 f82f 	bl	8002990 <__malloc_unlock>
 8002932:	f104 000b 	add.w	r0, r4, #11
 8002936:	1d23      	adds	r3, r4, #4
 8002938:	f020 0007 	bic.w	r0, r0, #7
 800293c:	1ac2      	subs	r2, r0, r3
 800293e:	bf1c      	itt	ne
 8002940:	1a1b      	subne	r3, r3, r0
 8002942:	50a3      	strne	r3, [r4, r2]
 8002944:	e7af      	b.n	80028a6 <_malloc_r+0x22>
 8002946:	6862      	ldr	r2, [r4, #4]
 8002948:	42a3      	cmp	r3, r4
 800294a:	bf0c      	ite	eq
 800294c:	f8c8 2000 	streq.w	r2, [r8]
 8002950:	605a      	strne	r2, [r3, #4]
 8002952:	e7eb      	b.n	800292c <_malloc_r+0xa8>
 8002954:	4623      	mov	r3, r4
 8002956:	6864      	ldr	r4, [r4, #4]
 8002958:	e7ae      	b.n	80028b8 <_malloc_r+0x34>
 800295a:	463c      	mov	r4, r7
 800295c:	687f      	ldr	r7, [r7, #4]
 800295e:	e7b6      	b.n	80028ce <_malloc_r+0x4a>
 8002960:	461a      	mov	r2, r3
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	42a3      	cmp	r3, r4
 8002966:	d1fb      	bne.n	8002960 <_malloc_r+0xdc>
 8002968:	2300      	movs	r3, #0
 800296a:	6053      	str	r3, [r2, #4]
 800296c:	e7de      	b.n	800292c <_malloc_r+0xa8>
 800296e:	230c      	movs	r3, #12
 8002970:	6033      	str	r3, [r6, #0]
 8002972:	4630      	mov	r0, r6
 8002974:	f000 f80c 	bl	8002990 <__malloc_unlock>
 8002978:	e794      	b.n	80028a4 <_malloc_r+0x20>
 800297a:	6005      	str	r5, [r0, #0]
 800297c:	e7d6      	b.n	800292c <_malloc_r+0xa8>
 800297e:	bf00      	nop
 8002980:	20000230 	.word	0x20000230

08002984 <__malloc_lock>:
 8002984:	4801      	ldr	r0, [pc, #4]	@ (800298c <__malloc_lock+0x8>)
 8002986:	f7ff bf0e 	b.w	80027a6 <__retarget_lock_acquire_recursive>
 800298a:	bf00      	nop
 800298c:	20000228 	.word	0x20000228

08002990 <__malloc_unlock>:
 8002990:	4801      	ldr	r0, [pc, #4]	@ (8002998 <__malloc_unlock+0x8>)
 8002992:	f7ff bf09 	b.w	80027a8 <__retarget_lock_release_recursive>
 8002996:	bf00      	nop
 8002998:	20000228 	.word	0x20000228

0800299c <__sfputc_r>:
 800299c:	6893      	ldr	r3, [r2, #8]
 800299e:	3b01      	subs	r3, #1
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	b410      	push	{r4}
 80029a4:	6093      	str	r3, [r2, #8]
 80029a6:	da08      	bge.n	80029ba <__sfputc_r+0x1e>
 80029a8:	6994      	ldr	r4, [r2, #24]
 80029aa:	42a3      	cmp	r3, r4
 80029ac:	db01      	blt.n	80029b2 <__sfputc_r+0x16>
 80029ae:	290a      	cmp	r1, #10
 80029b0:	d103      	bne.n	80029ba <__sfputc_r+0x1e>
 80029b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80029b6:	f000 bb6b 	b.w	8003090 <__swbuf_r>
 80029ba:	6813      	ldr	r3, [r2, #0]
 80029bc:	1c58      	adds	r0, r3, #1
 80029be:	6010      	str	r0, [r2, #0]
 80029c0:	7019      	strb	r1, [r3, #0]
 80029c2:	4608      	mov	r0, r1
 80029c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <__sfputs_r>:
 80029ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029cc:	4606      	mov	r6, r0
 80029ce:	460f      	mov	r7, r1
 80029d0:	4614      	mov	r4, r2
 80029d2:	18d5      	adds	r5, r2, r3
 80029d4:	42ac      	cmp	r4, r5
 80029d6:	d101      	bne.n	80029dc <__sfputs_r+0x12>
 80029d8:	2000      	movs	r0, #0
 80029da:	e007      	b.n	80029ec <__sfputs_r+0x22>
 80029dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029e0:	463a      	mov	r2, r7
 80029e2:	4630      	mov	r0, r6
 80029e4:	f7ff ffda 	bl	800299c <__sfputc_r>
 80029e8:	1c43      	adds	r3, r0, #1
 80029ea:	d1f3      	bne.n	80029d4 <__sfputs_r+0xa>
 80029ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080029f0 <_vfiprintf_r>:
 80029f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029f4:	460d      	mov	r5, r1
 80029f6:	b09d      	sub	sp, #116	@ 0x74
 80029f8:	4614      	mov	r4, r2
 80029fa:	4698      	mov	r8, r3
 80029fc:	4606      	mov	r6, r0
 80029fe:	b118      	cbz	r0, 8002a08 <_vfiprintf_r+0x18>
 8002a00:	6a03      	ldr	r3, [r0, #32]
 8002a02:	b90b      	cbnz	r3, 8002a08 <_vfiprintf_r+0x18>
 8002a04:	f7ff fdca 	bl	800259c <__sinit>
 8002a08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002a0a:	07d9      	lsls	r1, r3, #31
 8002a0c:	d405      	bmi.n	8002a1a <_vfiprintf_r+0x2a>
 8002a0e:	89ab      	ldrh	r3, [r5, #12]
 8002a10:	059a      	lsls	r2, r3, #22
 8002a12:	d402      	bmi.n	8002a1a <_vfiprintf_r+0x2a>
 8002a14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002a16:	f7ff fec6 	bl	80027a6 <__retarget_lock_acquire_recursive>
 8002a1a:	89ab      	ldrh	r3, [r5, #12]
 8002a1c:	071b      	lsls	r3, r3, #28
 8002a1e:	d501      	bpl.n	8002a24 <_vfiprintf_r+0x34>
 8002a20:	692b      	ldr	r3, [r5, #16]
 8002a22:	b99b      	cbnz	r3, 8002a4c <_vfiprintf_r+0x5c>
 8002a24:	4629      	mov	r1, r5
 8002a26:	4630      	mov	r0, r6
 8002a28:	f000 fb70 	bl	800310c <__swsetup_r>
 8002a2c:	b170      	cbz	r0, 8002a4c <_vfiprintf_r+0x5c>
 8002a2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002a30:	07dc      	lsls	r4, r3, #31
 8002a32:	d504      	bpl.n	8002a3e <_vfiprintf_r+0x4e>
 8002a34:	f04f 30ff 	mov.w	r0, #4294967295
 8002a38:	b01d      	add	sp, #116	@ 0x74
 8002a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a3e:	89ab      	ldrh	r3, [r5, #12]
 8002a40:	0598      	lsls	r0, r3, #22
 8002a42:	d4f7      	bmi.n	8002a34 <_vfiprintf_r+0x44>
 8002a44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002a46:	f7ff feaf 	bl	80027a8 <__retarget_lock_release_recursive>
 8002a4a:	e7f3      	b.n	8002a34 <_vfiprintf_r+0x44>
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a50:	2320      	movs	r3, #32
 8002a52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002a56:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a5a:	2330      	movs	r3, #48	@ 0x30
 8002a5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002c0c <_vfiprintf_r+0x21c>
 8002a60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002a64:	f04f 0901 	mov.w	r9, #1
 8002a68:	4623      	mov	r3, r4
 8002a6a:	469a      	mov	sl, r3
 8002a6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a70:	b10a      	cbz	r2, 8002a76 <_vfiprintf_r+0x86>
 8002a72:	2a25      	cmp	r2, #37	@ 0x25
 8002a74:	d1f9      	bne.n	8002a6a <_vfiprintf_r+0x7a>
 8002a76:	ebba 0b04 	subs.w	fp, sl, r4
 8002a7a:	d00b      	beq.n	8002a94 <_vfiprintf_r+0xa4>
 8002a7c:	465b      	mov	r3, fp
 8002a7e:	4622      	mov	r2, r4
 8002a80:	4629      	mov	r1, r5
 8002a82:	4630      	mov	r0, r6
 8002a84:	f7ff ffa1 	bl	80029ca <__sfputs_r>
 8002a88:	3001      	adds	r0, #1
 8002a8a:	f000 80a7 	beq.w	8002bdc <_vfiprintf_r+0x1ec>
 8002a8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002a90:	445a      	add	r2, fp
 8002a92:	9209      	str	r2, [sp, #36]	@ 0x24
 8002a94:	f89a 3000 	ldrb.w	r3, [sl]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 809f 	beq.w	8002bdc <_vfiprintf_r+0x1ec>
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002aa8:	f10a 0a01 	add.w	sl, sl, #1
 8002aac:	9304      	str	r3, [sp, #16]
 8002aae:	9307      	str	r3, [sp, #28]
 8002ab0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002ab4:	931a      	str	r3, [sp, #104]	@ 0x68
 8002ab6:	4654      	mov	r4, sl
 8002ab8:	2205      	movs	r2, #5
 8002aba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002abe:	4853      	ldr	r0, [pc, #332]	@ (8002c0c <_vfiprintf_r+0x21c>)
 8002ac0:	f7fd fb8e 	bl	80001e0 <memchr>
 8002ac4:	9a04      	ldr	r2, [sp, #16]
 8002ac6:	b9d8      	cbnz	r0, 8002b00 <_vfiprintf_r+0x110>
 8002ac8:	06d1      	lsls	r1, r2, #27
 8002aca:	bf44      	itt	mi
 8002acc:	2320      	movmi	r3, #32
 8002ace:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002ad2:	0713      	lsls	r3, r2, #28
 8002ad4:	bf44      	itt	mi
 8002ad6:	232b      	movmi	r3, #43	@ 0x2b
 8002ad8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002adc:	f89a 3000 	ldrb.w	r3, [sl]
 8002ae0:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ae2:	d015      	beq.n	8002b10 <_vfiprintf_r+0x120>
 8002ae4:	9a07      	ldr	r2, [sp, #28]
 8002ae6:	4654      	mov	r4, sl
 8002ae8:	2000      	movs	r0, #0
 8002aea:	f04f 0c0a 	mov.w	ip, #10
 8002aee:	4621      	mov	r1, r4
 8002af0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002af4:	3b30      	subs	r3, #48	@ 0x30
 8002af6:	2b09      	cmp	r3, #9
 8002af8:	d94b      	bls.n	8002b92 <_vfiprintf_r+0x1a2>
 8002afa:	b1b0      	cbz	r0, 8002b2a <_vfiprintf_r+0x13a>
 8002afc:	9207      	str	r2, [sp, #28]
 8002afe:	e014      	b.n	8002b2a <_vfiprintf_r+0x13a>
 8002b00:	eba0 0308 	sub.w	r3, r0, r8
 8002b04:	fa09 f303 	lsl.w	r3, r9, r3
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	9304      	str	r3, [sp, #16]
 8002b0c:	46a2      	mov	sl, r4
 8002b0e:	e7d2      	b.n	8002ab6 <_vfiprintf_r+0xc6>
 8002b10:	9b03      	ldr	r3, [sp, #12]
 8002b12:	1d19      	adds	r1, r3, #4
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	9103      	str	r1, [sp, #12]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	bfbb      	ittet	lt
 8002b1c:	425b      	neglt	r3, r3
 8002b1e:	f042 0202 	orrlt.w	r2, r2, #2
 8002b22:	9307      	strge	r3, [sp, #28]
 8002b24:	9307      	strlt	r3, [sp, #28]
 8002b26:	bfb8      	it	lt
 8002b28:	9204      	strlt	r2, [sp, #16]
 8002b2a:	7823      	ldrb	r3, [r4, #0]
 8002b2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8002b2e:	d10a      	bne.n	8002b46 <_vfiprintf_r+0x156>
 8002b30:	7863      	ldrb	r3, [r4, #1]
 8002b32:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b34:	d132      	bne.n	8002b9c <_vfiprintf_r+0x1ac>
 8002b36:	9b03      	ldr	r3, [sp, #12]
 8002b38:	1d1a      	adds	r2, r3, #4
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	9203      	str	r2, [sp, #12]
 8002b3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002b42:	3402      	adds	r4, #2
 8002b44:	9305      	str	r3, [sp, #20]
 8002b46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002c1c <_vfiprintf_r+0x22c>
 8002b4a:	7821      	ldrb	r1, [r4, #0]
 8002b4c:	2203      	movs	r2, #3
 8002b4e:	4650      	mov	r0, sl
 8002b50:	f7fd fb46 	bl	80001e0 <memchr>
 8002b54:	b138      	cbz	r0, 8002b66 <_vfiprintf_r+0x176>
 8002b56:	9b04      	ldr	r3, [sp, #16]
 8002b58:	eba0 000a 	sub.w	r0, r0, sl
 8002b5c:	2240      	movs	r2, #64	@ 0x40
 8002b5e:	4082      	lsls	r2, r0
 8002b60:	4313      	orrs	r3, r2
 8002b62:	3401      	adds	r4, #1
 8002b64:	9304      	str	r3, [sp, #16]
 8002b66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b6a:	4829      	ldr	r0, [pc, #164]	@ (8002c10 <_vfiprintf_r+0x220>)
 8002b6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002b70:	2206      	movs	r2, #6
 8002b72:	f7fd fb35 	bl	80001e0 <memchr>
 8002b76:	2800      	cmp	r0, #0
 8002b78:	d03f      	beq.n	8002bfa <_vfiprintf_r+0x20a>
 8002b7a:	4b26      	ldr	r3, [pc, #152]	@ (8002c14 <_vfiprintf_r+0x224>)
 8002b7c:	bb1b      	cbnz	r3, 8002bc6 <_vfiprintf_r+0x1d6>
 8002b7e:	9b03      	ldr	r3, [sp, #12]
 8002b80:	3307      	adds	r3, #7
 8002b82:	f023 0307 	bic.w	r3, r3, #7
 8002b86:	3308      	adds	r3, #8
 8002b88:	9303      	str	r3, [sp, #12]
 8002b8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002b8c:	443b      	add	r3, r7
 8002b8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b90:	e76a      	b.n	8002a68 <_vfiprintf_r+0x78>
 8002b92:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b96:	460c      	mov	r4, r1
 8002b98:	2001      	movs	r0, #1
 8002b9a:	e7a8      	b.n	8002aee <_vfiprintf_r+0xfe>
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	3401      	adds	r4, #1
 8002ba0:	9305      	str	r3, [sp, #20]
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	f04f 0c0a 	mov.w	ip, #10
 8002ba8:	4620      	mov	r0, r4
 8002baa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002bae:	3a30      	subs	r2, #48	@ 0x30
 8002bb0:	2a09      	cmp	r2, #9
 8002bb2:	d903      	bls.n	8002bbc <_vfiprintf_r+0x1cc>
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0c6      	beq.n	8002b46 <_vfiprintf_r+0x156>
 8002bb8:	9105      	str	r1, [sp, #20]
 8002bba:	e7c4      	b.n	8002b46 <_vfiprintf_r+0x156>
 8002bbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8002bc0:	4604      	mov	r4, r0
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e7f0      	b.n	8002ba8 <_vfiprintf_r+0x1b8>
 8002bc6:	ab03      	add	r3, sp, #12
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	462a      	mov	r2, r5
 8002bcc:	4b12      	ldr	r3, [pc, #72]	@ (8002c18 <_vfiprintf_r+0x228>)
 8002bce:	a904      	add	r1, sp, #16
 8002bd0:	4630      	mov	r0, r6
 8002bd2:	f3af 8000 	nop.w
 8002bd6:	4607      	mov	r7, r0
 8002bd8:	1c78      	adds	r0, r7, #1
 8002bda:	d1d6      	bne.n	8002b8a <_vfiprintf_r+0x19a>
 8002bdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002bde:	07d9      	lsls	r1, r3, #31
 8002be0:	d405      	bmi.n	8002bee <_vfiprintf_r+0x1fe>
 8002be2:	89ab      	ldrh	r3, [r5, #12]
 8002be4:	059a      	lsls	r2, r3, #22
 8002be6:	d402      	bmi.n	8002bee <_vfiprintf_r+0x1fe>
 8002be8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002bea:	f7ff fddd 	bl	80027a8 <__retarget_lock_release_recursive>
 8002bee:	89ab      	ldrh	r3, [r5, #12]
 8002bf0:	065b      	lsls	r3, r3, #25
 8002bf2:	f53f af1f 	bmi.w	8002a34 <_vfiprintf_r+0x44>
 8002bf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002bf8:	e71e      	b.n	8002a38 <_vfiprintf_r+0x48>
 8002bfa:	ab03      	add	r3, sp, #12
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	462a      	mov	r2, r5
 8002c00:	4b05      	ldr	r3, [pc, #20]	@ (8002c18 <_vfiprintf_r+0x228>)
 8002c02:	a904      	add	r1, sp, #16
 8002c04:	4630      	mov	r0, r6
 8002c06:	f000 f879 	bl	8002cfc <_printf_i>
 8002c0a:	e7e4      	b.n	8002bd6 <_vfiprintf_r+0x1e6>
 8002c0c:	08003318 	.word	0x08003318
 8002c10:	08003322 	.word	0x08003322
 8002c14:	00000000 	.word	0x00000000
 8002c18:	080029cb 	.word	0x080029cb
 8002c1c:	0800331e 	.word	0x0800331e

08002c20 <_printf_common>:
 8002c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c24:	4616      	mov	r6, r2
 8002c26:	4698      	mov	r8, r3
 8002c28:	688a      	ldr	r2, [r1, #8]
 8002c2a:	690b      	ldr	r3, [r1, #16]
 8002c2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002c30:	4293      	cmp	r3, r2
 8002c32:	bfb8      	it	lt
 8002c34:	4613      	movlt	r3, r2
 8002c36:	6033      	str	r3, [r6, #0]
 8002c38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002c3c:	4607      	mov	r7, r0
 8002c3e:	460c      	mov	r4, r1
 8002c40:	b10a      	cbz	r2, 8002c46 <_printf_common+0x26>
 8002c42:	3301      	adds	r3, #1
 8002c44:	6033      	str	r3, [r6, #0]
 8002c46:	6823      	ldr	r3, [r4, #0]
 8002c48:	0699      	lsls	r1, r3, #26
 8002c4a:	bf42      	ittt	mi
 8002c4c:	6833      	ldrmi	r3, [r6, #0]
 8002c4e:	3302      	addmi	r3, #2
 8002c50:	6033      	strmi	r3, [r6, #0]
 8002c52:	6825      	ldr	r5, [r4, #0]
 8002c54:	f015 0506 	ands.w	r5, r5, #6
 8002c58:	d106      	bne.n	8002c68 <_printf_common+0x48>
 8002c5a:	f104 0a19 	add.w	sl, r4, #25
 8002c5e:	68e3      	ldr	r3, [r4, #12]
 8002c60:	6832      	ldr	r2, [r6, #0]
 8002c62:	1a9b      	subs	r3, r3, r2
 8002c64:	42ab      	cmp	r3, r5
 8002c66:	dc26      	bgt.n	8002cb6 <_printf_common+0x96>
 8002c68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002c6c:	6822      	ldr	r2, [r4, #0]
 8002c6e:	3b00      	subs	r3, #0
 8002c70:	bf18      	it	ne
 8002c72:	2301      	movne	r3, #1
 8002c74:	0692      	lsls	r2, r2, #26
 8002c76:	d42b      	bmi.n	8002cd0 <_printf_common+0xb0>
 8002c78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002c7c:	4641      	mov	r1, r8
 8002c7e:	4638      	mov	r0, r7
 8002c80:	47c8      	blx	r9
 8002c82:	3001      	adds	r0, #1
 8002c84:	d01e      	beq.n	8002cc4 <_printf_common+0xa4>
 8002c86:	6823      	ldr	r3, [r4, #0]
 8002c88:	6922      	ldr	r2, [r4, #16]
 8002c8a:	f003 0306 	and.w	r3, r3, #6
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	bf02      	ittt	eq
 8002c92:	68e5      	ldreq	r5, [r4, #12]
 8002c94:	6833      	ldreq	r3, [r6, #0]
 8002c96:	1aed      	subeq	r5, r5, r3
 8002c98:	68a3      	ldr	r3, [r4, #8]
 8002c9a:	bf0c      	ite	eq
 8002c9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ca0:	2500      	movne	r5, #0
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	bfc4      	itt	gt
 8002ca6:	1a9b      	subgt	r3, r3, r2
 8002ca8:	18ed      	addgt	r5, r5, r3
 8002caa:	2600      	movs	r6, #0
 8002cac:	341a      	adds	r4, #26
 8002cae:	42b5      	cmp	r5, r6
 8002cb0:	d11a      	bne.n	8002ce8 <_printf_common+0xc8>
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	e008      	b.n	8002cc8 <_printf_common+0xa8>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	4652      	mov	r2, sl
 8002cba:	4641      	mov	r1, r8
 8002cbc:	4638      	mov	r0, r7
 8002cbe:	47c8      	blx	r9
 8002cc0:	3001      	adds	r0, #1
 8002cc2:	d103      	bne.n	8002ccc <_printf_common+0xac>
 8002cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ccc:	3501      	adds	r5, #1
 8002cce:	e7c6      	b.n	8002c5e <_printf_common+0x3e>
 8002cd0:	18e1      	adds	r1, r4, r3
 8002cd2:	1c5a      	adds	r2, r3, #1
 8002cd4:	2030      	movs	r0, #48	@ 0x30
 8002cd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002cda:	4422      	add	r2, r4
 8002cdc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002ce0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002ce4:	3302      	adds	r3, #2
 8002ce6:	e7c7      	b.n	8002c78 <_printf_common+0x58>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	4622      	mov	r2, r4
 8002cec:	4641      	mov	r1, r8
 8002cee:	4638      	mov	r0, r7
 8002cf0:	47c8      	blx	r9
 8002cf2:	3001      	adds	r0, #1
 8002cf4:	d0e6      	beq.n	8002cc4 <_printf_common+0xa4>
 8002cf6:	3601      	adds	r6, #1
 8002cf8:	e7d9      	b.n	8002cae <_printf_common+0x8e>
	...

08002cfc <_printf_i>:
 8002cfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d00:	7e0f      	ldrb	r7, [r1, #24]
 8002d02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002d04:	2f78      	cmp	r7, #120	@ 0x78
 8002d06:	4691      	mov	r9, r2
 8002d08:	4680      	mov	r8, r0
 8002d0a:	460c      	mov	r4, r1
 8002d0c:	469a      	mov	sl, r3
 8002d0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002d12:	d807      	bhi.n	8002d24 <_printf_i+0x28>
 8002d14:	2f62      	cmp	r7, #98	@ 0x62
 8002d16:	d80a      	bhi.n	8002d2e <_printf_i+0x32>
 8002d18:	2f00      	cmp	r7, #0
 8002d1a:	f000 80d1 	beq.w	8002ec0 <_printf_i+0x1c4>
 8002d1e:	2f58      	cmp	r7, #88	@ 0x58
 8002d20:	f000 80b8 	beq.w	8002e94 <_printf_i+0x198>
 8002d24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002d28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002d2c:	e03a      	b.n	8002da4 <_printf_i+0xa8>
 8002d2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002d32:	2b15      	cmp	r3, #21
 8002d34:	d8f6      	bhi.n	8002d24 <_printf_i+0x28>
 8002d36:	a101      	add	r1, pc, #4	@ (adr r1, 8002d3c <_printf_i+0x40>)
 8002d38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d3c:	08002d95 	.word	0x08002d95
 8002d40:	08002da9 	.word	0x08002da9
 8002d44:	08002d25 	.word	0x08002d25
 8002d48:	08002d25 	.word	0x08002d25
 8002d4c:	08002d25 	.word	0x08002d25
 8002d50:	08002d25 	.word	0x08002d25
 8002d54:	08002da9 	.word	0x08002da9
 8002d58:	08002d25 	.word	0x08002d25
 8002d5c:	08002d25 	.word	0x08002d25
 8002d60:	08002d25 	.word	0x08002d25
 8002d64:	08002d25 	.word	0x08002d25
 8002d68:	08002ea7 	.word	0x08002ea7
 8002d6c:	08002dd3 	.word	0x08002dd3
 8002d70:	08002e61 	.word	0x08002e61
 8002d74:	08002d25 	.word	0x08002d25
 8002d78:	08002d25 	.word	0x08002d25
 8002d7c:	08002ec9 	.word	0x08002ec9
 8002d80:	08002d25 	.word	0x08002d25
 8002d84:	08002dd3 	.word	0x08002dd3
 8002d88:	08002d25 	.word	0x08002d25
 8002d8c:	08002d25 	.word	0x08002d25
 8002d90:	08002e69 	.word	0x08002e69
 8002d94:	6833      	ldr	r3, [r6, #0]
 8002d96:	1d1a      	adds	r2, r3, #4
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6032      	str	r2, [r6, #0]
 8002d9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002da0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002da4:	2301      	movs	r3, #1
 8002da6:	e09c      	b.n	8002ee2 <_printf_i+0x1e6>
 8002da8:	6833      	ldr	r3, [r6, #0]
 8002daa:	6820      	ldr	r0, [r4, #0]
 8002dac:	1d19      	adds	r1, r3, #4
 8002dae:	6031      	str	r1, [r6, #0]
 8002db0:	0606      	lsls	r6, r0, #24
 8002db2:	d501      	bpl.n	8002db8 <_printf_i+0xbc>
 8002db4:	681d      	ldr	r5, [r3, #0]
 8002db6:	e003      	b.n	8002dc0 <_printf_i+0xc4>
 8002db8:	0645      	lsls	r5, r0, #25
 8002dba:	d5fb      	bpl.n	8002db4 <_printf_i+0xb8>
 8002dbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002dc0:	2d00      	cmp	r5, #0
 8002dc2:	da03      	bge.n	8002dcc <_printf_i+0xd0>
 8002dc4:	232d      	movs	r3, #45	@ 0x2d
 8002dc6:	426d      	negs	r5, r5
 8002dc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002dcc:	4858      	ldr	r0, [pc, #352]	@ (8002f30 <_printf_i+0x234>)
 8002dce:	230a      	movs	r3, #10
 8002dd0:	e011      	b.n	8002df6 <_printf_i+0xfa>
 8002dd2:	6821      	ldr	r1, [r4, #0]
 8002dd4:	6833      	ldr	r3, [r6, #0]
 8002dd6:	0608      	lsls	r0, r1, #24
 8002dd8:	f853 5b04 	ldr.w	r5, [r3], #4
 8002ddc:	d402      	bmi.n	8002de4 <_printf_i+0xe8>
 8002dde:	0649      	lsls	r1, r1, #25
 8002de0:	bf48      	it	mi
 8002de2:	b2ad      	uxthmi	r5, r5
 8002de4:	2f6f      	cmp	r7, #111	@ 0x6f
 8002de6:	4852      	ldr	r0, [pc, #328]	@ (8002f30 <_printf_i+0x234>)
 8002de8:	6033      	str	r3, [r6, #0]
 8002dea:	bf14      	ite	ne
 8002dec:	230a      	movne	r3, #10
 8002dee:	2308      	moveq	r3, #8
 8002df0:	2100      	movs	r1, #0
 8002df2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002df6:	6866      	ldr	r6, [r4, #4]
 8002df8:	60a6      	str	r6, [r4, #8]
 8002dfa:	2e00      	cmp	r6, #0
 8002dfc:	db05      	blt.n	8002e0a <_printf_i+0x10e>
 8002dfe:	6821      	ldr	r1, [r4, #0]
 8002e00:	432e      	orrs	r6, r5
 8002e02:	f021 0104 	bic.w	r1, r1, #4
 8002e06:	6021      	str	r1, [r4, #0]
 8002e08:	d04b      	beq.n	8002ea2 <_printf_i+0x1a6>
 8002e0a:	4616      	mov	r6, r2
 8002e0c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002e10:	fb03 5711 	mls	r7, r3, r1, r5
 8002e14:	5dc7      	ldrb	r7, [r0, r7]
 8002e16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002e1a:	462f      	mov	r7, r5
 8002e1c:	42bb      	cmp	r3, r7
 8002e1e:	460d      	mov	r5, r1
 8002e20:	d9f4      	bls.n	8002e0c <_printf_i+0x110>
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	d10b      	bne.n	8002e3e <_printf_i+0x142>
 8002e26:	6823      	ldr	r3, [r4, #0]
 8002e28:	07df      	lsls	r7, r3, #31
 8002e2a:	d508      	bpl.n	8002e3e <_printf_i+0x142>
 8002e2c:	6923      	ldr	r3, [r4, #16]
 8002e2e:	6861      	ldr	r1, [r4, #4]
 8002e30:	4299      	cmp	r1, r3
 8002e32:	bfde      	ittt	le
 8002e34:	2330      	movle	r3, #48	@ 0x30
 8002e36:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002e3a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002e3e:	1b92      	subs	r2, r2, r6
 8002e40:	6122      	str	r2, [r4, #16]
 8002e42:	f8cd a000 	str.w	sl, [sp]
 8002e46:	464b      	mov	r3, r9
 8002e48:	aa03      	add	r2, sp, #12
 8002e4a:	4621      	mov	r1, r4
 8002e4c:	4640      	mov	r0, r8
 8002e4e:	f7ff fee7 	bl	8002c20 <_printf_common>
 8002e52:	3001      	adds	r0, #1
 8002e54:	d14a      	bne.n	8002eec <_printf_i+0x1f0>
 8002e56:	f04f 30ff 	mov.w	r0, #4294967295
 8002e5a:	b004      	add	sp, #16
 8002e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e60:	6823      	ldr	r3, [r4, #0]
 8002e62:	f043 0320 	orr.w	r3, r3, #32
 8002e66:	6023      	str	r3, [r4, #0]
 8002e68:	4832      	ldr	r0, [pc, #200]	@ (8002f34 <_printf_i+0x238>)
 8002e6a:	2778      	movs	r7, #120	@ 0x78
 8002e6c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002e70:	6823      	ldr	r3, [r4, #0]
 8002e72:	6831      	ldr	r1, [r6, #0]
 8002e74:	061f      	lsls	r7, r3, #24
 8002e76:	f851 5b04 	ldr.w	r5, [r1], #4
 8002e7a:	d402      	bmi.n	8002e82 <_printf_i+0x186>
 8002e7c:	065f      	lsls	r7, r3, #25
 8002e7e:	bf48      	it	mi
 8002e80:	b2ad      	uxthmi	r5, r5
 8002e82:	6031      	str	r1, [r6, #0]
 8002e84:	07d9      	lsls	r1, r3, #31
 8002e86:	bf44      	itt	mi
 8002e88:	f043 0320 	orrmi.w	r3, r3, #32
 8002e8c:	6023      	strmi	r3, [r4, #0]
 8002e8e:	b11d      	cbz	r5, 8002e98 <_printf_i+0x19c>
 8002e90:	2310      	movs	r3, #16
 8002e92:	e7ad      	b.n	8002df0 <_printf_i+0xf4>
 8002e94:	4826      	ldr	r0, [pc, #152]	@ (8002f30 <_printf_i+0x234>)
 8002e96:	e7e9      	b.n	8002e6c <_printf_i+0x170>
 8002e98:	6823      	ldr	r3, [r4, #0]
 8002e9a:	f023 0320 	bic.w	r3, r3, #32
 8002e9e:	6023      	str	r3, [r4, #0]
 8002ea0:	e7f6      	b.n	8002e90 <_printf_i+0x194>
 8002ea2:	4616      	mov	r6, r2
 8002ea4:	e7bd      	b.n	8002e22 <_printf_i+0x126>
 8002ea6:	6833      	ldr	r3, [r6, #0]
 8002ea8:	6825      	ldr	r5, [r4, #0]
 8002eaa:	6961      	ldr	r1, [r4, #20]
 8002eac:	1d18      	adds	r0, r3, #4
 8002eae:	6030      	str	r0, [r6, #0]
 8002eb0:	062e      	lsls	r6, r5, #24
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	d501      	bpl.n	8002eba <_printf_i+0x1be>
 8002eb6:	6019      	str	r1, [r3, #0]
 8002eb8:	e002      	b.n	8002ec0 <_printf_i+0x1c4>
 8002eba:	0668      	lsls	r0, r5, #25
 8002ebc:	d5fb      	bpl.n	8002eb6 <_printf_i+0x1ba>
 8002ebe:	8019      	strh	r1, [r3, #0]
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	6123      	str	r3, [r4, #16]
 8002ec4:	4616      	mov	r6, r2
 8002ec6:	e7bc      	b.n	8002e42 <_printf_i+0x146>
 8002ec8:	6833      	ldr	r3, [r6, #0]
 8002eca:	1d1a      	adds	r2, r3, #4
 8002ecc:	6032      	str	r2, [r6, #0]
 8002ece:	681e      	ldr	r6, [r3, #0]
 8002ed0:	6862      	ldr	r2, [r4, #4]
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	4630      	mov	r0, r6
 8002ed6:	f7fd f983 	bl	80001e0 <memchr>
 8002eda:	b108      	cbz	r0, 8002ee0 <_printf_i+0x1e4>
 8002edc:	1b80      	subs	r0, r0, r6
 8002ede:	6060      	str	r0, [r4, #4]
 8002ee0:	6863      	ldr	r3, [r4, #4]
 8002ee2:	6123      	str	r3, [r4, #16]
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002eea:	e7aa      	b.n	8002e42 <_printf_i+0x146>
 8002eec:	6923      	ldr	r3, [r4, #16]
 8002eee:	4632      	mov	r2, r6
 8002ef0:	4649      	mov	r1, r9
 8002ef2:	4640      	mov	r0, r8
 8002ef4:	47d0      	blx	sl
 8002ef6:	3001      	adds	r0, #1
 8002ef8:	d0ad      	beq.n	8002e56 <_printf_i+0x15a>
 8002efa:	6823      	ldr	r3, [r4, #0]
 8002efc:	079b      	lsls	r3, r3, #30
 8002efe:	d413      	bmi.n	8002f28 <_printf_i+0x22c>
 8002f00:	68e0      	ldr	r0, [r4, #12]
 8002f02:	9b03      	ldr	r3, [sp, #12]
 8002f04:	4298      	cmp	r0, r3
 8002f06:	bfb8      	it	lt
 8002f08:	4618      	movlt	r0, r3
 8002f0a:	e7a6      	b.n	8002e5a <_printf_i+0x15e>
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	4632      	mov	r2, r6
 8002f10:	4649      	mov	r1, r9
 8002f12:	4640      	mov	r0, r8
 8002f14:	47d0      	blx	sl
 8002f16:	3001      	adds	r0, #1
 8002f18:	d09d      	beq.n	8002e56 <_printf_i+0x15a>
 8002f1a:	3501      	adds	r5, #1
 8002f1c:	68e3      	ldr	r3, [r4, #12]
 8002f1e:	9903      	ldr	r1, [sp, #12]
 8002f20:	1a5b      	subs	r3, r3, r1
 8002f22:	42ab      	cmp	r3, r5
 8002f24:	dcf2      	bgt.n	8002f0c <_printf_i+0x210>
 8002f26:	e7eb      	b.n	8002f00 <_printf_i+0x204>
 8002f28:	2500      	movs	r5, #0
 8002f2a:	f104 0619 	add.w	r6, r4, #25
 8002f2e:	e7f5      	b.n	8002f1c <_printf_i+0x220>
 8002f30:	08003329 	.word	0x08003329
 8002f34:	0800333a 	.word	0x0800333a

08002f38 <__sflush_r>:
 8002f38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f40:	0716      	lsls	r6, r2, #28
 8002f42:	4605      	mov	r5, r0
 8002f44:	460c      	mov	r4, r1
 8002f46:	d454      	bmi.n	8002ff2 <__sflush_r+0xba>
 8002f48:	684b      	ldr	r3, [r1, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	dc02      	bgt.n	8002f54 <__sflush_r+0x1c>
 8002f4e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	dd48      	ble.n	8002fe6 <__sflush_r+0xae>
 8002f54:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002f56:	2e00      	cmp	r6, #0
 8002f58:	d045      	beq.n	8002fe6 <__sflush_r+0xae>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002f60:	682f      	ldr	r7, [r5, #0]
 8002f62:	6a21      	ldr	r1, [r4, #32]
 8002f64:	602b      	str	r3, [r5, #0]
 8002f66:	d030      	beq.n	8002fca <__sflush_r+0x92>
 8002f68:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002f6a:	89a3      	ldrh	r3, [r4, #12]
 8002f6c:	0759      	lsls	r1, r3, #29
 8002f6e:	d505      	bpl.n	8002f7c <__sflush_r+0x44>
 8002f70:	6863      	ldr	r3, [r4, #4]
 8002f72:	1ad2      	subs	r2, r2, r3
 8002f74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002f76:	b10b      	cbz	r3, 8002f7c <__sflush_r+0x44>
 8002f78:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002f7a:	1ad2      	subs	r2, r2, r3
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002f80:	6a21      	ldr	r1, [r4, #32]
 8002f82:	4628      	mov	r0, r5
 8002f84:	47b0      	blx	r6
 8002f86:	1c43      	adds	r3, r0, #1
 8002f88:	89a3      	ldrh	r3, [r4, #12]
 8002f8a:	d106      	bne.n	8002f9a <__sflush_r+0x62>
 8002f8c:	6829      	ldr	r1, [r5, #0]
 8002f8e:	291d      	cmp	r1, #29
 8002f90:	d82b      	bhi.n	8002fea <__sflush_r+0xb2>
 8002f92:	4a2a      	ldr	r2, [pc, #168]	@ (800303c <__sflush_r+0x104>)
 8002f94:	40ca      	lsrs	r2, r1
 8002f96:	07d6      	lsls	r6, r2, #31
 8002f98:	d527      	bpl.n	8002fea <__sflush_r+0xb2>
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	6062      	str	r2, [r4, #4]
 8002f9e:	04d9      	lsls	r1, r3, #19
 8002fa0:	6922      	ldr	r2, [r4, #16]
 8002fa2:	6022      	str	r2, [r4, #0]
 8002fa4:	d504      	bpl.n	8002fb0 <__sflush_r+0x78>
 8002fa6:	1c42      	adds	r2, r0, #1
 8002fa8:	d101      	bne.n	8002fae <__sflush_r+0x76>
 8002faa:	682b      	ldr	r3, [r5, #0]
 8002fac:	b903      	cbnz	r3, 8002fb0 <__sflush_r+0x78>
 8002fae:	6560      	str	r0, [r4, #84]	@ 0x54
 8002fb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002fb2:	602f      	str	r7, [r5, #0]
 8002fb4:	b1b9      	cbz	r1, 8002fe6 <__sflush_r+0xae>
 8002fb6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002fba:	4299      	cmp	r1, r3
 8002fbc:	d002      	beq.n	8002fc4 <__sflush_r+0x8c>
 8002fbe:	4628      	mov	r0, r5
 8002fc0:	f7ff fbf4 	bl	80027ac <_free_r>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	6363      	str	r3, [r4, #52]	@ 0x34
 8002fc8:	e00d      	b.n	8002fe6 <__sflush_r+0xae>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	4628      	mov	r0, r5
 8002fce:	47b0      	blx	r6
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	1c50      	adds	r0, r2, #1
 8002fd4:	d1c9      	bne.n	8002f6a <__sflush_r+0x32>
 8002fd6:	682b      	ldr	r3, [r5, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0c6      	beq.n	8002f6a <__sflush_r+0x32>
 8002fdc:	2b1d      	cmp	r3, #29
 8002fde:	d001      	beq.n	8002fe4 <__sflush_r+0xac>
 8002fe0:	2b16      	cmp	r3, #22
 8002fe2:	d11e      	bne.n	8003022 <__sflush_r+0xea>
 8002fe4:	602f      	str	r7, [r5, #0]
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	e022      	b.n	8003030 <__sflush_r+0xf8>
 8002fea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fee:	b21b      	sxth	r3, r3
 8002ff0:	e01b      	b.n	800302a <__sflush_r+0xf2>
 8002ff2:	690f      	ldr	r7, [r1, #16]
 8002ff4:	2f00      	cmp	r7, #0
 8002ff6:	d0f6      	beq.n	8002fe6 <__sflush_r+0xae>
 8002ff8:	0793      	lsls	r3, r2, #30
 8002ffa:	680e      	ldr	r6, [r1, #0]
 8002ffc:	bf08      	it	eq
 8002ffe:	694b      	ldreq	r3, [r1, #20]
 8003000:	600f      	str	r7, [r1, #0]
 8003002:	bf18      	it	ne
 8003004:	2300      	movne	r3, #0
 8003006:	eba6 0807 	sub.w	r8, r6, r7
 800300a:	608b      	str	r3, [r1, #8]
 800300c:	f1b8 0f00 	cmp.w	r8, #0
 8003010:	dde9      	ble.n	8002fe6 <__sflush_r+0xae>
 8003012:	6a21      	ldr	r1, [r4, #32]
 8003014:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003016:	4643      	mov	r3, r8
 8003018:	463a      	mov	r2, r7
 800301a:	4628      	mov	r0, r5
 800301c:	47b0      	blx	r6
 800301e:	2800      	cmp	r0, #0
 8003020:	dc08      	bgt.n	8003034 <__sflush_r+0xfc>
 8003022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003026:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800302a:	81a3      	strh	r3, [r4, #12]
 800302c:	f04f 30ff 	mov.w	r0, #4294967295
 8003030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003034:	4407      	add	r7, r0
 8003036:	eba8 0800 	sub.w	r8, r8, r0
 800303a:	e7e7      	b.n	800300c <__sflush_r+0xd4>
 800303c:	20400001 	.word	0x20400001

08003040 <_fflush_r>:
 8003040:	b538      	push	{r3, r4, r5, lr}
 8003042:	690b      	ldr	r3, [r1, #16]
 8003044:	4605      	mov	r5, r0
 8003046:	460c      	mov	r4, r1
 8003048:	b913      	cbnz	r3, 8003050 <_fflush_r+0x10>
 800304a:	2500      	movs	r5, #0
 800304c:	4628      	mov	r0, r5
 800304e:	bd38      	pop	{r3, r4, r5, pc}
 8003050:	b118      	cbz	r0, 800305a <_fflush_r+0x1a>
 8003052:	6a03      	ldr	r3, [r0, #32]
 8003054:	b90b      	cbnz	r3, 800305a <_fflush_r+0x1a>
 8003056:	f7ff faa1 	bl	800259c <__sinit>
 800305a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f3      	beq.n	800304a <_fflush_r+0xa>
 8003062:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003064:	07d0      	lsls	r0, r2, #31
 8003066:	d404      	bmi.n	8003072 <_fflush_r+0x32>
 8003068:	0599      	lsls	r1, r3, #22
 800306a:	d402      	bmi.n	8003072 <_fflush_r+0x32>
 800306c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800306e:	f7ff fb9a 	bl	80027a6 <__retarget_lock_acquire_recursive>
 8003072:	4628      	mov	r0, r5
 8003074:	4621      	mov	r1, r4
 8003076:	f7ff ff5f 	bl	8002f38 <__sflush_r>
 800307a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800307c:	07da      	lsls	r2, r3, #31
 800307e:	4605      	mov	r5, r0
 8003080:	d4e4      	bmi.n	800304c <_fflush_r+0xc>
 8003082:	89a3      	ldrh	r3, [r4, #12]
 8003084:	059b      	lsls	r3, r3, #22
 8003086:	d4e1      	bmi.n	800304c <_fflush_r+0xc>
 8003088:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800308a:	f7ff fb8d 	bl	80027a8 <__retarget_lock_release_recursive>
 800308e:	e7dd      	b.n	800304c <_fflush_r+0xc>

08003090 <__swbuf_r>:
 8003090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003092:	460e      	mov	r6, r1
 8003094:	4614      	mov	r4, r2
 8003096:	4605      	mov	r5, r0
 8003098:	b118      	cbz	r0, 80030a2 <__swbuf_r+0x12>
 800309a:	6a03      	ldr	r3, [r0, #32]
 800309c:	b90b      	cbnz	r3, 80030a2 <__swbuf_r+0x12>
 800309e:	f7ff fa7d 	bl	800259c <__sinit>
 80030a2:	69a3      	ldr	r3, [r4, #24]
 80030a4:	60a3      	str	r3, [r4, #8]
 80030a6:	89a3      	ldrh	r3, [r4, #12]
 80030a8:	071a      	lsls	r2, r3, #28
 80030aa:	d501      	bpl.n	80030b0 <__swbuf_r+0x20>
 80030ac:	6923      	ldr	r3, [r4, #16]
 80030ae:	b943      	cbnz	r3, 80030c2 <__swbuf_r+0x32>
 80030b0:	4621      	mov	r1, r4
 80030b2:	4628      	mov	r0, r5
 80030b4:	f000 f82a 	bl	800310c <__swsetup_r>
 80030b8:	b118      	cbz	r0, 80030c2 <__swbuf_r+0x32>
 80030ba:	f04f 37ff 	mov.w	r7, #4294967295
 80030be:	4638      	mov	r0, r7
 80030c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030c2:	6823      	ldr	r3, [r4, #0]
 80030c4:	6922      	ldr	r2, [r4, #16]
 80030c6:	1a98      	subs	r0, r3, r2
 80030c8:	6963      	ldr	r3, [r4, #20]
 80030ca:	b2f6      	uxtb	r6, r6
 80030cc:	4283      	cmp	r3, r0
 80030ce:	4637      	mov	r7, r6
 80030d0:	dc05      	bgt.n	80030de <__swbuf_r+0x4e>
 80030d2:	4621      	mov	r1, r4
 80030d4:	4628      	mov	r0, r5
 80030d6:	f7ff ffb3 	bl	8003040 <_fflush_r>
 80030da:	2800      	cmp	r0, #0
 80030dc:	d1ed      	bne.n	80030ba <__swbuf_r+0x2a>
 80030de:	68a3      	ldr	r3, [r4, #8]
 80030e0:	3b01      	subs	r3, #1
 80030e2:	60a3      	str	r3, [r4, #8]
 80030e4:	6823      	ldr	r3, [r4, #0]
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	6022      	str	r2, [r4, #0]
 80030ea:	701e      	strb	r6, [r3, #0]
 80030ec:	6962      	ldr	r2, [r4, #20]
 80030ee:	1c43      	adds	r3, r0, #1
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d004      	beq.n	80030fe <__swbuf_r+0x6e>
 80030f4:	89a3      	ldrh	r3, [r4, #12]
 80030f6:	07db      	lsls	r3, r3, #31
 80030f8:	d5e1      	bpl.n	80030be <__swbuf_r+0x2e>
 80030fa:	2e0a      	cmp	r6, #10
 80030fc:	d1df      	bne.n	80030be <__swbuf_r+0x2e>
 80030fe:	4621      	mov	r1, r4
 8003100:	4628      	mov	r0, r5
 8003102:	f7ff ff9d 	bl	8003040 <_fflush_r>
 8003106:	2800      	cmp	r0, #0
 8003108:	d0d9      	beq.n	80030be <__swbuf_r+0x2e>
 800310a:	e7d6      	b.n	80030ba <__swbuf_r+0x2a>

0800310c <__swsetup_r>:
 800310c:	b538      	push	{r3, r4, r5, lr}
 800310e:	4b29      	ldr	r3, [pc, #164]	@ (80031b4 <__swsetup_r+0xa8>)
 8003110:	4605      	mov	r5, r0
 8003112:	6818      	ldr	r0, [r3, #0]
 8003114:	460c      	mov	r4, r1
 8003116:	b118      	cbz	r0, 8003120 <__swsetup_r+0x14>
 8003118:	6a03      	ldr	r3, [r0, #32]
 800311a:	b90b      	cbnz	r3, 8003120 <__swsetup_r+0x14>
 800311c:	f7ff fa3e 	bl	800259c <__sinit>
 8003120:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003124:	0719      	lsls	r1, r3, #28
 8003126:	d422      	bmi.n	800316e <__swsetup_r+0x62>
 8003128:	06da      	lsls	r2, r3, #27
 800312a:	d407      	bmi.n	800313c <__swsetup_r+0x30>
 800312c:	2209      	movs	r2, #9
 800312e:	602a      	str	r2, [r5, #0]
 8003130:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003134:	81a3      	strh	r3, [r4, #12]
 8003136:	f04f 30ff 	mov.w	r0, #4294967295
 800313a:	e033      	b.n	80031a4 <__swsetup_r+0x98>
 800313c:	0758      	lsls	r0, r3, #29
 800313e:	d512      	bpl.n	8003166 <__swsetup_r+0x5a>
 8003140:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003142:	b141      	cbz	r1, 8003156 <__swsetup_r+0x4a>
 8003144:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003148:	4299      	cmp	r1, r3
 800314a:	d002      	beq.n	8003152 <__swsetup_r+0x46>
 800314c:	4628      	mov	r0, r5
 800314e:	f7ff fb2d 	bl	80027ac <_free_r>
 8003152:	2300      	movs	r3, #0
 8003154:	6363      	str	r3, [r4, #52]	@ 0x34
 8003156:	89a3      	ldrh	r3, [r4, #12]
 8003158:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800315c:	81a3      	strh	r3, [r4, #12]
 800315e:	2300      	movs	r3, #0
 8003160:	6063      	str	r3, [r4, #4]
 8003162:	6923      	ldr	r3, [r4, #16]
 8003164:	6023      	str	r3, [r4, #0]
 8003166:	89a3      	ldrh	r3, [r4, #12]
 8003168:	f043 0308 	orr.w	r3, r3, #8
 800316c:	81a3      	strh	r3, [r4, #12]
 800316e:	6923      	ldr	r3, [r4, #16]
 8003170:	b94b      	cbnz	r3, 8003186 <__swsetup_r+0x7a>
 8003172:	89a3      	ldrh	r3, [r4, #12]
 8003174:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003178:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800317c:	d003      	beq.n	8003186 <__swsetup_r+0x7a>
 800317e:	4621      	mov	r1, r4
 8003180:	4628      	mov	r0, r5
 8003182:	f000 f84f 	bl	8003224 <__smakebuf_r>
 8003186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800318a:	f013 0201 	ands.w	r2, r3, #1
 800318e:	d00a      	beq.n	80031a6 <__swsetup_r+0x9a>
 8003190:	2200      	movs	r2, #0
 8003192:	60a2      	str	r2, [r4, #8]
 8003194:	6962      	ldr	r2, [r4, #20]
 8003196:	4252      	negs	r2, r2
 8003198:	61a2      	str	r2, [r4, #24]
 800319a:	6922      	ldr	r2, [r4, #16]
 800319c:	b942      	cbnz	r2, 80031b0 <__swsetup_r+0xa4>
 800319e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80031a2:	d1c5      	bne.n	8003130 <__swsetup_r+0x24>
 80031a4:	bd38      	pop	{r3, r4, r5, pc}
 80031a6:	0799      	lsls	r1, r3, #30
 80031a8:	bf58      	it	pl
 80031aa:	6962      	ldrpl	r2, [r4, #20]
 80031ac:	60a2      	str	r2, [r4, #8]
 80031ae:	e7f4      	b.n	800319a <__swsetup_r+0x8e>
 80031b0:	2000      	movs	r0, #0
 80031b2:	e7f7      	b.n	80031a4 <__swsetup_r+0x98>
 80031b4:	20000028 	.word	0x20000028

080031b8 <_sbrk_r>:
 80031b8:	b538      	push	{r3, r4, r5, lr}
 80031ba:	4d06      	ldr	r5, [pc, #24]	@ (80031d4 <_sbrk_r+0x1c>)
 80031bc:	2300      	movs	r3, #0
 80031be:	4604      	mov	r4, r0
 80031c0:	4608      	mov	r0, r1
 80031c2:	602b      	str	r3, [r5, #0]
 80031c4:	f7fd fc3a 	bl	8000a3c <_sbrk>
 80031c8:	1c43      	adds	r3, r0, #1
 80031ca:	d102      	bne.n	80031d2 <_sbrk_r+0x1a>
 80031cc:	682b      	ldr	r3, [r5, #0]
 80031ce:	b103      	cbz	r3, 80031d2 <_sbrk_r+0x1a>
 80031d0:	6023      	str	r3, [r4, #0]
 80031d2:	bd38      	pop	{r3, r4, r5, pc}
 80031d4:	20000224 	.word	0x20000224

080031d8 <__swhatbuf_r>:
 80031d8:	b570      	push	{r4, r5, r6, lr}
 80031da:	460c      	mov	r4, r1
 80031dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031e0:	2900      	cmp	r1, #0
 80031e2:	b096      	sub	sp, #88	@ 0x58
 80031e4:	4615      	mov	r5, r2
 80031e6:	461e      	mov	r6, r3
 80031e8:	da0d      	bge.n	8003206 <__swhatbuf_r+0x2e>
 80031ea:	89a3      	ldrh	r3, [r4, #12]
 80031ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80031f0:	f04f 0100 	mov.w	r1, #0
 80031f4:	bf14      	ite	ne
 80031f6:	2340      	movne	r3, #64	@ 0x40
 80031f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80031fc:	2000      	movs	r0, #0
 80031fe:	6031      	str	r1, [r6, #0]
 8003200:	602b      	str	r3, [r5, #0]
 8003202:	b016      	add	sp, #88	@ 0x58
 8003204:	bd70      	pop	{r4, r5, r6, pc}
 8003206:	466a      	mov	r2, sp
 8003208:	f000 f848 	bl	800329c <_fstat_r>
 800320c:	2800      	cmp	r0, #0
 800320e:	dbec      	blt.n	80031ea <__swhatbuf_r+0x12>
 8003210:	9901      	ldr	r1, [sp, #4]
 8003212:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003216:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800321a:	4259      	negs	r1, r3
 800321c:	4159      	adcs	r1, r3
 800321e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003222:	e7eb      	b.n	80031fc <__swhatbuf_r+0x24>

08003224 <__smakebuf_r>:
 8003224:	898b      	ldrh	r3, [r1, #12]
 8003226:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003228:	079d      	lsls	r5, r3, #30
 800322a:	4606      	mov	r6, r0
 800322c:	460c      	mov	r4, r1
 800322e:	d507      	bpl.n	8003240 <__smakebuf_r+0x1c>
 8003230:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003234:	6023      	str	r3, [r4, #0]
 8003236:	6123      	str	r3, [r4, #16]
 8003238:	2301      	movs	r3, #1
 800323a:	6163      	str	r3, [r4, #20]
 800323c:	b003      	add	sp, #12
 800323e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003240:	ab01      	add	r3, sp, #4
 8003242:	466a      	mov	r2, sp
 8003244:	f7ff ffc8 	bl	80031d8 <__swhatbuf_r>
 8003248:	9f00      	ldr	r7, [sp, #0]
 800324a:	4605      	mov	r5, r0
 800324c:	4639      	mov	r1, r7
 800324e:	4630      	mov	r0, r6
 8003250:	f7ff fb18 	bl	8002884 <_malloc_r>
 8003254:	b948      	cbnz	r0, 800326a <__smakebuf_r+0x46>
 8003256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800325a:	059a      	lsls	r2, r3, #22
 800325c:	d4ee      	bmi.n	800323c <__smakebuf_r+0x18>
 800325e:	f023 0303 	bic.w	r3, r3, #3
 8003262:	f043 0302 	orr.w	r3, r3, #2
 8003266:	81a3      	strh	r3, [r4, #12]
 8003268:	e7e2      	b.n	8003230 <__smakebuf_r+0xc>
 800326a:	89a3      	ldrh	r3, [r4, #12]
 800326c:	6020      	str	r0, [r4, #0]
 800326e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003272:	81a3      	strh	r3, [r4, #12]
 8003274:	9b01      	ldr	r3, [sp, #4]
 8003276:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800327a:	b15b      	cbz	r3, 8003294 <__smakebuf_r+0x70>
 800327c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003280:	4630      	mov	r0, r6
 8003282:	f000 f81d 	bl	80032c0 <_isatty_r>
 8003286:	b128      	cbz	r0, 8003294 <__smakebuf_r+0x70>
 8003288:	89a3      	ldrh	r3, [r4, #12]
 800328a:	f023 0303 	bic.w	r3, r3, #3
 800328e:	f043 0301 	orr.w	r3, r3, #1
 8003292:	81a3      	strh	r3, [r4, #12]
 8003294:	89a3      	ldrh	r3, [r4, #12]
 8003296:	431d      	orrs	r5, r3
 8003298:	81a5      	strh	r5, [r4, #12]
 800329a:	e7cf      	b.n	800323c <__smakebuf_r+0x18>

0800329c <_fstat_r>:
 800329c:	b538      	push	{r3, r4, r5, lr}
 800329e:	4d07      	ldr	r5, [pc, #28]	@ (80032bc <_fstat_r+0x20>)
 80032a0:	2300      	movs	r3, #0
 80032a2:	4604      	mov	r4, r0
 80032a4:	4608      	mov	r0, r1
 80032a6:	4611      	mov	r1, r2
 80032a8:	602b      	str	r3, [r5, #0]
 80032aa:	f7fd fb9e 	bl	80009ea <_fstat>
 80032ae:	1c43      	adds	r3, r0, #1
 80032b0:	d102      	bne.n	80032b8 <_fstat_r+0x1c>
 80032b2:	682b      	ldr	r3, [r5, #0]
 80032b4:	b103      	cbz	r3, 80032b8 <_fstat_r+0x1c>
 80032b6:	6023      	str	r3, [r4, #0]
 80032b8:	bd38      	pop	{r3, r4, r5, pc}
 80032ba:	bf00      	nop
 80032bc:	20000224 	.word	0x20000224

080032c0 <_isatty_r>:
 80032c0:	b538      	push	{r3, r4, r5, lr}
 80032c2:	4d06      	ldr	r5, [pc, #24]	@ (80032dc <_isatty_r+0x1c>)
 80032c4:	2300      	movs	r3, #0
 80032c6:	4604      	mov	r4, r0
 80032c8:	4608      	mov	r0, r1
 80032ca:	602b      	str	r3, [r5, #0]
 80032cc:	f7fd fb9d 	bl	8000a0a <_isatty>
 80032d0:	1c43      	adds	r3, r0, #1
 80032d2:	d102      	bne.n	80032da <_isatty_r+0x1a>
 80032d4:	682b      	ldr	r3, [r5, #0]
 80032d6:	b103      	cbz	r3, 80032da <_isatty_r+0x1a>
 80032d8:	6023      	str	r3, [r4, #0]
 80032da:	bd38      	pop	{r3, r4, r5, pc}
 80032dc:	20000224 	.word	0x20000224

080032e0 <_init>:
 80032e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032e2:	bf00      	nop
 80032e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032e6:	bc08      	pop	{r3}
 80032e8:	469e      	mov	lr, r3
 80032ea:	4770      	bx	lr

080032ec <_fini>:
 80032ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ee:	bf00      	nop
 80032f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032f2:	bc08      	pop	{r3}
 80032f4:	469e      	mov	lr, r3
 80032f6:	4770      	bx	lr
