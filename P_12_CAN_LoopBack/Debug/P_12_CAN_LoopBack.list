
P_12_CAN_LoopBack.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000293c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08002a48  08002a48  00003a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ac4  08002ac4  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002ac4  08002ac4  00004068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002ac4  08002ac4  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ac4  08002ac4  00003ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ac8  08002ac8  00003ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002acc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000068  08002b34  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  08002b34  00004200  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000493b  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001378  00000000  00000000  000089cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005b0  00000000  00000000  00009d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000418  00000000  00000000  0000a2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018392  00000000  00000000  0000a710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006d59  00000000  00000000  00022aa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ac67  00000000  00000000  000297fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4462  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d0c  00000000  00000000  000b44a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000b61b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a30 	.word	0x08002a30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002a30 	.word	0x08002a30

0800014c <SysTick_Handler>:
#include "main.h"

void SysTick_Handler(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000150:	f000 fa86 	bl	8000660 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000154:	f000 ffc5 	bl	80010e2 <HAL_SYSTICK_IRQHandler>
}
 8000158:	bf00      	nop
 800015a:	bd80      	pop	{r7, pc}

0800015c <main>:
void CAN1_Filter_init(void);

CAN_HandleTypeDef can1;

int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	HAL_Init();
 8000160:	f000 fa32 	bl	80005c8 <HAL_Init>
	SysClk_config(); // we are using HSE here which is 8Mhz
 8000164:	f000 f816 	bl	8000194 <SysClk_config>
	CAN1_init();
 8000168:	f000 f84c 	bl	8000204 <CAN1_init>
	CAN1_Filter_init();
 800016c:	f000 f8de 	bl	800032c <CAN1_Filter_init>
	if(HAL_CAN_Start(&can1) != HAL_OK) Error_Hanlder();
 8000170:	4807      	ldr	r0, [pc, #28]	@ (8000190 <main+0x34>)
 8000172:	f000 fc55 	bl	8000a20 <HAL_CAN_Start>
 8000176:	4603      	mov	r3, r0
 8000178:	2b00      	cmp	r3, #0
 800017a:	d001      	beq.n	8000180 <main+0x24>
 800017c:	f000 f8fa 	bl	8000374 <Error_Hanlder>
	CAN1_Tx();
 8000180:	f000 f878 	bl	8000274 <CAN1_Tx>
	CAN1_Rx();
 8000184:	f000 f8ac 	bl	80002e0 <CAN1_Rx>
 8000188:	2300      	movs	r3, #0


}
 800018a:	4618      	mov	r0, r3
 800018c:	bd80      	pop	{r7, pc}
 800018e:	bf00      	nop
 8000190:	20000084 	.word	0x20000084

08000194 <SysClk_config>:

void SysClk_config(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b090      	sub	sp, #64	@ 0x40
 8000198:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef hse;
	memset(&hse, 0, sizeof(hse));
 800019a:	f107 0318 	add.w	r3, r7, #24
 800019e:	2228      	movs	r2, #40	@ 0x28
 80001a0:	2100      	movs	r1, #0
 80001a2:	4618      	mov	r0, r3
 80001a4:	f001 fe23 	bl	8001dee <memset>
	hse.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001a8:	2301      	movs	r3, #1
 80001aa:	61bb      	str	r3, [r7, #24]
	hse.HSEState = RCC_HSE_ON;
 80001ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001b0:	61fb      	str	r3, [r7, #28]
	hse.PLL.PLLState = RCC_PLL_NONE;
 80001b2:	2300      	movs	r3, #0
 80001b4:	637b      	str	r3, [r7, #52]	@ 0x34
	if(HAL_RCC_OscConfig(&hse) != HAL_OK) Error_Hanlder();
 80001b6:	f107 0318 	add.w	r3, r7, #24
 80001ba:	4618      	mov	r0, r3
 80001bc:	f001 f922 	bl	8001404 <HAL_RCC_OscConfig>
 80001c0:	4603      	mov	r3, r0
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d001      	beq.n	80001ca <SysClk_config+0x36>
 80001c6:	f000 f8d5 	bl	8000374 <Error_Hanlder>
	RCC_ClkInitTypeDef clk;
	clk.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80001ca:	2301      	movs	r3, #1
 80001cc:	60bb      	str	r3, [r7, #8]
	clk.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 80001ce:	230f      	movs	r3, #15
 80001d0:	607b      	str	r3, [r7, #4]
			RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	clk.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d2:	2300      	movs	r3, #0
 80001d4:	60fb      	str	r3, [r7, #12]
	clk.APB1CLKDivider = RCC_HCLK_DIV1;
 80001d6:	2300      	movs	r3, #0
 80001d8:	613b      	str	r3, [r7, #16]
	clk.APB2CLKDivider = RCC_HCLK_DIV1;
 80001da:	2300      	movs	r3, #0
 80001dc:	617b      	str	r3, [r7, #20]
	if(HAL_RCC_ClockConfig(&clk, FLASH_ACR_LATENCY_0) != HAL_OK) Error_Hanlder();
 80001de:	1d3b      	adds	r3, r7, #4
 80001e0:	2101      	movs	r1, #1
 80001e2:	4618      	mov	r0, r3
 80001e4:	f001 fb90 	bl	8001908 <HAL_RCC_ClockConfig>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d001      	beq.n	80001f2 <SysClk_config+0x5e>
 80001ee:	f000 f8c1 	bl	8000374 <Error_Hanlder>
	__HAL_RCC_HSI_DISABLE();// always disable hsi after making hse as clock source not before that
 80001f2:	4b03      	ldr	r3, [pc, #12]	@ (8000200 <SysClk_config+0x6c>)
 80001f4:	2200      	movs	r2, #0
 80001f6:	601a      	str	r2, [r3, #0]

}
 80001f8:	bf00      	nop
 80001fa:	3740      	adds	r7, #64	@ 0x40
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	42420000 	.word	0x42420000

08000204 <CAN1_init>:


void CAN1_init(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	can1.Instance = CAN1;
 8000208:	4b18      	ldr	r3, [pc, #96]	@ (800026c <CAN1_init+0x68>)
 800020a:	4a19      	ldr	r2, [pc, #100]	@ (8000270 <CAN1_init+0x6c>)
 800020c:	601a      	str	r2, [r3, #0]
	can1.Init.Mode = CAN_MODE_LOOPBACK;
 800020e:	4b17      	ldr	r3, [pc, #92]	@ (800026c <CAN1_init+0x68>)
 8000210:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000214:	609a      	str	r2, [r3, #8]
	can1.Init.AutoBusOff = DISABLE;
 8000216:	4b15      	ldr	r3, [pc, #84]	@ (800026c <CAN1_init+0x68>)
 8000218:	2200      	movs	r2, #0
 800021a:	765a      	strb	r2, [r3, #25]
	can1.Init.AutoRetransmission = ENABLE;
 800021c:	4b13      	ldr	r3, [pc, #76]	@ (800026c <CAN1_init+0x68>)
 800021e:	2201      	movs	r2, #1
 8000220:	76da      	strb	r2, [r3, #27]
	can1.Init.AutoWakeUp = DISABLE;
 8000222:	4b12      	ldr	r3, [pc, #72]	@ (800026c <CAN1_init+0x68>)
 8000224:	2200      	movs	r2, #0
 8000226:	769a      	strb	r2, [r3, #26]
	can1.Init.ReceiveFifoLocked = DISABLE;
 8000228:	4b10      	ldr	r3, [pc, #64]	@ (800026c <CAN1_init+0x68>)
 800022a:	2200      	movs	r2, #0
 800022c:	771a      	strb	r2, [r3, #28]
	can1.Init.TimeTriggeredMode = DISABLE;
 800022e:	4b0f      	ldr	r3, [pc, #60]	@ (800026c <CAN1_init+0x68>)
 8000230:	2200      	movs	r2, #0
 8000232:	761a      	strb	r2, [r3, #24]
	can1.Init.TransmitFifoPriority = DISABLE;
 8000234:	4b0d      	ldr	r3, [pc, #52]	@ (800026c <CAN1_init+0x68>)
 8000236:	2200      	movs	r2, #0
 8000238:	775a      	strb	r2, [r3, #29]

	// for the frame
	can1.Init.Prescaler = 1;
 800023a:	4b0c      	ldr	r3, [pc, #48]	@ (800026c <CAN1_init+0x68>)
 800023c:	2201      	movs	r2, #1
 800023e:	605a      	str	r2, [r3, #4]
	can1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000240:	4b0a      	ldr	r3, [pc, #40]	@ (800026c <CAN1_init+0x68>)
 8000242:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000246:	611a      	str	r2, [r3, #16]
	can1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000248:	4b08      	ldr	r3, [pc, #32]	@ (800026c <CAN1_init+0x68>)
 800024a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800024e:	615a      	str	r2, [r3, #20]
	can1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000250:	4b06      	ldr	r3, [pc, #24]	@ (800026c <CAN1_init+0x68>)
 8000252:	2200      	movs	r2, #0
 8000254:	60da      	str	r2, [r3, #12]

	if(HAL_CAN_Init(&can1) != HAL_OK) Error_Hanlder();
 8000256:	4805      	ldr	r0, [pc, #20]	@ (800026c <CAN1_init+0x68>)
 8000258:	f000 fa1e 	bl	8000698 <HAL_CAN_Init>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <CAN1_init+0x62>
 8000262:	f000 f887 	bl	8000374 <Error_Hanlder>


}
 8000266:	bf00      	nop
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	20000084 	.word	0x20000084
 8000270:	40006400 	.word	0x40006400

08000274 <CAN1_Tx>:


void CAN1_Tx(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b08a      	sub	sp, #40	@ 0x28
 8000278:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef Txheader;

	uint32_t TxMailbox;
	uint8_t messg[5] = {'H','E','L','L','O'};
 800027a:	4a16      	ldr	r2, [pc, #88]	@ (80002d4 <CAN1_Tx+0x60>)
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000282:	6018      	str	r0, [r3, #0]
 8000284:	3304      	adds	r3, #4
 8000286:	7019      	strb	r1, [r3, #0]

	Txheader.IDE = CAN_ID_STD;
 8000288:	2300      	movs	r3, #0
 800028a:	61bb      	str	r3, [r7, #24]
	Txheader.DLC = 5;
 800028c:	2305      	movs	r3, #5
 800028e:	623b      	str	r3, [r7, #32]
	Txheader.RTR = CAN_RTR_DATA;
 8000290:	2300      	movs	r3, #0
 8000292:	61fb      	str	r3, [r7, #28]
	Txheader.StdId = 0x65D;
 8000294:	f240 635d 	movw	r3, #1629	@ 0x65d
 8000298:	613b      	str	r3, [r7, #16]

	// here txmailbox is automatically filled by the below api, indicating which mailbox is being used
	if(HAL_CAN_AddTxMessage(&can1, &Txheader, messg, &TxMailbox) != HAL_OK) Error_Hanlder();
 800029a:	f107 030c 	add.w	r3, r7, #12
 800029e:	1d3a      	adds	r2, r7, #4
 80002a0:	f107 0110 	add.w	r1, r7, #16
 80002a4:	480c      	ldr	r0, [pc, #48]	@ (80002d8 <CAN1_Tx+0x64>)
 80002a6:	f000 fbff 	bl	8000aa8 <HAL_CAN_AddTxMessage>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <CAN1_Tx+0x40>
 80002b0:	f000 f860 	bl	8000374 <Error_Hanlder>

	while(HAL_CAN_IsTxMessagePending(&can1, TxMailbox));
 80002b4:	bf00      	nop
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	4619      	mov	r1, r3
 80002ba:	4807      	ldr	r0, [pc, #28]	@ (80002d8 <CAN1_Tx+0x64>)
 80002bc:	f000 fcc3 	bl	8000c46 <HAL_CAN_IsTxMessagePending>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d1f7      	bne.n	80002b6 <CAN1_Tx+0x42>

	printf("Message Transmitted");
 80002c6:	4805      	ldr	r0, [pc, #20]	@ (80002dc <CAN1_Tx+0x68>)
 80002c8:	f001 fd3c 	bl	8001d44 <iprintf>

}
 80002cc:	bf00      	nop
 80002ce:	3728      	adds	r7, #40	@ 0x28
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	08002a5c 	.word	0x08002a5c
 80002d8:	20000084 	.word	0x20000084
 80002dc:	08002a48 	.word	0x08002a48

080002e0 <CAN1_Rx>:

void CAN1_Rx(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b08a      	sub	sp, #40	@ 0x28
 80002e4:	af00      	add	r7, sp, #0
	CAN_RxHeaderTypeDef rxheader;

	uint8_t rcvdmssg[5];

	// wait until the fifo is filled
	while(! HAL_CAN_GetRxFifoFillLevel(&can1, CAN_RX_FIFO0));
 80002e6:	bf00      	nop
 80002e8:	2100      	movs	r1, #0
 80002ea:	480e      	ldr	r0, [pc, #56]	@ (8000324 <CAN1_Rx+0x44>)
 80002ec:	f000 fdef 	bl	8000ece <HAL_CAN_GetRxFifoFillLevel>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d0f8      	beq.n	80002e8 <CAN1_Rx+0x8>

	if(HAL_CAN_GetRxMessage(&can1, CAN_RX_FIFO0, &rxheader, rcvdmssg) != HAL_OK) Error_Hanlder();
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	f107 020c 	add.w	r2, r7, #12
 80002fc:	2100      	movs	r1, #0
 80002fe:	4809      	ldr	r0, [pc, #36]	@ (8000324 <CAN1_Rx+0x44>)
 8000300:	f000 fcc4 	bl	8000c8c <HAL_CAN_GetRxMessage>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <CAN1_Rx+0x2e>
 800030a:	f000 f833 	bl	8000374 <Error_Hanlder>

	printf("%.*s\n", 5, rcvdmssg);
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	461a      	mov	r2, r3
 8000312:	2105      	movs	r1, #5
 8000314:	4804      	ldr	r0, [pc, #16]	@ (8000328 <CAN1_Rx+0x48>)
 8000316:	f001 fd15 	bl	8001d44 <iprintf>

}
 800031a:	bf00      	nop
 800031c:	3728      	adds	r7, #40	@ 0x28
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	20000084 	.word	0x20000084
 8000328:	08002a64 	.word	0x08002a64

0800032c <CAN1_Filter_init>:

void CAN1_Filter_init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b08a      	sub	sp, #40	@ 0x28
 8000330:	af00      	add	r7, sp, #0


	// here we accepting every message (no filter)
	CAN_FilterTypeDef filter;

	filter.FilterActivation = ENABLE;
 8000332:	2301      	movs	r3, #1
 8000334:	623b      	str	r3, [r7, #32]
	filter.FilterBank = 0;
 8000336:	2300      	movs	r3, #0
 8000338:	617b      	str	r3, [r7, #20]
	filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 800033a:	2300      	movs	r3, #0
 800033c:	613b      	str	r3, [r7, #16]
	filter.FilterIdHigh = 0x0000;
 800033e:	2300      	movs	r3, #0
 8000340:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = 0x0000;
 8000342:	2300      	movs	r3, #0
 8000344:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = 0x0000;
 8000346:	2300      	movs	r3, #0
 8000348:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = 0x0000;
 800034a:	2300      	movs	r3, #0
 800034c:	60fb      	str	r3, [r7, #12]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800034e:	2301      	movs	r3, #1
 8000350:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_ConfigFilter(&can1,&filter) != HAL_OK) Error_Hanlder();
 8000352:	463b      	mov	r3, r7
 8000354:	4619      	mov	r1, r3
 8000356:	4806      	ldr	r0, [pc, #24]	@ (8000370 <CAN1_Filter_init+0x44>)
 8000358:	f000 fa99 	bl	800088e <HAL_CAN_ConfigFilter>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <CAN1_Filter_init+0x3a>
 8000362:	f000 f807 	bl	8000374 <Error_Hanlder>
}
 8000366:	bf00      	nop
 8000368:	3728      	adds	r7, #40	@ 0x28
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	20000084 	.word	0x20000084

08000374 <Error_Hanlder>:

void Error_Hanlder(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
	while(1);
 8000378:	bf00      	nop
 800037a:	e7fd      	b.n	8000378 <Error_Hanlder+0x4>

0800037c <HAL_CAN_MspInit>:
#include "main.h"

void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b088      	sub	sp, #32
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
	__HAL_RCC_CAN1_CLK_ENABLE();
 8000384:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <HAL_CAN_MspInit+0x60>)
 8000386:	69db      	ldr	r3, [r3, #28]
 8000388:	4a14      	ldr	r2, [pc, #80]	@ (80003dc <HAL_CAN_MspInit+0x60>)
 800038a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800038e:	61d3      	str	r3, [r2, #28]
 8000390:	4b12      	ldr	r3, [pc, #72]	@ (80003dc <HAL_CAN_MspInit+0x60>)
 8000392:	69db      	ldr	r3, [r3, #28]
 8000394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000398:	60fb      	str	r3, [r7, #12]
 800039a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800039c:	4b0f      	ldr	r3, [pc, #60]	@ (80003dc <HAL_CAN_MspInit+0x60>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a0e      	ldr	r2, [pc, #56]	@ (80003dc <HAL_CAN_MspInit+0x60>)
 80003a2:	f043 0304 	orr.w	r3, r3, #4
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b0c      	ldr	r3, [pc, #48]	@ (80003dc <HAL_CAN_MspInit+0x60>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0304 	and.w	r3, r3, #4
 80003b0:	60bb      	str	r3, [r7, #8]
 80003b2:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitTypeDef can;
	can.Mode = GPIO_MODE_AF_PP;
 80003b4:	2302      	movs	r3, #2
 80003b6:	617b      	str	r3, [r7, #20]
	can.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 80003b8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80003bc:	613b      	str	r3, [r7, #16]
	can.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80003be:	2301      	movs	r3, #1
 80003c0:	61fb      	str	r3, [r7, #28]
	can.Pull = GPIO_NOPULL;
 80003c2:	2300      	movs	r3, #0
 80003c4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &can);
 80003c6:	f107 0310 	add.w	r3, r7, #16
 80003ca:	4619      	mov	r1, r3
 80003cc:	4804      	ldr	r0, [pc, #16]	@ (80003e0 <HAL_CAN_MspInit+0x64>)
 80003ce:	f000 fe95 	bl	80010fc <HAL_GPIO_Init>

}
 80003d2:	bf00      	nop
 80003d4:	3720      	adds	r7, #32
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40021000 	.word	0x40021000
 80003e0:	40010800 	.word	0x40010800

080003e4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4603      	mov	r3, r0
 80003ec:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80003ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000428 <ITM_SendChar+0x44>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a0d      	ldr	r2, [pc, #52]	@ (8000428 <ITM_SendChar+0x44>)
 80003f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80003f8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80003fa:	4b0c      	ldr	r3, [pc, #48]	@ (800042c <ITM_SendChar+0x48>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4a0b      	ldr	r2, [pc, #44]	@ (800042c <ITM_SendChar+0x48>)
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000406:	bf00      	nop
 8000408:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f003 0301 	and.w	r3, r3, #1
 8000412:	2b00      	cmp	r3, #0
 8000414:	d0f8      	beq.n	8000408 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000416:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800041a:	79fb      	ldrb	r3, [r7, #7]
 800041c:	6013      	str	r3, [r2, #0]
}
 800041e:	bf00      	nop
 8000420:	370c      	adds	r7, #12
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr
 8000428:	e000edfc 	.word	0xe000edfc
 800042c:	e0000e00 	.word	0xe0000e00

08000430 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b086      	sub	sp, #24
 8000434:	af00      	add	r7, sp, #0
 8000436:	60f8      	str	r0, [r7, #12]
 8000438:	60b9      	str	r1, [r7, #8]
 800043a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800043c:	2300      	movs	r3, #0
 800043e:	617b      	str	r3, [r7, #20]
 8000440:	e00a      	b.n	8000458 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000442:	f3af 8000 	nop.w
 8000446:	4601      	mov	r1, r0
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	1c5a      	adds	r2, r3, #1
 800044c:	60ba      	str	r2, [r7, #8]
 800044e:	b2ca      	uxtb	r2, r1
 8000450:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000452:	697b      	ldr	r3, [r7, #20]
 8000454:	3301      	adds	r3, #1
 8000456:	617b      	str	r3, [r7, #20]
 8000458:	697a      	ldr	r2, [r7, #20]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	429a      	cmp	r2, r3
 800045e:	dbf0      	blt.n	8000442 <_read+0x12>
  }

  return len;
 8000460:	687b      	ldr	r3, [r7, #4]
}
 8000462:	4618      	mov	r0, r3
 8000464:	3718      	adds	r7, #24
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}

0800046a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800046a:	b580      	push	{r7, lr}
 800046c:	b086      	sub	sp, #24
 800046e:	af00      	add	r7, sp, #0
 8000470:	60f8      	str	r0, [r7, #12]
 8000472:	60b9      	str	r1, [r7, #8]
 8000474:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000476:	2300      	movs	r3, #0
 8000478:	617b      	str	r3, [r7, #20]
 800047a:	e009      	b.n	8000490 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	1c5a      	adds	r2, r3, #1
 8000480:	60ba      	str	r2, [r7, #8]
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff ffad 	bl	80003e4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800048a:	697b      	ldr	r3, [r7, #20]
 800048c:	3301      	adds	r3, #1
 800048e:	617b      	str	r3, [r7, #20]
 8000490:	697a      	ldr	r2, [r7, #20]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	429a      	cmp	r2, r3
 8000496:	dbf1      	blt.n	800047c <_write+0x12>
  }
  return len;
 8000498:	687b      	ldr	r3, [r7, #4]
}
 800049a:	4618      	mov	r0, r3
 800049c:	3718      	adds	r7, #24
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}

080004a2 <_close>:

int _close(int file)
{
 80004a2:	b480      	push	{r7}
 80004a4:	b083      	sub	sp, #12
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr

080004b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80004c8:	605a      	str	r2, [r3, #4]
  return 0;
 80004ca:	2300      	movs	r3, #0
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr

080004d6 <_isatty>:

int _isatty(int file)
{
 80004d6:	b480      	push	{r7}
 80004d8:	b083      	sub	sp, #12
 80004da:	af00      	add	r7, sp, #0
 80004dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004de:	2301      	movs	r3, #1
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr

080004ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004ea:	b480      	push	{r7}
 80004ec:	b085      	sub	sp, #20
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	60f8      	str	r0, [r7, #12]
 80004f2:	60b9      	str	r1, [r7, #8]
 80004f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004f6:	2300      	movs	r3, #0
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	3714      	adds	r7, #20
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr
	...

08000504 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800050c:	4a14      	ldr	r2, [pc, #80]	@ (8000560 <_sbrk+0x5c>)
 800050e:	4b15      	ldr	r3, [pc, #84]	@ (8000564 <_sbrk+0x60>)
 8000510:	1ad3      	subs	r3, r2, r3
 8000512:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000518:	4b13      	ldr	r3, [pc, #76]	@ (8000568 <_sbrk+0x64>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d102      	bne.n	8000526 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000520:	4b11      	ldr	r3, [pc, #68]	@ (8000568 <_sbrk+0x64>)
 8000522:	4a12      	ldr	r2, [pc, #72]	@ (800056c <_sbrk+0x68>)
 8000524:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000526:	4b10      	ldr	r3, [pc, #64]	@ (8000568 <_sbrk+0x64>)
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4413      	add	r3, r2
 800052e:	693a      	ldr	r2, [r7, #16]
 8000530:	429a      	cmp	r2, r3
 8000532:	d207      	bcs.n	8000544 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000534:	f001 fcaa 	bl	8001e8c <__errno>
 8000538:	4603      	mov	r3, r0
 800053a:	220c      	movs	r2, #12
 800053c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800053e:	f04f 33ff 	mov.w	r3, #4294967295
 8000542:	e009      	b.n	8000558 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000544:	4b08      	ldr	r3, [pc, #32]	@ (8000568 <_sbrk+0x64>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800054a:	4b07      	ldr	r3, [pc, #28]	@ (8000568 <_sbrk+0x64>)
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4413      	add	r3, r2
 8000552:	4a05      	ldr	r2, [pc, #20]	@ (8000568 <_sbrk+0x64>)
 8000554:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000556:	68fb      	ldr	r3, [r7, #12]
}
 8000558:	4618      	mov	r0, r3
 800055a:	3718      	adds	r7, #24
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20005000 	.word	0x20005000
 8000564:	00000400 	.word	0x00000400
 8000568:	200000ac 	.word	0x200000ac
 800056c:	20000200 	.word	0x20000200

08000570 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr

0800057c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800057c:	f7ff fff8 	bl	8000570 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000580:	480b      	ldr	r0, [pc, #44]	@ (80005b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000582:	490c      	ldr	r1, [pc, #48]	@ (80005b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000584:	4a0c      	ldr	r2, [pc, #48]	@ (80005b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000588:	e002      	b.n	8000590 <LoopCopyDataInit>

0800058a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800058a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800058c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800058e:	3304      	adds	r3, #4

08000590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000594:	d3f9      	bcc.n	800058a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000596:	4a09      	ldr	r2, [pc, #36]	@ (80005bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000598:	4c09      	ldr	r4, [pc, #36]	@ (80005c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800059a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800059c:	e001      	b.n	80005a2 <LoopFillZerobss>

0800059e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800059e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a0:	3204      	adds	r2, #4

080005a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a4:	d3fb      	bcc.n	800059e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005a6:	f001 fc77 	bl	8001e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005aa:	f7ff fdd7 	bl	800015c <main>
  bx lr
 80005ae:	4770      	bx	lr
  ldr r0, =_sdata
 80005b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80005b8:	08002acc 	.word	0x08002acc
  ldr r2, =_sbss
 80005bc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80005c0:	20000200 	.word	0x20000200

080005c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005c4:	e7fe      	b.n	80005c4 <ADC1_2_IRQHandler>
	...

080005c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005cc:	4b08      	ldr	r3, [pc, #32]	@ (80005f0 <HAL_Init+0x28>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a07      	ldr	r2, [pc, #28]	@ (80005f0 <HAL_Init+0x28>)
 80005d2:	f043 0310 	orr.w	r3, r3, #16
 80005d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d8:	2003      	movs	r0, #3
 80005da:	f000 fd4f 	bl	800107c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005de:	200f      	movs	r0, #15
 80005e0:	f000 f80e 	bl	8000600 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005e4:	f000 f806 	bl	80005f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005e8:	2300      	movs	r3, #0
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40022000 	.word	0x40022000

080005f4 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr

08000600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000608:	4b12      	ldr	r3, [pc, #72]	@ (8000654 <HAL_InitTick+0x54>)
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	4b12      	ldr	r3, [pc, #72]	@ (8000658 <HAL_InitTick+0x58>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	4619      	mov	r1, r3
 8000612:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000616:	fbb3 f3f1 	udiv	r3, r3, r1
 800061a:	fbb2 f3f3 	udiv	r3, r2, r3
 800061e:	4618      	mov	r0, r3
 8000620:	f000 fd53 	bl	80010ca <HAL_SYSTICK_Config>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800062a:	2301      	movs	r3, #1
 800062c:	e00e      	b.n	800064c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b0f      	cmp	r3, #15
 8000632:	d80a      	bhi.n	800064a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000634:	2200      	movs	r2, #0
 8000636:	6879      	ldr	r1, [r7, #4]
 8000638:	f04f 30ff 	mov.w	r0, #4294967295
 800063c:	f000 fd29 	bl	8001092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000640:	4a06      	ldr	r2, [pc, #24]	@ (800065c <HAL_InitTick+0x5c>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000646:	2300      	movs	r3, #0
 8000648:	e000      	b.n	800064c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800064a:	2301      	movs	r3, #1
}
 800064c:	4618      	mov	r0, r3
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000000 	.word	0x20000000
 8000658:	20000008 	.word	0x20000008
 800065c:	20000004 	.word	0x20000004

08000660 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000664:	4b05      	ldr	r3, [pc, #20]	@ (800067c <HAL_IncTick+0x1c>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	461a      	mov	r2, r3
 800066a:	4b05      	ldr	r3, [pc, #20]	@ (8000680 <HAL_IncTick+0x20>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4413      	add	r3, r2
 8000670:	4a03      	ldr	r2, [pc, #12]	@ (8000680 <HAL_IncTick+0x20>)
 8000672:	6013      	str	r3, [r2, #0]
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	20000008 	.word	0x20000008
 8000680:	200000b0 	.word	0x200000b0

08000684 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  return uwTick;
 8000688:	4b02      	ldr	r3, [pc, #8]	@ (8000694 <HAL_GetTick+0x10>)
 800068a:	681b      	ldr	r3, [r3, #0]
}
 800068c:	4618      	mov	r0, r3
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	200000b0 	.word	0x200000b0

08000698 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d101      	bne.n	80006aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80006a6:	2301      	movs	r3, #1
 80006a8:	e0ed      	b.n	8000886 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d102      	bne.n	80006bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f7ff fe60 	bl	800037c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f042 0201 	orr.w	r2, r2, #1
 80006ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80006cc:	f7ff ffda 	bl	8000684 <HAL_GetTick>
 80006d0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006d2:	e012      	b.n	80006fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006d4:	f7ff ffd6 	bl	8000684 <HAL_GetTick>
 80006d8:	4602      	mov	r2, r0
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	2b0a      	cmp	r3, #10
 80006e0:	d90b      	bls.n	80006fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006e6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2205      	movs	r2, #5
 80006f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
 80006f8:	e0c5      	b.n	8000886 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	f003 0301 	and.w	r3, r3, #1
 8000704:	2b00      	cmp	r3, #0
 8000706:	d0e5      	beq.n	80006d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f022 0202 	bic.w	r2, r2, #2
 8000716:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000718:	f7ff ffb4 	bl	8000684 <HAL_GetTick>
 800071c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800071e:	e012      	b.n	8000746 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000720:	f7ff ffb0 	bl	8000684 <HAL_GetTick>
 8000724:	4602      	mov	r2, r0
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	2b0a      	cmp	r3, #10
 800072c:	d90b      	bls.n	8000746 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000732:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2205      	movs	r2, #5
 800073e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000742:	2301      	movs	r3, #1
 8000744:	e09f      	b.n	8000886 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	f003 0302 	and.w	r3, r3, #2
 8000750:	2b00      	cmp	r3, #0
 8000752:	d1e5      	bne.n	8000720 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	7e1b      	ldrb	r3, [r3, #24]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d108      	bne.n	800076e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	e007      	b.n	800077e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800077c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	7e5b      	ldrb	r3, [r3, #25]
 8000782:	2b01      	cmp	r3, #1
 8000784:	d108      	bne.n	8000798 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	e007      	b.n	80007a8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80007a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	7e9b      	ldrb	r3, [r3, #26]
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d108      	bne.n	80007c2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f042 0220 	orr.w	r2, r2, #32
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	e007      	b.n	80007d2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f022 0220 	bic.w	r2, r2, #32
 80007d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	7edb      	ldrb	r3, [r3, #27]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d108      	bne.n	80007ec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f022 0210 	bic.w	r2, r2, #16
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	e007      	b.n	80007fc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f042 0210 	orr.w	r2, r2, #16
 80007fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	7f1b      	ldrb	r3, [r3, #28]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d108      	bne.n	8000816 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f042 0208 	orr.w	r2, r2, #8
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	e007      	b.n	8000826 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f022 0208 	bic.w	r2, r2, #8
 8000824:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	7f5b      	ldrb	r3, [r3, #29]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d108      	bne.n	8000840 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f042 0204 	orr.w	r2, r2, #4
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	e007      	b.n	8000850 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f022 0204 	bic.w	r2, r2, #4
 800084e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	689a      	ldr	r2, [r3, #8]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	431a      	orrs	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	691b      	ldr	r3, [r3, #16]
 800085e:	431a      	orrs	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	695b      	ldr	r3, [r3, #20]
 8000864:	ea42 0103 	orr.w	r1, r2, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	1e5a      	subs	r2, r3, #1
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	430a      	orrs	r2, r1
 8000874:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2200      	movs	r2, #0
 800087a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2201      	movs	r2, #1
 8000880:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800088e:	b480      	push	{r7}
 8000890:	b087      	sub	sp, #28
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
 8000896:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008a4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80008a6:	7cfb      	ldrb	r3, [r7, #19]
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d003      	beq.n	80008b4 <HAL_CAN_ConfigFilter+0x26>
 80008ac:	7cfb      	ldrb	r3, [r7, #19]
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	f040 80aa 	bne.w	8000a08 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80008ba:	f043 0201 	orr.w	r2, r3, #1
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	695b      	ldr	r3, [r3, #20]
 80008c8:	f003 031f 	and.w	r3, r3, #31
 80008cc:	2201      	movs	r2, #1
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	43db      	mvns	r3, r3
 80008de:	401a      	ands	r2, r3
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d123      	bne.n	8000936 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	43db      	mvns	r3, r3
 80008f8:	401a      	ands	r2, r3
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800090c:	683a      	ldr	r2, [r7, #0]
 800090e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000910:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	3248      	adds	r2, #72	@ 0x48
 8000916:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	689b      	ldr	r3, [r3, #8]
 800091e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800092a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800092c:	6979      	ldr	r1, [r7, #20]
 800092e:	3348      	adds	r3, #72	@ 0x48
 8000930:	00db      	lsls	r3, r3, #3
 8000932:	440b      	add	r3, r1
 8000934:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d122      	bne.n	8000984 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	431a      	orrs	r2, r3
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800095a:	683a      	ldr	r2, [r7, #0]
 800095c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800095e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	3248      	adds	r2, #72	@ 0x48
 8000964:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	68db      	ldr	r3, [r3, #12]
 8000972:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000978:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800097a:	6979      	ldr	r1, [r7, #20]
 800097c:	3348      	adds	r3, #72	@ 0x48
 800097e:	00db      	lsls	r3, r3, #3
 8000980:	440b      	add	r3, r1
 8000982:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d109      	bne.n	80009a0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	43db      	mvns	r3, r3
 8000996:	401a      	ands	r2, r3
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800099e:	e007      	b.n	80009b0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	431a      	orrs	r2, r3
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	691b      	ldr	r3, [r3, #16]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d109      	bne.n	80009cc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	43db      	mvns	r3, r3
 80009c2:	401a      	ands	r2, r3
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80009ca:	e007      	b.n	80009dc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	431a      	orrs	r2, r3
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	6a1b      	ldr	r3, [r3, #32]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d107      	bne.n	80009f4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	431a      	orrs	r2, r3
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80009fa:	f023 0201 	bic.w	r2, r3, #1
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000a04:	2300      	movs	r3, #0
 8000a06:	e006      	b.n	8000a16 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a0c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000a14:	2301      	movs	r3, #1
  }
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	371c      	adds	r7, #28
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr

08000a20 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d12e      	bne.n	8000a92 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2202      	movs	r2, #2
 8000a38:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f022 0201 	bic.w	r2, r2, #1
 8000a4a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000a4c:	f7ff fe1a 	bl	8000684 <HAL_GetTick>
 8000a50:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000a52:	e012      	b.n	8000a7a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a54:	f7ff fe16 	bl	8000684 <HAL_GetTick>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	2b0a      	cmp	r3, #10
 8000a60:	d90b      	bls.n	8000a7a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a66:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2205      	movs	r2, #5
 8000a72:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	e012      	b.n	8000aa0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d1e5      	bne.n	8000a54 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	e006      	b.n	8000aa0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a96:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
  }
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3710      	adds	r7, #16
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b089      	sub	sp, #36	@ 0x24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
 8000ab4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000abc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ac6:	7ffb      	ldrb	r3, [r7, #31]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d003      	beq.n	8000ad4 <HAL_CAN_AddTxMessage+0x2c>
 8000acc:	7ffb      	ldrb	r3, [r7, #31]
 8000ace:	2b02      	cmp	r3, #2
 8000ad0:	f040 80ad 	bne.w	8000c2e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d10a      	bne.n	8000af4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d105      	bne.n	8000af4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	f000 8095 	beq.w	8000c1e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	0e1b      	lsrs	r3, r3, #24
 8000af8:	f003 0303 	and.w	r3, r3, #3
 8000afc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000afe:	2201      	movs	r2, #1
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	409a      	lsls	r2, r3
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d10d      	bne.n	8000b2c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000b1a:	68f9      	ldr	r1, [r7, #12]
 8000b1c:	6809      	ldr	r1, [r1, #0]
 8000b1e:	431a      	orrs	r2, r3
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	3318      	adds	r3, #24
 8000b24:	011b      	lsls	r3, r3, #4
 8000b26:	440b      	add	r3, r1
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	e00f      	b.n	8000b4c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b36:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b3c:	68f9      	ldr	r1, [r7, #12]
 8000b3e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000b40:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	3318      	adds	r3, #24
 8000b46:	011b      	lsls	r3, r3, #4
 8000b48:	440b      	add	r3, r1
 8000b4a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	6819      	ldr	r1, [r3, #0]
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	691a      	ldr	r2, [r3, #16]
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	3318      	adds	r3, #24
 8000b58:	011b      	lsls	r3, r3, #4
 8000b5a:	440b      	add	r3, r1
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	7d1b      	ldrb	r3, [r3, #20]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d111      	bne.n	8000b8c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	3318      	adds	r3, #24
 8000b70:	011b      	lsls	r3, r3, #4
 8000b72:	4413      	add	r3, r2
 8000b74:	3304      	adds	r3, #4
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	68fa      	ldr	r2, [r7, #12]
 8000b7a:	6811      	ldr	r1, [r2, #0]
 8000b7c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	3318      	adds	r3, #24
 8000b84:	011b      	lsls	r3, r3, #4
 8000b86:	440b      	add	r3, r1
 8000b88:	3304      	adds	r3, #4
 8000b8a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3307      	adds	r3, #7
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	061a      	lsls	r2, r3, #24
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3306      	adds	r3, #6
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	041b      	lsls	r3, r3, #16
 8000b9c:	431a      	orrs	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	3305      	adds	r3, #5
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	021b      	lsls	r3, r3, #8
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	3204      	adds	r2, #4
 8000bac:	7812      	ldrb	r2, [r2, #0]
 8000bae:	4610      	mov	r0, r2
 8000bb0:	68fa      	ldr	r2, [r7, #12]
 8000bb2:	6811      	ldr	r1, [r2, #0]
 8000bb4:	ea43 0200 	orr.w	r2, r3, r0
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	011b      	lsls	r3, r3, #4
 8000bbc:	440b      	add	r3, r1
 8000bbe:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000bc2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3303      	adds	r3, #3
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	061a      	lsls	r2, r3, #24
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3302      	adds	r3, #2
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	041b      	lsls	r3, r3, #16
 8000bd4:	431a      	orrs	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	021b      	lsls	r3, r3, #8
 8000bde:	4313      	orrs	r3, r2
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	7812      	ldrb	r2, [r2, #0]
 8000be4:	4610      	mov	r0, r2
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	6811      	ldr	r1, [r2, #0]
 8000bea:	ea43 0200 	orr.w	r2, r3, r0
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	011b      	lsls	r3, r3, #4
 8000bf2:	440b      	add	r3, r1
 8000bf4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000bf8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	3318      	adds	r3, #24
 8000c02:	011b      	lsls	r3, r3, #4
 8000c04:	4413      	add	r3, r2
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	68fa      	ldr	r2, [r7, #12]
 8000c0a:	6811      	ldr	r1, [r2, #0]
 8000c0c:	f043 0201 	orr.w	r2, r3, #1
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	3318      	adds	r3, #24
 8000c14:	011b      	lsls	r3, r3, #4
 8000c16:	440b      	add	r3, r1
 8000c18:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e00e      	b.n	8000c3c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c22:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e006      	b.n	8000c3c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c32:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
  }
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3724      	adds	r7, #36	@ 0x24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr

08000c46 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8000c46:	b480      	push	{r7}
 8000c48:	b085      	sub	sp, #20
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
 8000c4e:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8000c50:	2300      	movs	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c5a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c5c:	7afb      	ldrb	r3, [r7, #11]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d002      	beq.n	8000c68 <HAL_CAN_IsTxMessagePending+0x22>
 8000c62:	7afb      	ldrb	r3, [r7, #11]
 8000c64:	2b02      	cmp	r3, #2
 8000c66:	d10b      	bne.n	8000c80 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	689a      	ldr	r2, [r3, #8]
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	069b      	lsls	r3, r3, #26
 8000c72:	401a      	ands	r2, r3
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	069b      	lsls	r3, r3, #26
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d001      	beq.n	8000c80 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8000c80:	68fb      	ldr	r3, [r7, #12]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3714      	adds	r7, #20
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr

08000c8c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b087      	sub	sp, #28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
 8000c98:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ca0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ca2:	7dfb      	ldrb	r3, [r7, #23]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d003      	beq.n	8000cb0 <HAL_CAN_GetRxMessage+0x24>
 8000ca8:	7dfb      	ldrb	r3, [r7, #23]
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	f040 8103 	bne.w	8000eb6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d10e      	bne.n	8000cd4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	f003 0303 	and.w	r3, r3, #3
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d116      	bne.n	8000cf2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cc8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e0f7      	b.n	8000ec4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	691b      	ldr	r3, [r3, #16]
 8000cda:	f003 0303 	and.w	r3, r3, #3
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d107      	bne.n	8000cf2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ce6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e0e8      	b.n	8000ec4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	331b      	adds	r3, #27
 8000cfa:	011b      	lsls	r3, r3, #4
 8000cfc:	4413      	add	r3, r2
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f003 0204 	and.w	r2, r3, #4
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d10c      	bne.n	8000d2a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	331b      	adds	r3, #27
 8000d18:	011b      	lsls	r3, r3, #4
 8000d1a:	4413      	add	r3, r2
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	0d5b      	lsrs	r3, r3, #21
 8000d20:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	e00b      	b.n	8000d42 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	331b      	adds	r3, #27
 8000d32:	011b      	lsls	r3, r3, #4
 8000d34:	4413      	add	r3, r2
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	08db      	lsrs	r3, r3, #3
 8000d3a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	331b      	adds	r3, #27
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	4413      	add	r3, r2
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f003 0202 	and.w	r2, r3, #2
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	331b      	adds	r3, #27
 8000d60:	011b      	lsls	r3, r3, #4
 8000d62:	4413      	add	r3, r2
 8000d64:	3304      	adds	r3, #4
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f003 0308 	and.w	r3, r3, #8
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d003      	beq.n	8000d78 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2208      	movs	r2, #8
 8000d74:	611a      	str	r2, [r3, #16]
 8000d76:	e00b      	b.n	8000d90 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	331b      	adds	r3, #27
 8000d80:	011b      	lsls	r3, r3, #4
 8000d82:	4413      	add	r3, r2
 8000d84:	3304      	adds	r3, #4
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f003 020f 	and.w	r2, r3, #15
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	331b      	adds	r3, #27
 8000d98:	011b      	lsls	r3, r3, #4
 8000d9a:	4413      	add	r3, r2
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	0a1b      	lsrs	r3, r3, #8
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	331b      	adds	r3, #27
 8000db0:	011b      	lsls	r3, r3, #4
 8000db2:	4413      	add	r3, r2
 8000db4:	3304      	adds	r3, #4
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	0c1b      	lsrs	r3, r3, #16
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	011b      	lsls	r3, r3, #4
 8000dc8:	4413      	add	r3, r2
 8000dca:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	011b      	lsls	r3, r3, #4
 8000dde:	4413      	add	r3, r2
 8000de0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	0a1a      	lsrs	r2, r3, #8
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	3301      	adds	r3, #1
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	011b      	lsls	r3, r3, #4
 8000df8:	4413      	add	r3, r2
 8000dfa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	0c1a      	lsrs	r2, r3, #16
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	3302      	adds	r3, #2
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	011b      	lsls	r3, r3, #4
 8000e12:	4413      	add	r3, r2
 8000e14:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	0e1a      	lsrs	r2, r3, #24
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	3303      	adds	r3, #3
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	011b      	lsls	r3, r3, #4
 8000e2c:	4413      	add	r3, r2
 8000e2e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	3304      	adds	r3, #4
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	011b      	lsls	r3, r3, #4
 8000e44:	4413      	add	r3, r2
 8000e46:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	0a1a      	lsrs	r2, r3, #8
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	3305      	adds	r3, #5
 8000e52:	b2d2      	uxtb	r2, r2
 8000e54:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	011b      	lsls	r3, r3, #4
 8000e5e:	4413      	add	r3, r2
 8000e60:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	0c1a      	lsrs	r2, r3, #16
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	3306      	adds	r3, #6
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	011b      	lsls	r3, r3, #4
 8000e78:	4413      	add	r3, r2
 8000e7a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	0e1a      	lsrs	r2, r3, #24
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	3307      	adds	r3, #7
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d108      	bne.n	8000ea2 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	68da      	ldr	r2, [r3, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f042 0220 	orr.w	r2, r2, #32
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	e007      	b.n	8000eb2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	691a      	ldr	r2, [r3, #16]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f042 0220 	orr.w	r2, r2, #32
 8000eb0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e006      	b.n	8000ec4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eba:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
  }
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	371c      	adds	r7, #28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr

08000ece <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b085      	sub	sp, #20
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
 8000ed6:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ee2:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ee4:	7afb      	ldrb	r3, [r7, #11]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d002      	beq.n	8000ef0 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8000eea:	7afb      	ldrb	r3, [r7, #11]
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d10f      	bne.n	8000f10 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d106      	bne.n	8000f04 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	f003 0303 	and.w	r3, r3, #3
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	e005      	b.n	8000f10 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	691b      	ldr	r3, [r3, #16]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8000f10:	68fb      	ldr	r3, [r7, #12]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4e:	4a04      	ldr	r2, [pc, #16]	@ (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	60d3      	str	r3, [r2, #12]
}
 8000f54:	bf00      	nop
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f68:	4b04      	ldr	r3, [pc, #16]	@ (8000f7c <__NVIC_GetPriorityGrouping+0x18>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	f003 0307 	and.w	r3, r3, #7
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	6039      	str	r1, [r7, #0]
 8000f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	db0a      	blt.n	8000faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	490c      	ldr	r1, [pc, #48]	@ (8000fcc <__NVIC_SetPriority+0x4c>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	0112      	lsls	r2, r2, #4
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa8:	e00a      	b.n	8000fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4908      	ldr	r1, [pc, #32]	@ (8000fd0 <__NVIC_SetPriority+0x50>)
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	f003 030f 	and.w	r3, r3, #15
 8000fb6:	3b04      	subs	r3, #4
 8000fb8:	0112      	lsls	r2, r2, #4
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	761a      	strb	r2, [r3, #24]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000e100 	.word	0xe000e100
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	@ 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f1c3 0307 	rsb	r3, r3, #7
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	bf28      	it	cs
 8000ff2:	2304      	movcs	r3, #4
 8000ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	2b06      	cmp	r3, #6
 8000ffc:	d902      	bls.n	8001004 <NVIC_EncodePriority+0x30>
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3b03      	subs	r3, #3
 8001002:	e000      	b.n	8001006 <NVIC_EncodePriority+0x32>
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	f04f 32ff 	mov.w	r2, #4294967295
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43da      	mvns	r2, r3
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	401a      	ands	r2, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800101c:	f04f 31ff 	mov.w	r1, #4294967295
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa01 f303 	lsl.w	r3, r1, r3
 8001026:	43d9      	mvns	r1, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	4313      	orrs	r3, r2
         );
}
 800102e:	4618      	mov	r0, r3
 8001030:	3724      	adds	r7, #36	@ 0x24
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001048:	d301      	bcc.n	800104e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104a:	2301      	movs	r3, #1
 800104c:	e00f      	b.n	800106e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104e:	4a0a      	ldr	r2, [pc, #40]	@ (8001078 <SysTick_Config+0x40>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001056:	210f      	movs	r1, #15
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	f7ff ff90 	bl	8000f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001060:	4b05      	ldr	r3, [pc, #20]	@ (8001078 <SysTick_Config+0x40>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001066:	4b04      	ldr	r3, [pc, #16]	@ (8001078 <SysTick_Config+0x40>)
 8001068:	2207      	movs	r2, #7
 800106a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	e000e010 	.word	0xe000e010

0800107c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ff49 	bl	8000f1c <__NVIC_SetPriorityGrouping>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001092:	b580      	push	{r7, lr}
 8001094:	b086      	sub	sp, #24
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a4:	f7ff ff5e 	bl	8000f64 <__NVIC_GetPriorityGrouping>
 80010a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	68b9      	ldr	r1, [r7, #8]
 80010ae:	6978      	ldr	r0, [r7, #20]
 80010b0:	f7ff ff90 	bl	8000fd4 <NVIC_EncodePriority>
 80010b4:	4602      	mov	r2, r0
 80010b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ba:	4611      	mov	r1, r2
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff5f 	bl	8000f80 <__NVIC_SetPriority>
}
 80010c2:	bf00      	nop
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ffb0 	bl	8001038 <SysTick_Config>
 80010d8:	4603      	mov	r3, r0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80010e6:	f000 f802 	bl	80010ee <HAL_SYSTICK_Callback>
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
	...

080010fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b08b      	sub	sp, #44	@ 0x2c
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800110a:	2300      	movs	r3, #0
 800110c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800110e:	e169      	b.n	80013e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001110:	2201      	movs	r2, #1
 8001112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	69fa      	ldr	r2, [r7, #28]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	429a      	cmp	r2, r3
 800112a:	f040 8158 	bne.w	80013de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	4a9a      	ldr	r2, [pc, #616]	@ (800139c <HAL_GPIO_Init+0x2a0>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d05e      	beq.n	80011f6 <HAL_GPIO_Init+0xfa>
 8001138:	4a98      	ldr	r2, [pc, #608]	@ (800139c <HAL_GPIO_Init+0x2a0>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d875      	bhi.n	800122a <HAL_GPIO_Init+0x12e>
 800113e:	4a98      	ldr	r2, [pc, #608]	@ (80013a0 <HAL_GPIO_Init+0x2a4>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d058      	beq.n	80011f6 <HAL_GPIO_Init+0xfa>
 8001144:	4a96      	ldr	r2, [pc, #600]	@ (80013a0 <HAL_GPIO_Init+0x2a4>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d86f      	bhi.n	800122a <HAL_GPIO_Init+0x12e>
 800114a:	4a96      	ldr	r2, [pc, #600]	@ (80013a4 <HAL_GPIO_Init+0x2a8>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d052      	beq.n	80011f6 <HAL_GPIO_Init+0xfa>
 8001150:	4a94      	ldr	r2, [pc, #592]	@ (80013a4 <HAL_GPIO_Init+0x2a8>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d869      	bhi.n	800122a <HAL_GPIO_Init+0x12e>
 8001156:	4a94      	ldr	r2, [pc, #592]	@ (80013a8 <HAL_GPIO_Init+0x2ac>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d04c      	beq.n	80011f6 <HAL_GPIO_Init+0xfa>
 800115c:	4a92      	ldr	r2, [pc, #584]	@ (80013a8 <HAL_GPIO_Init+0x2ac>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d863      	bhi.n	800122a <HAL_GPIO_Init+0x12e>
 8001162:	4a92      	ldr	r2, [pc, #584]	@ (80013ac <HAL_GPIO_Init+0x2b0>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d046      	beq.n	80011f6 <HAL_GPIO_Init+0xfa>
 8001168:	4a90      	ldr	r2, [pc, #576]	@ (80013ac <HAL_GPIO_Init+0x2b0>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d85d      	bhi.n	800122a <HAL_GPIO_Init+0x12e>
 800116e:	2b12      	cmp	r3, #18
 8001170:	d82a      	bhi.n	80011c8 <HAL_GPIO_Init+0xcc>
 8001172:	2b12      	cmp	r3, #18
 8001174:	d859      	bhi.n	800122a <HAL_GPIO_Init+0x12e>
 8001176:	a201      	add	r2, pc, #4	@ (adr r2, 800117c <HAL_GPIO_Init+0x80>)
 8001178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117c:	080011f7 	.word	0x080011f7
 8001180:	080011d1 	.word	0x080011d1
 8001184:	080011e3 	.word	0x080011e3
 8001188:	08001225 	.word	0x08001225
 800118c:	0800122b 	.word	0x0800122b
 8001190:	0800122b 	.word	0x0800122b
 8001194:	0800122b 	.word	0x0800122b
 8001198:	0800122b 	.word	0x0800122b
 800119c:	0800122b 	.word	0x0800122b
 80011a0:	0800122b 	.word	0x0800122b
 80011a4:	0800122b 	.word	0x0800122b
 80011a8:	0800122b 	.word	0x0800122b
 80011ac:	0800122b 	.word	0x0800122b
 80011b0:	0800122b 	.word	0x0800122b
 80011b4:	0800122b 	.word	0x0800122b
 80011b8:	0800122b 	.word	0x0800122b
 80011bc:	0800122b 	.word	0x0800122b
 80011c0:	080011d9 	.word	0x080011d9
 80011c4:	080011ed 	.word	0x080011ed
 80011c8:	4a79      	ldr	r2, [pc, #484]	@ (80013b0 <HAL_GPIO_Init+0x2b4>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d013      	beq.n	80011f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011ce:	e02c      	b.n	800122a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	623b      	str	r3, [r7, #32]
          break;
 80011d6:	e029      	b.n	800122c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	3304      	adds	r3, #4
 80011de:	623b      	str	r3, [r7, #32]
          break;
 80011e0:	e024      	b.n	800122c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	3308      	adds	r3, #8
 80011e8:	623b      	str	r3, [r7, #32]
          break;
 80011ea:	e01f      	b.n	800122c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	330c      	adds	r3, #12
 80011f2:	623b      	str	r3, [r7, #32]
          break;
 80011f4:	e01a      	b.n	800122c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d102      	bne.n	8001204 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011fe:	2304      	movs	r3, #4
 8001200:	623b      	str	r3, [r7, #32]
          break;
 8001202:	e013      	b.n	800122c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d105      	bne.n	8001218 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800120c:	2308      	movs	r3, #8
 800120e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69fa      	ldr	r2, [r7, #28]
 8001214:	611a      	str	r2, [r3, #16]
          break;
 8001216:	e009      	b.n	800122c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001218:	2308      	movs	r3, #8
 800121a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	69fa      	ldr	r2, [r7, #28]
 8001220:	615a      	str	r2, [r3, #20]
          break;
 8001222:	e003      	b.n	800122c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001224:	2300      	movs	r3, #0
 8001226:	623b      	str	r3, [r7, #32]
          break;
 8001228:	e000      	b.n	800122c <HAL_GPIO_Init+0x130>
          break;
 800122a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	2bff      	cmp	r3, #255	@ 0xff
 8001230:	d801      	bhi.n	8001236 <HAL_GPIO_Init+0x13a>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	e001      	b.n	800123a <HAL_GPIO_Init+0x13e>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3304      	adds	r3, #4
 800123a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	2bff      	cmp	r3, #255	@ 0xff
 8001240:	d802      	bhi.n	8001248 <HAL_GPIO_Init+0x14c>
 8001242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	e002      	b.n	800124e <HAL_GPIO_Init+0x152>
 8001248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124a:	3b08      	subs	r3, #8
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	210f      	movs	r1, #15
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	fa01 f303 	lsl.w	r3, r1, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	401a      	ands	r2, r3
 8001260:	6a39      	ldr	r1, [r7, #32]
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	fa01 f303 	lsl.w	r3, r1, r3
 8001268:	431a      	orrs	r2, r3
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 80b1 	beq.w	80013de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800127c:	4b4d      	ldr	r3, [pc, #308]	@ (80013b4 <HAL_GPIO_Init+0x2b8>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	4a4c      	ldr	r2, [pc, #304]	@ (80013b4 <HAL_GPIO_Init+0x2b8>)
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	6193      	str	r3, [r2, #24]
 8001288:	4b4a      	ldr	r3, [pc, #296]	@ (80013b4 <HAL_GPIO_Init+0x2b8>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001294:	4a48      	ldr	r2, [pc, #288]	@ (80013b8 <HAL_GPIO_Init+0x2bc>)
 8001296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001298:	089b      	lsrs	r3, r3, #2
 800129a:	3302      	adds	r3, #2
 800129c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	220f      	movs	r2, #15
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	4013      	ands	r3, r2
 80012b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a40      	ldr	r2, [pc, #256]	@ (80013bc <HAL_GPIO_Init+0x2c0>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d013      	beq.n	80012e8 <HAL_GPIO_Init+0x1ec>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a3f      	ldr	r2, [pc, #252]	@ (80013c0 <HAL_GPIO_Init+0x2c4>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d00d      	beq.n	80012e4 <HAL_GPIO_Init+0x1e8>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a3e      	ldr	r2, [pc, #248]	@ (80013c4 <HAL_GPIO_Init+0x2c8>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d007      	beq.n	80012e0 <HAL_GPIO_Init+0x1e4>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a3d      	ldr	r2, [pc, #244]	@ (80013c8 <HAL_GPIO_Init+0x2cc>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d101      	bne.n	80012dc <HAL_GPIO_Init+0x1e0>
 80012d8:	2303      	movs	r3, #3
 80012da:	e006      	b.n	80012ea <HAL_GPIO_Init+0x1ee>
 80012dc:	2304      	movs	r3, #4
 80012de:	e004      	b.n	80012ea <HAL_GPIO_Init+0x1ee>
 80012e0:	2302      	movs	r3, #2
 80012e2:	e002      	b.n	80012ea <HAL_GPIO_Init+0x1ee>
 80012e4:	2301      	movs	r3, #1
 80012e6:	e000      	b.n	80012ea <HAL_GPIO_Init+0x1ee>
 80012e8:	2300      	movs	r3, #0
 80012ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012ec:	f002 0203 	and.w	r2, r2, #3
 80012f0:	0092      	lsls	r2, r2, #2
 80012f2:	4093      	lsls	r3, r2
 80012f4:	68fa      	ldr	r2, [r7, #12]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012fa:	492f      	ldr	r1, [pc, #188]	@ (80013b8 <HAL_GPIO_Init+0x2bc>)
 80012fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012fe:	089b      	lsrs	r3, r3, #2
 8001300:	3302      	adds	r3, #2
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d006      	beq.n	8001322 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001314:	4b2d      	ldr	r3, [pc, #180]	@ (80013cc <HAL_GPIO_Init+0x2d0>)
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	492c      	ldr	r1, [pc, #176]	@ (80013cc <HAL_GPIO_Init+0x2d0>)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	4313      	orrs	r3, r2
 800131e:	608b      	str	r3, [r1, #8]
 8001320:	e006      	b.n	8001330 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001322:	4b2a      	ldr	r3, [pc, #168]	@ (80013cc <HAL_GPIO_Init+0x2d0>)
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	43db      	mvns	r3, r3
 800132a:	4928      	ldr	r1, [pc, #160]	@ (80013cc <HAL_GPIO_Init+0x2d0>)
 800132c:	4013      	ands	r3, r2
 800132e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d006      	beq.n	800134a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800133c:	4b23      	ldr	r3, [pc, #140]	@ (80013cc <HAL_GPIO_Init+0x2d0>)
 800133e:	68da      	ldr	r2, [r3, #12]
 8001340:	4922      	ldr	r1, [pc, #136]	@ (80013cc <HAL_GPIO_Init+0x2d0>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	60cb      	str	r3, [r1, #12]
 8001348:	e006      	b.n	8001358 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800134a:	4b20      	ldr	r3, [pc, #128]	@ (80013cc <HAL_GPIO_Init+0x2d0>)
 800134c:	68da      	ldr	r2, [r3, #12]
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	43db      	mvns	r3, r3
 8001352:	491e      	ldr	r1, [pc, #120]	@ (80013cc <HAL_GPIO_Init+0x2d0>)
 8001354:	4013      	ands	r3, r2
 8001356:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d006      	beq.n	8001372 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001364:	4b19      	ldr	r3, [pc, #100]	@ (80013cc <HAL_GPIO_Init+0x2d0>)
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	4918      	ldr	r1, [pc, #96]	@ (80013cc <HAL_GPIO_Init+0x2d0>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	604b      	str	r3, [r1, #4]
 8001370:	e006      	b.n	8001380 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001372:	4b16      	ldr	r3, [pc, #88]	@ (80013cc <HAL_GPIO_Init+0x2d0>)
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	43db      	mvns	r3, r3
 800137a:	4914      	ldr	r1, [pc, #80]	@ (80013cc <HAL_GPIO_Init+0x2d0>)
 800137c:	4013      	ands	r3, r2
 800137e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d021      	beq.n	80013d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800138c:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <HAL_GPIO_Init+0x2d0>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	490e      	ldr	r1, [pc, #56]	@ (80013cc <HAL_GPIO_Init+0x2d0>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	600b      	str	r3, [r1, #0]
 8001398:	e021      	b.n	80013de <HAL_GPIO_Init+0x2e2>
 800139a:	bf00      	nop
 800139c:	10320000 	.word	0x10320000
 80013a0:	10310000 	.word	0x10310000
 80013a4:	10220000 	.word	0x10220000
 80013a8:	10210000 	.word	0x10210000
 80013ac:	10120000 	.word	0x10120000
 80013b0:	10110000 	.word	0x10110000
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40010000 	.word	0x40010000
 80013bc:	40010800 	.word	0x40010800
 80013c0:	40010c00 	.word	0x40010c00
 80013c4:	40011000 	.word	0x40011000
 80013c8:	40011400 	.word	0x40011400
 80013cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001400 <HAL_GPIO_Init+0x304>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	4909      	ldr	r1, [pc, #36]	@ (8001400 <HAL_GPIO_Init+0x304>)
 80013da:	4013      	ands	r3, r2
 80013dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e0:	3301      	adds	r3, #1
 80013e2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ea:	fa22 f303 	lsr.w	r3, r2, r3
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f47f ae8e 	bne.w	8001110 <HAL_GPIO_Init+0x14>
  }
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	372c      	adds	r7, #44	@ 0x2c
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	40010400 	.word	0x40010400

08001404 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e272      	b.n	80018fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b00      	cmp	r3, #0
 8001420:	f000 8087 	beq.w	8001532 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001424:	4b92      	ldr	r3, [pc, #584]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 030c 	and.w	r3, r3, #12
 800142c:	2b04      	cmp	r3, #4
 800142e:	d00c      	beq.n	800144a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001430:	4b8f      	ldr	r3, [pc, #572]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 030c 	and.w	r3, r3, #12
 8001438:	2b08      	cmp	r3, #8
 800143a:	d112      	bne.n	8001462 <HAL_RCC_OscConfig+0x5e>
 800143c:	4b8c      	ldr	r3, [pc, #560]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001448:	d10b      	bne.n	8001462 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800144a:	4b89      	ldr	r3, [pc, #548]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d06c      	beq.n	8001530 <HAL_RCC_OscConfig+0x12c>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d168      	bne.n	8001530 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e24c      	b.n	80018fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800146a:	d106      	bne.n	800147a <HAL_RCC_OscConfig+0x76>
 800146c:	4b80      	ldr	r3, [pc, #512]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a7f      	ldr	r2, [pc, #508]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 8001472:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	e02e      	b.n	80014d8 <HAL_RCC_OscConfig+0xd4>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d10c      	bne.n	800149c <HAL_RCC_OscConfig+0x98>
 8001482:	4b7b      	ldr	r3, [pc, #492]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a7a      	ldr	r2, [pc, #488]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 8001488:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	4b78      	ldr	r3, [pc, #480]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a77      	ldr	r2, [pc, #476]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 8001494:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e01d      	b.n	80014d8 <HAL_RCC_OscConfig+0xd4>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014a4:	d10c      	bne.n	80014c0 <HAL_RCC_OscConfig+0xbc>
 80014a6:	4b72      	ldr	r3, [pc, #456]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a71      	ldr	r2, [pc, #452]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	4b6f      	ldr	r3, [pc, #444]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a6e      	ldr	r2, [pc, #440]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 80014b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	e00b      	b.n	80014d8 <HAL_RCC_OscConfig+0xd4>
 80014c0:	4b6b      	ldr	r3, [pc, #428]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a6a      	ldr	r2, [pc, #424]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 80014c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b68      	ldr	r3, [pc, #416]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a67      	ldr	r2, [pc, #412]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 80014d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d013      	beq.n	8001508 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e0:	f7ff f8d0 	bl	8000684 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e8:	f7ff f8cc 	bl	8000684 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b64      	cmp	r3, #100	@ 0x64
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e200      	b.n	80018fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f0      	beq.n	80014e8 <HAL_RCC_OscConfig+0xe4>
 8001506:	e014      	b.n	8001532 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001508:	f7ff f8bc 	bl	8000684 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001510:	f7ff f8b8 	bl	8000684 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b64      	cmp	r3, #100	@ 0x64
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e1ec      	b.n	80018fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001522:	4b53      	ldr	r3, [pc, #332]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0x10c>
 800152e:	e000      	b.n	8001532 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d063      	beq.n	8001606 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800153e:	4b4c      	ldr	r3, [pc, #304]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f003 030c 	and.w	r3, r3, #12
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00b      	beq.n	8001562 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800154a:	4b49      	ldr	r3, [pc, #292]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f003 030c 	and.w	r3, r3, #12
 8001552:	2b08      	cmp	r3, #8
 8001554:	d11c      	bne.n	8001590 <HAL_RCC_OscConfig+0x18c>
 8001556:	4b46      	ldr	r3, [pc, #280]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d116      	bne.n	8001590 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001562:	4b43      	ldr	r3, [pc, #268]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d005      	beq.n	800157a <HAL_RCC_OscConfig+0x176>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d001      	beq.n	800157a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e1c0      	b.n	80018fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157a:	4b3d      	ldr	r3, [pc, #244]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	4939      	ldr	r1, [pc, #228]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 800158a:	4313      	orrs	r3, r2
 800158c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158e:	e03a      	b.n	8001606 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d020      	beq.n	80015da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001598:	4b36      	ldr	r3, [pc, #216]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 800159a:	2201      	movs	r2, #1
 800159c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159e:	f7ff f871 	bl	8000684 <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a6:	f7ff f86d 	bl	8000684 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e1a1      	b.n	80018fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0f0      	beq.n	80015a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	4927      	ldr	r1, [pc, #156]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	600b      	str	r3, [r1, #0]
 80015d8:	e015      	b.n	8001606 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015da:	4b26      	ldr	r3, [pc, #152]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e0:	f7ff f850 	bl	8000684 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e8:	f7ff f84c 	bl	8000684 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e180      	b.n	80018fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f0      	bne.n	80015e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	2b00      	cmp	r3, #0
 8001610:	d03a      	beq.n	8001688 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d019      	beq.n	800164e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800161a:	4b17      	ldr	r3, [pc, #92]	@ (8001678 <HAL_RCC_OscConfig+0x274>)
 800161c:	2201      	movs	r2, #1
 800161e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001620:	f7ff f830 	bl	8000684 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001628:	f7ff f82c 	bl	8000684 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e160      	b.n	80018fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163a:	4b0d      	ldr	r3, [pc, #52]	@ (8001670 <HAL_RCC_OscConfig+0x26c>)
 800163c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f0      	beq.n	8001628 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001646:	2001      	movs	r0, #1
 8001648:	f000 fa9c 	bl	8001b84 <RCC_Delay>
 800164c:	e01c      	b.n	8001688 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800164e:	4b0a      	ldr	r3, [pc, #40]	@ (8001678 <HAL_RCC_OscConfig+0x274>)
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001654:	f7ff f816 	bl	8000684 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800165a:	e00f      	b.n	800167c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800165c:	f7ff f812 	bl	8000684 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d908      	bls.n	800167c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e146      	b.n	80018fc <HAL_RCC_OscConfig+0x4f8>
 800166e:	bf00      	nop
 8001670:	40021000 	.word	0x40021000
 8001674:	42420000 	.word	0x42420000
 8001678:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800167c:	4b92      	ldr	r3, [pc, #584]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 800167e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1e9      	bne.n	800165c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 80a6 	beq.w	80017e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001696:	2300      	movs	r3, #0
 8001698:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800169a:	4b8b      	ldr	r3, [pc, #556]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10d      	bne.n	80016c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	4b88      	ldr	r3, [pc, #544]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	4a87      	ldr	r2, [pc, #540]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 80016ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016b0:	61d3      	str	r3, [r2, #28]
 80016b2:	4b85      	ldr	r3, [pc, #532]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016be:	2301      	movs	r3, #1
 80016c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c2:	4b82      	ldr	r3, [pc, #520]	@ (80018cc <HAL_RCC_OscConfig+0x4c8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d118      	bne.n	8001700 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ce:	4b7f      	ldr	r3, [pc, #508]	@ (80018cc <HAL_RCC_OscConfig+0x4c8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a7e      	ldr	r2, [pc, #504]	@ (80018cc <HAL_RCC_OscConfig+0x4c8>)
 80016d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016da:	f7fe ffd3 	bl	8000684 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e2:	f7fe ffcf 	bl	8000684 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b64      	cmp	r3, #100	@ 0x64
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e103      	b.n	80018fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f4:	4b75      	ldr	r3, [pc, #468]	@ (80018cc <HAL_RCC_OscConfig+0x4c8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d106      	bne.n	8001716 <HAL_RCC_OscConfig+0x312>
 8001708:	4b6f      	ldr	r3, [pc, #444]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	4a6e      	ldr	r2, [pc, #440]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	6213      	str	r3, [r2, #32]
 8001714:	e02d      	b.n	8001772 <HAL_RCC_OscConfig+0x36e>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10c      	bne.n	8001738 <HAL_RCC_OscConfig+0x334>
 800171e:	4b6a      	ldr	r3, [pc, #424]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	4a69      	ldr	r2, [pc, #420]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 8001724:	f023 0301 	bic.w	r3, r3, #1
 8001728:	6213      	str	r3, [r2, #32]
 800172a:	4b67      	ldr	r3, [pc, #412]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	4a66      	ldr	r2, [pc, #408]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 8001730:	f023 0304 	bic.w	r3, r3, #4
 8001734:	6213      	str	r3, [r2, #32]
 8001736:	e01c      	b.n	8001772 <HAL_RCC_OscConfig+0x36e>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	2b05      	cmp	r3, #5
 800173e:	d10c      	bne.n	800175a <HAL_RCC_OscConfig+0x356>
 8001740:	4b61      	ldr	r3, [pc, #388]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	4a60      	ldr	r2, [pc, #384]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 8001746:	f043 0304 	orr.w	r3, r3, #4
 800174a:	6213      	str	r3, [r2, #32]
 800174c:	4b5e      	ldr	r3, [pc, #376]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	4a5d      	ldr	r2, [pc, #372]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	6213      	str	r3, [r2, #32]
 8001758:	e00b      	b.n	8001772 <HAL_RCC_OscConfig+0x36e>
 800175a:	4b5b      	ldr	r3, [pc, #364]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 800175c:	6a1b      	ldr	r3, [r3, #32]
 800175e:	4a5a      	ldr	r2, [pc, #360]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 8001760:	f023 0301 	bic.w	r3, r3, #1
 8001764:	6213      	str	r3, [r2, #32]
 8001766:	4b58      	ldr	r3, [pc, #352]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	4a57      	ldr	r2, [pc, #348]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 800176c:	f023 0304 	bic.w	r3, r3, #4
 8001770:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d015      	beq.n	80017a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177a:	f7fe ff83 	bl	8000684 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001780:	e00a      	b.n	8001798 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001782:	f7fe ff7f 	bl	8000684 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001790:	4293      	cmp	r3, r2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e0b1      	b.n	80018fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001798:	4b4b      	ldr	r3, [pc, #300]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0ee      	beq.n	8001782 <HAL_RCC_OscConfig+0x37e>
 80017a4:	e014      	b.n	80017d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a6:	f7fe ff6d 	bl	8000684 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ac:	e00a      	b.n	80017c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ae:	f7fe ff69 	bl	8000684 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017bc:	4293      	cmp	r3, r2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e09b      	b.n	80018fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c4:	4b40      	ldr	r3, [pc, #256]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1ee      	bne.n	80017ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017d0:	7dfb      	ldrb	r3, [r7, #23]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d105      	bne.n	80017e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017d6:	4b3c      	ldr	r3, [pc, #240]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	4a3b      	ldr	r2, [pc, #236]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 80017dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 8087 	beq.w	80018fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017ec:	4b36      	ldr	r3, [pc, #216]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 030c 	and.w	r3, r3, #12
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d061      	beq.n	80018bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69db      	ldr	r3, [r3, #28]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d146      	bne.n	800188e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001800:	4b33      	ldr	r3, [pc, #204]	@ (80018d0 <HAL_RCC_OscConfig+0x4cc>)
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001806:	f7fe ff3d 	bl	8000684 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800180e:	f7fe ff39 	bl	8000684 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e06d      	b.n	80018fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001820:	4b29      	ldr	r3, [pc, #164]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1f0      	bne.n	800180e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001834:	d108      	bne.n	8001848 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001836:	4b24      	ldr	r3, [pc, #144]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	4921      	ldr	r1, [pc, #132]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 8001844:	4313      	orrs	r3, r2
 8001846:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001848:	4b1f      	ldr	r3, [pc, #124]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a19      	ldr	r1, [r3, #32]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001858:	430b      	orrs	r3, r1
 800185a:	491b      	ldr	r1, [pc, #108]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 800185c:	4313      	orrs	r3, r2
 800185e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001860:	4b1b      	ldr	r3, [pc, #108]	@ (80018d0 <HAL_RCC_OscConfig+0x4cc>)
 8001862:	2201      	movs	r2, #1
 8001864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001866:	f7fe ff0d 	bl	8000684 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186e:	f7fe ff09 	bl	8000684 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e03d      	b.n	80018fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001880:	4b11      	ldr	r3, [pc, #68]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0f0      	beq.n	800186e <HAL_RCC_OscConfig+0x46a>
 800188c:	e035      	b.n	80018fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188e:	4b10      	ldr	r3, [pc, #64]	@ (80018d0 <HAL_RCC_OscConfig+0x4cc>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7fe fef6 	bl	8000684 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189c:	f7fe fef2 	bl	8000684 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e026      	b.n	80018fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ae:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <HAL_RCC_OscConfig+0x4c4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x498>
 80018ba:	e01e      	b.n	80018fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69db      	ldr	r3, [r3, #28]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d107      	bne.n	80018d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e019      	b.n	80018fc <HAL_RCC_OscConfig+0x4f8>
 80018c8:	40021000 	.word	0x40021000
 80018cc:	40007000 	.word	0x40007000
 80018d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <HAL_RCC_OscConfig+0x500>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d106      	bne.n	80018f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d001      	beq.n	80018fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e000      	b.n	80018fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40021000 	.word	0x40021000

08001908 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e0d0      	b.n	8001abe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800191c:	4b6a      	ldr	r3, [pc, #424]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d910      	bls.n	800194c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192a:	4b67      	ldr	r3, [pc, #412]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f023 0207 	bic.w	r2, r3, #7
 8001932:	4965      	ldr	r1, [pc, #404]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	4313      	orrs	r3, r2
 8001938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800193a:	4b63      	ldr	r3, [pc, #396]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d001      	beq.n	800194c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e0b8      	b.n	8001abe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d020      	beq.n	800199a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	d005      	beq.n	8001970 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001964:	4b59      	ldr	r3, [pc, #356]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	4a58      	ldr	r2, [pc, #352]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 800196a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800196e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800197c:	4b53      	ldr	r3, [pc, #332]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	4a52      	ldr	r2, [pc, #328]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 8001982:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001986:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001988:	4b50      	ldr	r3, [pc, #320]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	494d      	ldr	r1, [pc, #308]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 8001996:	4313      	orrs	r3, r2
 8001998:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d040      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d107      	bne.n	80019be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ae:	4b47      	ldr	r3, [pc, #284]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d115      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e07f      	b.n	8001abe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d107      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c6:	4b41      	ldr	r3, [pc, #260]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d109      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e073      	b.n	8001abe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d6:	4b3d      	ldr	r3, [pc, #244]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e06b      	b.n	8001abe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019e6:	4b39      	ldr	r3, [pc, #228]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f023 0203 	bic.w	r2, r3, #3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	4936      	ldr	r1, [pc, #216]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019f8:	f7fe fe44 	bl	8000684 <HAL_GetTick>
 80019fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fe:	e00a      	b.n	8001a16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a00:	f7fe fe40 	bl	8000684 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e053      	b.n	8001abe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a16:	4b2d      	ldr	r3, [pc, #180]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 020c 	and.w	r2, r3, #12
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d1eb      	bne.n	8001a00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a28:	4b27      	ldr	r3, [pc, #156]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0307 	and.w	r3, r3, #7
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d210      	bcs.n	8001a58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a36:	4b24      	ldr	r3, [pc, #144]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f023 0207 	bic.w	r2, r3, #7
 8001a3e:	4922      	ldr	r1, [pc, #136]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a46:	4b20      	ldr	r3, [pc, #128]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d001      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e032      	b.n	8001abe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d008      	beq.n	8001a76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a64:	4b19      	ldr	r3, [pc, #100]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	4916      	ldr	r1, [pc, #88]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d009      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a82:	4b12      	ldr	r3, [pc, #72]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	490e      	ldr	r1, [pc, #56]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a96:	f000 f821 	bl	8001adc <HAL_RCC_GetSysClockFreq>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001acc <HAL_RCC_ClockConfig+0x1c4>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	091b      	lsrs	r3, r3, #4
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	490a      	ldr	r1, [pc, #40]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8001aa8:	5ccb      	ldrb	r3, [r1, r3]
 8001aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8001aae:	4a09      	ldr	r2, [pc, #36]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1cc>)
 8001ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ab2:	4b09      	ldr	r3, [pc, #36]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1d0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fda2 	bl	8000600 <HAL_InitTick>

  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40022000 	.word	0x40022000
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	08002a6c 	.word	0x08002a6c
 8001ad4:	20000000 	.word	0x20000000
 8001ad8:	20000004 	.word	0x20000004

08001adc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b087      	sub	sp, #28
 8001ae0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	2300      	movs	r3, #0
 8001af0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001af6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x94>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f003 030c 	and.w	r3, r3, #12
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	d002      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0x30>
 8001b06:	2b08      	cmp	r3, #8
 8001b08:	d003      	beq.n	8001b12 <HAL_RCC_GetSysClockFreq+0x36>
 8001b0a:	e027      	b.n	8001b5c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b0c:	4b19      	ldr	r3, [pc, #100]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b0e:	613b      	str	r3, [r7, #16]
      break;
 8001b10:	e027      	b.n	8001b62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	0c9b      	lsrs	r3, r3, #18
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	4a17      	ldr	r2, [pc, #92]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b1c:	5cd3      	ldrb	r3, [r2, r3]
 8001b1e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d010      	beq.n	8001b4c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b2a:	4b11      	ldr	r3, [pc, #68]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	0c5b      	lsrs	r3, r3, #17
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	4a11      	ldr	r2, [pc, #68]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b36:	5cd3      	ldrb	r3, [r2, r3]
 8001b38:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b3e:	fb03 f202 	mul.w	r2, r3, r2
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	e004      	b.n	8001b56 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a0c      	ldr	r2, [pc, #48]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b50:	fb02 f303 	mul.w	r3, r2, r3
 8001b54:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	613b      	str	r3, [r7, #16]
      break;
 8001b5a:	e002      	b.n	8001b62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b5c:	4b05      	ldr	r3, [pc, #20]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b5e:	613b      	str	r3, [r7, #16]
      break;
 8001b60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b62:	693b      	ldr	r3, [r7, #16]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	371c      	adds	r7, #28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40021000 	.word	0x40021000
 8001b74:	007a1200 	.word	0x007a1200
 8001b78:	08002a7c 	.word	0x08002a7c
 8001b7c:	08002a8c 	.word	0x08002a8c
 8001b80:	003d0900 	.word	0x003d0900

08001b84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb8 <RCC_Delay+0x34>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a0a      	ldr	r2, [pc, #40]	@ (8001bbc <RCC_Delay+0x38>)
 8001b92:	fba2 2303 	umull	r2, r3, r2, r3
 8001b96:	0a5b      	lsrs	r3, r3, #9
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	fb02 f303 	mul.w	r3, r2, r3
 8001b9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ba0:	bf00      	nop
  }
  while (Delay --);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1e5a      	subs	r2, r3, #1
 8001ba6:	60fa      	str	r2, [r7, #12]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1f9      	bne.n	8001ba0 <RCC_Delay+0x1c>
}
 8001bac:	bf00      	nop
 8001bae:	bf00      	nop
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	10624dd3 	.word	0x10624dd3

08001bc0 <std>:
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	b510      	push	{r4, lr}
 8001bc4:	4604      	mov	r4, r0
 8001bc6:	e9c0 3300 	strd	r3, r3, [r0]
 8001bca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001bce:	6083      	str	r3, [r0, #8]
 8001bd0:	8181      	strh	r1, [r0, #12]
 8001bd2:	6643      	str	r3, [r0, #100]	@ 0x64
 8001bd4:	81c2      	strh	r2, [r0, #14]
 8001bd6:	6183      	str	r3, [r0, #24]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	2208      	movs	r2, #8
 8001bdc:	305c      	adds	r0, #92	@ 0x5c
 8001bde:	f000 f906 	bl	8001dee <memset>
 8001be2:	4b0d      	ldr	r3, [pc, #52]	@ (8001c18 <std+0x58>)
 8001be4:	6224      	str	r4, [r4, #32]
 8001be6:	6263      	str	r3, [r4, #36]	@ 0x24
 8001be8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c1c <std+0x5c>)
 8001bea:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001bec:	4b0c      	ldr	r3, [pc, #48]	@ (8001c20 <std+0x60>)
 8001bee:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c24 <std+0x64>)
 8001bf2:	6323      	str	r3, [r4, #48]	@ 0x30
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c28 <std+0x68>)
 8001bf6:	429c      	cmp	r4, r3
 8001bf8:	d006      	beq.n	8001c08 <std+0x48>
 8001bfa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001bfe:	4294      	cmp	r4, r2
 8001c00:	d002      	beq.n	8001c08 <std+0x48>
 8001c02:	33d0      	adds	r3, #208	@ 0xd0
 8001c04:	429c      	cmp	r4, r3
 8001c06:	d105      	bne.n	8001c14 <std+0x54>
 8001c08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c10:	f000 b966 	b.w	8001ee0 <__retarget_lock_init_recursive>
 8001c14:	bd10      	pop	{r4, pc}
 8001c16:	bf00      	nop
 8001c18:	08001d69 	.word	0x08001d69
 8001c1c:	08001d8b 	.word	0x08001d8b
 8001c20:	08001dc3 	.word	0x08001dc3
 8001c24:	08001de7 	.word	0x08001de7
 8001c28:	200000b4 	.word	0x200000b4

08001c2c <stdio_exit_handler>:
 8001c2c:	4a02      	ldr	r2, [pc, #8]	@ (8001c38 <stdio_exit_handler+0xc>)
 8001c2e:	4903      	ldr	r1, [pc, #12]	@ (8001c3c <stdio_exit_handler+0x10>)
 8001c30:	4803      	ldr	r0, [pc, #12]	@ (8001c40 <stdio_exit_handler+0x14>)
 8001c32:	f000 b869 	b.w	8001d08 <_fwalk_sglue>
 8001c36:	bf00      	nop
 8001c38:	2000000c 	.word	0x2000000c
 8001c3c:	08002775 	.word	0x08002775
 8001c40:	2000001c 	.word	0x2000001c

08001c44 <cleanup_stdio>:
 8001c44:	6841      	ldr	r1, [r0, #4]
 8001c46:	4b0c      	ldr	r3, [pc, #48]	@ (8001c78 <cleanup_stdio+0x34>)
 8001c48:	b510      	push	{r4, lr}
 8001c4a:	4299      	cmp	r1, r3
 8001c4c:	4604      	mov	r4, r0
 8001c4e:	d001      	beq.n	8001c54 <cleanup_stdio+0x10>
 8001c50:	f000 fd90 	bl	8002774 <_fflush_r>
 8001c54:	68a1      	ldr	r1, [r4, #8]
 8001c56:	4b09      	ldr	r3, [pc, #36]	@ (8001c7c <cleanup_stdio+0x38>)
 8001c58:	4299      	cmp	r1, r3
 8001c5a:	d002      	beq.n	8001c62 <cleanup_stdio+0x1e>
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	f000 fd89 	bl	8002774 <_fflush_r>
 8001c62:	68e1      	ldr	r1, [r4, #12]
 8001c64:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <cleanup_stdio+0x3c>)
 8001c66:	4299      	cmp	r1, r3
 8001c68:	d004      	beq.n	8001c74 <cleanup_stdio+0x30>
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c70:	f000 bd80 	b.w	8002774 <_fflush_r>
 8001c74:	bd10      	pop	{r4, pc}
 8001c76:	bf00      	nop
 8001c78:	200000b4 	.word	0x200000b4
 8001c7c:	2000011c 	.word	0x2000011c
 8001c80:	20000184 	.word	0x20000184

08001c84 <global_stdio_init.part.0>:
 8001c84:	b510      	push	{r4, lr}
 8001c86:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb4 <global_stdio_init.part.0+0x30>)
 8001c88:	4c0b      	ldr	r4, [pc, #44]	@ (8001cb8 <global_stdio_init.part.0+0x34>)
 8001c8a:	4a0c      	ldr	r2, [pc, #48]	@ (8001cbc <global_stdio_init.part.0+0x38>)
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	2104      	movs	r1, #4
 8001c92:	2200      	movs	r2, #0
 8001c94:	f7ff ff94 	bl	8001bc0 <std>
 8001c98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	2109      	movs	r1, #9
 8001ca0:	f7ff ff8e 	bl	8001bc0 <std>
 8001ca4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001ca8:	2202      	movs	r2, #2
 8001caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001cae:	2112      	movs	r1, #18
 8001cb0:	f7ff bf86 	b.w	8001bc0 <std>
 8001cb4:	200001ec 	.word	0x200001ec
 8001cb8:	200000b4 	.word	0x200000b4
 8001cbc:	08001c2d 	.word	0x08001c2d

08001cc0 <__sfp_lock_acquire>:
 8001cc0:	4801      	ldr	r0, [pc, #4]	@ (8001cc8 <__sfp_lock_acquire+0x8>)
 8001cc2:	f000 b90e 	b.w	8001ee2 <__retarget_lock_acquire_recursive>
 8001cc6:	bf00      	nop
 8001cc8:	200001f5 	.word	0x200001f5

08001ccc <__sfp_lock_release>:
 8001ccc:	4801      	ldr	r0, [pc, #4]	@ (8001cd4 <__sfp_lock_release+0x8>)
 8001cce:	f000 b909 	b.w	8001ee4 <__retarget_lock_release_recursive>
 8001cd2:	bf00      	nop
 8001cd4:	200001f5 	.word	0x200001f5

08001cd8 <__sinit>:
 8001cd8:	b510      	push	{r4, lr}
 8001cda:	4604      	mov	r4, r0
 8001cdc:	f7ff fff0 	bl	8001cc0 <__sfp_lock_acquire>
 8001ce0:	6a23      	ldr	r3, [r4, #32]
 8001ce2:	b11b      	cbz	r3, 8001cec <__sinit+0x14>
 8001ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ce8:	f7ff bff0 	b.w	8001ccc <__sfp_lock_release>
 8001cec:	4b04      	ldr	r3, [pc, #16]	@ (8001d00 <__sinit+0x28>)
 8001cee:	6223      	str	r3, [r4, #32]
 8001cf0:	4b04      	ldr	r3, [pc, #16]	@ (8001d04 <__sinit+0x2c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1f5      	bne.n	8001ce4 <__sinit+0xc>
 8001cf8:	f7ff ffc4 	bl	8001c84 <global_stdio_init.part.0>
 8001cfc:	e7f2      	b.n	8001ce4 <__sinit+0xc>
 8001cfe:	bf00      	nop
 8001d00:	08001c45 	.word	0x08001c45
 8001d04:	200001ec 	.word	0x200001ec

08001d08 <_fwalk_sglue>:
 8001d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d0c:	4607      	mov	r7, r0
 8001d0e:	4688      	mov	r8, r1
 8001d10:	4614      	mov	r4, r2
 8001d12:	2600      	movs	r6, #0
 8001d14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001d18:	f1b9 0901 	subs.w	r9, r9, #1
 8001d1c:	d505      	bpl.n	8001d2a <_fwalk_sglue+0x22>
 8001d1e:	6824      	ldr	r4, [r4, #0]
 8001d20:	2c00      	cmp	r4, #0
 8001d22:	d1f7      	bne.n	8001d14 <_fwalk_sglue+0xc>
 8001d24:	4630      	mov	r0, r6
 8001d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d2a:	89ab      	ldrh	r3, [r5, #12]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d907      	bls.n	8001d40 <_fwalk_sglue+0x38>
 8001d30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001d34:	3301      	adds	r3, #1
 8001d36:	d003      	beq.n	8001d40 <_fwalk_sglue+0x38>
 8001d38:	4629      	mov	r1, r5
 8001d3a:	4638      	mov	r0, r7
 8001d3c:	47c0      	blx	r8
 8001d3e:	4306      	orrs	r6, r0
 8001d40:	3568      	adds	r5, #104	@ 0x68
 8001d42:	e7e9      	b.n	8001d18 <_fwalk_sglue+0x10>

08001d44 <iprintf>:
 8001d44:	b40f      	push	{r0, r1, r2, r3}
 8001d46:	b507      	push	{r0, r1, r2, lr}
 8001d48:	4906      	ldr	r1, [pc, #24]	@ (8001d64 <iprintf+0x20>)
 8001d4a:	ab04      	add	r3, sp, #16
 8001d4c:	6808      	ldr	r0, [r1, #0]
 8001d4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001d52:	6881      	ldr	r1, [r0, #8]
 8001d54:	9301      	str	r3, [sp, #4]
 8001d56:	f000 f9e5 	bl	8002124 <_vfiprintf_r>
 8001d5a:	b003      	add	sp, #12
 8001d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001d60:	b004      	add	sp, #16
 8001d62:	4770      	bx	lr
 8001d64:	20000018 	.word	0x20000018

08001d68 <__sread>:
 8001d68:	b510      	push	{r4, lr}
 8001d6a:	460c      	mov	r4, r1
 8001d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d70:	f000 f868 	bl	8001e44 <_read_r>
 8001d74:	2800      	cmp	r0, #0
 8001d76:	bfab      	itete	ge
 8001d78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001d7a:	89a3      	ldrhlt	r3, [r4, #12]
 8001d7c:	181b      	addge	r3, r3, r0
 8001d7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001d82:	bfac      	ite	ge
 8001d84:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001d86:	81a3      	strhlt	r3, [r4, #12]
 8001d88:	bd10      	pop	{r4, pc}

08001d8a <__swrite>:
 8001d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d8e:	461f      	mov	r7, r3
 8001d90:	898b      	ldrh	r3, [r1, #12]
 8001d92:	4605      	mov	r5, r0
 8001d94:	05db      	lsls	r3, r3, #23
 8001d96:	460c      	mov	r4, r1
 8001d98:	4616      	mov	r6, r2
 8001d9a:	d505      	bpl.n	8001da8 <__swrite+0x1e>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001da4:	f000 f83c 	bl	8001e20 <_lseek_r>
 8001da8:	89a3      	ldrh	r3, [r4, #12]
 8001daa:	4632      	mov	r2, r6
 8001dac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001db0:	81a3      	strh	r3, [r4, #12]
 8001db2:	4628      	mov	r0, r5
 8001db4:	463b      	mov	r3, r7
 8001db6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001dba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001dbe:	f000 b853 	b.w	8001e68 <_write_r>

08001dc2 <__sseek>:
 8001dc2:	b510      	push	{r4, lr}
 8001dc4:	460c      	mov	r4, r1
 8001dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001dca:	f000 f829 	bl	8001e20 <_lseek_r>
 8001dce:	1c43      	adds	r3, r0, #1
 8001dd0:	89a3      	ldrh	r3, [r4, #12]
 8001dd2:	bf15      	itete	ne
 8001dd4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001dd6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001dda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001dde:	81a3      	strheq	r3, [r4, #12]
 8001de0:	bf18      	it	ne
 8001de2:	81a3      	strhne	r3, [r4, #12]
 8001de4:	bd10      	pop	{r4, pc}

08001de6 <__sclose>:
 8001de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001dea:	f000 b809 	b.w	8001e00 <_close_r>

08001dee <memset>:
 8001dee:	4603      	mov	r3, r0
 8001df0:	4402      	add	r2, r0
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d100      	bne.n	8001df8 <memset+0xa>
 8001df6:	4770      	bx	lr
 8001df8:	f803 1b01 	strb.w	r1, [r3], #1
 8001dfc:	e7f9      	b.n	8001df2 <memset+0x4>
	...

08001e00 <_close_r>:
 8001e00:	b538      	push	{r3, r4, r5, lr}
 8001e02:	2300      	movs	r3, #0
 8001e04:	4d05      	ldr	r5, [pc, #20]	@ (8001e1c <_close_r+0x1c>)
 8001e06:	4604      	mov	r4, r0
 8001e08:	4608      	mov	r0, r1
 8001e0a:	602b      	str	r3, [r5, #0]
 8001e0c:	f7fe fb49 	bl	80004a2 <_close>
 8001e10:	1c43      	adds	r3, r0, #1
 8001e12:	d102      	bne.n	8001e1a <_close_r+0x1a>
 8001e14:	682b      	ldr	r3, [r5, #0]
 8001e16:	b103      	cbz	r3, 8001e1a <_close_r+0x1a>
 8001e18:	6023      	str	r3, [r4, #0]
 8001e1a:	bd38      	pop	{r3, r4, r5, pc}
 8001e1c:	200001f0 	.word	0x200001f0

08001e20 <_lseek_r>:
 8001e20:	b538      	push	{r3, r4, r5, lr}
 8001e22:	4604      	mov	r4, r0
 8001e24:	4608      	mov	r0, r1
 8001e26:	4611      	mov	r1, r2
 8001e28:	2200      	movs	r2, #0
 8001e2a:	4d05      	ldr	r5, [pc, #20]	@ (8001e40 <_lseek_r+0x20>)
 8001e2c:	602a      	str	r2, [r5, #0]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	f7fe fb5b 	bl	80004ea <_lseek>
 8001e34:	1c43      	adds	r3, r0, #1
 8001e36:	d102      	bne.n	8001e3e <_lseek_r+0x1e>
 8001e38:	682b      	ldr	r3, [r5, #0]
 8001e3a:	b103      	cbz	r3, 8001e3e <_lseek_r+0x1e>
 8001e3c:	6023      	str	r3, [r4, #0]
 8001e3e:	bd38      	pop	{r3, r4, r5, pc}
 8001e40:	200001f0 	.word	0x200001f0

08001e44 <_read_r>:
 8001e44:	b538      	push	{r3, r4, r5, lr}
 8001e46:	4604      	mov	r4, r0
 8001e48:	4608      	mov	r0, r1
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	4d05      	ldr	r5, [pc, #20]	@ (8001e64 <_read_r+0x20>)
 8001e50:	602a      	str	r2, [r5, #0]
 8001e52:	461a      	mov	r2, r3
 8001e54:	f7fe faec 	bl	8000430 <_read>
 8001e58:	1c43      	adds	r3, r0, #1
 8001e5a:	d102      	bne.n	8001e62 <_read_r+0x1e>
 8001e5c:	682b      	ldr	r3, [r5, #0]
 8001e5e:	b103      	cbz	r3, 8001e62 <_read_r+0x1e>
 8001e60:	6023      	str	r3, [r4, #0]
 8001e62:	bd38      	pop	{r3, r4, r5, pc}
 8001e64:	200001f0 	.word	0x200001f0

08001e68 <_write_r>:
 8001e68:	b538      	push	{r3, r4, r5, lr}
 8001e6a:	4604      	mov	r4, r0
 8001e6c:	4608      	mov	r0, r1
 8001e6e:	4611      	mov	r1, r2
 8001e70:	2200      	movs	r2, #0
 8001e72:	4d05      	ldr	r5, [pc, #20]	@ (8001e88 <_write_r+0x20>)
 8001e74:	602a      	str	r2, [r5, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	f7fe faf7 	bl	800046a <_write>
 8001e7c:	1c43      	adds	r3, r0, #1
 8001e7e:	d102      	bne.n	8001e86 <_write_r+0x1e>
 8001e80:	682b      	ldr	r3, [r5, #0]
 8001e82:	b103      	cbz	r3, 8001e86 <_write_r+0x1e>
 8001e84:	6023      	str	r3, [r4, #0]
 8001e86:	bd38      	pop	{r3, r4, r5, pc}
 8001e88:	200001f0 	.word	0x200001f0

08001e8c <__errno>:
 8001e8c:	4b01      	ldr	r3, [pc, #4]	@ (8001e94 <__errno+0x8>)
 8001e8e:	6818      	ldr	r0, [r3, #0]
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	20000018 	.word	0x20000018

08001e98 <__libc_init_array>:
 8001e98:	b570      	push	{r4, r5, r6, lr}
 8001e9a:	2600      	movs	r6, #0
 8001e9c:	4d0c      	ldr	r5, [pc, #48]	@ (8001ed0 <__libc_init_array+0x38>)
 8001e9e:	4c0d      	ldr	r4, [pc, #52]	@ (8001ed4 <__libc_init_array+0x3c>)
 8001ea0:	1b64      	subs	r4, r4, r5
 8001ea2:	10a4      	asrs	r4, r4, #2
 8001ea4:	42a6      	cmp	r6, r4
 8001ea6:	d109      	bne.n	8001ebc <__libc_init_array+0x24>
 8001ea8:	f000 fdc2 	bl	8002a30 <_init>
 8001eac:	2600      	movs	r6, #0
 8001eae:	4d0a      	ldr	r5, [pc, #40]	@ (8001ed8 <__libc_init_array+0x40>)
 8001eb0:	4c0a      	ldr	r4, [pc, #40]	@ (8001edc <__libc_init_array+0x44>)
 8001eb2:	1b64      	subs	r4, r4, r5
 8001eb4:	10a4      	asrs	r4, r4, #2
 8001eb6:	42a6      	cmp	r6, r4
 8001eb8:	d105      	bne.n	8001ec6 <__libc_init_array+0x2e>
 8001eba:	bd70      	pop	{r4, r5, r6, pc}
 8001ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ec0:	4798      	blx	r3
 8001ec2:	3601      	adds	r6, #1
 8001ec4:	e7ee      	b.n	8001ea4 <__libc_init_array+0xc>
 8001ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001eca:	4798      	blx	r3
 8001ecc:	3601      	adds	r6, #1
 8001ece:	e7f2      	b.n	8001eb6 <__libc_init_array+0x1e>
 8001ed0:	08002ac4 	.word	0x08002ac4
 8001ed4:	08002ac4 	.word	0x08002ac4
 8001ed8:	08002ac4 	.word	0x08002ac4
 8001edc:	08002ac8 	.word	0x08002ac8

08001ee0 <__retarget_lock_init_recursive>:
 8001ee0:	4770      	bx	lr

08001ee2 <__retarget_lock_acquire_recursive>:
 8001ee2:	4770      	bx	lr

08001ee4 <__retarget_lock_release_recursive>:
 8001ee4:	4770      	bx	lr
	...

08001ee8 <_free_r>:
 8001ee8:	b538      	push	{r3, r4, r5, lr}
 8001eea:	4605      	mov	r5, r0
 8001eec:	2900      	cmp	r1, #0
 8001eee:	d040      	beq.n	8001f72 <_free_r+0x8a>
 8001ef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ef4:	1f0c      	subs	r4, r1, #4
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	bfb8      	it	lt
 8001efa:	18e4      	addlt	r4, r4, r3
 8001efc:	f000 f8de 	bl	80020bc <__malloc_lock>
 8001f00:	4a1c      	ldr	r2, [pc, #112]	@ (8001f74 <_free_r+0x8c>)
 8001f02:	6813      	ldr	r3, [r2, #0]
 8001f04:	b933      	cbnz	r3, 8001f14 <_free_r+0x2c>
 8001f06:	6063      	str	r3, [r4, #4]
 8001f08:	6014      	str	r4, [r2, #0]
 8001f0a:	4628      	mov	r0, r5
 8001f0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f10:	f000 b8da 	b.w	80020c8 <__malloc_unlock>
 8001f14:	42a3      	cmp	r3, r4
 8001f16:	d908      	bls.n	8001f2a <_free_r+0x42>
 8001f18:	6820      	ldr	r0, [r4, #0]
 8001f1a:	1821      	adds	r1, r4, r0
 8001f1c:	428b      	cmp	r3, r1
 8001f1e:	bf01      	itttt	eq
 8001f20:	6819      	ldreq	r1, [r3, #0]
 8001f22:	685b      	ldreq	r3, [r3, #4]
 8001f24:	1809      	addeq	r1, r1, r0
 8001f26:	6021      	streq	r1, [r4, #0]
 8001f28:	e7ed      	b.n	8001f06 <_free_r+0x1e>
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	b10b      	cbz	r3, 8001f34 <_free_r+0x4c>
 8001f30:	42a3      	cmp	r3, r4
 8001f32:	d9fa      	bls.n	8001f2a <_free_r+0x42>
 8001f34:	6811      	ldr	r1, [r2, #0]
 8001f36:	1850      	adds	r0, r2, r1
 8001f38:	42a0      	cmp	r0, r4
 8001f3a:	d10b      	bne.n	8001f54 <_free_r+0x6c>
 8001f3c:	6820      	ldr	r0, [r4, #0]
 8001f3e:	4401      	add	r1, r0
 8001f40:	1850      	adds	r0, r2, r1
 8001f42:	4283      	cmp	r3, r0
 8001f44:	6011      	str	r1, [r2, #0]
 8001f46:	d1e0      	bne.n	8001f0a <_free_r+0x22>
 8001f48:	6818      	ldr	r0, [r3, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	4408      	add	r0, r1
 8001f4e:	6010      	str	r0, [r2, #0]
 8001f50:	6053      	str	r3, [r2, #4]
 8001f52:	e7da      	b.n	8001f0a <_free_r+0x22>
 8001f54:	d902      	bls.n	8001f5c <_free_r+0x74>
 8001f56:	230c      	movs	r3, #12
 8001f58:	602b      	str	r3, [r5, #0]
 8001f5a:	e7d6      	b.n	8001f0a <_free_r+0x22>
 8001f5c:	6820      	ldr	r0, [r4, #0]
 8001f5e:	1821      	adds	r1, r4, r0
 8001f60:	428b      	cmp	r3, r1
 8001f62:	bf01      	itttt	eq
 8001f64:	6819      	ldreq	r1, [r3, #0]
 8001f66:	685b      	ldreq	r3, [r3, #4]
 8001f68:	1809      	addeq	r1, r1, r0
 8001f6a:	6021      	streq	r1, [r4, #0]
 8001f6c:	6063      	str	r3, [r4, #4]
 8001f6e:	6054      	str	r4, [r2, #4]
 8001f70:	e7cb      	b.n	8001f0a <_free_r+0x22>
 8001f72:	bd38      	pop	{r3, r4, r5, pc}
 8001f74:	200001fc 	.word	0x200001fc

08001f78 <sbrk_aligned>:
 8001f78:	b570      	push	{r4, r5, r6, lr}
 8001f7a:	4e0f      	ldr	r6, [pc, #60]	@ (8001fb8 <sbrk_aligned+0x40>)
 8001f7c:	460c      	mov	r4, r1
 8001f7e:	6831      	ldr	r1, [r6, #0]
 8001f80:	4605      	mov	r5, r0
 8001f82:	b911      	cbnz	r1, 8001f8a <sbrk_aligned+0x12>
 8001f84:	f000 fcb2 	bl	80028ec <_sbrk_r>
 8001f88:	6030      	str	r0, [r6, #0]
 8001f8a:	4621      	mov	r1, r4
 8001f8c:	4628      	mov	r0, r5
 8001f8e:	f000 fcad 	bl	80028ec <_sbrk_r>
 8001f92:	1c43      	adds	r3, r0, #1
 8001f94:	d103      	bne.n	8001f9e <sbrk_aligned+0x26>
 8001f96:	f04f 34ff 	mov.w	r4, #4294967295
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	bd70      	pop	{r4, r5, r6, pc}
 8001f9e:	1cc4      	adds	r4, r0, #3
 8001fa0:	f024 0403 	bic.w	r4, r4, #3
 8001fa4:	42a0      	cmp	r0, r4
 8001fa6:	d0f8      	beq.n	8001f9a <sbrk_aligned+0x22>
 8001fa8:	1a21      	subs	r1, r4, r0
 8001faa:	4628      	mov	r0, r5
 8001fac:	f000 fc9e 	bl	80028ec <_sbrk_r>
 8001fb0:	3001      	adds	r0, #1
 8001fb2:	d1f2      	bne.n	8001f9a <sbrk_aligned+0x22>
 8001fb4:	e7ef      	b.n	8001f96 <sbrk_aligned+0x1e>
 8001fb6:	bf00      	nop
 8001fb8:	200001f8 	.word	0x200001f8

08001fbc <_malloc_r>:
 8001fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fc0:	1ccd      	adds	r5, r1, #3
 8001fc2:	f025 0503 	bic.w	r5, r5, #3
 8001fc6:	3508      	adds	r5, #8
 8001fc8:	2d0c      	cmp	r5, #12
 8001fca:	bf38      	it	cc
 8001fcc:	250c      	movcc	r5, #12
 8001fce:	2d00      	cmp	r5, #0
 8001fd0:	4606      	mov	r6, r0
 8001fd2:	db01      	blt.n	8001fd8 <_malloc_r+0x1c>
 8001fd4:	42a9      	cmp	r1, r5
 8001fd6:	d904      	bls.n	8001fe2 <_malloc_r+0x26>
 8001fd8:	230c      	movs	r3, #12
 8001fda:	6033      	str	r3, [r6, #0]
 8001fdc:	2000      	movs	r0, #0
 8001fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001fe2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80020b8 <_malloc_r+0xfc>
 8001fe6:	f000 f869 	bl	80020bc <__malloc_lock>
 8001fea:	f8d8 3000 	ldr.w	r3, [r8]
 8001fee:	461c      	mov	r4, r3
 8001ff0:	bb44      	cbnz	r4, 8002044 <_malloc_r+0x88>
 8001ff2:	4629      	mov	r1, r5
 8001ff4:	4630      	mov	r0, r6
 8001ff6:	f7ff ffbf 	bl	8001f78 <sbrk_aligned>
 8001ffa:	1c43      	adds	r3, r0, #1
 8001ffc:	4604      	mov	r4, r0
 8001ffe:	d158      	bne.n	80020b2 <_malloc_r+0xf6>
 8002000:	f8d8 4000 	ldr.w	r4, [r8]
 8002004:	4627      	mov	r7, r4
 8002006:	2f00      	cmp	r7, #0
 8002008:	d143      	bne.n	8002092 <_malloc_r+0xd6>
 800200a:	2c00      	cmp	r4, #0
 800200c:	d04b      	beq.n	80020a6 <_malloc_r+0xea>
 800200e:	6823      	ldr	r3, [r4, #0]
 8002010:	4639      	mov	r1, r7
 8002012:	4630      	mov	r0, r6
 8002014:	eb04 0903 	add.w	r9, r4, r3
 8002018:	f000 fc68 	bl	80028ec <_sbrk_r>
 800201c:	4581      	cmp	r9, r0
 800201e:	d142      	bne.n	80020a6 <_malloc_r+0xea>
 8002020:	6821      	ldr	r1, [r4, #0]
 8002022:	4630      	mov	r0, r6
 8002024:	1a6d      	subs	r5, r5, r1
 8002026:	4629      	mov	r1, r5
 8002028:	f7ff ffa6 	bl	8001f78 <sbrk_aligned>
 800202c:	3001      	adds	r0, #1
 800202e:	d03a      	beq.n	80020a6 <_malloc_r+0xea>
 8002030:	6823      	ldr	r3, [r4, #0]
 8002032:	442b      	add	r3, r5
 8002034:	6023      	str	r3, [r4, #0]
 8002036:	f8d8 3000 	ldr.w	r3, [r8]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	bb62      	cbnz	r2, 8002098 <_malloc_r+0xdc>
 800203e:	f8c8 7000 	str.w	r7, [r8]
 8002042:	e00f      	b.n	8002064 <_malloc_r+0xa8>
 8002044:	6822      	ldr	r2, [r4, #0]
 8002046:	1b52      	subs	r2, r2, r5
 8002048:	d420      	bmi.n	800208c <_malloc_r+0xd0>
 800204a:	2a0b      	cmp	r2, #11
 800204c:	d917      	bls.n	800207e <_malloc_r+0xc2>
 800204e:	1961      	adds	r1, r4, r5
 8002050:	42a3      	cmp	r3, r4
 8002052:	6025      	str	r5, [r4, #0]
 8002054:	bf18      	it	ne
 8002056:	6059      	strne	r1, [r3, #4]
 8002058:	6863      	ldr	r3, [r4, #4]
 800205a:	bf08      	it	eq
 800205c:	f8c8 1000 	streq.w	r1, [r8]
 8002060:	5162      	str	r2, [r4, r5]
 8002062:	604b      	str	r3, [r1, #4]
 8002064:	4630      	mov	r0, r6
 8002066:	f000 f82f 	bl	80020c8 <__malloc_unlock>
 800206a:	f104 000b 	add.w	r0, r4, #11
 800206e:	1d23      	adds	r3, r4, #4
 8002070:	f020 0007 	bic.w	r0, r0, #7
 8002074:	1ac2      	subs	r2, r0, r3
 8002076:	bf1c      	itt	ne
 8002078:	1a1b      	subne	r3, r3, r0
 800207a:	50a3      	strne	r3, [r4, r2]
 800207c:	e7af      	b.n	8001fde <_malloc_r+0x22>
 800207e:	6862      	ldr	r2, [r4, #4]
 8002080:	42a3      	cmp	r3, r4
 8002082:	bf0c      	ite	eq
 8002084:	f8c8 2000 	streq.w	r2, [r8]
 8002088:	605a      	strne	r2, [r3, #4]
 800208a:	e7eb      	b.n	8002064 <_malloc_r+0xa8>
 800208c:	4623      	mov	r3, r4
 800208e:	6864      	ldr	r4, [r4, #4]
 8002090:	e7ae      	b.n	8001ff0 <_malloc_r+0x34>
 8002092:	463c      	mov	r4, r7
 8002094:	687f      	ldr	r7, [r7, #4]
 8002096:	e7b6      	b.n	8002006 <_malloc_r+0x4a>
 8002098:	461a      	mov	r2, r3
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	42a3      	cmp	r3, r4
 800209e:	d1fb      	bne.n	8002098 <_malloc_r+0xdc>
 80020a0:	2300      	movs	r3, #0
 80020a2:	6053      	str	r3, [r2, #4]
 80020a4:	e7de      	b.n	8002064 <_malloc_r+0xa8>
 80020a6:	230c      	movs	r3, #12
 80020a8:	4630      	mov	r0, r6
 80020aa:	6033      	str	r3, [r6, #0]
 80020ac:	f000 f80c 	bl	80020c8 <__malloc_unlock>
 80020b0:	e794      	b.n	8001fdc <_malloc_r+0x20>
 80020b2:	6005      	str	r5, [r0, #0]
 80020b4:	e7d6      	b.n	8002064 <_malloc_r+0xa8>
 80020b6:	bf00      	nop
 80020b8:	200001fc 	.word	0x200001fc

080020bc <__malloc_lock>:
 80020bc:	4801      	ldr	r0, [pc, #4]	@ (80020c4 <__malloc_lock+0x8>)
 80020be:	f7ff bf10 	b.w	8001ee2 <__retarget_lock_acquire_recursive>
 80020c2:	bf00      	nop
 80020c4:	200001f4 	.word	0x200001f4

080020c8 <__malloc_unlock>:
 80020c8:	4801      	ldr	r0, [pc, #4]	@ (80020d0 <__malloc_unlock+0x8>)
 80020ca:	f7ff bf0b 	b.w	8001ee4 <__retarget_lock_release_recursive>
 80020ce:	bf00      	nop
 80020d0:	200001f4 	.word	0x200001f4

080020d4 <__sfputc_r>:
 80020d4:	6893      	ldr	r3, [r2, #8]
 80020d6:	b410      	push	{r4}
 80020d8:	3b01      	subs	r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	6093      	str	r3, [r2, #8]
 80020de:	da07      	bge.n	80020f0 <__sfputc_r+0x1c>
 80020e0:	6994      	ldr	r4, [r2, #24]
 80020e2:	42a3      	cmp	r3, r4
 80020e4:	db01      	blt.n	80020ea <__sfputc_r+0x16>
 80020e6:	290a      	cmp	r1, #10
 80020e8:	d102      	bne.n	80020f0 <__sfputc_r+0x1c>
 80020ea:	bc10      	pop	{r4}
 80020ec:	f000 bb6a 	b.w	80027c4 <__swbuf_r>
 80020f0:	6813      	ldr	r3, [r2, #0]
 80020f2:	1c58      	adds	r0, r3, #1
 80020f4:	6010      	str	r0, [r2, #0]
 80020f6:	7019      	strb	r1, [r3, #0]
 80020f8:	4608      	mov	r0, r1
 80020fa:	bc10      	pop	{r4}
 80020fc:	4770      	bx	lr

080020fe <__sfputs_r>:
 80020fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002100:	4606      	mov	r6, r0
 8002102:	460f      	mov	r7, r1
 8002104:	4614      	mov	r4, r2
 8002106:	18d5      	adds	r5, r2, r3
 8002108:	42ac      	cmp	r4, r5
 800210a:	d101      	bne.n	8002110 <__sfputs_r+0x12>
 800210c:	2000      	movs	r0, #0
 800210e:	e007      	b.n	8002120 <__sfputs_r+0x22>
 8002110:	463a      	mov	r2, r7
 8002112:	4630      	mov	r0, r6
 8002114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002118:	f7ff ffdc 	bl	80020d4 <__sfputc_r>
 800211c:	1c43      	adds	r3, r0, #1
 800211e:	d1f3      	bne.n	8002108 <__sfputs_r+0xa>
 8002120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002124 <_vfiprintf_r>:
 8002124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002128:	460d      	mov	r5, r1
 800212a:	4614      	mov	r4, r2
 800212c:	4698      	mov	r8, r3
 800212e:	4606      	mov	r6, r0
 8002130:	b09d      	sub	sp, #116	@ 0x74
 8002132:	b118      	cbz	r0, 800213c <_vfiprintf_r+0x18>
 8002134:	6a03      	ldr	r3, [r0, #32]
 8002136:	b90b      	cbnz	r3, 800213c <_vfiprintf_r+0x18>
 8002138:	f7ff fdce 	bl	8001cd8 <__sinit>
 800213c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800213e:	07d9      	lsls	r1, r3, #31
 8002140:	d405      	bmi.n	800214e <_vfiprintf_r+0x2a>
 8002142:	89ab      	ldrh	r3, [r5, #12]
 8002144:	059a      	lsls	r2, r3, #22
 8002146:	d402      	bmi.n	800214e <_vfiprintf_r+0x2a>
 8002148:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800214a:	f7ff feca 	bl	8001ee2 <__retarget_lock_acquire_recursive>
 800214e:	89ab      	ldrh	r3, [r5, #12]
 8002150:	071b      	lsls	r3, r3, #28
 8002152:	d501      	bpl.n	8002158 <_vfiprintf_r+0x34>
 8002154:	692b      	ldr	r3, [r5, #16]
 8002156:	b99b      	cbnz	r3, 8002180 <_vfiprintf_r+0x5c>
 8002158:	4629      	mov	r1, r5
 800215a:	4630      	mov	r0, r6
 800215c:	f000 fb70 	bl	8002840 <__swsetup_r>
 8002160:	b170      	cbz	r0, 8002180 <_vfiprintf_r+0x5c>
 8002162:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002164:	07dc      	lsls	r4, r3, #31
 8002166:	d504      	bpl.n	8002172 <_vfiprintf_r+0x4e>
 8002168:	f04f 30ff 	mov.w	r0, #4294967295
 800216c:	b01d      	add	sp, #116	@ 0x74
 800216e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002172:	89ab      	ldrh	r3, [r5, #12]
 8002174:	0598      	lsls	r0, r3, #22
 8002176:	d4f7      	bmi.n	8002168 <_vfiprintf_r+0x44>
 8002178:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800217a:	f7ff feb3 	bl	8001ee4 <__retarget_lock_release_recursive>
 800217e:	e7f3      	b.n	8002168 <_vfiprintf_r+0x44>
 8002180:	2300      	movs	r3, #0
 8002182:	9309      	str	r3, [sp, #36]	@ 0x24
 8002184:	2320      	movs	r3, #32
 8002186:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800218a:	2330      	movs	r3, #48	@ 0x30
 800218c:	f04f 0901 	mov.w	r9, #1
 8002190:	f8cd 800c 	str.w	r8, [sp, #12]
 8002194:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8002340 <_vfiprintf_r+0x21c>
 8002198:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800219c:	4623      	mov	r3, r4
 800219e:	469a      	mov	sl, r3
 80021a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80021a4:	b10a      	cbz	r2, 80021aa <_vfiprintf_r+0x86>
 80021a6:	2a25      	cmp	r2, #37	@ 0x25
 80021a8:	d1f9      	bne.n	800219e <_vfiprintf_r+0x7a>
 80021aa:	ebba 0b04 	subs.w	fp, sl, r4
 80021ae:	d00b      	beq.n	80021c8 <_vfiprintf_r+0xa4>
 80021b0:	465b      	mov	r3, fp
 80021b2:	4622      	mov	r2, r4
 80021b4:	4629      	mov	r1, r5
 80021b6:	4630      	mov	r0, r6
 80021b8:	f7ff ffa1 	bl	80020fe <__sfputs_r>
 80021bc:	3001      	adds	r0, #1
 80021be:	f000 80a7 	beq.w	8002310 <_vfiprintf_r+0x1ec>
 80021c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80021c4:	445a      	add	r2, fp
 80021c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80021c8:	f89a 3000 	ldrb.w	r3, [sl]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 809f 	beq.w	8002310 <_vfiprintf_r+0x1ec>
 80021d2:	2300      	movs	r3, #0
 80021d4:	f04f 32ff 	mov.w	r2, #4294967295
 80021d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80021dc:	f10a 0a01 	add.w	sl, sl, #1
 80021e0:	9304      	str	r3, [sp, #16]
 80021e2:	9307      	str	r3, [sp, #28]
 80021e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80021e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80021ea:	4654      	mov	r4, sl
 80021ec:	2205      	movs	r2, #5
 80021ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021f2:	4853      	ldr	r0, [pc, #332]	@ (8002340 <_vfiprintf_r+0x21c>)
 80021f4:	f000 fb8a 	bl	800290c <memchr>
 80021f8:	9a04      	ldr	r2, [sp, #16]
 80021fa:	b9d8      	cbnz	r0, 8002234 <_vfiprintf_r+0x110>
 80021fc:	06d1      	lsls	r1, r2, #27
 80021fe:	bf44      	itt	mi
 8002200:	2320      	movmi	r3, #32
 8002202:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002206:	0713      	lsls	r3, r2, #28
 8002208:	bf44      	itt	mi
 800220a:	232b      	movmi	r3, #43	@ 0x2b
 800220c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002210:	f89a 3000 	ldrb.w	r3, [sl]
 8002214:	2b2a      	cmp	r3, #42	@ 0x2a
 8002216:	d015      	beq.n	8002244 <_vfiprintf_r+0x120>
 8002218:	4654      	mov	r4, sl
 800221a:	2000      	movs	r0, #0
 800221c:	f04f 0c0a 	mov.w	ip, #10
 8002220:	9a07      	ldr	r2, [sp, #28]
 8002222:	4621      	mov	r1, r4
 8002224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002228:	3b30      	subs	r3, #48	@ 0x30
 800222a:	2b09      	cmp	r3, #9
 800222c:	d94b      	bls.n	80022c6 <_vfiprintf_r+0x1a2>
 800222e:	b1b0      	cbz	r0, 800225e <_vfiprintf_r+0x13a>
 8002230:	9207      	str	r2, [sp, #28]
 8002232:	e014      	b.n	800225e <_vfiprintf_r+0x13a>
 8002234:	eba0 0308 	sub.w	r3, r0, r8
 8002238:	fa09 f303 	lsl.w	r3, r9, r3
 800223c:	4313      	orrs	r3, r2
 800223e:	46a2      	mov	sl, r4
 8002240:	9304      	str	r3, [sp, #16]
 8002242:	e7d2      	b.n	80021ea <_vfiprintf_r+0xc6>
 8002244:	9b03      	ldr	r3, [sp, #12]
 8002246:	1d19      	adds	r1, r3, #4
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	9103      	str	r1, [sp, #12]
 800224c:	2b00      	cmp	r3, #0
 800224e:	bfbb      	ittet	lt
 8002250:	425b      	neglt	r3, r3
 8002252:	f042 0202 	orrlt.w	r2, r2, #2
 8002256:	9307      	strge	r3, [sp, #28]
 8002258:	9307      	strlt	r3, [sp, #28]
 800225a:	bfb8      	it	lt
 800225c:	9204      	strlt	r2, [sp, #16]
 800225e:	7823      	ldrb	r3, [r4, #0]
 8002260:	2b2e      	cmp	r3, #46	@ 0x2e
 8002262:	d10a      	bne.n	800227a <_vfiprintf_r+0x156>
 8002264:	7863      	ldrb	r3, [r4, #1]
 8002266:	2b2a      	cmp	r3, #42	@ 0x2a
 8002268:	d132      	bne.n	80022d0 <_vfiprintf_r+0x1ac>
 800226a:	9b03      	ldr	r3, [sp, #12]
 800226c:	3402      	adds	r4, #2
 800226e:	1d1a      	adds	r2, r3, #4
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	9203      	str	r2, [sp, #12]
 8002274:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002278:	9305      	str	r3, [sp, #20]
 800227a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002344 <_vfiprintf_r+0x220>
 800227e:	2203      	movs	r2, #3
 8002280:	4650      	mov	r0, sl
 8002282:	7821      	ldrb	r1, [r4, #0]
 8002284:	f000 fb42 	bl	800290c <memchr>
 8002288:	b138      	cbz	r0, 800229a <_vfiprintf_r+0x176>
 800228a:	2240      	movs	r2, #64	@ 0x40
 800228c:	9b04      	ldr	r3, [sp, #16]
 800228e:	eba0 000a 	sub.w	r0, r0, sl
 8002292:	4082      	lsls	r2, r0
 8002294:	4313      	orrs	r3, r2
 8002296:	3401      	adds	r4, #1
 8002298:	9304      	str	r3, [sp, #16]
 800229a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800229e:	2206      	movs	r2, #6
 80022a0:	4829      	ldr	r0, [pc, #164]	@ (8002348 <_vfiprintf_r+0x224>)
 80022a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80022a6:	f000 fb31 	bl	800290c <memchr>
 80022aa:	2800      	cmp	r0, #0
 80022ac:	d03f      	beq.n	800232e <_vfiprintf_r+0x20a>
 80022ae:	4b27      	ldr	r3, [pc, #156]	@ (800234c <_vfiprintf_r+0x228>)
 80022b0:	bb1b      	cbnz	r3, 80022fa <_vfiprintf_r+0x1d6>
 80022b2:	9b03      	ldr	r3, [sp, #12]
 80022b4:	3307      	adds	r3, #7
 80022b6:	f023 0307 	bic.w	r3, r3, #7
 80022ba:	3308      	adds	r3, #8
 80022bc:	9303      	str	r3, [sp, #12]
 80022be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80022c0:	443b      	add	r3, r7
 80022c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80022c4:	e76a      	b.n	800219c <_vfiprintf_r+0x78>
 80022c6:	460c      	mov	r4, r1
 80022c8:	2001      	movs	r0, #1
 80022ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80022ce:	e7a8      	b.n	8002222 <_vfiprintf_r+0xfe>
 80022d0:	2300      	movs	r3, #0
 80022d2:	f04f 0c0a 	mov.w	ip, #10
 80022d6:	4619      	mov	r1, r3
 80022d8:	3401      	adds	r4, #1
 80022da:	9305      	str	r3, [sp, #20]
 80022dc:	4620      	mov	r0, r4
 80022de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80022e2:	3a30      	subs	r2, #48	@ 0x30
 80022e4:	2a09      	cmp	r2, #9
 80022e6:	d903      	bls.n	80022f0 <_vfiprintf_r+0x1cc>
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0c6      	beq.n	800227a <_vfiprintf_r+0x156>
 80022ec:	9105      	str	r1, [sp, #20]
 80022ee:	e7c4      	b.n	800227a <_vfiprintf_r+0x156>
 80022f0:	4604      	mov	r4, r0
 80022f2:	2301      	movs	r3, #1
 80022f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80022f8:	e7f0      	b.n	80022dc <_vfiprintf_r+0x1b8>
 80022fa:	ab03      	add	r3, sp, #12
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	462a      	mov	r2, r5
 8002300:	4630      	mov	r0, r6
 8002302:	4b13      	ldr	r3, [pc, #76]	@ (8002350 <_vfiprintf_r+0x22c>)
 8002304:	a904      	add	r1, sp, #16
 8002306:	f3af 8000 	nop.w
 800230a:	4607      	mov	r7, r0
 800230c:	1c78      	adds	r0, r7, #1
 800230e:	d1d6      	bne.n	80022be <_vfiprintf_r+0x19a>
 8002310:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002312:	07d9      	lsls	r1, r3, #31
 8002314:	d405      	bmi.n	8002322 <_vfiprintf_r+0x1fe>
 8002316:	89ab      	ldrh	r3, [r5, #12]
 8002318:	059a      	lsls	r2, r3, #22
 800231a:	d402      	bmi.n	8002322 <_vfiprintf_r+0x1fe>
 800231c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800231e:	f7ff fde1 	bl	8001ee4 <__retarget_lock_release_recursive>
 8002322:	89ab      	ldrh	r3, [r5, #12]
 8002324:	065b      	lsls	r3, r3, #25
 8002326:	f53f af1f 	bmi.w	8002168 <_vfiprintf_r+0x44>
 800232a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800232c:	e71e      	b.n	800216c <_vfiprintf_r+0x48>
 800232e:	ab03      	add	r3, sp, #12
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	462a      	mov	r2, r5
 8002334:	4630      	mov	r0, r6
 8002336:	4b06      	ldr	r3, [pc, #24]	@ (8002350 <_vfiprintf_r+0x22c>)
 8002338:	a904      	add	r1, sp, #16
 800233a:	f000 f87d 	bl	8002438 <_printf_i>
 800233e:	e7e4      	b.n	800230a <_vfiprintf_r+0x1e6>
 8002340:	08002a8e 	.word	0x08002a8e
 8002344:	08002a94 	.word	0x08002a94
 8002348:	08002a98 	.word	0x08002a98
 800234c:	00000000 	.word	0x00000000
 8002350:	080020ff 	.word	0x080020ff

08002354 <_printf_common>:
 8002354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002358:	4616      	mov	r6, r2
 800235a:	4698      	mov	r8, r3
 800235c:	688a      	ldr	r2, [r1, #8]
 800235e:	690b      	ldr	r3, [r1, #16]
 8002360:	4607      	mov	r7, r0
 8002362:	4293      	cmp	r3, r2
 8002364:	bfb8      	it	lt
 8002366:	4613      	movlt	r3, r2
 8002368:	6033      	str	r3, [r6, #0]
 800236a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800236e:	460c      	mov	r4, r1
 8002370:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002374:	b10a      	cbz	r2, 800237a <_printf_common+0x26>
 8002376:	3301      	adds	r3, #1
 8002378:	6033      	str	r3, [r6, #0]
 800237a:	6823      	ldr	r3, [r4, #0]
 800237c:	0699      	lsls	r1, r3, #26
 800237e:	bf42      	ittt	mi
 8002380:	6833      	ldrmi	r3, [r6, #0]
 8002382:	3302      	addmi	r3, #2
 8002384:	6033      	strmi	r3, [r6, #0]
 8002386:	6825      	ldr	r5, [r4, #0]
 8002388:	f015 0506 	ands.w	r5, r5, #6
 800238c:	d106      	bne.n	800239c <_printf_common+0x48>
 800238e:	f104 0a19 	add.w	sl, r4, #25
 8002392:	68e3      	ldr	r3, [r4, #12]
 8002394:	6832      	ldr	r2, [r6, #0]
 8002396:	1a9b      	subs	r3, r3, r2
 8002398:	42ab      	cmp	r3, r5
 800239a:	dc2b      	bgt.n	80023f4 <_printf_common+0xa0>
 800239c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80023a0:	6822      	ldr	r2, [r4, #0]
 80023a2:	3b00      	subs	r3, #0
 80023a4:	bf18      	it	ne
 80023a6:	2301      	movne	r3, #1
 80023a8:	0692      	lsls	r2, r2, #26
 80023aa:	d430      	bmi.n	800240e <_printf_common+0xba>
 80023ac:	4641      	mov	r1, r8
 80023ae:	4638      	mov	r0, r7
 80023b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80023b4:	47c8      	blx	r9
 80023b6:	3001      	adds	r0, #1
 80023b8:	d023      	beq.n	8002402 <_printf_common+0xae>
 80023ba:	6823      	ldr	r3, [r4, #0]
 80023bc:	6922      	ldr	r2, [r4, #16]
 80023be:	f003 0306 	and.w	r3, r3, #6
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	bf14      	ite	ne
 80023c6:	2500      	movne	r5, #0
 80023c8:	6833      	ldreq	r3, [r6, #0]
 80023ca:	f04f 0600 	mov.w	r6, #0
 80023ce:	bf08      	it	eq
 80023d0:	68e5      	ldreq	r5, [r4, #12]
 80023d2:	f104 041a 	add.w	r4, r4, #26
 80023d6:	bf08      	it	eq
 80023d8:	1aed      	subeq	r5, r5, r3
 80023da:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80023de:	bf08      	it	eq
 80023e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80023e4:	4293      	cmp	r3, r2
 80023e6:	bfc4      	itt	gt
 80023e8:	1a9b      	subgt	r3, r3, r2
 80023ea:	18ed      	addgt	r5, r5, r3
 80023ec:	42b5      	cmp	r5, r6
 80023ee:	d11a      	bne.n	8002426 <_printf_common+0xd2>
 80023f0:	2000      	movs	r0, #0
 80023f2:	e008      	b.n	8002406 <_printf_common+0xb2>
 80023f4:	2301      	movs	r3, #1
 80023f6:	4652      	mov	r2, sl
 80023f8:	4641      	mov	r1, r8
 80023fa:	4638      	mov	r0, r7
 80023fc:	47c8      	blx	r9
 80023fe:	3001      	adds	r0, #1
 8002400:	d103      	bne.n	800240a <_printf_common+0xb6>
 8002402:	f04f 30ff 	mov.w	r0, #4294967295
 8002406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800240a:	3501      	adds	r5, #1
 800240c:	e7c1      	b.n	8002392 <_printf_common+0x3e>
 800240e:	2030      	movs	r0, #48	@ 0x30
 8002410:	18e1      	adds	r1, r4, r3
 8002412:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800241c:	4422      	add	r2, r4
 800241e:	3302      	adds	r3, #2
 8002420:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002424:	e7c2      	b.n	80023ac <_printf_common+0x58>
 8002426:	2301      	movs	r3, #1
 8002428:	4622      	mov	r2, r4
 800242a:	4641      	mov	r1, r8
 800242c:	4638      	mov	r0, r7
 800242e:	47c8      	blx	r9
 8002430:	3001      	adds	r0, #1
 8002432:	d0e6      	beq.n	8002402 <_printf_common+0xae>
 8002434:	3601      	adds	r6, #1
 8002436:	e7d9      	b.n	80023ec <_printf_common+0x98>

08002438 <_printf_i>:
 8002438:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800243c:	7e0f      	ldrb	r7, [r1, #24]
 800243e:	4691      	mov	r9, r2
 8002440:	2f78      	cmp	r7, #120	@ 0x78
 8002442:	4680      	mov	r8, r0
 8002444:	460c      	mov	r4, r1
 8002446:	469a      	mov	sl, r3
 8002448:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800244a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800244e:	d807      	bhi.n	8002460 <_printf_i+0x28>
 8002450:	2f62      	cmp	r7, #98	@ 0x62
 8002452:	d80a      	bhi.n	800246a <_printf_i+0x32>
 8002454:	2f00      	cmp	r7, #0
 8002456:	f000 80d1 	beq.w	80025fc <_printf_i+0x1c4>
 800245a:	2f58      	cmp	r7, #88	@ 0x58
 800245c:	f000 80b8 	beq.w	80025d0 <_printf_i+0x198>
 8002460:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002464:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002468:	e03a      	b.n	80024e0 <_printf_i+0xa8>
 800246a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800246e:	2b15      	cmp	r3, #21
 8002470:	d8f6      	bhi.n	8002460 <_printf_i+0x28>
 8002472:	a101      	add	r1, pc, #4	@ (adr r1, 8002478 <_printf_i+0x40>)
 8002474:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002478:	080024d1 	.word	0x080024d1
 800247c:	080024e5 	.word	0x080024e5
 8002480:	08002461 	.word	0x08002461
 8002484:	08002461 	.word	0x08002461
 8002488:	08002461 	.word	0x08002461
 800248c:	08002461 	.word	0x08002461
 8002490:	080024e5 	.word	0x080024e5
 8002494:	08002461 	.word	0x08002461
 8002498:	08002461 	.word	0x08002461
 800249c:	08002461 	.word	0x08002461
 80024a0:	08002461 	.word	0x08002461
 80024a4:	080025e3 	.word	0x080025e3
 80024a8:	0800250f 	.word	0x0800250f
 80024ac:	0800259d 	.word	0x0800259d
 80024b0:	08002461 	.word	0x08002461
 80024b4:	08002461 	.word	0x08002461
 80024b8:	08002605 	.word	0x08002605
 80024bc:	08002461 	.word	0x08002461
 80024c0:	0800250f 	.word	0x0800250f
 80024c4:	08002461 	.word	0x08002461
 80024c8:	08002461 	.word	0x08002461
 80024cc:	080025a5 	.word	0x080025a5
 80024d0:	6833      	ldr	r3, [r6, #0]
 80024d2:	1d1a      	adds	r2, r3, #4
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6032      	str	r2, [r6, #0]
 80024d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80024dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80024e0:	2301      	movs	r3, #1
 80024e2:	e09c      	b.n	800261e <_printf_i+0x1e6>
 80024e4:	6833      	ldr	r3, [r6, #0]
 80024e6:	6820      	ldr	r0, [r4, #0]
 80024e8:	1d19      	adds	r1, r3, #4
 80024ea:	6031      	str	r1, [r6, #0]
 80024ec:	0606      	lsls	r6, r0, #24
 80024ee:	d501      	bpl.n	80024f4 <_printf_i+0xbc>
 80024f0:	681d      	ldr	r5, [r3, #0]
 80024f2:	e003      	b.n	80024fc <_printf_i+0xc4>
 80024f4:	0645      	lsls	r5, r0, #25
 80024f6:	d5fb      	bpl.n	80024f0 <_printf_i+0xb8>
 80024f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80024fc:	2d00      	cmp	r5, #0
 80024fe:	da03      	bge.n	8002508 <_printf_i+0xd0>
 8002500:	232d      	movs	r3, #45	@ 0x2d
 8002502:	426d      	negs	r5, r5
 8002504:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002508:	230a      	movs	r3, #10
 800250a:	4858      	ldr	r0, [pc, #352]	@ (800266c <_printf_i+0x234>)
 800250c:	e011      	b.n	8002532 <_printf_i+0xfa>
 800250e:	6821      	ldr	r1, [r4, #0]
 8002510:	6833      	ldr	r3, [r6, #0]
 8002512:	0608      	lsls	r0, r1, #24
 8002514:	f853 5b04 	ldr.w	r5, [r3], #4
 8002518:	d402      	bmi.n	8002520 <_printf_i+0xe8>
 800251a:	0649      	lsls	r1, r1, #25
 800251c:	bf48      	it	mi
 800251e:	b2ad      	uxthmi	r5, r5
 8002520:	2f6f      	cmp	r7, #111	@ 0x6f
 8002522:	6033      	str	r3, [r6, #0]
 8002524:	bf14      	ite	ne
 8002526:	230a      	movne	r3, #10
 8002528:	2308      	moveq	r3, #8
 800252a:	4850      	ldr	r0, [pc, #320]	@ (800266c <_printf_i+0x234>)
 800252c:	2100      	movs	r1, #0
 800252e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002532:	6866      	ldr	r6, [r4, #4]
 8002534:	2e00      	cmp	r6, #0
 8002536:	60a6      	str	r6, [r4, #8]
 8002538:	db05      	blt.n	8002546 <_printf_i+0x10e>
 800253a:	6821      	ldr	r1, [r4, #0]
 800253c:	432e      	orrs	r6, r5
 800253e:	f021 0104 	bic.w	r1, r1, #4
 8002542:	6021      	str	r1, [r4, #0]
 8002544:	d04b      	beq.n	80025de <_printf_i+0x1a6>
 8002546:	4616      	mov	r6, r2
 8002548:	fbb5 f1f3 	udiv	r1, r5, r3
 800254c:	fb03 5711 	mls	r7, r3, r1, r5
 8002550:	5dc7      	ldrb	r7, [r0, r7]
 8002552:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002556:	462f      	mov	r7, r5
 8002558:	42bb      	cmp	r3, r7
 800255a:	460d      	mov	r5, r1
 800255c:	d9f4      	bls.n	8002548 <_printf_i+0x110>
 800255e:	2b08      	cmp	r3, #8
 8002560:	d10b      	bne.n	800257a <_printf_i+0x142>
 8002562:	6823      	ldr	r3, [r4, #0]
 8002564:	07df      	lsls	r7, r3, #31
 8002566:	d508      	bpl.n	800257a <_printf_i+0x142>
 8002568:	6923      	ldr	r3, [r4, #16]
 800256a:	6861      	ldr	r1, [r4, #4]
 800256c:	4299      	cmp	r1, r3
 800256e:	bfde      	ittt	le
 8002570:	2330      	movle	r3, #48	@ 0x30
 8002572:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002576:	f106 36ff 	addle.w	r6, r6, #4294967295
 800257a:	1b92      	subs	r2, r2, r6
 800257c:	6122      	str	r2, [r4, #16]
 800257e:	464b      	mov	r3, r9
 8002580:	4621      	mov	r1, r4
 8002582:	4640      	mov	r0, r8
 8002584:	f8cd a000 	str.w	sl, [sp]
 8002588:	aa03      	add	r2, sp, #12
 800258a:	f7ff fee3 	bl	8002354 <_printf_common>
 800258e:	3001      	adds	r0, #1
 8002590:	d14a      	bne.n	8002628 <_printf_i+0x1f0>
 8002592:	f04f 30ff 	mov.w	r0, #4294967295
 8002596:	b004      	add	sp, #16
 8002598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800259c:	6823      	ldr	r3, [r4, #0]
 800259e:	f043 0320 	orr.w	r3, r3, #32
 80025a2:	6023      	str	r3, [r4, #0]
 80025a4:	2778      	movs	r7, #120	@ 0x78
 80025a6:	4832      	ldr	r0, [pc, #200]	@ (8002670 <_printf_i+0x238>)
 80025a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80025ac:	6823      	ldr	r3, [r4, #0]
 80025ae:	6831      	ldr	r1, [r6, #0]
 80025b0:	061f      	lsls	r7, r3, #24
 80025b2:	f851 5b04 	ldr.w	r5, [r1], #4
 80025b6:	d402      	bmi.n	80025be <_printf_i+0x186>
 80025b8:	065f      	lsls	r7, r3, #25
 80025ba:	bf48      	it	mi
 80025bc:	b2ad      	uxthmi	r5, r5
 80025be:	6031      	str	r1, [r6, #0]
 80025c0:	07d9      	lsls	r1, r3, #31
 80025c2:	bf44      	itt	mi
 80025c4:	f043 0320 	orrmi.w	r3, r3, #32
 80025c8:	6023      	strmi	r3, [r4, #0]
 80025ca:	b11d      	cbz	r5, 80025d4 <_printf_i+0x19c>
 80025cc:	2310      	movs	r3, #16
 80025ce:	e7ad      	b.n	800252c <_printf_i+0xf4>
 80025d0:	4826      	ldr	r0, [pc, #152]	@ (800266c <_printf_i+0x234>)
 80025d2:	e7e9      	b.n	80025a8 <_printf_i+0x170>
 80025d4:	6823      	ldr	r3, [r4, #0]
 80025d6:	f023 0320 	bic.w	r3, r3, #32
 80025da:	6023      	str	r3, [r4, #0]
 80025dc:	e7f6      	b.n	80025cc <_printf_i+0x194>
 80025de:	4616      	mov	r6, r2
 80025e0:	e7bd      	b.n	800255e <_printf_i+0x126>
 80025e2:	6833      	ldr	r3, [r6, #0]
 80025e4:	6825      	ldr	r5, [r4, #0]
 80025e6:	1d18      	adds	r0, r3, #4
 80025e8:	6961      	ldr	r1, [r4, #20]
 80025ea:	6030      	str	r0, [r6, #0]
 80025ec:	062e      	lsls	r6, r5, #24
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	d501      	bpl.n	80025f6 <_printf_i+0x1be>
 80025f2:	6019      	str	r1, [r3, #0]
 80025f4:	e002      	b.n	80025fc <_printf_i+0x1c4>
 80025f6:	0668      	lsls	r0, r5, #25
 80025f8:	d5fb      	bpl.n	80025f2 <_printf_i+0x1ba>
 80025fa:	8019      	strh	r1, [r3, #0]
 80025fc:	2300      	movs	r3, #0
 80025fe:	4616      	mov	r6, r2
 8002600:	6123      	str	r3, [r4, #16]
 8002602:	e7bc      	b.n	800257e <_printf_i+0x146>
 8002604:	6833      	ldr	r3, [r6, #0]
 8002606:	2100      	movs	r1, #0
 8002608:	1d1a      	adds	r2, r3, #4
 800260a:	6032      	str	r2, [r6, #0]
 800260c:	681e      	ldr	r6, [r3, #0]
 800260e:	6862      	ldr	r2, [r4, #4]
 8002610:	4630      	mov	r0, r6
 8002612:	f000 f97b 	bl	800290c <memchr>
 8002616:	b108      	cbz	r0, 800261c <_printf_i+0x1e4>
 8002618:	1b80      	subs	r0, r0, r6
 800261a:	6060      	str	r0, [r4, #4]
 800261c:	6863      	ldr	r3, [r4, #4]
 800261e:	6123      	str	r3, [r4, #16]
 8002620:	2300      	movs	r3, #0
 8002622:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002626:	e7aa      	b.n	800257e <_printf_i+0x146>
 8002628:	4632      	mov	r2, r6
 800262a:	4649      	mov	r1, r9
 800262c:	4640      	mov	r0, r8
 800262e:	6923      	ldr	r3, [r4, #16]
 8002630:	47d0      	blx	sl
 8002632:	3001      	adds	r0, #1
 8002634:	d0ad      	beq.n	8002592 <_printf_i+0x15a>
 8002636:	6823      	ldr	r3, [r4, #0]
 8002638:	079b      	lsls	r3, r3, #30
 800263a:	d413      	bmi.n	8002664 <_printf_i+0x22c>
 800263c:	68e0      	ldr	r0, [r4, #12]
 800263e:	9b03      	ldr	r3, [sp, #12]
 8002640:	4298      	cmp	r0, r3
 8002642:	bfb8      	it	lt
 8002644:	4618      	movlt	r0, r3
 8002646:	e7a6      	b.n	8002596 <_printf_i+0x15e>
 8002648:	2301      	movs	r3, #1
 800264a:	4632      	mov	r2, r6
 800264c:	4649      	mov	r1, r9
 800264e:	4640      	mov	r0, r8
 8002650:	47d0      	blx	sl
 8002652:	3001      	adds	r0, #1
 8002654:	d09d      	beq.n	8002592 <_printf_i+0x15a>
 8002656:	3501      	adds	r5, #1
 8002658:	68e3      	ldr	r3, [r4, #12]
 800265a:	9903      	ldr	r1, [sp, #12]
 800265c:	1a5b      	subs	r3, r3, r1
 800265e:	42ab      	cmp	r3, r5
 8002660:	dcf2      	bgt.n	8002648 <_printf_i+0x210>
 8002662:	e7eb      	b.n	800263c <_printf_i+0x204>
 8002664:	2500      	movs	r5, #0
 8002666:	f104 0619 	add.w	r6, r4, #25
 800266a:	e7f5      	b.n	8002658 <_printf_i+0x220>
 800266c:	08002a9f 	.word	0x08002a9f
 8002670:	08002ab0 	.word	0x08002ab0

08002674 <__sflush_r>:
 8002674:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800267a:	0716      	lsls	r6, r2, #28
 800267c:	4605      	mov	r5, r0
 800267e:	460c      	mov	r4, r1
 8002680:	d454      	bmi.n	800272c <__sflush_r+0xb8>
 8002682:	684b      	ldr	r3, [r1, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	dc02      	bgt.n	800268e <__sflush_r+0x1a>
 8002688:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800268a:	2b00      	cmp	r3, #0
 800268c:	dd48      	ble.n	8002720 <__sflush_r+0xac>
 800268e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002690:	2e00      	cmp	r6, #0
 8002692:	d045      	beq.n	8002720 <__sflush_r+0xac>
 8002694:	2300      	movs	r3, #0
 8002696:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800269a:	682f      	ldr	r7, [r5, #0]
 800269c:	6a21      	ldr	r1, [r4, #32]
 800269e:	602b      	str	r3, [r5, #0]
 80026a0:	d030      	beq.n	8002704 <__sflush_r+0x90>
 80026a2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80026a4:	89a3      	ldrh	r3, [r4, #12]
 80026a6:	0759      	lsls	r1, r3, #29
 80026a8:	d505      	bpl.n	80026b6 <__sflush_r+0x42>
 80026aa:	6863      	ldr	r3, [r4, #4]
 80026ac:	1ad2      	subs	r2, r2, r3
 80026ae:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80026b0:	b10b      	cbz	r3, 80026b6 <__sflush_r+0x42>
 80026b2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80026b4:	1ad2      	subs	r2, r2, r3
 80026b6:	2300      	movs	r3, #0
 80026b8:	4628      	mov	r0, r5
 80026ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80026bc:	6a21      	ldr	r1, [r4, #32]
 80026be:	47b0      	blx	r6
 80026c0:	1c43      	adds	r3, r0, #1
 80026c2:	89a3      	ldrh	r3, [r4, #12]
 80026c4:	d106      	bne.n	80026d4 <__sflush_r+0x60>
 80026c6:	6829      	ldr	r1, [r5, #0]
 80026c8:	291d      	cmp	r1, #29
 80026ca:	d82b      	bhi.n	8002724 <__sflush_r+0xb0>
 80026cc:	4a28      	ldr	r2, [pc, #160]	@ (8002770 <__sflush_r+0xfc>)
 80026ce:	40ca      	lsrs	r2, r1
 80026d0:	07d6      	lsls	r6, r2, #31
 80026d2:	d527      	bpl.n	8002724 <__sflush_r+0xb0>
 80026d4:	2200      	movs	r2, #0
 80026d6:	6062      	str	r2, [r4, #4]
 80026d8:	6922      	ldr	r2, [r4, #16]
 80026da:	04d9      	lsls	r1, r3, #19
 80026dc:	6022      	str	r2, [r4, #0]
 80026de:	d504      	bpl.n	80026ea <__sflush_r+0x76>
 80026e0:	1c42      	adds	r2, r0, #1
 80026e2:	d101      	bne.n	80026e8 <__sflush_r+0x74>
 80026e4:	682b      	ldr	r3, [r5, #0]
 80026e6:	b903      	cbnz	r3, 80026ea <__sflush_r+0x76>
 80026e8:	6560      	str	r0, [r4, #84]	@ 0x54
 80026ea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80026ec:	602f      	str	r7, [r5, #0]
 80026ee:	b1b9      	cbz	r1, 8002720 <__sflush_r+0xac>
 80026f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80026f4:	4299      	cmp	r1, r3
 80026f6:	d002      	beq.n	80026fe <__sflush_r+0x8a>
 80026f8:	4628      	mov	r0, r5
 80026fa:	f7ff fbf5 	bl	8001ee8 <_free_r>
 80026fe:	2300      	movs	r3, #0
 8002700:	6363      	str	r3, [r4, #52]	@ 0x34
 8002702:	e00d      	b.n	8002720 <__sflush_r+0xac>
 8002704:	2301      	movs	r3, #1
 8002706:	4628      	mov	r0, r5
 8002708:	47b0      	blx	r6
 800270a:	4602      	mov	r2, r0
 800270c:	1c50      	adds	r0, r2, #1
 800270e:	d1c9      	bne.n	80026a4 <__sflush_r+0x30>
 8002710:	682b      	ldr	r3, [r5, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0c6      	beq.n	80026a4 <__sflush_r+0x30>
 8002716:	2b1d      	cmp	r3, #29
 8002718:	d001      	beq.n	800271e <__sflush_r+0xaa>
 800271a:	2b16      	cmp	r3, #22
 800271c:	d11d      	bne.n	800275a <__sflush_r+0xe6>
 800271e:	602f      	str	r7, [r5, #0]
 8002720:	2000      	movs	r0, #0
 8002722:	e021      	b.n	8002768 <__sflush_r+0xf4>
 8002724:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002728:	b21b      	sxth	r3, r3
 800272a:	e01a      	b.n	8002762 <__sflush_r+0xee>
 800272c:	690f      	ldr	r7, [r1, #16]
 800272e:	2f00      	cmp	r7, #0
 8002730:	d0f6      	beq.n	8002720 <__sflush_r+0xac>
 8002732:	0793      	lsls	r3, r2, #30
 8002734:	bf18      	it	ne
 8002736:	2300      	movne	r3, #0
 8002738:	680e      	ldr	r6, [r1, #0]
 800273a:	bf08      	it	eq
 800273c:	694b      	ldreq	r3, [r1, #20]
 800273e:	1bf6      	subs	r6, r6, r7
 8002740:	600f      	str	r7, [r1, #0]
 8002742:	608b      	str	r3, [r1, #8]
 8002744:	2e00      	cmp	r6, #0
 8002746:	ddeb      	ble.n	8002720 <__sflush_r+0xac>
 8002748:	4633      	mov	r3, r6
 800274a:	463a      	mov	r2, r7
 800274c:	4628      	mov	r0, r5
 800274e:	6a21      	ldr	r1, [r4, #32]
 8002750:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002754:	47e0      	blx	ip
 8002756:	2800      	cmp	r0, #0
 8002758:	dc07      	bgt.n	800276a <__sflush_r+0xf6>
 800275a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800275e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002762:	f04f 30ff 	mov.w	r0, #4294967295
 8002766:	81a3      	strh	r3, [r4, #12]
 8002768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800276a:	4407      	add	r7, r0
 800276c:	1a36      	subs	r6, r6, r0
 800276e:	e7e9      	b.n	8002744 <__sflush_r+0xd0>
 8002770:	20400001 	.word	0x20400001

08002774 <_fflush_r>:
 8002774:	b538      	push	{r3, r4, r5, lr}
 8002776:	690b      	ldr	r3, [r1, #16]
 8002778:	4605      	mov	r5, r0
 800277a:	460c      	mov	r4, r1
 800277c:	b913      	cbnz	r3, 8002784 <_fflush_r+0x10>
 800277e:	2500      	movs	r5, #0
 8002780:	4628      	mov	r0, r5
 8002782:	bd38      	pop	{r3, r4, r5, pc}
 8002784:	b118      	cbz	r0, 800278e <_fflush_r+0x1a>
 8002786:	6a03      	ldr	r3, [r0, #32]
 8002788:	b90b      	cbnz	r3, 800278e <_fflush_r+0x1a>
 800278a:	f7ff faa5 	bl	8001cd8 <__sinit>
 800278e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f3      	beq.n	800277e <_fflush_r+0xa>
 8002796:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002798:	07d0      	lsls	r0, r2, #31
 800279a:	d404      	bmi.n	80027a6 <_fflush_r+0x32>
 800279c:	0599      	lsls	r1, r3, #22
 800279e:	d402      	bmi.n	80027a6 <_fflush_r+0x32>
 80027a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80027a2:	f7ff fb9e 	bl	8001ee2 <__retarget_lock_acquire_recursive>
 80027a6:	4628      	mov	r0, r5
 80027a8:	4621      	mov	r1, r4
 80027aa:	f7ff ff63 	bl	8002674 <__sflush_r>
 80027ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80027b0:	4605      	mov	r5, r0
 80027b2:	07da      	lsls	r2, r3, #31
 80027b4:	d4e4      	bmi.n	8002780 <_fflush_r+0xc>
 80027b6:	89a3      	ldrh	r3, [r4, #12]
 80027b8:	059b      	lsls	r3, r3, #22
 80027ba:	d4e1      	bmi.n	8002780 <_fflush_r+0xc>
 80027bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80027be:	f7ff fb91 	bl	8001ee4 <__retarget_lock_release_recursive>
 80027c2:	e7dd      	b.n	8002780 <_fflush_r+0xc>

080027c4 <__swbuf_r>:
 80027c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027c6:	460e      	mov	r6, r1
 80027c8:	4614      	mov	r4, r2
 80027ca:	4605      	mov	r5, r0
 80027cc:	b118      	cbz	r0, 80027d6 <__swbuf_r+0x12>
 80027ce:	6a03      	ldr	r3, [r0, #32]
 80027d0:	b90b      	cbnz	r3, 80027d6 <__swbuf_r+0x12>
 80027d2:	f7ff fa81 	bl	8001cd8 <__sinit>
 80027d6:	69a3      	ldr	r3, [r4, #24]
 80027d8:	60a3      	str	r3, [r4, #8]
 80027da:	89a3      	ldrh	r3, [r4, #12]
 80027dc:	071a      	lsls	r2, r3, #28
 80027de:	d501      	bpl.n	80027e4 <__swbuf_r+0x20>
 80027e0:	6923      	ldr	r3, [r4, #16]
 80027e2:	b943      	cbnz	r3, 80027f6 <__swbuf_r+0x32>
 80027e4:	4621      	mov	r1, r4
 80027e6:	4628      	mov	r0, r5
 80027e8:	f000 f82a 	bl	8002840 <__swsetup_r>
 80027ec:	b118      	cbz	r0, 80027f6 <__swbuf_r+0x32>
 80027ee:	f04f 37ff 	mov.w	r7, #4294967295
 80027f2:	4638      	mov	r0, r7
 80027f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027f6:	6823      	ldr	r3, [r4, #0]
 80027f8:	6922      	ldr	r2, [r4, #16]
 80027fa:	b2f6      	uxtb	r6, r6
 80027fc:	1a98      	subs	r0, r3, r2
 80027fe:	6963      	ldr	r3, [r4, #20]
 8002800:	4637      	mov	r7, r6
 8002802:	4283      	cmp	r3, r0
 8002804:	dc05      	bgt.n	8002812 <__swbuf_r+0x4e>
 8002806:	4621      	mov	r1, r4
 8002808:	4628      	mov	r0, r5
 800280a:	f7ff ffb3 	bl	8002774 <_fflush_r>
 800280e:	2800      	cmp	r0, #0
 8002810:	d1ed      	bne.n	80027ee <__swbuf_r+0x2a>
 8002812:	68a3      	ldr	r3, [r4, #8]
 8002814:	3b01      	subs	r3, #1
 8002816:	60a3      	str	r3, [r4, #8]
 8002818:	6823      	ldr	r3, [r4, #0]
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	6022      	str	r2, [r4, #0]
 800281e:	701e      	strb	r6, [r3, #0]
 8002820:	6962      	ldr	r2, [r4, #20]
 8002822:	1c43      	adds	r3, r0, #1
 8002824:	429a      	cmp	r2, r3
 8002826:	d004      	beq.n	8002832 <__swbuf_r+0x6e>
 8002828:	89a3      	ldrh	r3, [r4, #12]
 800282a:	07db      	lsls	r3, r3, #31
 800282c:	d5e1      	bpl.n	80027f2 <__swbuf_r+0x2e>
 800282e:	2e0a      	cmp	r6, #10
 8002830:	d1df      	bne.n	80027f2 <__swbuf_r+0x2e>
 8002832:	4621      	mov	r1, r4
 8002834:	4628      	mov	r0, r5
 8002836:	f7ff ff9d 	bl	8002774 <_fflush_r>
 800283a:	2800      	cmp	r0, #0
 800283c:	d0d9      	beq.n	80027f2 <__swbuf_r+0x2e>
 800283e:	e7d6      	b.n	80027ee <__swbuf_r+0x2a>

08002840 <__swsetup_r>:
 8002840:	b538      	push	{r3, r4, r5, lr}
 8002842:	4b29      	ldr	r3, [pc, #164]	@ (80028e8 <__swsetup_r+0xa8>)
 8002844:	4605      	mov	r5, r0
 8002846:	6818      	ldr	r0, [r3, #0]
 8002848:	460c      	mov	r4, r1
 800284a:	b118      	cbz	r0, 8002854 <__swsetup_r+0x14>
 800284c:	6a03      	ldr	r3, [r0, #32]
 800284e:	b90b      	cbnz	r3, 8002854 <__swsetup_r+0x14>
 8002850:	f7ff fa42 	bl	8001cd8 <__sinit>
 8002854:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002858:	0719      	lsls	r1, r3, #28
 800285a:	d422      	bmi.n	80028a2 <__swsetup_r+0x62>
 800285c:	06da      	lsls	r2, r3, #27
 800285e:	d407      	bmi.n	8002870 <__swsetup_r+0x30>
 8002860:	2209      	movs	r2, #9
 8002862:	602a      	str	r2, [r5, #0]
 8002864:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002868:	f04f 30ff 	mov.w	r0, #4294967295
 800286c:	81a3      	strh	r3, [r4, #12]
 800286e:	e033      	b.n	80028d8 <__swsetup_r+0x98>
 8002870:	0758      	lsls	r0, r3, #29
 8002872:	d512      	bpl.n	800289a <__swsetup_r+0x5a>
 8002874:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002876:	b141      	cbz	r1, 800288a <__swsetup_r+0x4a>
 8002878:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800287c:	4299      	cmp	r1, r3
 800287e:	d002      	beq.n	8002886 <__swsetup_r+0x46>
 8002880:	4628      	mov	r0, r5
 8002882:	f7ff fb31 	bl	8001ee8 <_free_r>
 8002886:	2300      	movs	r3, #0
 8002888:	6363      	str	r3, [r4, #52]	@ 0x34
 800288a:	89a3      	ldrh	r3, [r4, #12]
 800288c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002890:	81a3      	strh	r3, [r4, #12]
 8002892:	2300      	movs	r3, #0
 8002894:	6063      	str	r3, [r4, #4]
 8002896:	6923      	ldr	r3, [r4, #16]
 8002898:	6023      	str	r3, [r4, #0]
 800289a:	89a3      	ldrh	r3, [r4, #12]
 800289c:	f043 0308 	orr.w	r3, r3, #8
 80028a0:	81a3      	strh	r3, [r4, #12]
 80028a2:	6923      	ldr	r3, [r4, #16]
 80028a4:	b94b      	cbnz	r3, 80028ba <__swsetup_r+0x7a>
 80028a6:	89a3      	ldrh	r3, [r4, #12]
 80028a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80028ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028b0:	d003      	beq.n	80028ba <__swsetup_r+0x7a>
 80028b2:	4621      	mov	r1, r4
 80028b4:	4628      	mov	r0, r5
 80028b6:	f000 f85c 	bl	8002972 <__smakebuf_r>
 80028ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028be:	f013 0201 	ands.w	r2, r3, #1
 80028c2:	d00a      	beq.n	80028da <__swsetup_r+0x9a>
 80028c4:	2200      	movs	r2, #0
 80028c6:	60a2      	str	r2, [r4, #8]
 80028c8:	6962      	ldr	r2, [r4, #20]
 80028ca:	4252      	negs	r2, r2
 80028cc:	61a2      	str	r2, [r4, #24]
 80028ce:	6922      	ldr	r2, [r4, #16]
 80028d0:	b942      	cbnz	r2, 80028e4 <__swsetup_r+0xa4>
 80028d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80028d6:	d1c5      	bne.n	8002864 <__swsetup_r+0x24>
 80028d8:	bd38      	pop	{r3, r4, r5, pc}
 80028da:	0799      	lsls	r1, r3, #30
 80028dc:	bf58      	it	pl
 80028de:	6962      	ldrpl	r2, [r4, #20]
 80028e0:	60a2      	str	r2, [r4, #8]
 80028e2:	e7f4      	b.n	80028ce <__swsetup_r+0x8e>
 80028e4:	2000      	movs	r0, #0
 80028e6:	e7f7      	b.n	80028d8 <__swsetup_r+0x98>
 80028e8:	20000018 	.word	0x20000018

080028ec <_sbrk_r>:
 80028ec:	b538      	push	{r3, r4, r5, lr}
 80028ee:	2300      	movs	r3, #0
 80028f0:	4d05      	ldr	r5, [pc, #20]	@ (8002908 <_sbrk_r+0x1c>)
 80028f2:	4604      	mov	r4, r0
 80028f4:	4608      	mov	r0, r1
 80028f6:	602b      	str	r3, [r5, #0]
 80028f8:	f7fd fe04 	bl	8000504 <_sbrk>
 80028fc:	1c43      	adds	r3, r0, #1
 80028fe:	d102      	bne.n	8002906 <_sbrk_r+0x1a>
 8002900:	682b      	ldr	r3, [r5, #0]
 8002902:	b103      	cbz	r3, 8002906 <_sbrk_r+0x1a>
 8002904:	6023      	str	r3, [r4, #0]
 8002906:	bd38      	pop	{r3, r4, r5, pc}
 8002908:	200001f0 	.word	0x200001f0

0800290c <memchr>:
 800290c:	4603      	mov	r3, r0
 800290e:	b510      	push	{r4, lr}
 8002910:	b2c9      	uxtb	r1, r1
 8002912:	4402      	add	r2, r0
 8002914:	4293      	cmp	r3, r2
 8002916:	4618      	mov	r0, r3
 8002918:	d101      	bne.n	800291e <memchr+0x12>
 800291a:	2000      	movs	r0, #0
 800291c:	e003      	b.n	8002926 <memchr+0x1a>
 800291e:	7804      	ldrb	r4, [r0, #0]
 8002920:	3301      	adds	r3, #1
 8002922:	428c      	cmp	r4, r1
 8002924:	d1f6      	bne.n	8002914 <memchr+0x8>
 8002926:	bd10      	pop	{r4, pc}

08002928 <__swhatbuf_r>:
 8002928:	b570      	push	{r4, r5, r6, lr}
 800292a:	460c      	mov	r4, r1
 800292c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002930:	4615      	mov	r5, r2
 8002932:	2900      	cmp	r1, #0
 8002934:	461e      	mov	r6, r3
 8002936:	b096      	sub	sp, #88	@ 0x58
 8002938:	da0c      	bge.n	8002954 <__swhatbuf_r+0x2c>
 800293a:	89a3      	ldrh	r3, [r4, #12]
 800293c:	2100      	movs	r1, #0
 800293e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002942:	bf14      	ite	ne
 8002944:	2340      	movne	r3, #64	@ 0x40
 8002946:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800294a:	2000      	movs	r0, #0
 800294c:	6031      	str	r1, [r6, #0]
 800294e:	602b      	str	r3, [r5, #0]
 8002950:	b016      	add	sp, #88	@ 0x58
 8002952:	bd70      	pop	{r4, r5, r6, pc}
 8002954:	466a      	mov	r2, sp
 8002956:	f000 f849 	bl	80029ec <_fstat_r>
 800295a:	2800      	cmp	r0, #0
 800295c:	dbed      	blt.n	800293a <__swhatbuf_r+0x12>
 800295e:	9901      	ldr	r1, [sp, #4]
 8002960:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002964:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002968:	4259      	negs	r1, r3
 800296a:	4159      	adcs	r1, r3
 800296c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002970:	e7eb      	b.n	800294a <__swhatbuf_r+0x22>

08002972 <__smakebuf_r>:
 8002972:	898b      	ldrh	r3, [r1, #12]
 8002974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002976:	079d      	lsls	r5, r3, #30
 8002978:	4606      	mov	r6, r0
 800297a:	460c      	mov	r4, r1
 800297c:	d507      	bpl.n	800298e <__smakebuf_r+0x1c>
 800297e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002982:	6023      	str	r3, [r4, #0]
 8002984:	6123      	str	r3, [r4, #16]
 8002986:	2301      	movs	r3, #1
 8002988:	6163      	str	r3, [r4, #20]
 800298a:	b003      	add	sp, #12
 800298c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800298e:	466a      	mov	r2, sp
 8002990:	ab01      	add	r3, sp, #4
 8002992:	f7ff ffc9 	bl	8002928 <__swhatbuf_r>
 8002996:	9f00      	ldr	r7, [sp, #0]
 8002998:	4605      	mov	r5, r0
 800299a:	4639      	mov	r1, r7
 800299c:	4630      	mov	r0, r6
 800299e:	f7ff fb0d 	bl	8001fbc <_malloc_r>
 80029a2:	b948      	cbnz	r0, 80029b8 <__smakebuf_r+0x46>
 80029a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029a8:	059a      	lsls	r2, r3, #22
 80029aa:	d4ee      	bmi.n	800298a <__smakebuf_r+0x18>
 80029ac:	f023 0303 	bic.w	r3, r3, #3
 80029b0:	f043 0302 	orr.w	r3, r3, #2
 80029b4:	81a3      	strh	r3, [r4, #12]
 80029b6:	e7e2      	b.n	800297e <__smakebuf_r+0xc>
 80029b8:	89a3      	ldrh	r3, [r4, #12]
 80029ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80029be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029c2:	81a3      	strh	r3, [r4, #12]
 80029c4:	9b01      	ldr	r3, [sp, #4]
 80029c6:	6020      	str	r0, [r4, #0]
 80029c8:	b15b      	cbz	r3, 80029e2 <__smakebuf_r+0x70>
 80029ca:	4630      	mov	r0, r6
 80029cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80029d0:	f000 f81e 	bl	8002a10 <_isatty_r>
 80029d4:	b128      	cbz	r0, 80029e2 <__smakebuf_r+0x70>
 80029d6:	89a3      	ldrh	r3, [r4, #12]
 80029d8:	f023 0303 	bic.w	r3, r3, #3
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	81a3      	strh	r3, [r4, #12]
 80029e2:	89a3      	ldrh	r3, [r4, #12]
 80029e4:	431d      	orrs	r5, r3
 80029e6:	81a5      	strh	r5, [r4, #12]
 80029e8:	e7cf      	b.n	800298a <__smakebuf_r+0x18>
	...

080029ec <_fstat_r>:
 80029ec:	b538      	push	{r3, r4, r5, lr}
 80029ee:	2300      	movs	r3, #0
 80029f0:	4d06      	ldr	r5, [pc, #24]	@ (8002a0c <_fstat_r+0x20>)
 80029f2:	4604      	mov	r4, r0
 80029f4:	4608      	mov	r0, r1
 80029f6:	4611      	mov	r1, r2
 80029f8:	602b      	str	r3, [r5, #0]
 80029fa:	f7fd fd5d 	bl	80004b8 <_fstat>
 80029fe:	1c43      	adds	r3, r0, #1
 8002a00:	d102      	bne.n	8002a08 <_fstat_r+0x1c>
 8002a02:	682b      	ldr	r3, [r5, #0]
 8002a04:	b103      	cbz	r3, 8002a08 <_fstat_r+0x1c>
 8002a06:	6023      	str	r3, [r4, #0]
 8002a08:	bd38      	pop	{r3, r4, r5, pc}
 8002a0a:	bf00      	nop
 8002a0c:	200001f0 	.word	0x200001f0

08002a10 <_isatty_r>:
 8002a10:	b538      	push	{r3, r4, r5, lr}
 8002a12:	2300      	movs	r3, #0
 8002a14:	4d05      	ldr	r5, [pc, #20]	@ (8002a2c <_isatty_r+0x1c>)
 8002a16:	4604      	mov	r4, r0
 8002a18:	4608      	mov	r0, r1
 8002a1a:	602b      	str	r3, [r5, #0]
 8002a1c:	f7fd fd5b 	bl	80004d6 <_isatty>
 8002a20:	1c43      	adds	r3, r0, #1
 8002a22:	d102      	bne.n	8002a2a <_isatty_r+0x1a>
 8002a24:	682b      	ldr	r3, [r5, #0]
 8002a26:	b103      	cbz	r3, 8002a2a <_isatty_r+0x1a>
 8002a28:	6023      	str	r3, [r4, #0]
 8002a2a:	bd38      	pop	{r3, r4, r5, pc}
 8002a2c:	200001f0 	.word	0x200001f0

08002a30 <_init>:
 8002a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a32:	bf00      	nop
 8002a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a36:	bc08      	pop	{r3}
 8002a38:	469e      	mov	lr, r3
 8002a3a:	4770      	bx	lr

08002a3c <_fini>:
 8002a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a3e:	bf00      	nop
 8002a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a42:	bc08      	pop	{r3}
 8002a44:	469e      	mov	lr, r3
 8002a46:	4770      	bx	lr
